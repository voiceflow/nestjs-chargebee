/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  LocalDeleteAVirtualBankAccountHeaders,
  LocalDeleteAVirtualBankAccount200,
  DeleteAVirtualBankAccountHeaders,
  DeleteAVirtualBankAccount200,
  ListVirtualBankAccountsParams,
  ListVirtualBankAccountsHeaders,
  ListVirtualBankAccounts200,
  CreateAVirtualBankAccountHeaders,
  CreateAVirtualBankAccountBody,
  CreateAVirtualBankAccount200,
  RetrieveAVirtualBankAccountHeaders,
  RetrieveAVirtualBankAccount200,
  CreateAVirtualBankAccountUsingPermanentTokenHeaders,
  CreateAVirtualBankAccountUsingPermanentTokenBody,
  CreateAVirtualBankAccountUsingPermanentToken200,
} from "./chargebeeAPI.schemas";

export class ChargebeeVirtualBankAccountsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Deletes virtual bank accounts from Chargebee. Payment method in the payment gateway, and Auto Collection settings in Chargebee are not affected.

 * @summary Local delete a virtual bank account
 */
  public async localDeleteAVirtualBankAccount(
    virtualBankAccountId: string,
    headers?: LocalDeleteAVirtualBankAccountHeaders,
  ): Promise<AxiosResponse<LocalDeleteAVirtualBankAccount200>> {
    return this.axios.post(
      `/virtual_bank_accounts/${virtualBankAccountId}/delete_local`,
      {
        headers,
      },
    );
  }

  /**
 * Deletes a virtual bank account. If there is no virtual bank account present in the gateway for the customer, this API will return successfully without throwing an error.

 * @summary Delete a virtual bank account
 */
  public async deleteAVirtualBankAccount(
    virtualBankAccountId: string,
    headers?: DeleteAVirtualBankAccountHeaders,
  ): Promise<AxiosResponse<DeleteAVirtualBankAccount200>> {
    return this.axios.post(
      `/virtual_bank_accounts/${virtualBankAccountId}/delete`,
      {
        headers,
      },
    );
  }

  /**
 * Lists all the virtual bank accounts.

 * @summary List virtual bank accounts
 */
  public async listVirtualBankAccounts(
    params?: ListVirtualBankAccountsParams,
    headers?: ListVirtualBankAccountsHeaders,
  ): Promise<AxiosResponse<ListVirtualBankAccounts200>> {
    return this.axios.get(`/virtual_bank_accounts`, {
      params,
      headers,
    });
  }

  /**
 * Creates a virtual bank account for a customer. Email address is mandatory for virtual bank account creation. All notifications related to this virtual bank account will be sent to the email address you specify.

 * @summary Create a virtual bank account
 */
  public async createAVirtualBankAccount(
    createAVirtualBankAccountBody: CreateAVirtualBankAccountBody,
    headers?: CreateAVirtualBankAccountHeaders,
  ): Promise<AxiosResponse<CreateAVirtualBankAccount200>> {
    return this.axios.post(`/virtual_bank_accounts`, {
      headers,
      json: createAVirtualBankAccountBody,
    });
  }

  /**
 * Retrieves the virtual bank account identified by the unique identifier.

 * @summary Retrieve a virtual bank account
 */
  public async retrieveAVirtualBankAccount(
    virtualBankAccountId: string,
    headers?: RetrieveAVirtualBankAccountHeaders,
  ): Promise<AxiosResponse<RetrieveAVirtualBankAccount200>> {
    return this.axios.get(`/virtual_bank_accounts/${virtualBankAccountId}`, {
      headers,
    });
  }

  /**
 * Creates a virtual bank account using the identifier provided by the gateway.

 * @summary Create a virtual bank account using permanent token
 */
  public async createAVirtualBankAccountUsingPermanentToken(
    createAVirtualBankAccountUsingPermanentTokenBody: CreateAVirtualBankAccountUsingPermanentTokenBody,
    headers?: CreateAVirtualBankAccountUsingPermanentTokenHeaders,
  ): Promise<AxiosResponse<CreateAVirtualBankAccountUsingPermanentToken200>> {
    return this.axios.post(
      `/virtual_bank_accounts/create_using_permanent_token`,
      {
        headers,
        json: createAVirtualBankAccountUsingPermanentTokenBody,
      },
    );
  }
}
