/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  VoidACreditNoteHeaders,
  VoidACreditNoteBody,
  VoidACreditNote200,
  RefundACreditNoteHeaders,
  RefundACreditNoteBody,
  RefundACreditNote200,
  ListCreditNotesParams,
  ListCreditNotesHeaders,
  ListCreditNotes200,
  CreateCreditNoteHeaders,
  CreateCreditNoteBody,
  CreateCreditNote200,
  RecordRefundForACreditNoteHeaders,
  RecordRefundForACreditNoteBody,
  RecordRefundForACreditNote200,
  ImportCreditNoteHeaders,
  ImportCreditNoteBody,
  ImportCreditNote200,
  DeleteACreditNoteHeaders,
  DeleteACreditNoteBody,
  DeleteACreditNote200,
  DownloadEInvoiceForCreditNoteHeaders,
  DownloadEInvoiceForCreditNote200,
  RetrieveCreditNoteAsPdfHeaders,
  RetrieveCreditNoteAsPdfBody,
  RetrieveCreditNoteAsPdf200,
  ResendFailedEinvoiceInCreditNotesHeaders,
  ResendFailedEinvoiceInCreditNotes200,
  RemoveTaxWithheldRefundsFromACreditNoteHeaders,
  RemoveTaxWithheldRefundsFromACreditNoteBody,
  RemoveTaxWithheldRefundsFromACreditNote200,
  RetrieveACreditNoteHeaders,
  RetrieveACreditNote200,
  SendAnEinvoiceForCreditNotesHeaders,
  SendAnEinvoiceForCreditNotes200,
} from "./chargebeeAPI.schemas";

export class ChargebeeCreditNotesResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Use this API to [void a credit note.](https://www.chargebee.com/docs/credit-notes.html#voiding-or-deleting-a-credit-note) A voided credit is a null entity and cannot be used again. A credit note which has already been voided or refunded cannot be voided. An error message will be displayed when you render such credit notes void.

**Note:** When adjustment credit notes are voided, the associated invoice will reflect as NOT PAID, and the amount in the invoice will be recalculated to reflect the amount after considering the voided credit note.

 * @summary Void a credit note
 */
  public async voidACreditNote(
    creditNoteId: string,
    voidACreditNoteBody: VoidACreditNoteBody,
    headers?: VoidACreditNoteHeaders,
  ): Promise<AxiosResponse<VoidACreditNote200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/void`, {
      headers,
      json: voidACreditNoteBody,
    });
  }

  /**
 * Refunds a ([refundable](https://www.chargebee.com/docs/credit-notes.html#types-of-credit-notes_refundable-credit-note)) credit note to the [payment source](/docs/api/payment_sources) associated with the [transaction](/docs/api/transactions). Any [linked_tax_withheld_refunds](/docs/api/credit_notes#credit_note_linked_tax_withheld_refunds) recorded against the credit note are not refunded.

 * @summary Refund a credit note
 */
  public async refundACreditNote(
    creditNoteId: string,
    refundACreditNoteBody: RefundACreditNoteBody,
    headers?: RefundACreditNoteHeaders,
  ): Promise<AxiosResponse<RefundACreditNote200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/refund`, {
      headers,
      json: refundACreditNoteBody,
    });
  }

  /**
 * Lists all the Credit Notes.

 * @summary List credit notes
 */
  public async listCreditNotes(
    params?: ListCreditNotesParams,
    headers?: ListCreditNotesHeaders,
  ): Promise<AxiosResponse<ListCreditNotes200>> {
    return this.axios.get(`/credit_notes`, {
      params,
      headers,
    });
  }

  /**
 * Creates a `credit_note` for the specified invoice.  
**Note:**

If the `credit_note` [type](/docs/api/credit_notes#create_credit_note_type) is `refundable`, then `linked_taxes_withheld.amount` for the [invoice specified](/docs/api/credit_notes#create_credit_note_reference_invoice_id) can also be included in the [total](/docs/api/credit_notes#create_credit_note_total).

 * @summary Create credit note
 */
  public async createCreditNote(
    createCreditNoteBody: CreateCreditNoteBody,
    headers?: CreateCreditNoteHeaders,
  ): Promise<AxiosResponse<CreateCreditNote200>> {
    return this.axios.post(`/credit_notes`, {
      headers,
      json: createCreditNoteBody,
    });
  }

  /**
 * Refunds a ([refundable](https://www.chargebee.com/docs/credit-notes.html#types-of-credit-notes_refundable-credit-note)) credit note. The refund is provided against `linked_payments` first and then against any `linked_taxes_withheld` for the [invoice](/docs/api/credit_notes#credit_note_reference_invoice_id) associated with the `credit_note`. For payments made via online transactions, the refund request is processed via the [payment source](/docs/api/payment_sources) associated with the [transaction](/docs/api/transactions).

 * @summary Record refund for a credit note
 */
  public async recordRefundForACreditNote(
    creditNoteId: string,
    recordRefundForACreditNoteBody: RecordRefundForACreditNoteBody,
    headers?: RecordRefundForACreditNoteHeaders,
  ): Promise<AxiosResponse<RecordRefundForACreditNote200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/record_refund`, {
      headers,
      json: recordRefundForACreditNoteBody,
    });
  }

  /**
 * Use this api to import credit notes into your Chargebee site. Billing address, Shipping Address, Vat number will be copied from the reference invoice.

 * @summary Import credit note
 */
  public async importCreditNote(
    importCreditNoteBody: ImportCreditNoteBody,
    headers?: ImportCreditNoteHeaders,
  ): Promise<AxiosResponse<ImportCreditNote200>> {
    return this.axios.post(`/credit_notes/import_credit_note`, {
      headers,
      json: importCreditNoteBody,
    });
  }

  /**
 * This API [deletes a credit note.](https://www.chargebee.com/docs/credit-notes.html#voiding-or-deleting-a-credit-note) A credit note once deleted, is deleted permanently. You cannot delete a credit which has already been deleted or refunded. If you try to delete a refunded or deleted credit note, an error message will be displayed.

 * @summary Delete a credit Note
 */
  public async deleteACreditNote(
    creditNoteId: string,
    deleteACreditNoteBody: DeleteACreditNoteBody,
    headers?: DeleteACreditNoteHeaders,
  ): Promise<AxiosResponse<DeleteACreditNote200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/delete`, {
      headers,
      json: deleteACreditNoteBody,
    });
  }

  /**
 * Download the e-invoice for the credit note in both XML and PDF formats. The response consists of a `download` object for each format. The XML format follows the [structure as per Peppol BIS Billing v3.0](https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-creditnote/tree/).  
**Note**

* You can only download e-invoices when their `status` is `success` or `registered`.
* There are some cases in which the PDF is not available for download. In such cases, you can obtain it from the XML by decoding the value for [cbc:EmbeddedDocumentBinaryObject](https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-creditnote/cac-AdditionalDocumentReference/cac-Attachment/cbc-EmbeddedDocumentBinaryObject/), which is the Base64-encoded version of the PDF.

 * @summary Download e-invoice for credit note
 */
  public async downloadEInvoiceForCreditNote(
    creditNoteId: string,
    headers?: DownloadEInvoiceForCreditNoteHeaders,
  ): Promise<AxiosResponse<DownloadEInvoiceForCreditNote200>> {
    return this.axios.get(`/credit_notes/${creditNoteId}/download_einvoice`, {
      headers,
    });
  }

  /**
 * Gets the credit note as PDF. The returned URL is secure and allows download. The URL will expire in 60 minutes.

 * @summary Retrieve credit note as PDF
 */
  public async retrieveCreditNoteAsPdf(
    creditNoteId: string,
    retrieveCreditNoteAsPdfBody: RetrieveCreditNoteAsPdfBody,
    headers?: RetrieveCreditNoteAsPdfHeaders,
  ): Promise<AxiosResponse<RetrieveCreditNoteAsPdf200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/pdf`, {
      headers,
      json: retrieveCreditNoteAsPdfBody,
    });
  }

  /**
 * Resend failed einvoice in credit notes.

 * @summary Resend failed einvoice in credit notes
 */
  public async resendFailedEinvoiceInCreditNotes(
    creditNoteId: string,
    headers?: ResendFailedEinvoiceInCreditNotesHeaders,
  ): Promise<AxiosResponse<ResendFailedEinvoiceInCreditNotes200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/resend_einvoice`, {
      headers,
    });
  }

  /**
 * Removes a [linked_tax_withheld_refunds](/docs/api/credit_notes#credit_note_linked_tax_withheld_refunds) record from the `credit_note`.

 * @summary Remove tax withheld refunds from a credit note
 */
  public async removeTaxWithheldRefundsFromACreditNote(
    creditNoteId: string,
    removeTaxWithheldRefundsFromACreditNoteBody: RemoveTaxWithheldRefundsFromACreditNoteBody,
    headers?: RemoveTaxWithheldRefundsFromACreditNoteHeaders,
  ): Promise<AxiosResponse<RemoveTaxWithheldRefundsFromACreditNote200>> {
    return this.axios.post(
      `/credit_notes/${creditNoteId}/remove_tax_withheld_refund`,
      {
        headers,
        json: removeTaxWithheldRefundsFromACreditNoteBody,
      },
    );
  }

  /**
 * Retrieves the Credit Note identified by the specified Credit Note number.

 * @summary Retrieve a credit note
 */
  public async retrieveACreditNote(
    creditNoteId: string,
    headers?: RetrieveACreditNoteHeaders,
  ): Promise<AxiosResponse<RetrieveACreditNote200>> {
    return this.axios.get(`/credit_notes/${creditNoteId}`, {
      headers,
    });
  }

  /**
 * This endpoint is used to send an e-invoice for invoice.

To support cases like TDS and invoice edits, we need to stop auto e-invoice sending and be able to send e-invoices manually.

This endpoint schedules e-invoices manually. This operation is not allowed when any of the following condition matches:

* If e-invoicing is not enabled at the site and customer level.

* If there is an e-invoice generated already for the invoice.

* If the "**Use automatic e-invoicing**" option is selected.

* If there are no generated e-invoices with the `failed` or `skipped` status.

* If the invoice status is `voided` or `pending`.


 * @summary Send an einvoice for credit notes
 */
  public async sendAnEinvoiceForCreditNotes(
    creditNoteId: string,
    headers?: SendAnEinvoiceForCreditNotesHeaders,
  ): Promise<AxiosResponse<SendAnEinvoiceForCreditNotes200>> {
    return this.axios.post(`/credit_notes/${creditNoteId}/send_einvoice`, {
      headers,
    });
  }
}
