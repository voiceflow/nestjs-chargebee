/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  ListFeaturesParams,
  ListFeaturesHeaders,
  ListFeatures200,
  CreateAFeatureHeaders,
  CreateAFeatureBody,
  CreateAFeature200,
  DeleteAFeatureHeaders,
  DeleteAFeature200,
  RetrieveAFeatureHeaders,
  RetrieveAFeature200,
  UpdateAFeatureHeaders,
  UpdateAFeatureBody,
  UpdateAFeature200,
  ArchiveAFeatureHeaders,
  ArchiveAFeature200,
  ActivateAFeatureHeaders,
  ActivateAFeature200,
  ReactivateAFeatureHeaders,
  ReactivateAFeature200,
  ListItemEntitlementsForAFeatureParams,
  ListItemEntitlementsForAFeatureHeaders,
  ListItemEntitlementsForAFeature200,
  UpsertOrRemoveItemEntitlementsForAFeatureHeaders,
  UpsertOrRemoveItemEntitlementsForAFeatureBody,
  UpsertOrRemoveItemEntitlementsForAFeature200,
} from "./chargebeeAPI.schemas";

export class ChargebeeFeaturesResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * "This API fetches all the available features. " If the limit parameter is not set, it will return upto 10 features. "

 * @summary List features
 */
  public async listFeatures(
    params?: ListFeaturesParams,
    headers?: ListFeaturesHeaders,
  ): Promise<AxiosResponse<ListFeatures200>> {
    return this.axios.get(`/features`, {
      params,
      headers,
    });
  }

  /**
 * Creates a new feature and optionally defines the <item_entitlements> for it.

 * @summary Create a feature
 */
  public async createAFeature(
    createAFeatureBody: CreateAFeatureBody,
    headers?: CreateAFeatureHeaders,
  ): Promise<AxiosResponse<CreateAFeature200>> {
    return this.axios.post(`/features`, {
      headers,
      json: createAFeatureBody,
    });
  }

  /**
 * Deletes a feature. Any item entitlements and subscription entitlements defined for the feature are also removed. This action is not permissible when the `status` of the feature is `active`.

 * @summary Delete a feature
 */
  public async deleteAFeature(
    featureId: string,
    headers?: DeleteAFeatureHeaders,
  ): Promise<AxiosResponse<DeleteAFeature200>> {
    return this.axios.post(`/features/${featureId}/delete`, {
      headers,
    });
  }

  /**
 * Retrieve a specific feature using its id.

 * @summary Retrieve a feature
 */
  public async retrieveAFeature(
    featureId: string,
    headers?: RetrieveAFeatureHeaders,
  ): Promise<AxiosResponse<RetrieveAFeature200>> {
    return this.axios.get(`/features/${featureId}`, {
      headers,
    });
  }

  /**
 * Updates a specific feature.  
**Note**

The list of objects `levels[]` provided as part of this operation fully replaces the existing list of objects [levels[]](features#feature_levels) of the feature.

### Considerations when modifying `levels` {#considerations}

This section describes validations that are performed by Chargebee when modifying the `levels` list of objects for the feature, using this operation.

#### Adding `levels` {#adding}

Adding a new object to the `levels[]` list is allowed if and only if the feature [type](features#feature_type) is `quantity` or `custom`

#### Removing `levels` {#removing}

Removing an existing object in the `levels[]` list is not allowed if the `value` for that object is currently mapped to one or more [item_entitlement](item_entitlements)s or [subscription_entitlement](subscription_entitlements)s.

#### Reordering `levels` {#reorder}

**Note**

The validation described in this section is only applicable for features of `type` `custom`

If any of `levels[].value` are currently mapped to `item_entitlement`s or `subscription_entitlement`s, then the relative order of the corresponding `levels[].level` must be preserved when invoking this operation.

For example, consider that the `levels[]` list is currently in the state shown below. (For brevity, only the `value` and `level` key are shown here and the JSONs have been compacted.)  
` {"levels":[{"value":"email-basic","level":0},{"value":"email-rise","level":1},{"value":"email-advanced","level":2},{"value":"email-pro","level":3},{"value":"email-scale","level":4}]} `

Now consider that `email-rise`, `email-advanced`, and `email-pro` have already been mapped to `item_entitlement`s or `subscription_entitlement`s. As seen in the above object, the relative order of `levels[].level` is such that `email-rise` \< `email-advanced` \< `email-pro`.

Invoking this API to change `levels[]` to the state below is allowed since the relative order of `level` corresponding to `email-rise`, `email-advanced`, and `email-pro` has been preserved.  
` {"levels":[{"value":"email-basic","level":0},{"value":"email-rise","level":1},{"value":"email-scale","level":2},{"value":"email-advanced","level":3},{"value":"email-pro","level":4}]} `

However, changing `levels[]` to the state shown below is not permissible because the `level` of `email-advanced` is provided as greater than the `level` of `email-pro`, thereby disrupting the original order.  
` {"levels":[{"value":"email-basic","level":0},{"value":"email-rise","level":1},{"value":"email-pro","level":2},{"value":"email-advanced","level":3},{"value":"email-scale","level":4}]} `

 * @summary Update a feature
 */
  public async updateAFeature(
    featureId: string,
    updateAFeatureBody: UpdateAFeatureBody,
    headers?: UpdateAFeatureHeaders,
  ): Promise<AxiosResponse<UpdateAFeature200>> {
    return this.axios.post(`/features/${featureId}`, {
      headers,
      json: updateAFeatureBody,
    });
  }

  /**
 * Archives an `active` feature so that no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created towards the feature. Any pre-existing item or subscription entitlements from the time that the feature was `active` remain effective. This operation changes the [status](features#feature_status) of the feature to `archived`. The feature `status` must be `active` when calling this endpoint.

 * @summary Archive a feature
 */
  public async archiveAFeature(
    featureId: string,
    headers?: ArchiveAFeatureHeaders,
  ): Promise<AxiosResponse<ArchiveAFeature200>> {
    return this.axios.post(`/features/${featureId}/archive_command`, {
      headers,
    });
  }

  /**
 * Activates a `draft` feature so that any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined towards it take effect immediately. This operation changes the [status](features#feature_status) of the feature to `active`. The feature `status` must be `draft` when calling this endpoint.

 * @summary Activate a feature
 */
  public async activateAFeature(
    featureId: string,
    headers?: ActivateAFeatureHeaders,
  ): Promise<AxiosResponse<ActivateAFeature200>> {
    return this.axios.post(`/features/${featureId}/activate_command`, {
      headers,
    });
  }

  /**
 * Reactivates an archived feature so that **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created towards the feature. This operation changes the [status](features#feature_status) of the feature to `active`. The feature `status` must be `archived` when calling this endpoint.

 * @summary Reactivate a feature
 */
  public async reactivateAFeature(
    featureId: string,
    headers?: ReactivateAFeatureHeaders,
  ): Promise<AxiosResponse<ReactivateAFeature200>> {
    return this.axios.post(`/features/${featureId}/reactivate_command`, {
      headers,
    });
  }

  /**
 * Retrieves a list of all the `item_entitlement`s for the `feature` specified.

 * @summary List item entitlements for a feature
 */
  public async listItemEntitlementsForAFeature(
    featureId: string,
    params?: ListItemEntitlementsForAFeatureParams,
    headers?: ListItemEntitlementsForAFeatureHeaders,
  ): Promise<AxiosResponse<ListItemEntitlementsForAFeature200>> {
    return this.axios.get(`/features/${featureId}/item_entitlements`, {
      params,
      headers,
    });
  }

  /**
 * Upserts or removes a set of `item_entitlement`s for an `feature` depending on the `action` specified. The API returns the upserted or deleted `item_entitlements` after successfully completing the operation. The operation returns an error when the first `item_entitlement` fails to be processed. Either all the `item_entitlement`s provided in the request are processed or none.

 * @summary Upsert or remove item entitlements for a feature
 */
  public async upsertOrRemoveItemEntitlementsForAFeature(
    featureId: string,
    upsertOrRemoveItemEntitlementsForAFeatureBody: UpsertOrRemoveItemEntitlementsForAFeatureBody,
    headers?: UpsertOrRemoveItemEntitlementsForAFeatureHeaders,
  ): Promise<AxiosResponse<UpsertOrRemoveItemEntitlementsForAFeature200>> {
    return this.axios.post(`/features/${featureId}/item_entitlements`, {
      headers,
      json: upsertOrRemoveItemEntitlementsForAFeatureBody,
    });
  }
}
