/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  ListItemsParams,
  ListItemsHeaders,
  ListItems200,
  CreateAnItemHeaders,
  CreateAnItemBody,
  CreateAnItem200,
  DeleteAnItemHeaders,
  DeleteAnItem200,
  RetrieveAnItemHeaders,
  RetrieveAnItem200,
  UpdateAnItemHeaders,
  UpdateAnItemBody,
  UpdateAnItem200,
  ListAttachedItemsParams,
  ListAttachedItemsHeaders,
  ListAttachedItems200,
  CreateAnAttachedItemHeaders,
  CreateAnAttachedItemBody,
  CreateAnAttachedItem200,
  ListItemEntitlementsForAnItemParams,
  ListItemEntitlementsForAnItemHeaders,
  ListItemEntitlementsForAnItem200,
  UpsertOrRemoveItemEntitlementsForAnItemHeaders,
  UpsertOrRemoveItemEntitlementsForAnItemBody,
  UpsertOrRemoveItemEntitlementsForAnItem200,
} from "./chargebeeAPI.schemas";

export class ChargebeeItemsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Returns a list of items satisfying **all** the conditions specified in the filter parameters below. The list is sorted by date of creation, in descending order.

 * @summary List items
 */
  public async listItems(
    params?: ListItemsParams,
    headers?: ListItemsHeaders,
  ): Promise<AxiosResponse<ListItems200>> {
    return this.axios.get(`/items`, {
      params,
      headers,
    });
  }

  /**
 * Creates a new item.

 * @summary Create an item
 */
  public async createAnItem(
    createAnItemBody: CreateAnItemBody,
    headers?: CreateAnItemHeaders,
  ): Promise<AxiosResponse<CreateAnItem200>> {
    return this.axios.post(`/items`, {
      headers,
      json: createAnItemBody,
    });
  }

  /**
 * Deletes an item, marking its `status` as deleted. This is not allowed if there are `active` or `archived` item prices under the item. Once deleted, the id and name of the item can be reused.

 * @summary Delete an item
 */
  public async deleteAnItem(
    itemId: string,
    headers?: DeleteAnItemHeaders,
  ): Promise<AxiosResponse<DeleteAnItem200>> {
    return this.axios.post(`/items/${itemId}/delete`, {
      headers,
    });
  }

  /**
 * Retrieve an item resource.

 * @summary Retrieve an item
 */
  public async retrieveAnItem(
    itemId: string,
    headers?: RetrieveAnItemHeaders,
  ): Promise<AxiosResponse<RetrieveAnItem200>> {
    return this.axios.get(`/items/${itemId}`, {
      headers,
    });
  }

  /**
 * Updates an item with the changes specified. Unspecified item parameters are not modified.

 * @summary Update an item
 */
  public async updateAnItem(
    itemId: string,
    updateAnItemBody: UpdateAnItemBody,
    headers?: UpdateAnItemHeaders,
  ): Promise<AxiosResponse<UpdateAnItem200>> {
    return this.axios.post(`/items/${itemId}`, {
      headers,
      json: updateAnItemBody,
    });
  }

  /**
 * Returns a list of attached items satisfying **all** the conditions specified in the filter parameters below. The list is sorted by the date of creation in descending order (latest first).

 * @summary List attached items
 */
  public async listAttachedItems(
    itemId: string,
    params?: ListAttachedItemsParams,
    headers?: ListAttachedItemsHeaders,
  ): Promise<AxiosResponse<ListAttachedItems200>> {
    return this.axios.get(`/items/${itemId}/attached_items`, {
      params,
      headers,
    });
  }

  /**
 * Creates an attached addon or a charge item for a plan.

 * @summary Create an attached item
 */
  public async createAnAttachedItem(
    itemId: string,
    createAnAttachedItemBody: CreateAnAttachedItemBody,
    headers?: CreateAnAttachedItemHeaders,
  ): Promise<AxiosResponse<CreateAnAttachedItem200>> {
    return this.axios.post(`/items/${itemId}/attached_items`, {
      headers,
      json: createAnAttachedItemBody,
    });
  }

  /**
 * Retrieves a list of all the `item_entitlements` for the `item` specified.

 * @summary List item entitlements for an item
 */
  public async listItemEntitlementsForAnItem(
    itemId: string,
    params?: ListItemEntitlementsForAnItemParams,
    headers?: ListItemEntitlementsForAnItemHeaders,
  ): Promise<AxiosResponse<ListItemEntitlementsForAnItem200>> {
    return this.axios.get(`/items/${itemId}/item_entitlements`, {
      params,
      headers,
    });
  }

  /**
 * Upserts or removes a set of `item_entitlements` for an [item](items?prod_cat_ver=2) depending on the `action` specified. The API returns the upserted or deleted `item_entitlements` after successfully completing the operation. The operation returns an error when the first `item_entitlement` fails to be processed. Either all the `item_entitlement`s provided in the request are processed or none.

 * @summary Upsert or remove item entitlements for an item
 */
  public async upsertOrRemoveItemEntitlementsForAnItem(
    itemId: string,
    upsertOrRemoveItemEntitlementsForAnItemBody: UpsertOrRemoveItemEntitlementsForAnItemBody,
    headers?: UpsertOrRemoveItemEntitlementsForAnItemHeaders,
  ): Promise<AxiosResponse<UpsertOrRemoveItemEntitlementsForAnItem200>> {
    return this.axios.post(`/items/${itemId}/item_entitlements`, {
      headers,
      json: upsertOrRemoveItemEntitlementsForAnItemBody,
    });
  }
}
