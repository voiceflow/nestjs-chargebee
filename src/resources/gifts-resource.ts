/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  CreateAGiftSubscriptionForItemsHeaders,
  CreateAGiftSubscriptionForItemsBody,
  CreateAGiftSubscriptionForItems200,
  CancelAGiftHeaders,
  CancelAGift200,
  UpdateAGiftHeaders,
  UpdateAGiftBody,
  UpdateAGift200,
  ListGiftsParams,
  ListGiftsHeaders,
  ListGifts200,
  RetrieveAGiftHeaders,
  RetrieveAGift200,
  ClaimAGiftHeaders,
  ClaimAGift200,
} from "./chargebeeAPI.schemas";

export class ChargebeeGiftsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Create a gift subscription with items like plans, addons, or charges and gift it to an existing customer.

 * @summary Create a gift subscription for items
 */
  public async createAGiftSubscriptionForItems(
    createAGiftSubscriptionForItemsBody: CreateAGiftSubscriptionForItemsBody,
    headers?: CreateAGiftSubscriptionForItemsHeaders,
  ): Promise<AxiosResponse<CreateAGiftSubscriptionForItems200>> {
    return this.axios.post(`/gifts/create_for_items`, {
      headers,
      json: createAGiftSubscriptionForItemsBody,
    });
  }

  /**
 * This API allows to cancel gifts. Only gift in 'scheduled' and 'unclaimed' states can be cancelled.

 * @summary Cancel a gift
 */
  public async cancelAGift(
    giftId: string,
    headers?: CancelAGiftHeaders,
  ): Promise<AxiosResponse<CancelAGift200>> {
    return this.axios.post(`/gifts/${giftId}/cancel`, {
      headers,
    });
  }

  /**
 * Change the date/time at which the gift notification email is to be sent. This only applies to gifts in the scheduled [status](https://apidocs.chargebee.com/docs/api/gifts#gift_status).

 * @summary Update a gift
 */
  public async updateAGift(
    giftId: string,
    updateAGiftBody: UpdateAGiftBody,
    headers?: UpdateAGiftHeaders,
  ): Promise<AxiosResponse<UpdateAGift200>> {
    return this.axios.post(`/gifts/${giftId}/update_gift`, {
      headers,
      json: updateAGiftBody,
    });
  }

  /**
 * Retrieves the list of gifts.

 * @summary List gifts
 */
  public async listGifts(
    params?: ListGiftsParams,
    headers?: ListGiftsHeaders,
  ): Promise<AxiosResponse<ListGifts200>> {
    return this.axios.get(`/gifts`, {
      params,
      headers,
    });
  }

  /**
 * Retrieves a gift subscription. This API accepts the gift 'id' and returns the gift along with the subscription.

 * @summary Retrieve a gift
 */
  public async retrieveAGift(
    giftId: string,
    headers?: RetrieveAGiftHeaders,
  ): Promise<AxiosResponse<RetrieveAGift200>> {
    return this.axios.get(`/gifts/${giftId}`, {
      headers,
    });
  }

  /**
 * Claiming a gift will move the status to 'claimed'. Only gifts in 'unclaimed' state can be claimed.

 * @summary Claim a gift
 */
  public async claimAGift(
    giftId: string,
    headers?: ClaimAGiftHeaders,
  ): Promise<AxiosResponse<ClaimAGift200>> {
    return this.axios.post(`/gifts/${giftId}/claim`, {
      headers,
    });
  }
}
