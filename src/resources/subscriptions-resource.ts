/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  RemoveAnAdvanceInvoiceSchedulesHeaders,
  RemoveAnAdvanceInvoiceSchedulesBody,
  RemoveAnAdvanceInvoiceSchedules200,
  UpdateSubscriptionForItemsHeaders,
  UpdateSubscriptionForItemsBody,
  UpdateSubscriptionForItems200,
  RemoveCouponsHeaders,
  RemoveCouponsBody,
  RemoveCoupons200,
  ResumeASubscriptionHeaders,
  ResumeASubscriptionBody,
  ResumeASubscription200,
  CancelSubscriptionForItemsHeaders,
  CancelSubscriptionForItemsBody,
  CancelSubscriptionForItems200,
  RegenerateAnInvoiceHeaders,
  RegenerateAnInvoiceBody,
  RegenerateAnInvoice200,
  ListSubscriptionsParams,
  ListSubscriptionsHeaders,
  ListSubscriptions200,
  RetrieveAdvanceInvoiceHeaders,
  RetrieveAdvanceInvoice200,
  RemoveScheduledCancellationHeaders,
  RemoveScheduledCancellationBody,
  RemoveScheduledCancellation200,
  RetrieveWithScheduledChangesHeaders,
  RetrieveWithScheduledChanges200,
  ReactivateASubscriptionHeaders,
  ReactivateASubscriptionBody,
  ReactivateASubscription200,
  ChargeFutureRenewalsHeaders,
  ChargeFutureRenewalsBody,
  ChargeFutureRenewals200,
  AddChargeAtTermEndHeaders,
  AddChargeAtTermEndBody,
  AddChargeAtTermEnd200,
  RemoveScheduledChangesHeaders,
  RemoveScheduledChanges200,
  ChangeTermEndHeaders,
  ChangeTermEndBody,
  ChangeTermEnd200,
  DeleteASubscriptionHeaders,
  DeleteASubscription200,
  ImportUnbilledChargesHeaders,
  ImportUnbilledChargesBody,
  ImportUnbilledCharges200,
  RemoveScheduledResumptionHeaders,
  RemoveScheduledResumption200,
  RetrieveASubscriptionHeaders,
  RetrieveASubscription200,
  ImportContractTermHeaders,
  ImportContractTermBody,
  ImportContractTerm200,
  OverrideBillingProfileHeaders,
  OverrideBillingProfileBody,
  OverrideBillingProfile200,
  RemoveScheduledPauseHeaders,
  RemoveScheduledPause200,
  EditAdvanceInvoiceScheduleHeaders,
  EditAdvanceInvoiceScheduleBody,
  EditAdvanceInvoiceSchedule200,
  ListDiscountsForASubscriptionParams,
  ListDiscountsForASubscriptionHeaders,
  ListDiscountsForASubscription200,
  ListContractTermsForASubscriptionParams,
  ListContractTermsForASubscriptionHeaders,
  ListContractTermsForASubscription200,
  PauseASubscriptionHeaders,
  PauseASubscriptionBody,
  PauseASubscription200,
  ScheduledChangesASubscriptionScheduledChangeHeaders,
  ScheduledChangesASubscriptionScheduledChange200,
  UpdateScheduledChangesASubscriptionScheduledChangeHeaders,
  UpdateScheduledChangesASubscriptionScheduledChangeBody,
  UpdateScheduledChangesASubscriptionScheduledChange200,
  SubscriptionRenewalEstimateParams,
  SubscriptionRenewalEstimateHeaders,
  SubscriptionRenewalEstimate200,
  CancelSubscriptionForItemsEstimateHeaders,
  CancelSubscriptionForItemsEstimateBody,
  CancelSubscriptionForItemsEstimate200,
  ResumeSubscriptionEstimateHeaders,
  ResumeSubscriptionEstimateBody,
  ResumeSubscriptionEstimate200,
  RegenerateInvoiceEstimateHeaders,
  RegenerateInvoiceEstimateBody,
  RegenerateInvoiceEstimate200,
  SubscriptionChangeTermEndEstimateHeaders,
  SubscriptionChangeTermEndEstimateBody,
  SubscriptionChangeTermEndEstimate200,
  PauseSubscriptionEstimateHeaders,
  PauseSubscriptionEstimateBody,
  PauseSubscriptionEstimate200,
  AdvanceInvoiceEstimateHeaders,
  AdvanceInvoiceEstimateBody,
  AdvanceInvoiceEstimate200,
  RetrieveAUsageParams,
  RetrieveAUsageHeaders,
  RetrieveAUsage200,
  CreateAUsageHeaders,
  CreateAUsageBody,
  CreateAUsage200,
  DeleteAUsageHeaders,
  DeleteAUsageBody,
  DeleteAUsage200,
  EnableDisableSubscriptionEntitlementsHeaders,
  EnableDisableSubscriptionEntitlementsBody,
  EnableDisableSubscriptionEntitlements200,
  ListSubscriptionEntitlementsParams,
  ListSubscriptionEntitlementsHeaders,
  ListSubscriptionEntitlements200,
  ListEntitlementOverridesForASubscriptionParams,
  ListEntitlementOverridesForASubscriptionHeaders,
  ListEntitlementOverridesForASubscription200,
  UpsertRemoveEntitlementOverridesForASubscriptionHeaders,
  UpsertRemoveEntitlementOverridesForASubscriptionBody,
  UpsertRemoveEntitlementOverridesForASubscription200,
} from "./chargebeeAPI.schemas";

export class ChargebeeSubscriptionsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Deletes an advance invoicing schedule. When *schedule_type = specific_dates*, you also have the option of deleting a part of the schedule.

 * @summary Remove an advance invoice schedules
 */
  public async removeAnAdvanceInvoiceSchedules(
    subscriptionId: string,
    removeAnAdvanceInvoiceSchedulesBody: RemoveAnAdvanceInvoiceSchedulesBody,
    headers?: RemoveAnAdvanceInvoiceSchedulesHeaders,
  ): Promise<AxiosResponse<RemoveAnAdvanceInvoiceSchedules200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/remove_advance_invoice_schedule`,
      {
        headers,
        json: removeAnAdvanceInvoiceSchedulesBody,
      },
    );
  }

  /**
 * **Note:** This endpoint optionally supports 3DS. To use it, [create](./payment_intents?prod_cat_ver=2#create_a_payment_intent) a `payment_intent` and provide it via this endpoint.

Updates the specified subscription by setting the parameters passed. Any parameters not provided are left unmodified. If an invoice is generated for this operation, any available [credits and excess payments](./customers?prod_cat_ver=2#customer_balances) for the customer are automatically applied.

 * @summary Update subscription for items
 */
  public async updateSubscriptionForItems(
    subscriptionId: string,
    updateSubscriptionForItemsBody: UpdateSubscriptionForItemsBody,
    headers?: UpdateSubscriptionForItemsHeaders,
  ): Promise<AxiosResponse<UpdateSubscriptionForItems200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/update_for_items`,
      {
        headers,
        json: updateSubscriptionForItemsBody,
      },
    );
  }

  /**
 * Removes Coupons associated with the Subscription. If the param 'coupon_ids' is not specified, all the Coupons linked to the Subscription will be removed.

 * @summary Remove coupons
 */
  public async removeCoupons(
    subscriptionId: string,
    removeCouponsBody: RemoveCouponsBody,
    headers?: RemoveCouponsHeaders,
  ): Promise<AxiosResponse<RemoveCoupons200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/remove_coupons`, {
      headers,
      json: removeCouponsBody,
    });
  }

  /**
 * **Note:** This operation optionally supports 3DS verification flow. To achieve the same, create the [Payment Intent](/docs/api/#3ds-implementation-guide) and pass it as input parameter to this API.

This API is used to resume a **paused** subscription. On resumption the subscription will be activated and any applicable charges will be initiated.

You could schedule the resumption by passing **specific_date** parameter in resume_option. If scheduled, the subscription will be resumed on the **specific_date** and moved to Active state.

For in-term resumption, unless there are scheduled changes, unbilled charges will not be charged.

**What is an "in-term resumption"?**   
An "in-term resumption" is when the pause and resumption happens within the billing term of the subscription.

**Example :** A subscription was billed from 1st to 31st of a month. It was paused on the 20th and resumed before 31st. This is an in-term resumption.

#### UNPAID INVOICES

Specifying **unpaid_invoices** allows you to close invoices of the subscription which have amounts due. The invoices are chosen for payment collection after applying the available credits and excess payments.

If specified as **schedule_payment_collection**, payment collection for the amount due of past invoices will be attempted. The payment method available will be charged if auto-collection is enabled for the customer, and appropriate payment collection(payment succeeded or payment failed) events will be triggered. If the payment collection fails, no further retries will be made on the invoices.

**Note:** If the invoices of the subscription are consolidated, and any of the subscriptions in the consolidated invoice are cancelled, these invoices will not be selected for collection.

 * @summary Resume a subscription
 */
  public async resumeASubscription(
    subscriptionId: string,
    resumeASubscriptionBody: ResumeASubscriptionBody,
    headers?: ResumeASubscriptionHeaders,
  ): Promise<AxiosResponse<ResumeASubscription200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/resume`, {
      headers,
      json: resumeASubscriptionBody,
    });
  }

  /**
 * Cancels the subscription.

#### Canceling contract terms

* Subscriptions with contract terms can only be canceled by [terminating the contract term](/docs/api/subscriptions?prod_cat_ver=2&lang=curl#cancel_subscription_for_items_contract_term_cancel_option).
* When canceling a contract term, the default value for the following parameters is taken from the [site settings for contract terms](https://www.chargebee.com/docs/2.0/contract-terms.html#configuring-contract-terms) instead of the [site settings for subscription cancellation](https://www.chargebee.com/docs/2.0/cancellations.html#configure-subscription-cancellation).
  * `credit_option_for_current_term_charges`
  * `unbilled_charges_option`
  * `account_receivables_handling`
  * `refundable_credits_handling`
* From among the parameters for this request, `end_of_term` or `cancel_at` should not be passed when using contract terms; use `contract_term_cancel_option` instead.
* The `subscription_items` parameter is used to override price or quantity for the termination fee. To use this parameter, the following two conditions must be met:
  * `contract_term_cancel_option` must be set to `terminate_now`.
  * the subscription must have a [subscription_items](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items) attribute with `charge_on_event` set to `contract_term_termination`.

 * @summary Cancel subscription for items
 */
  public async cancelSubscriptionForItems(
    subscriptionId: string,
    cancelSubscriptionForItemsBody: CancelSubscriptionForItemsBody,
    headers?: CancelSubscriptionForItemsHeaders,
  ): Promise<AxiosResponse<CancelSubscriptionForItems200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/cancel_for_items`,
      {
        headers,
        json: cancelSubscriptionForItemsBody,
      },
    );
  }

  /**
 * Regenerates the current invoice for the subscription. The current invoice is that which includes non-`metered` items from the current term and `metered` items from the previous term of the subscription.  

#### prerequisites

* The current invoice of the subscription must have been [voided](/docs/api/invoices?prod_cat_ver=2#void_an_invoice) or [deleted](/docs/api/invoices?prod_cat_ver=2#delete_an_invoice).
* The subscription `status` must be `active` or `non_renewing`.
* There should be no [unbilled charges](/docs/api/unbilled_charges?prod_cat_ver=2) for non-`metered` items for the current term.
* There should be no [unbilled charges](/docs/api/unbilled_charges?prod_cat_ver=2) for `metered` items for the previous term.
* The subscription must not have any [advance invoice](https://www.chargebee.com/docs/2.0/advance-invoices.html#generating-an-advance-invoice) or [advance invoice schedule](https://www.chargebee.com/docs/2.0/advance-invoices.html#generating-an-advance-invoice_setting-up-an-advance-invoicing-schedule).

#### deleting an invoice

Usages are also deleted when an invoice is deleted. Therefore, if the invoice was deleted, you may [add](/docs/api/usages?prod_cat_ver=2#create_a_usage) or [bulk import](https://www.chargebee.com/docs/2.0/bulk-operations.html#overview_available-bulk-operations) usages before regenerating an invoice.

 * @summary Regenerate an invoice
 */
  public async regenerateAnInvoice(
    subscriptionId: string,
    regenerateAnInvoiceBody: RegenerateAnInvoiceBody,
    headers?: RegenerateAnInvoiceHeaders,
  ): Promise<AxiosResponse<RegenerateAnInvoice200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/regenerate_invoice`,
      {
        headers,
        json: regenerateAnInvoiceBody,
      },
    );
  }

  /**
 * Returns a list of subscriptions meeting **all** the conditions specified in the filter parameters below.

 * @summary List subscriptions
 */
  public async listSubscriptions(
    params?: ListSubscriptionsParams,
    headers?: ListSubscriptionsHeaders,
  ): Promise<AxiosResponse<ListSubscriptions200>> {
    return this.axios.get(`/subscriptions`, {
      params,
      headers,
    });
  }

  /**
 * Retrieves the *advance_invoice_schedule* for a subscription. Note that this endpoint is only applicable for *schedule_type = specific_dates* or fixed_intervals.

 * @summary Retrieve advance invoice
 */
  public async retrieveAdvanceInvoice(
    subscriptionId: string,
    headers?: RetrieveAdvanceInvoiceHeaders,
  ): Promise<AxiosResponse<RetrieveAdvanceInvoice200>> {
    return this.axios.get(
      `/subscriptions/${subscriptionId}/retrieve_advance_invoice_schedule`,
      {
        headers,
      },
    );
  }

  /**
 * **Note:** Cannot be called when the subscription is on a [contract term](contract_terms). (That is, when the `contract_term.status attribute` is `active`.)

If the subscription is in **Non Renewing** or **In Trial** state and is also scheduled to cancel at the end of current term, then this API can be used to remove the scheduled cancellation. When a scheduled cancellation is removed, the subscription will revert to **Active** or **In Trial** state, whichever is the state before cancellation was scheduled.

While removing the scheduled cancellation, you may specify the number of billing cycles. If the billing cycle is not specified, the default billing cycle from the plan will be applied on the subscription.

 * @summary Remove scheduled cancellation
 */
  public async removeScheduledCancellation(
    subscriptionId: string,
    removeScheduledCancellationBody: RemoveScheduledCancellationBody,
    headers?: RemoveScheduledCancellationHeaders,
  ): Promise<AxiosResponse<RemoveScheduledCancellation200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/remove_scheduled_cancellation`,
      {
        headers,
        json: removeScheduledCancellationBody,
      },
    );
  }

  /**
 * Retrieves a subscription with the scheduled changes applied.   
**Note:** Only the following attributes are changed

* item_id
* item_price_id
* billing_period
* billing_period_unit
* remaining_billing_cycles
* coupons

Other attributes such as **status** ,**next_billing_at** are not changed and will reflect the current subscription values.




 * @summary Retrieve with scheduled changes
 */
  public async retrieveWithScheduledChanges(
    subscriptionId: string,
    headers?: RetrieveWithScheduledChangesHeaders,
  ): Promise<AxiosResponse<RetrieveWithScheduledChanges200>> {
    return this.axios.get(
      `/subscriptions/${subscriptionId}/retrieve_with_scheduled_changes`,
      {
        headers,
      },
    );
  }

  /**
 * **Note:** This operation optionally supports 3DS verification flow. To achieve the same, create the [Payment Intent](/docs/api/#3ds-implementation-guide) and pass it as input parameter to this API.

This API is used to reactivate a **cancelled** subscription. You may also optionally specify a trial end date, to move the subscription to **In Trial** state. If trial end is not specified, the subscription will be activated and any applicable charges will be initiated.

Unless the billing cycle is specified, it will be set to plan's default billing cycle.

During an in-term reactivation^++^, unless the billing cycle is specified, the subscription's remaining billing cycles will be restored. If a trial end date is specified, then the plan's default billing cycle is used.

**What is an "in-term reactivation"?**   
An "in-term reactivation" happens when the billing term of the subscription is retained upon cancellation and reactivation is initiated within that term.   

**When is the 'billing term' retained for a cancelled subscription?**   
When dunning (payment failure retry settings) is configured with the last retry configured as

* cancel subscription and mark invoice as 'Not Paid', or
* cancel subscription and mark the invoice as 'Voided' and the case if any of the current term invoices is partially or fully paid, the invoice is not voided but instead Chargebee marks the invoices as 'Not Paid'.



**Note :** In both cases, the billing term is retained and upon reactivation the subscription will be moved to active state (if the plan does not have a trial period) and no invoice will be generated. Ensure that you collect any unpaid invoices.   

**Example :** A Subscription was billed from 1st to 31st of a month and it was cancelled on the 20th due to one of the above cases (billing term is not reset). If the reactivation happens on 25th then it is considered an in-term reactivation.

 * @summary Reactivate a subscription
 */
  public async reactivateASubscription(
    subscriptionId: string,
    reactivateASubscriptionBody: ReactivateASubscriptionBody,
    headers?: ReactivateASubscriptionHeaders,
  ): Promise<AxiosResponse<ReactivateASubscription200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/reactivate`, {
      headers,
      json: reactivateASubscriptionBody,
    });
  }

  /**
 * Creates an advance invoice or an [advance invoicing schedule](advance_invoice_schedules#advance_invoice_schedule). When an advance invoice is generated, and [`auto_collection`](subscriptions#subscription_auto_collection) is `on` for the subscription, the [`payment_source`](subscriptions#subscription_payment_source_id) associated with the subscription is charged. Any changes scheduled for the subscription are taken into account automatically while generating an advance invoice. Advance invoices are not generated for a subscription when it is in the [`paused`](subscriptions#subscription_status) status. Advance invoices are generated only for non-`metered` items in a subscription.

 * @summary Charge Future Renewals
 */
  public async chargeFutureRenewals(
    subscriptionId: string,
    chargeFutureRenewalsBody: ChargeFutureRenewalsBody,
    headers?: ChargeFutureRenewalsHeaders,
  ): Promise<AxiosResponse<ChargeFutureRenewals200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/charge_future_renewals`,
      {
        headers,
        json: chargeFutureRenewalsBody,
      },
    );
  }

  /**
 * Adds a one time charge to the subscription which will be added to the invoice generated at the end of the current term. If there are any applicable coupons in the subscription, an appropriate discount will be applied.

To collect a charge immediately, [use this API](/docs/api/invoices#create_invoice_for_charge).

 * @summary Add charge at term end
 */
  public async addChargeAtTermEnd(
    subscriptionId: string,
    addChargeAtTermEndBody: AddChargeAtTermEndBody,
    headers?: AddChargeAtTermEndHeaders,
  ): Promise<AxiosResponse<AddChargeAtTermEnd200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/add_charge_at_term_end`,
      {
        headers,
        json: addChargeAtTermEndBody,
      },
    );
  }

  /**
 * Removes the subscription changes scheduled on next renewal. Advance charges, if any, will be refunded as credits and a new invoice will be generated on renewal.

 * @summary Remove scheduled changes
 */
  public async removeScheduledChanges(
    subscriptionId: string,
    headers?: RemoveScheduledChangesHeaders,
  ): Promise<AxiosResponse<RemoveScheduledChanges200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/remove_scheduled_changes`,
      {
        headers,
      },
    );
  }

  /**
 * Changes the subscription's current term end date. Depending on the "status" of the subscription, "term end date" has different effects.

* If the Subscription is in **trial**, it affects trial end date.
* If the Subscription is **active**, it affects the next billing date.
* If the Subscription's status is **non_renewing**, this affects the upcoming cancellation date.

**Tip**: To cycle through a couple of billing cycles and test webhooks, you may use this API.

 * @summary Change term end
 */
  public async changeTermEnd(
    subscriptionId: string,
    changeTermEndBody: ChangeTermEndBody,
    headers?: ChangeTermEndHeaders,
  ): Promise<AxiosResponse<ChangeTermEnd200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/change_term_end`, {
      headers,
      json: changeTermEndBody,
    });
  }

  /**
 * Deletes the subscription resource.

 * @summary Delete a subscription
 */
  public async deleteASubscription(
    subscriptionId: string,
    headers?: DeleteASubscriptionHeaders,
  ): Promise<AxiosResponse<DeleteASubscription200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/delete`, {
      headers,
    });
  }

  /**
 * Imports unbilled charges into Chargebee.

 * @summary Import unbilled charges
 */
  public async importUnbilledCharges(
    subscriptionId: string,
    importUnbilledChargesBody: ImportUnbilledChargesBody,
    headers?: ImportUnbilledChargesHeaders,
  ): Promise<AxiosResponse<ImportUnbilledCharges200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/import_unbilled_charges`,
      {
        headers,
        json: importUnbilledChargesBody,
      },
    );
  }

  /**
 * If the subscription is in **Paused** state and is scheduled to resume on a specific_date, this API can be used to remove the scheduled resumption. When the scheduled resumption is removed, the subscription will remain **Paused**.

 * @summary Remove scheduled resumption
 */
  public async removeScheduledResumption(
    subscriptionId: string,
    headers?: RemoveScheduledResumptionHeaders,
  ): Promise<AxiosResponse<RemoveScheduledResumption200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/remove_scheduled_resumption`,
      {
        headers,
      },
    );
  }

  /**
 * Retrieves a subscription.

 * @summary Retrieve a subscription
 */
  public async retrieveASubscription(
    subscriptionId: string,
    headers?: RetrieveASubscriptionHeaders,
  ): Promise<AxiosResponse<RetrieveASubscription200>> {
    return this.axios.get(`/subscriptions/${subscriptionId}`, {
      headers,
    });
  }

  /**
 * Import previous and active [contract terms](./contract_terms).  

For contract terms in `active` state, import is allowed only if the associated subscription is `active`, `in_trial`, `future` or `non-renewing`.  

 * @summary Import contract term
 */
  public async importContractTerm(
    subscriptionId: string,
    importContractTermBody: ImportContractTermBody,
    headers?: ImportContractTermHeaders,
  ): Promise<AxiosResponse<ImportContractTerm200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/import_contract_term`,
      {
        headers,
        json: importContractTermBody,
      },
    );
  }

  /**
 * Assigns the payment source and sets auto collection state for the subscription.

 * @summary Override Billing Profile
 */
  public async overrideBillingProfile(
    subscriptionId: string,
    overrideBillingProfileBody: OverrideBillingProfileBody,
    headers?: OverrideBillingProfileHeaders,
  ): Promise<AxiosResponse<OverrideBillingProfile200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/override_billing_profile`,
      {
        headers,
        json: overrideBillingProfileBody,
      },
    );
  }

  /**
 * If the subscription is in **Active** or **Non Renewing** state and is also scheduled to pause at the end_of_term/specific_date, this API can be used to remove the scheduled pause.

 * @summary Remove scheduled pause
 */
  public async removeScheduledPause(
    subscriptionId: string,
    headers?: RemoveScheduledPauseHeaders,
  ): Promise<AxiosResponse<RemoveScheduledPause200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/remove_scheduled_pause`,
      {
        headers,
      },
    );
  }

  /**
 * Modifies the [advance invoicing schedule](advance_invoice_schedules#advance_invoice_schedule) for a subscription.

 * @summary Edit Advance Invoice Schedule
 */
  public async editAdvanceInvoiceSchedule(
    subscriptionId: string,
    editAdvanceInvoiceScheduleBody: EditAdvanceInvoiceScheduleBody,
    headers?: EditAdvanceInvoiceScheduleHeaders,
  ): Promise<AxiosResponse<EditAdvanceInvoiceSchedule200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/edit_advance_invoice_schedule`,
      {
        headers,
        json: editAdvanceInvoiceScheduleBody,
      },
    );
  }

  /**
 * Returns a list of discounts currently attached to the subscription given by `{subscription_id}`. The list is sorted by date of creation, in descending order.

 * @summary List discounts for a subscription
 */
  public async listDiscountsForASubscription(
    subscriptionId: string,
    params?: ListDiscountsForASubscriptionParams,
    headers?: ListDiscountsForASubscriptionHeaders,
  ): Promise<AxiosResponse<ListDiscountsForASubscription200>> {
    return this.axios.get(`/subscriptions/${subscriptionId}/discounts`, {
      params,
      headers,
    });
  }

  /**
 * Retrieves a list of contract term resources for the subscription specified in the path.

 * @summary List contract terms for a subscription
 */
  public async listContractTermsForASubscription(
    subscriptionId: string,
    params?: ListContractTermsForASubscriptionParams,
    headers?: ListContractTermsForASubscriptionHeaders,
  ): Promise<AxiosResponse<ListContractTermsForASubscription200>> {
    return this.axios.get(`/subscriptions/${subscriptionId}/contract_terms`, {
      params,
      headers,
    });
  }

  /**
 * Pauses the subscription, changing its `status` to `paused`. This prevents the subscription from getting renewed. No new charges are created until the subscription is resumed.



#### Note:

* Applicable only for **active/non-renewing** subscriptions.
* If paused indefinitely, the subscription is cancelled on the [cancelled_at](/docs/api/subscriptions#subscription_cancelled_at) date.
* Advance charges, if any, are refunded as credits.

 * @summary Pause a subscription
 */
  public async pauseASubscription(
    subscriptionId: string,
    pauseASubscriptionBody: PauseASubscriptionBody,
    headers?: PauseASubscriptionHeaders,
  ): Promise<AxiosResponse<PauseASubscription200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/pause`, {
      headers,
      json: pauseASubscriptionBody,
    });
  }

  /**
   * @summary Scheduled_changes a subscription_scheduled_change
   */
  public async scheduledChangesASubscriptionScheduledChange(
    subscriptionId: string,
    headers?: ScheduledChangesASubscriptionScheduledChangeHeaders,
  ): Promise<AxiosResponse<ScheduledChangesASubscriptionScheduledChange200>> {
    return this.axios.get(
      `/subscriptions/${subscriptionId}/scheduled_changes`,
      {
        headers,
      },
    );
  }

  /**
   * @summary Update_scheduled_changes a subscription_scheduled_change
   */
  public async updateScheduledChangesASubscriptionScheduledChange(
    subscriptionId: string,
    updateScheduledChangesASubscriptionScheduledChangeBody: UpdateScheduledChangesASubscriptionScheduledChangeBody,
    headers?: UpdateScheduledChangesASubscriptionScheduledChangeHeaders,
  ): Promise<
    AxiosResponse<UpdateScheduledChangesASubscriptionScheduledChange200>
  > {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/update_scheduled_changes`,
      {
        headers,
        json: updateScheduledChangesASubscriptionScheduledChangeBody,
      },
    );
  }

  /**
 * This returns an estimate of the amount that will be charged when the subscription is billed next. The estimate is calculated based on the current recurring items of the subscription - plan, addons, and coupons.

In the response,

* **estimate.subscription_estimate** has the current subscription details like its status, next billing date, and so on.
* **estimate.invoice_estimate** has details of the invoice that will be generated at the next billing date.

  The generated invoice estimate will include all the balances - [Promotional Credits](https://www.chargebee.com/docs/promotional-credits.html), Refundable Credits, and Excess Payments - if any. If you don't want these balances to be included you can specify 'false' for the parameter *use_existing_balances*.

  To exclude the [delayed charges](https://www.chargebee.com/docs/charges.html) from the invoice estimate, specify 'false' for the parameter *include_delayed_charges*.

**Note:**

* This API will not generate a renewal invoice if an [advance invoice](https://www.chargebee.com/docs/advance-invoices.html) is already present for the subscription.
* For 'Non Renewing' subscriptions, only the [delayed charges](https://www.chargebee.com/docs/charges.html) will be included in the invoice estimate.
* This API is not supported for 'Cancelled' subscriptions.
* Only the subscription's charges will be included. If you have enabled the Consolidated invoicing feature, use the *Upcoming Invoices* estimate available for the Customer object to get the actual estimate invoice for the customer.

 * @summary Subscription renewal estimate
 */
  public async subscriptionRenewalEstimate(
    subscriptionId: string,
    params?: SubscriptionRenewalEstimateParams,
    headers?: SubscriptionRenewalEstimateHeaders,
  ): Promise<AxiosResponse<SubscriptionRenewalEstimate200>> {
    return this.axios.get(`/subscriptions/${subscriptionId}/renewal_estimate`, {
      params,
      headers,
    });
  }

  /**
 * This creates an estimate for canceling a subscription without actually canceling it. Estimate details include canceling date, unbilled charge options, refund credit handling, the amount to be credited after cancellation, and so on.

 * @summary Cancel subscription for items estimate
 */
  public async cancelSubscriptionForItemsEstimate(
    subscriptionId: string,
    cancelSubscriptionForItemsEstimateBody: CancelSubscriptionForItemsEstimateBody,
    headers?: CancelSubscriptionForItemsEstimateHeaders,
  ): Promise<AxiosResponse<CancelSubscriptionForItemsEstimate200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/cancel_subscription_for_items_estimate`,
      {
        headers,
        json: cancelSubscriptionForItemsEstimateBody,
      },
    );
  }

  /**
 * Generates an estimate for the 'resume subscription' operation. This is similar to the [Resume a subscription](/docs/api/subscriptions#resume_a_subscription) API, but the subscription will not be resumed. Only an estimate for this operation is created.

In the response,

* **estimate.subscription_estimate** has the subscription details.
* **estimate.invoice_estimate** has details of the invoice that will be generated immediately. This will not be present if no immediate invoice is generated for this operation. This will happen for in-term resumption^++^.   

  **^++^What is an "in-term resumption"?**   
  An "in-term resumption" is when the resumption happens within the billing term of the subscription.
* **estimate.next_invoice_estimate** has details of the invoice that will be generated during the next billing date of this subscription. This will be present only if no immediate invoice is generated during this operation (scenario mentioned above) and this subscription has next billing.   

  The generated invoice_estimate/next_invoice_estimate will include all the balances - [Promotional Credits](https://www.chargebee.com/docs/promotional-credits.html), Refundable Credits, and Excess Payments - if any.

 * @summary Resume subscription estimate
 */
  public async resumeSubscriptionEstimate(
    subscriptionId: string,
    resumeSubscriptionEstimateBody: ResumeSubscriptionEstimateBody,
    headers?: ResumeSubscriptionEstimateHeaders,
  ): Promise<AxiosResponse<ResumeSubscriptionEstimate200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/resume_subscription_estimate`,
      {
        headers,
        json: resumeSubscriptionEstimateBody,
      },
    );
  }

  /**
 * Regenerates the invoice for the current term of the subscription. The subscription must have `status` as `active` or `non_renewing`. This operation is not allowed when any of the following conditions hold true for the subscription:

* An invoice exists for the current term and its `status` is not `voided`.
* There are [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html) for the current term.
* The subscription has an [advance invoice](https://www.chargebee.com/docs/advance-invoices.html).



#### Response

Returns an `estimate` object with one of the following components depending on the value of `invoice_immediately`.

* If the value is `true`: an `invoice_estimate` object that corresponds to the regenerated invoice.
* If the value is `false`: a list of `unbilled_charge_estimate` objects corresponding to all the unbilled charges created for the current term of the subscription.




 * @summary Regenerate Invoice Estimate
 */
  public async regenerateInvoiceEstimate(
    subscriptionId: string,
    regenerateInvoiceEstimateBody: RegenerateInvoiceEstimateBody,
    headers?: RegenerateInvoiceEstimateHeaders,
  ): Promise<AxiosResponse<RegenerateInvoiceEstimate200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/regenerate_invoice_estimate`,
      {
        headers,
        json: regenerateInvoiceEstimateBody,
      },
    );
  }

  /**
 * Generates an estimate for the 'change term end' operation. This is similar to the [Change term end](/docs/api/subscriptions#change_term_end) API but the subscription's term end will not be changed, only an estimate for this operation is created. This is applicable only for subscriptions in 'in-trial', 'active' and 'non-renewing' states.

In the response,

* **estimate.subscription_estimate** has the subscription details like the status of the subscription (in_trial, active, etc.), next billing date, and so on.
* **estimate.invoice_estimate** has details of the invoice that will be generated immediately. This will not be present if no immediate invoice is generated for this operation. This will happen when
  * *prorate* parameter is false, or
  * *invoice_immediately* parameter is false, or
  * subscription is in *in-trial* state
* **estimate.credit_note_estimates\[\]** has details of the credit-notes that will get generated during this operation. This list will be empty if no credit-note gets generated during this operation.
* **estimate.unbilled_charge_estimates\[\]** has details of the unbilled charges. This is returned only if *invoice_immediately* is set as false.

 * @summary Subscription change term end estimate
 */
  public async subscriptionChangeTermEndEstimate(
    subscriptionId: string,
    subscriptionChangeTermEndEstimateBody: SubscriptionChangeTermEndEstimateBody,
    headers?: SubscriptionChangeTermEndEstimateHeaders,
  ): Promise<AxiosResponse<SubscriptionChangeTermEndEstimate200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/change_term_end_estimate`,
      {
        headers,
        json: subscriptionChangeTermEndEstimateBody,
      },
    );
  }

  /**
 * This API provides an estimate of the details pertaining to the [pause_subscription](/docs/api/subscriptions#pause_a_subscription) operation. It returns attributes such as [pause_date](/docs/api/estimates#estimate_subscription_estimate_pause_date) and [resume_date](/docs/api/estimates#estimate_subscription_estimate_resume_date). This is similar to the [Pause a subscription](/docs/api/subscriptions#pause_a_subscription) API with the exception that the subscription is not paused. Only an estimate for this operation is created.

In the response,

* **estimate.subscription_estimate** has the subscription details.
* **estimate.invoice_estimate** has details of the invoice that are generated immediately. This is not present if no immediate invoices are generated for this operation.
* **estimate.credit_note_estimates\[\]** has details of the credit notes that are generated during this operation. This list is empty if no credit notes are generated.

 * @summary Pause subscription estimate
 */
  public async pauseSubscriptionEstimate(
    subscriptionId: string,
    pauseSubscriptionEstimateBody: PauseSubscriptionEstimateBody,
    headers?: PauseSubscriptionEstimateHeaders,
  ): Promise<AxiosResponse<PauseSubscriptionEstimate200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/pause_subscription_estimate`,
      {
        headers,
        json: pauseSubscriptionEstimateBody,
      },
    );
  }

  /**
 * This API is used to generate an invoice estimate for preview. Estimate details include the number of billing cycles to be invoiced in advance, the number of billing cycles in one interval, advance invoicing schedules, and so on.

 * @summary Advance invoice estimate
 */
  public async advanceInvoiceEstimate(
    subscriptionId: string,
    advanceInvoiceEstimateBody: AdvanceInvoiceEstimateBody,
    headers?: AdvanceInvoiceEstimateHeaders,
  ): Promise<AxiosResponse<AdvanceInvoiceEstimate200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/advance_invoice_estimate`,
      {
        headers,
        json: advanceInvoiceEstimateBody,
      },
    );
  }

  /**
 * Retrieves a usage record of a specific subscription.

 * @summary Retrieve a usage
 */
  public async retrieveAUsage(
    subscriptionId: string,
    params: RetrieveAUsageParams,
    headers?: RetrieveAUsageHeaders,
  ): Promise<AxiosResponse<RetrieveAUsage200>> {
    return this.axios.get(`/subscriptions/${subscriptionId}/usages`, {
      params,
      headers,
    });
  }

  /**
 * Creates a usage record for an item price in a subscription. The item price must belong to a [metered](/docs/api/items?prod_cat_ver=2#item_metered) item.  
**Max Usages**   
The maximum number of usages that can be recorded for the entire lifetime of a subscription is 5000. [Contact Support](https://chargebee.freshdesk.com/support/home) if you want this limit to be increased for your site.

 * @summary Create a usage
 */
  public async createAUsage(
    subscriptionId: string,
    createAUsageBody: CreateAUsageBody,
    headers?: CreateAUsageHeaders,
  ): Promise<AxiosResponse<CreateAUsage200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/usages`, {
      headers,
      json: createAUsageBody,
    });
  }

  /**
 * Deletes a usage record. This operation cannot be invoked for a usage record that has been [invoiced](usages?prod_cat_ver=2#invoicing_usages).

 * @summary Delete a usage
 */
  public async deleteAUsage(
    subscriptionId: string,
    deleteAUsageBody: DeleteAUsageBody,
    headers?: DeleteAUsageHeaders,
  ): Promise<AxiosResponse<DeleteAUsage200>> {
    return this.axios.post(`/subscriptions/${subscriptionId}/delete_usage`, {
      headers,
      json: deleteAUsageBody,
    });
  }

  /**
 * Enables or disables specific `subscription_entitlements` for a subscription.

 * @summary Enable/disable subscription entitlements
 */
  public async enableDisableSubscriptionEntitlements(
    subscriptionId: string,
    enableDisableSubscriptionEntitlementsBody: EnableDisableSubscriptionEntitlementsBody,
    headers?: EnableDisableSubscriptionEntitlementsHeaders,
  ): Promise<AxiosResponse<EnableDisableSubscriptionEntitlements200>> {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/subscription_entitlements/set_availability`,
      {
        headers,
        json: enableDisableSubscriptionEntitlementsBody,
      },
    );
  }

  /**
 * Retrieves the list of `subscription_entitlements` for the [subscription](/docs/api/subscriptions).  
**Note:**

The `components` attribute is not returned for any of the `subscription_entitlements`. Use the retrieve operation(coming soon) to obtain the `components`.

 * @summary List subscription entitlements
 */
  public async listSubscriptionEntitlements(
    subscriptionId: string,
    params?: ListSubscriptionEntitlementsParams,
    headers?: ListSubscriptionEntitlementsHeaders,
  ): Promise<AxiosResponse<ListSubscriptionEntitlements200>> {
    return this.axios.get(
      `/subscriptions/${subscriptionId}/subscription_entitlements`,
      {
        params,
        headers,
      },
    );
  }

  /**
 * Retrieve the list of entitlement overrides for a subscription.

 * @summary List entitlement overrides for a subscription
 */
  public async listEntitlementOverridesForASubscription(
    subscriptionId: string,
    params?: ListEntitlementOverridesForASubscriptionParams,
    headers?: ListEntitlementOverridesForASubscriptionHeaders,
  ): Promise<AxiosResponse<ListEntitlementOverridesForASubscription200>> {
    return this.axios.get(
      `/subscriptions/${subscriptionId}/entitlement_overrides`,
      {
        params,
        headers,
      },
    );
  }

  /**
 * Upserts or removes a set of `entitlement_overrides` for a `subscription` depending on the `action` specified. The API returns the upserted or deleted `entitlement_overrides` after successfully completing the operation. The operation returns an error when the first `entitlement_override` fails to be processed. Either all the `entitlement_overrides` provided in the request are processed or none.

 * @summary Upsert/remove entitlement overrides for a subscription
 */
  public async upsertRemoveEntitlementOverridesForASubscription(
    subscriptionId: string,
    upsertRemoveEntitlementOverridesForASubscriptionBody: UpsertRemoveEntitlementOverridesForASubscriptionBody,
    headers?: UpsertRemoveEntitlementOverridesForASubscriptionHeaders,
  ): Promise<
    AxiosResponse<UpsertRemoveEntitlementOverridesForASubscription200>
  > {
    return this.axios.post(
      `/subscriptions/${subscriptionId}/entitlement_overrides`,
      {
        headers,
        json: upsertRemoveEntitlementOverridesForASubscriptionBody,
      },
    );
  }
}
