/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
export type TaxesCsvImport200 = {
  csv_tax_rule: CsvTaxRule;
};

export type TaxesCsvImportBodyServiceType =
  (typeof TaxesCsvImportBodyServiceType)[keyof typeof TaxesCsvImportBodyServiceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportBodyServiceType = {
  digital: "digital",
  other: "other",
  not_applicable: "not_applicable",
} as const;

export type TaxesCsvImportBodyTax4JurisType =
  (typeof TaxesCsvImportBodyTax4JurisType)[keyof typeof TaxesCsvImportBodyTax4JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportBodyTax4JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type TaxesCsvImportBodyTax3JurisType =
  (typeof TaxesCsvImportBodyTax3JurisType)[keyof typeof TaxesCsvImportBodyTax3JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportBodyTax3JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type TaxesCsvImportBodyTax2JurisType =
  (typeof TaxesCsvImportBodyTax2JurisType)[keyof typeof TaxesCsvImportBodyTax2JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportBodyTax2JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type TaxesCsvImportBodyTax1JurisType =
  (typeof TaxesCsvImportBodyTax1JurisType)[keyof typeof TaxesCsvImportBodyTax1JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportBodyTax1JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type TaxesCsvImportBody = {
  tax_profile_name?: string;
  country?: string;
  state?: string;
  zip_code?: string;
  zip_code_start?: number;
  zip_code_end?: number;
  tax1_name?: string;
  tax1_rate?: number;
  tax1_juris_type?: TaxesCsvImportBodyTax1JurisType;
  tax1_juris_name?: string;
  tax1_juris_code?: string;
  tax2_name?: string;
  tax2_rate?: number;
  tax2_juris_type?: TaxesCsvImportBodyTax2JurisType;
  tax2_juris_name?: string;
  tax2_juris_code?: string;
  tax3_name?: string;
  tax3_rate?: number;
  tax3_juris_type?: TaxesCsvImportBodyTax3JurisType;
  tax3_juris_name?: string;
  tax3_juris_code?: string;
  tax4_name?: string;
  tax4_rate?: number;
  tax4_juris_type?: TaxesCsvImportBodyTax4JurisType;
  tax4_juris_name?: string;
  tax4_juris_code?: string;
  service_type?: TaxesCsvImportBodyServiceType;
  time_zone?: string;
  valid_from?: number;
  valid_till?: number;
  overwrite?: boolean;
};

export type TaxesCsvImportChargebeeEventWebhook =
  (typeof TaxesCsvImportChargebeeEventWebhook)[keyof typeof TaxesCsvImportChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type TaxesCsvImportChargebeeEventEmail =
  (typeof TaxesCsvImportChargebeeEventEmail)[keyof typeof TaxesCsvImportChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type TaxesCsvImportChargebeeEventActions =
  (typeof TaxesCsvImportChargebeeEventActions)[keyof typeof TaxesCsvImportChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxesCsvImportChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type TaxesCsvImportHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: TaxesCsvImportChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: TaxesCsvImportChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: TaxesCsvImportChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAVoucherForTheCustomerToInitiatePayment200 = {
  payment_voucher: PaymentVoucher;
};

/**
 * Parameters for \`invoice_allocations\`

 */
export type CreateAVoucherForTheCustomerToInitiatePaymentBodyInvoiceAllocations =
  {
    /** The unique identifier of the invoice. You can pass multiple invoices IDs.
     */
    invoice_id: string[];
  };

/**
 * The type of voucher-based payment source. \* boleto - The payment source is Boleto.

 */
export type CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSourceVoucherType =
  (typeof CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSourceVoucherType)[keyof typeof CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSourceVoucherType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSourceVoucherType =
  {
    boleto: "boleto",
  } as const;

/**
 * Parameters for voucher_payment_source

 */
export type CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSource =
  {
    /** The type of voucher-based payment source. \* boleto - The payment source is Boleto.
     */
    voucher_type: CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSourceVoucherType;
  };

export type CreateAVoucherForTheCustomerToInitiatePaymentBody = {
  /** The unique identifier of the customer for whom you want to create the voucher.
   */
  customer_id: string;
  /** The identifier of the payment source used for generating the voucher.
   */
  payment_source_id?: string;
  /** Parameters for voucher_payment_source
   */
  voucher_payment_source?: CreateAVoucherForTheCustomerToInitiatePaymentBodyVoucherPaymentSource;
  /** Parameters for \`invoice_allocations\`
   */
  invoice_allocations?: CreateAVoucherForTheCustomerToInitiatePaymentBodyInvoiceAllocations;
};

export type CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventWebhook =
  (typeof CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventWebhook)[keyof typeof CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventWebhook =
  {
    "all-disabled": "all-disabled",
  } as const;

export type CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventEmail =
  (typeof CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventEmail)[keyof typeof CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventEmail =
  {
    "all-disabled": "all-disabled",
  } as const;

export type CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventActions =
  (typeof CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventActions)[keyof typeof CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventActions =
  {
    "all-disabled": "all-disabled",
  } as const;

export type CreateAVoucherForTheCustomerToInitiatePaymentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAVoucherForTheCustomerToInitiatePaymentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveVoucherData200 = {
  payment_voucher: PaymentVoucher;
};

export type RetrieveVoucherDataHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListVouchersForAnInvoice200ListItem = {
  payment_voucher: PaymentVoucher;
};

export type ListVouchersForAnInvoice200 = {
  list: ListVouchersForAnInvoice200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListVouchersForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListVouchersForAnInvoiceSortByDesc =
  (typeof ListVouchersForAnInvoiceSortByDesc)[keyof typeof ListVouchersForAnInvoiceSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForAnInvoiceSortByDesc = {
  date: "date",
  updated_at: "updated_at",
} as const;

export type ListVouchersForAnInvoiceSortByAsc =
  (typeof ListVouchersForAnInvoiceSortByAsc)[keyof typeof ListVouchersForAnInvoiceSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForAnInvoiceSortByAsc = {
  date: "date",
  updated_at: "updated_at",
} as const;

/**
 * \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection

 */
export type ListVouchersForAnInvoiceStatusIsNot =
  (typeof ListVouchersForAnInvoiceStatusIsNot)[keyof typeof ListVouchersForAnInvoiceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForAnInvoiceStatusIsNot = {
  active: "active",
  consumed: "consumed",
  expired: "expired",
  failure: "failure",
} as const;

/**
 * \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection

 */
export type ListVouchersForAnInvoiceStatusIs =
  (typeof ListVouchersForAnInvoiceStatusIs)[keyof typeof ListVouchersForAnInvoiceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForAnInvoiceStatusIs = {
  active: "active",
  consumed: "consumed",
  expired: "expired",
  failure: "failure",
} as const;

export type ListVouchersForAnInvoiceParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current status of Payment Voucher. Possible values are : <dfn>active, consumed, expired, failure.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is_not] = "active, consumed, expired"</i>
   */
  status?: {
    /** \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection
     */
    is?: ListVouchersForAnInvoiceStatusIs;
    /** \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection
     */
    is_not?: ListVouchersForAnInvoiceStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>date, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "date"</i><br>This will sort the result based on the 'date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListVouchersForAnInvoiceSortByAsc;
    desc?: ListVouchersForAnInvoiceSortByDesc;
  };
};

export type ListVouchersForACustomer200ListItem = {
  payment_voucher: PaymentVoucher;
};

export type ListVouchersForACustomer200 = {
  list: ListVouchersForACustomer200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListVouchersForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListVouchersForACustomerSortByDesc =
  (typeof ListVouchersForACustomerSortByDesc)[keyof typeof ListVouchersForACustomerSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForACustomerSortByDesc = {
  date: "date",
  updated_at: "updated_at",
} as const;

export type ListVouchersForACustomerSortByAsc =
  (typeof ListVouchersForACustomerSortByAsc)[keyof typeof ListVouchersForACustomerSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForACustomerSortByAsc = {
  date: "date",
  updated_at: "updated_at",
} as const;

/**
 * \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection

 */
export type ListVouchersForACustomerStatusIsNot =
  (typeof ListVouchersForACustomerStatusIsNot)[keyof typeof ListVouchersForACustomerStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForACustomerStatusIsNot = {
  active: "active",
  consumed: "consumed",
  expired: "expired",
  failure: "failure",
} as const;

/**
 * \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection

 */
export type ListVouchersForACustomerStatusIs =
  (typeof ListVouchersForACustomerStatusIs)[keyof typeof ListVouchersForACustomerStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListVouchersForACustomerStatusIs = {
  active: "active",
  consumed: "consumed",
  expired: "expired",
  failure: "failure",
} as const;

export type ListVouchersForACustomerParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current status of Payment Voucher. Possible values are : <dfn>active, consumed, expired, failure.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "active, consumed, expired"</i>
   */
  status?: {
    /** \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection
     */
    is?: ListVouchersForACustomerStatusIs;
    /** \* \`active\` - Active and ready to be consumed \* \`consumed\` - Consumed for a transaction and cannot be used again \* \`expired\` - Expired before consumed and cannot be used again \* \`failure\` - Failed to create the voucher due to gateway rejection
     */
    is_not?: ListVouchersForACustomerStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>date, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "date"</i><br>This will sort the result based on the 'date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListVouchersForACustomerSortByAsc;
    desc?: ListVouchersForACustomerSortByDesc;
  };
};

export type EstimatesForPurchase200 = {
  estimate: Estimate;
};

/**
 * Parameters for subscription_info

 */
export type EstimatesForPurchaseBodySubscriptionInfo = {
  /** The index or identifier of the [group](#groups) to which this subscription information belongs. This must be a value from the `purchase_items[index]` array and the group must be a [subscription group](#subscription).
   */
  index: number[];
  /** When specifying a [subscription group](#subscription), this is the unique identifier of the [subscription](subscriptions) to be created. This value must be unique for each subscription group.
   */
  subscription_id?: string[];
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number[];
};

/**
 * Parameters for discounts

 */
export type EstimatesForPurchaseBodyDiscounts = {
  /** The index or identifier of the [group](#groups) to which this discount or coupon information belongs.

This must be a value from the `purchase_items[index]` array. When not provided, the coupon is applied to the first invoice only; irrespective of the values set for [coupon.duration_type](https://apidocs.chargebee.com/docs/api/coupons?prod_cat_ver=2#coupon_duration_type)or [coupon.max_redemptions](https://apidocs.chargebee.com/docs/api/coupons?prod_cat_ver=2#coupon_max_redemptions).  
**See also:**


[Applying discounts](#discounts)
 */
  index?: number[];
  /** The unique ID of a coupon to be applied to the group. Alternatively, you may provide a [coupon code](coupon_codes). Applicable only for <coupons>.  
**See also:**

[Applying discounts](#discounts)
 */
  coupon_id?: string[];
  /** The percentage of the discount. Applicable only for [manual discounts](discounts). For any given array index `i`, you must either provide `discounts[percentage][i]` or `discounts[amount][i]` and never both.  
**See also:**

[Applying discounts](#discounts)
 */
  percentage?: number[];
  /** The absolute value of the discount. The currency units in which this value is expressed [depends](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#handling_currency_units) on the type of currency. Applicable only for [manual discounts](discounts).

For any given array index `i`, you must either provide `discounts[percentage][i]` or `discounts[amount][i]` and never both.  
**See also:**

[Applying discounts](#discounts)
 */
  amount?: number[];
  /** For [manual discounts](discounts), set this to `false` if this manual discount should be excluded from monthly recurring revenue (MRR) calculations for the site. The following prerequisites must be met to allow this parameter to be passed:

* The feature must be [enabled in Chargebee](https://www.chargebee.com/docs/2.0/reporting.html#dashboards_flexible-mrr-calculation).
* The [site-level](https://www.chargebee.com/docs/2.0/reporting.html#chart_flexible-mrr-calculation) setting must be to include coupons in MRR calculations.



**See also:**

[Applying discounts](#discounts)
 */
  included_in_mrr?: boolean[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* valid - Address was validated successfully. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type EstimatesForPurchaseBodyShippingAddressesValidationStatusItem =
  (typeof EstimatesForPurchaseBodyShippingAddressesValidationStatusItem)[keyof typeof EstimatesForPurchaseBodyShippingAddressesValidationStatusItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseBodyShippingAddressesValidationStatusItem = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_addresses

 */
export type EstimatesForPurchaseBodyShippingAddresses = {
  /** The first name of the contact. This parameter is `mandatory` when providing shipping information.
   */
  first_name?: string[];
  /** The last name of the contact. This parameter is `mandatory` when providing shipping information.
   */
  last_name?: string[];
  /** The email address.
   */
  email?: string[];
  /** The company name.
   */
  company?: string[];
  /** The phone number.
   */
  phone?: string[];
  /** Address line 1. This parameter is `mandatory` when providing shipping information.
   */
  line1?: string[];
  /** Address line 2
   */
  line2?: string[];
  /** Address line 3
   */
  line3?: string[];
  /** The name of the city. This parameter is `mandatory` when providing shipping information.
   */
  city?: string[];
  /** The state/province name.
   */
  state?: string[];
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string[];
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html). This parameter is `mandatory` when providing shipping information.   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string[];
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address). This parameter is `mandatory` when providing shipping information.
   */
  zip?: string[];
  validation_status?: EstimatesForPurchaseBodyShippingAddressesValidationStatusItem[];
};

/**
 * Parameters for item_tiers

 */
export type EstimatesForPurchaseBodyItemTiers = {
  /** The index or identifier of the [group](#groups) to which this tier information belongs. This must be a value from the `purchase_items[index]` array.
   */
  index: number[];
  /** The unique ID of the item price to which this tier information belongs. This must be a value from the `purchase_items[item_price_id]` array.
   */
  item_price_id?: string[];
  /** The lowest value of quantity in this tier; this is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the very next lower tier.
   */
  starting_unit?: number[];
  /** The highest value of quantity in this tier. For all other tiers,it must be equal to the `starting_unit_in_decimal` of the very next higher tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the total price of the item. The currency units in which this value is expressed [depends](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#handling_currency_units) on the type of currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for purchase_items

 */
export type EstimatesForPurchaseBodyPurchaseItems = {
  /** The index or identifier of the [group](#groups) to which the item price belongs. The item prices assigned the same index belong to the same group.
   */
  index: number[];
  /** The unique identifier of the [item price](item_prices) to be added to the [group](#groups).
   */
  item_price_id: string[];
  /** The quantity of the item price. Applicable only when the [pricing model](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_pricing_model) of the item price is anything other than `flat_fee`. You can provide this value whether [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled or disabled.
   */
  quantity?: number[];
  /** The price or per unit price of the item. You may provide this only when [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site.
   */
  unit_amount?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_amount_in_decimal?: string[];
  /** The decimal representation of the quantity of the item purchased. By default [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled for purchase API, it is recommended to use the `purchase_items[quantity_in_decimal][0..n]` for providing quantity-based item prices when multi-decimal pricing is enabled. When multi-decimal pricing is disabled provide the value in `purchase_items[quantity][0..n]`.
   */
  quantity_in_decimal?: string[];
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type EstimatesForPurchaseBodyBillingAddressValidationStatus =
  (typeof EstimatesForPurchaseBodyBillingAddressValidationStatus)[keyof typeof EstimatesForPurchaseBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type EstimatesForPurchaseBodyBillingAddress = {
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: EstimatesForPurchaseBodyBillingAddressValidationStatus;
};

export type EstimatesForPurchaseBody = {
  /** Indicates the Client profile id for the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  client_profile_id?: string;
  /** The unique identifier of the [customer](https://apidocs.chargebee.com/docs/api/customers) that made this purchase.
   */
  customer_id?: string;
  /** Parameters for customer
   */
  customer?: EstimatesForPurchaseBodyCustomer;
  /** Parameters for billing_address
   */
  billing_address?: EstimatesForPurchaseBodyBillingAddress;
  /** Parameters for purchase_items
   */
  purchase_items?: EstimatesForPurchaseBodyPurchaseItems;
  /** Parameters for item_tiers
   */
  item_tiers?: EstimatesForPurchaseBodyItemTiers;
  /** Parameters for shipping_addresses
   */
  shipping_addresses?: EstimatesForPurchaseBodyShippingAddresses;
  /** Parameters for discounts
   */
  discounts?: EstimatesForPurchaseBodyDiscounts;
  /** Parameters for subscription_info
   */
  subscription_info?: EstimatesForPurchaseBodySubscriptionInfo;
};

/**
 * Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use \* industrial - When the purchase is made by an industrial business \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks

 */
export type EstimatesForPurchaseBodyCustomerCustomerType =
  (typeof EstimatesForPurchaseBodyCustomerCustomerType)[keyof typeof EstimatesForPurchaseBodyCustomerCustomerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseBodyCustomerCustomerType = {
  residential: "residential",
  business: "business",
  senior_citizen: "senior_citizen",
  industrial: "industrial",
} as const;

/**
 * The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* b - State government \* c - Tribe/Status Indian/Indian Band \* a - Federal government \* f - Religious organization \* g - Resale \* d - Foreign diplomat \* e - Charitable or benevolent organization \* j - Direct pay permit \* k - Direct mail \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* n - Local government \* l - Other or custom \* m - Educational organization \* r - Non-resident \* p - Commercial aquaculture \* q - Commercial Fishery

 */
export type EstimatesForPurchaseBodyCustomerEntityCode =
  (typeof EstimatesForPurchaseBodyCustomerEntityCode)[keyof typeof EstimatesForPurchaseBodyCustomerEntityCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseBodyCustomerEntityCode = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
  f: "f",
  g: "g",
  h: "h",
  i: "i",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "n",
  p: "p",
  q: "q",
  r: "r",
  med1: "med1",
  med2: "med2",
} as const;

/**
 * Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.

 */
export type EstimatesForPurchaseBodyCustomerTaxability =
  (typeof EstimatesForPurchaseBodyCustomerTaxability)[keyof typeof EstimatesForPurchaseBodyCustomerTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseBodyCustomerTaxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Parameters for customer

 */
export type EstimatesForPurchaseBodyCustomer = {
  /** VAT number of this customer. If not provided then taxes are not calculated for the estimate. Applicable only when taxes are configured for the EU or UK region. VAT validation is not done for this.
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
  /** Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.
 */
  taxability?: EstimatesForPurchaseBodyCustomerTaxability;
  /** The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* b - State government \* c - Tribe/Status Indian/Indian Band \* a - Federal government \* f - Religious organization \* g - Resale \* d - Foreign diplomat \* e - Charitable or benevolent organization \* j - Direct pay permit \* k - Direct mail \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* n - Local government \* l - Other or custom \* m - Educational organization \* r - Non-resident \* p - Commercial aquaculture \* q - Commercial Fishery
   */
  entity_code?: EstimatesForPurchaseBodyCustomerEntityCode;
  /** Any string value that will cause the sale to be exempted. Use this if your finance team manually verifies and tracks exemption certificates. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption).
   */
  exempt_number?: string;
  /** Indicates the exemption information. You can customize customer exemption based on specific Location, Tax level (Federal, State, County and Local), Category of Tax or specific Tax Name. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.  
To know more about what values you need to provide, refer to this [Avalara's API document](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/exemption/).
 */
  exemption_details?: unknown[];
  /** Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use \* industrial - When the purchase is made by an industrial business \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks
   */
  customer_type?: EstimatesForPurchaseBodyCustomerCustomerType;
};

export type EstimatesForPurchaseChargebeeEventWebhook =
  (typeof EstimatesForPurchaseChargebeeEventWebhook)[keyof typeof EstimatesForPurchaseChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EstimatesForPurchaseChargebeeEventEmail =
  (typeof EstimatesForPurchaseChargebeeEventEmail)[keyof typeof EstimatesForPurchaseChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EstimatesForPurchaseChargebeeEventActions =
  (typeof EstimatesForPurchaseChargebeeEventActions)[keyof typeof EstimatesForPurchaseChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimatesForPurchaseChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EstimatesForPurchaseHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EstimatesForPurchaseChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EstimatesForPurchaseChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EstimatesForPurchaseChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAPurchase200 = {
  purchase: Purchase;
};

export type CreateAPurchaseBodySubscriptionInfoMetaDataItem = {
  [key: string]: any;
};

/**
 * Parameters for subscription_info

 */
export type CreateAPurchaseBodySubscriptionInfo = {
  /** The index or identifier of the [group](#groups) to which this subscription information belongs. This must be a value from the `purchase_items[index]` array and the group must be a [subscription group](#subscription).
   */
  index: number[];
  /** When specifying a [subscription group](#subscription), this is the unique identifier of the [subscription](subscriptions) to be created. This value must be unique for each subscription group.
   */
  subscription_id?: string[];
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number[];
  /** A set of key-value pairs stored as additional information for the subscription. [Learn more](./#meta_data).
   */
  meta_data?: CreateAPurchaseBodySubscriptionInfoMetaDataItem[];
};

/**
 * Parameters for discounts

 */
export type CreateAPurchaseBodyDiscounts = {
  /** The index or identifier of the [group](#groups) to which this discount or coupon information belongs.

This must be a value from the `purchase_items[index]` array. When not provided, the coupon is applied to the first invoice only; irrespective of the values set for [coupon.duration_type](https://apidocs.chargebee.com/docs/api/coupons?prod_cat_ver=2#coupon_duration_type)or [coupon.max_redemptions](https://apidocs.chargebee.com/docs/api/coupons?prod_cat_ver=2#coupon_max_redemptions).  
**See also:**


[Applying discounts](#discounts)
 */
  index?: number[];
  /** The unique ID of a coupon to be applied to the group. Alternatively, you may provide a [coupon code](coupon_codes). Applicable only for <coupons>.  
**See also:**

[Applying discounts](#discounts)
 */
  coupon_id?: string[];
  /** The percentage of the discount. Applicable only for [manual discounts](discounts). For any given array index `i`, you must either provide `discounts[percentage][i]` or `discounts[amount][i]` and never both.  
**See also:**

[Applying discounts](#discounts)
 */
  percentage?: number[];
  /** The absolute value of the discount. The currency units in which this value is expressed [depends](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#handling_currency_units) on the type of currency. Applicable only for [manual discounts](discounts).

For any given array index `i`, you must either provide `discounts[percentage][i]` or `discounts[amount][i]` and never both.  
**See also:**

[Applying discounts](#discounts)
 */
  amount?: number[];
  /** For [manual discounts](discounts), set this to `false` if this manual discount should be excluded from monthly recurring revenue (MRR) calculations for the site. The following prerequisites must be met to allow this parameter to be passed:

* The feature must be [enabled in Chargebee](https://www.chargebee.com/docs/2.0/reporting.html#dashboards_flexible-mrr-calculation).
* The [site-level](https://www.chargebee.com/docs/2.0/reporting.html#chart_flexible-mrr-calculation) setting must be to include coupons in MRR calculations.



**See also:**

[Applying discounts](#discounts)
 */
  included_in_mrr?: boolean[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* valid - Address was validated successfully. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CreateAPurchaseBodyShippingAddressesValidationStatusItem =
  (typeof CreateAPurchaseBodyShippingAddressesValidationStatusItem)[keyof typeof CreateAPurchaseBodyShippingAddressesValidationStatusItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPurchaseBodyShippingAddressesValidationStatusItem = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_addresses

 */
export type CreateAPurchaseBodyShippingAddresses = {
  /** The first name of the contact. This parameter is `mandatory` when providing shipping information.
   */
  first_name?: string[];
  /** The last name of the contact. This parameter is `mandatory` when providing shipping information.
   */
  last_name?: string[];
  /** The email address.
   */
  email?: string[];
  /** The company name.
   */
  company?: string[];
  /** The phone number.
   */
  phone?: string[];
  /** Address line 1. This parameter is `mandatory` when providing shipping information.
   */
  line1?: string[];
  /** Address line 2
   */
  line2?: string[];
  /** Address line 3
   */
  line3?: string[];
  /** The name of the city. This parameter is `mandatory` when providing shipping information.
   */
  city?: string[];
  /** The state/province name.
   */
  state?: string[];
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string[];
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html). This parameter is `mandatory` when providing shipping information.   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string[];
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address). This parameter is `mandatory` when providing shipping information.
   */
  zip?: string[];
  validation_status?: CreateAPurchaseBodyShippingAddressesValidationStatusItem[];
};

/**
 * Parameters for item_tiers

 */
export type CreateAPurchaseBodyItemTiers = {
  /** The index or identifier of the [group](#groups) to which this tier information belongs. This must be a value from the `purchase_items[index]` array.
   */
  index: number[];
  /** The unique ID of the item price to which this tier information belongs. This must be a value from the `purchase_items[item_price_id]` array.
   */
  item_price_id?: string[];
  /** The lowest value of quantity in this tier; this is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the very next lower tier.
   */
  starting_unit?: number[];
  /** The highest value of quantity in this tier. For all other tiers,it must be equal to the `starting_unit_in_decimal` of the very next higher tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the total price of the item. The currency units in which this value is expressed [depends](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#handling_currency_units) on the type of currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for purchase_items

 */
export type CreateAPurchaseBodyPurchaseItems = {
  /** The index or identifier of the [group](#groups) to which the item price belongs. The item prices assigned the same index belong to the same group.
   */
  index: number[];
  /** The unique identifier of the [item price](item_prices) to be added to the [group](#groups).
   */
  item_price_id: string[];
  /** The quantity of the item price. Applicable only when the [pricing model](\"https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_pricing_model\"\) of the item price is anything other than `flat_fee`. You can provide this value whether [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled or disabled.
   */
  quantity?: number[];
  /** The price or per unit price of the item. You may provide this only when [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site.
   */
  unit_amount?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_amount_in_decimal?: string[];
  /** The decimal representation of the quantity of the item purchased. By default [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled for purchase API, it is recommended to use the `purchase_items[quantity_in_decimal][0..n]` for providing quantity-based item prices when multi-decimal pricing is enabled. When multi-decimal pricing is disabled provide the value in `purchase_items[quantity][0..n]`.
   */
  quantity_in_decimal?: string[];
};

/**
 * Parameters for invoice_info

 */
export type CreateAPurchaseBodyInvoiceInfo = {
  /** The [purchase order number](https://www.chargebee.com/docs/2.0/po-number.html) for this purchase. This is reflected in all the subscriptions and invoices under this purchase.
   */
  po_number?: string;
  /** A customer-facing note added to the PDF of the first invoice associated with this purchase. This is added to [invoice.notes](https://apidocs.chargebee.com/docs/api/invoices#invoice_notes). Subsequent invoices do not have this note.
   */
  notes?: string;
};

export type CreateAPurchaseBody = {
  /** The unique identifier of the [customer](https://apidocs.chargebee.com/docs/api/customers) that made this purchase.
   */
  customer_id: string;
  /** Parameters for invoice_info
   */
  invoice_info?: CreateAPurchaseBodyInvoiceInfo;
  /** Parameters for purchase_items
   */
  purchase_items?: CreateAPurchaseBodyPurchaseItems;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateAPurchaseBodyItemTiers;
  /** Parameters for shipping_addresses
   */
  shipping_addresses?: CreateAPurchaseBodyShippingAddresses;
  /** Parameters for discounts
   */
  discounts?: CreateAPurchaseBodyDiscounts;
  /** Parameters for subscription_info
   */
  subscription_info?: CreateAPurchaseBodySubscriptionInfo;
};

export type CreateAPurchaseChargebeeEventWebhook =
  (typeof CreateAPurchaseChargebeeEventWebhook)[keyof typeof CreateAPurchaseChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPurchaseChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPurchaseChargebeeEventEmail =
  (typeof CreateAPurchaseChargebeeEventEmail)[keyof typeof CreateAPurchaseChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPurchaseChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPurchaseChargebeeEventActions =
  (typeof CreateAPurchaseChargebeeEventActions)[keyof typeof CreateAPurchaseChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPurchaseChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPurchaseHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAPurchaseChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAPurchaseChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAPurchaseChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpsertRemoveEntitlementOverridesForASubscription200 = {
  entitlement_override: EntitlementOverride;
};

/**
 * Parameters for entitlement_overrides

 */
export type UpsertRemoveEntitlementOverridesForASubscriptionBodyEntitlementOverrides =
  {
    /** The `id` of the `feature` towards which this entitlement override has been granted.
     */
    feature_id: string[];
    /** The level of entitlement that the item has towards the feature. The possible values depend on the value of `feature.type`:

* When `feature.type` is `quantity` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any one of `feature.levels[value][]`.
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can also be:
    * any one of `feature.levels[value][]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `range` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any whole number between `levels[value][0]` and `levels[value][1]` (inclusive).
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can be:
    * any whole number equal to or greater than `levels[value][0]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `custom`, then the value can be any one of `feature.levels[value][]`.
* When `type` is `switch`, then the value is set as `true` if the feature is available; it is set as `false` when the feature is unavailable.
 */
    value?: string[];
    /** The expiry date for the `entitlement_override`. When not passed, the `entitlement_override` does not expire. This must be a value in the future and is relevant only when the [action](/docs/api/entitlement_overrides#upsert/remove_entitlement_overrides_for_a_subscription_action) is `upsert`. The `entitlement_override` object is no longer returned after this date has passed.
     */
    expires_at?: number[];
  };

/**
 * The specific action to be performed for each `entitlement_override` specified. . \* remove - Deletes the `entitlement_override` for the `feature_id` and `item_id` combination, if it exists. \* upsert - If the `entitlement_override` already exists for the `feature_id` and `{subscription_id}` combination, the `value` of the `entitlement_override` is updated. If it doesn't exist, a new `entitlement_override` is created.

 */
export type UpsertRemoveEntitlementOverridesForASubscriptionBodyAction =
  (typeof UpsertRemoveEntitlementOverridesForASubscriptionBodyAction)[keyof typeof UpsertRemoveEntitlementOverridesForASubscriptionBodyAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertRemoveEntitlementOverridesForASubscriptionBodyAction = {
  upsert: "upsert",
  remove: "remove",
} as const;

export type UpsertRemoveEntitlementOverridesForASubscriptionBody = {
  /** The specific action to be performed for each `entitlement_override` specified. . \* remove - Deletes the `entitlement_override` for the `feature_id` and `item_id` combination, if it exists. \* upsert - If the `entitlement_override` already exists for the `feature_id` and `{subscription_id}` combination, the `value` of the `entitlement_override` is updated. If it doesn't exist, a new `entitlement_override` is created.
   */
  action?: UpsertRemoveEntitlementOverridesForASubscriptionBodyAction;
  /** Parameters for entitlement_overrides
   */
  entitlement_overrides?: UpsertRemoveEntitlementOverridesForASubscriptionBodyEntitlementOverrides;
};

export type UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventWebhook =
  (typeof UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventWebhook)[keyof typeof UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventWebhook =
  {
    "all-disabled": "all-disabled",
  } as const;

export type UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventEmail =
  (typeof UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventEmail)[keyof typeof UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventEmail =
  {
    "all-disabled": "all-disabled",
  } as const;

export type UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventActions =
  (typeof UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventActions)[keyof typeof UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventActions =
  {
    "all-disabled": "all-disabled",
  } as const;

export type UpsertRemoveEntitlementOverridesForASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpsertRemoveEntitlementOverridesForASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListEntitlementOverridesForASubscription200ListItem = {
  entitlement_override: EntitlementOverride;
};

export type ListEntitlementOverridesForASubscription200 = {
  list: ListEntitlementOverridesForASubscription200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListEntitlementOverridesForASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListEntitlementOverridesForASubscriptionParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type OneTimePurchase200 = {
  non_subscription: NonSubscription;
};

/**
 * Parameters for customer

 */
export type OneTimePurchaseBodyCustomer = {
  /** **Google Play Store** : The unique [id](/docs/api/customers#create_a_customer_id) in Chargebee for the customer who made this purchase via Google Play Store. If not provided, a random unique ID generated for the purchase token will be the `customer[id]`. If the customer record is not found in Chargebee, it is created.   

**Apple App Store** : The unique [id](/docs/api/customers#create_a_customer_id) in Chargebee for the customer who made this purchase. If not provided, the value is considered to be [original_transaction_id](https://developer.apple.com/documentation/appstorereceipts/original_transaction_id?language=objc) (the transaction identifier at Apple, of the original purchase). If the customer record is not found in Chargebee, it is created.
 */
  id?: string;
  /** The email address of the customer who made the purchase.
   */
  email?: string;
  /** The first name of the customer who made the purchase.
   */
  first_name?: string;
  /** The last name of the customer who made the purchase.
   */
  last_name?: string;
};

/**
 * The type of product for one time purchase.
\* consumable -

This value represents a type of one-time purchase that provides users with in-app benefits or effects that can be consumed or depleted over time, such as lives, gems, boosts, or digital tips. Once consumed, the purchased item is no longer available and must be repurchased to obtain its benefits again.
\* non_consumable -

The value represents a type of in-app purchase that provides a permanent benefit to the user and can be purchased once without expiration. This type of purchase is typically used to offer premium features or content that enhance the user experience of the app, such as additional filters or cosmetic items in a game.
\* non_renewing_subscription -

The value represents a type of subscription that grants access to services or content for a limited period of time, such as a season pass to in-game content. Unlike other subscription models, this type of subscription does not renew automatically and requires people to purchase a new subscription once it concludes to continue accessing the content or services.

 */
export type OneTimePurchaseBodyProductType =
  (typeof OneTimePurchaseBodyProductType)[keyof typeof OneTimePurchaseBodyProductType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OneTimePurchaseBodyProductType = {
  consumable: "consumable",
  non_consumable: "non_consumable",
  non_renewing_subscription: "non_renewing_subscription",
} as const;

/**
 * Parameters for product

 */
export type OneTimePurchaseBodyProduct = {
  /** **Google Play Store** : The unique identifier of the product purchased. The value of this parameter is the `productId` or `sku` received from the [Google Play Store](https://developers.google.com/android-publisher/api-ref/rest/v3/inappproducts/get).   

**Apple App Store** : The [unique identifier](https://developer.apple.com/documentation/storekit/product/id/) (created in [App Store Connect](https://appstoreconnect.apple.com/login)) of the product purchased.
 */
  id: string;
  /** **Google Play Store** : This parameter is **not applicable** to the **Google Play Store** . If the value is passed, it will return a validation error.   

**Apple App Store** : The currency code (ISO 4217 format) for the product.   
 */
  currency_code: string;
  /** **Google Play Store** : This parameter is **not applicable** to the **Google Play Store** . If the value is passed, it will return a validation error.   

**Apple App Store** : The price paid by the customer for this product. The unit [depends on the type of currency](/docs/api#md_disabled). Provide either this or `product[price_in_decimal]`.
 */
  price: number;
  /** The type of product for one time purchase.
\* consumable -

This value represents a type of one-time purchase that provides users with in-app benefits or effects that can be consumed or depleted over time, such as lives, gems, boosts, or digital tips. Once consumed, the purchased item is no longer available and must be repurchased to obtain its benefits again.
\* non_consumable -

The value represents a type of in-app purchase that provides a permanent benefit to the user and can be purchased once without expiration. This type of purchase is typically used to offer premium features or content that enhance the user experience of the app, such as additional filters or cosmetic items in a game.
\* non_renewing_subscription -

The value represents a type of subscription that grants access to services or content for a limited period of time, such as a season pass to in-game content. Unlike other subscription models, this type of subscription does not renew automatically and requires people to purchase a new subscription once it concludes to continue accessing the content or services.
 */
  type: OneTimePurchaseBodyProductType;
  /** **Google Play Store** : The name (created in [Play Store Console](https://play.google.com/console/about/)) of the product purchased. If not passed then the `product[id]` will be considered as the value of `product[name]`.   

**Apple App Store** : The name (created in [App Store Connect](https://appstoreconnect.apple.com/login)) of the product purchased.
 */
  name?: string;
  /** **Google Play Store** : This parameter is **not applicable** to the **Google Play Store** . If the value is passed, it will return a validation error.  

**Apple App Store** : The price paid by the customer for the product. The value is in decimal and in major units of the currency. Provide either this or `product[price]`.
 */
  price_in_decimal?: string;
};

export type OneTimePurchaseBody = {
  /** **Google Play Store** : The purchase `token` taken from the Android device after successful creation of the in-app purchase.   

**Apple App Store** : The Base64 encoded [App Store in-app purchase receipt](https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store?language=objc#overview) taken from the Apple device after successful creation of the in-app purchase.
 */
  receipt: string;
  /** Parameters for product
   */
  product?: OneTimePurchaseBodyProduct;
  /** Parameters for customer
   */
  customer?: OneTimePurchaseBodyCustomer;
};

export type OneTimePurchaseChargebeeEventWebhook =
  (typeof OneTimePurchaseChargebeeEventWebhook)[keyof typeof OneTimePurchaseChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OneTimePurchaseChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type OneTimePurchaseChargebeeEventEmail =
  (typeof OneTimePurchaseChargebeeEventEmail)[keyof typeof OneTimePurchaseChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OneTimePurchaseChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type OneTimePurchaseChargebeeEventActions =
  (typeof OneTimePurchaseChargebeeEventActions)[keyof typeof OneTimePurchaseChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OneTimePurchaseChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type OneTimePurchaseHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: OneTimePurchaseChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: OneTimePurchaseChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: OneTimePurchaseChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ProcessPurchaseCommand200 = {
  in_app_subscription: InAppSubscription;
};

/**
 * Parameters for customer

 */
export type ProcessPurchaseCommandBodyCustomer = {
  /** **Google Play Store** : The unique [id](/docs/api/customers#create_a_customer_id) in Chargebee for the customer who made this purchase via Google Play Store. If not provided, `subscription_id` (random unique id) will be the `customer[id]`. If the customer record is not found in Chargebee, it is created.   
optional, string, max chars=50   

**Apple App Store** : The unique [id](/docs/api/customers#create_a_customer_id) in Chargebee for the customer who made this purchase. If not provided, the value is considered to be [original_transaction_id](https://developer.apple.com/documentation/appstorereceipts/original_transaction_id?language=objc) (the transaction identifier at Apple, of the original purchase). If the customer record is not found in Chargebee, it is created.
 */
  id?: string;
  /** The email address of the customer who made the purchase.
   */
  email?: string;
  /** The first name of the customer who made the purchase.
   */
  first_name?: string;
  /** The last name of the customer who made the purchase.
   */
  last_name?: string;
};

/**
 * Parameters for product

 */
export type ProcessPurchaseCommandBodyProduct = {
  /** **Google Play Store** : The unique identifier of the product purchased. The value of this parameter is the `productId`/`subscriptionId` or `sku` received from the [Google Play Store](https://developers.google.com/android-publisher/api-ref/rest/v3/inappproducts/get).   
required, string, max chars=96   

**Apple App Store** : The [unique identifier](https://developer.apple.com/documentation/storekit/product/id/) (created in [App Store Connect](https://appstoreconnect.apple.com/login)) of the product purchased.
 */
  id: string;
  /** **Google Play Store** : This parameter is **not applicable** to the Google Play Store. If the value is passed, it will return a validation error.   

**Apple App Store**: The currency code (ISO 4217 format) for the product.
 */
  currency_code: string;
  /** **Google Play Store** : This parameter is **not applicable** to the Google Play Store. If the value is passed, it will return a validation error.   

**Apple App Store** : The price paid by the customer for this product. The unit [depends on the type of currency](/docs/api#md_disabled). Provide either this or `product[price_in_decimal]`.
 */
  price: number;
  /** **Google Play Store** : The name (created in [Play Store Console](https://play.google.com/console/about/)) of the product purchased. If not passed then the `product[id]` will be considered as the value of `product[name]`.  
optional, string, max chars=46   

**Apple App Store** : The name (created in [App Store Connect](https://appstoreconnect.apple.com/login)) of the product purchased.
 */
  name?: string;
  /** **Google Play Store** : This parameter is **not applicable** to the Google Play Store. If the value is passed, it will return a validation error.   

**Apple App Store** : The price paid by the customer for the product. The value is in decimal and in major units of the currency. Provide either this or `product[price]`.
 */
  price_in_decimal?: string;
  /** **Google Play Store** : This parameter is **not applicable** to the Google Play Store. If the value is passed, it will return a validation error.   

**Apple App Store** : This is the renewal period of the subscription. For example, 1, 2, 3, and so on. This is an `optional` parameter. The parameter value is `required` if the product(s) are not imported to Chargebee from Apple App Store.
 */
  period?: string;
  /** **Google Play Store** : This parameter is **not applicable** to the Google Play Store. If the value is passed, it will return a validation error.   

**Apple App Store** : This is the unit of the renewal period. For example, `0` represents the `day`,`1` represents the `week`, `2` represents the `month`, and `3` represents the `year`. This is an `optional` parameter. The parameter value is `required` if the product(s) are not imported to Chargebee from Apple App Store.  
**Note**

Since the Apple App Store receipt does not have the subscription renewal period information for trial subscriptions, `product[period]` and `product[period_unit]` are needed, to create a subscription in Chargebee with the trial period. If these parameters are not passed and the receipt has trial information then Chargebee will return a validation error.
 */
  period_unit?: string;
};

export type ProcessPurchaseCommandBody = {
  /** **Apple App Store** : The Base64 encoded [App Store in-app purchase receipt](https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store?language=objc#overview) taken from the Apple device after successful creation of the in-app purchase subscription.

**Google Play Store** : The purchase `token` taken from the Android device after the successful creation of an in-app purchase subscription.
 */
  receipt: string;
  /** Parameters for product
   */
  product?: ProcessPurchaseCommandBodyProduct;
  /** Parameters for customer
   */
  customer?: ProcessPurchaseCommandBodyCustomer;
};

export type ProcessPurchaseCommandChargebeeEventWebhook =
  (typeof ProcessPurchaseCommandChargebeeEventWebhook)[keyof typeof ProcessPurchaseCommandChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProcessPurchaseCommandChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ProcessPurchaseCommandChargebeeEventEmail =
  (typeof ProcessPurchaseCommandChargebeeEventEmail)[keyof typeof ProcessPurchaseCommandChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProcessPurchaseCommandChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ProcessPurchaseCommandChargebeeEventActions =
  (typeof ProcessPurchaseCommandChargebeeEventActions)[keyof typeof ProcessPurchaseCommandChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProcessPurchaseCommandChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ProcessPurchaseCommandHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ProcessPurchaseCommandChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ProcessPurchaseCommandChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ProcessPurchaseCommandChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportSubscriptionWithoutReceipt200 = {
  in_app_subscription: InAppSubscription;
};

/**
 * Parameters for customer

 */
export type ImportSubscriptionWithoutReceiptBodyCustomer = {
  /** The unique [id](/docs/api/customers#create_a_customer_id) in Chargebee for the customer who made this purchase. If not provided, the value is considered to be [original_transaction_id](https://developer.apple.com/documentation/appstorereceipts/original_transaction_id?language=objc) (the transaction identifier at Apple, of the original purchase.). If the customer record is not found in Chargebee, it is created.
   */
  id?: string;
  /** The email ID of the customer who made this purchase.
   */
  email?: string;
};

/**
 * Parameters for subscription

 */
export type ImportSubscriptionWithoutReceiptBodySubscription = {
  /** This parameter is known as `original_transaction_id` in Apple App Store. You can get the value of `original_transaction_id` from the [`latest_receipt_info`](https://developer.apple.com/documentation/appstorereceipts/responsebody/latest_receipt_info). The `latest_receipt_info` is an array that contains all in-app purchase transactions.
   */
  id: string;
  /** The time at which the subscription has started or going to be started. You can find this value from the oldest `purchase_date_ms`.
   */
  started_at: number;
  /** Start date of the billing period for the subscription. You can find it from the `purchase_date_ms` field in receipt payload.
   */
  term_start: number;
  /** End date of the billing period for the subscription. You can find it from the `expires_date_ms` field in receipt payload.
   */
  term_end: number;
  /** The unique identifier of the product as configured in App Store Connect.
   */
  product_id: string;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) for the product.
   */
  currency_code: string;
  /** Transaction ID value as mentioned in the [`latest_receipt_info`](https://developer.apple.com/documentation/appstorereceipts/responsebody/latest_receipt_info). This must be unique across subscriptions.
   */
  transaction_id: string;
  /** Indicates if the subscription is in trial for the term start and term end. The default value is `false`.
   */
  is_trial?: boolean;
};

export type ImportSubscriptionWithoutReceiptBody = {
  /** Parameters for subscription
   */
  subscription?: ImportSubscriptionWithoutReceiptBodySubscription;
  /** Parameters for customer
   */
  customer?: ImportSubscriptionWithoutReceiptBodyCustomer;
};

export type ImportSubscriptionWithoutReceiptChargebeeEventWebhook =
  (typeof ImportSubscriptionWithoutReceiptChargebeeEventWebhook)[keyof typeof ImportSubscriptionWithoutReceiptChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionWithoutReceiptChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportSubscriptionWithoutReceiptChargebeeEventEmail =
  (typeof ImportSubscriptionWithoutReceiptChargebeeEventEmail)[keyof typeof ImportSubscriptionWithoutReceiptChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionWithoutReceiptChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportSubscriptionWithoutReceiptChargebeeEventActions =
  (typeof ImportSubscriptionWithoutReceiptChargebeeEventActions)[keyof typeof ImportSubscriptionWithoutReceiptChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionWithoutReceiptChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportSubscriptionWithoutReceiptHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportSubscriptionWithoutReceiptChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportSubscriptionWithoutReceiptChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportSubscriptionWithoutReceiptChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportReceipt200 = {
  in_app_subscriptions: InAppSubscription[];
};

/**
 * Parameters for customer

 */
export type ImportReceiptBodyCustomer = {
  /** **Apple App Store** : The unique `id` in Chargebee for the customer who made this purchase. If not provided, the value is considered to be `original_transaction_id` (the transaction identifier at Apple, of the original purchase). If the customer record is not found in Chargebee, it is created.

**Google Play Store** : The unique `id` of the customer who made this purchase via Google Play Store. This unique `id` will be used as customer ID within Chargebee. If not provided, `subscription_id` (random unique `id`) will be the customer ID. If the customer ID already exists in Chargebee then subscription will be associated with this customer ID.
 */
  id?: string;
  /** **Apple App Store**: The email ID of the customer who made this purchase.

**Google Play Store**: The email ID of the customer who made this purchase.
 */
  email?: string;
};

/**
 * Parameters for product

 */
export type ImportReceiptBodyProduct = {
  /** **Apple App Store** : The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) for the product.

**Google Play Store** : This parameter is **not applicable** to the Google Play Store. If the value is passed, it will return a validation error.
 */
  currency_code: string;
};

export type ImportReceiptBody = {
  /** **Apple App Store** : The Base64 encoded [App Store in-app purchase receipt](https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store?language=objc#overview) taken from the Apple device after successful creation of the in-app purchase subscription.

**Google Play Store** : The purchase `token` taken from the Android device after the successful creation of an in-app purchase subscription.
 */
  receipt: string;
  /** Parameters for product
   */
  product?: ImportReceiptBodyProduct;
  /** Parameters for customer
   */
  customer?: ImportReceiptBodyCustomer;
};

export type ImportReceiptChargebeeEventWebhook =
  (typeof ImportReceiptChargebeeEventWebhook)[keyof typeof ImportReceiptChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportReceiptChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportReceiptChargebeeEventEmail =
  (typeof ImportReceiptChargebeeEventEmail)[keyof typeof ImportReceiptChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportReceiptChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportReceiptChargebeeEventActions =
  (typeof ImportReceiptChargebeeEventActions)[keyof typeof ImportReceiptChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportReceiptChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportReceiptHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportReceiptChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportReceiptChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportReceiptChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveStoreSubscription200 = {
  in_app_subscriptions: InAppSubscription[];
};

export type RetrieveStoreSubscriptionBody = {
  /** **Apple App Store** : The Base64 encoded [App Store in-app purchase receipt](https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store?language=objc#overview) taken from the Apple device after successful creation of the in-app purchase subscription.

**Google Play Store** : The purchase `token` taken from the Android device after the successful creation of an in-app purchase subscription.
 */
  receipt: string;
};

export type RetrieveStoreSubscriptionChargebeeEventWebhook =
  (typeof RetrieveStoreSubscriptionChargebeeEventWebhook)[keyof typeof RetrieveStoreSubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveStoreSubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveStoreSubscriptionChargebeeEventEmail =
  (typeof RetrieveStoreSubscriptionChargebeeEventEmail)[keyof typeof RetrieveStoreSubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveStoreSubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveStoreSubscriptionChargebeeEventActions =
  (typeof RetrieveStoreSubscriptionChargebeeEventActions)[keyof typeof RetrieveStoreSubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveStoreSubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveStoreSubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RetrieveStoreSubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RetrieveStoreSubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RetrieveStoreSubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpsertOrRemoveItemEntitlementsForAnItem200 = {
  item_entitlement: ItemEntitlement;
};

/**
 * Parameters for item_entitlements

 */
export type UpsertOrRemoveItemEntitlementsForAnItemBodyItemEntitlements = {
  /** The `id` of the feature towards which this entitlement has been granted.
   */
  feature_id: string[];
  /** The level of entitlement that the item has towards the feature. The possible values depend on the value of `feature.type`:

* When `feature.type` is `quantity` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any one of `feature.levels[value][]`.
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can also be:
    * any one of `feature.levels[value][]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `range` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any whole number between `levels[value][0]` and `levels[value][1]` (inclusive).
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can be:
    * any whole number equal to or greater than `levels[value][0]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `custom`, then the value can be any one of `feature.levels[value][]`.
* When `type` is `switch`, then the value is set as `available` or `true`.
 */
  value?: string[];
};

/**
 * The specific action to be performed for each `item_entitlement` specified. \* remove - Deletes the `item_entitlement` for the `feature_id` and `item_id` combination, if it exists. \* upsert - If the `item_entitlement` already exists for the `feature_id` and `item_id` combination, the `value` of the `item_entitlement` is updated. If it doesn't exist, a new `item_entitelment` is created.

 */
export type UpsertOrRemoveItemEntitlementsForAnItemBodyAction =
  (typeof UpsertOrRemoveItemEntitlementsForAnItemBodyAction)[keyof typeof UpsertOrRemoveItemEntitlementsForAnItemBodyAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAnItemBodyAction = {
  upsert: "upsert",
  remove: "remove",
} as const;

export type UpsertOrRemoveItemEntitlementsForAnItemBody = {
  /** The specific action to be performed for each `item_entitlement` specified. \* remove - Deletes the `item_entitlement` for the `feature_id` and `item_id` combination, if it exists. \* upsert - If the `item_entitlement` already exists for the `feature_id` and `item_id` combination, the `value` of the `item_entitlement` is updated. If it doesn't exist, a new `item_entitelment` is created.
   */
  action: UpsertOrRemoveItemEntitlementsForAnItemBodyAction;
  /** Parameters for item_entitlements
   */
  item_entitlements?: UpsertOrRemoveItemEntitlementsForAnItemBodyItemEntitlements;
};

export type UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventWebhook =
  (typeof UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventWebhook)[keyof typeof UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventEmail =
  (typeof UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventEmail)[keyof typeof UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventActions =
  (typeof UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventActions)[keyof typeof UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpsertOrRemoveItemEntitlementsForAnItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpsertOrRemoveItemEntitlementsForAnItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemEntitlementsForAnItem200ListItem = {
  item_entitlement: ItemEntitlement;
};

export type ListItemEntitlementsForAnItem200 = {
  list: ListItemEntitlementsForAnItem200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListItemEntitlementsForAnItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemEntitlementsForAnItemParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type UpsertOrRemoveItemEntitlementsForAFeature200 = {
  item_entitlement: ItemEntitlement;
};

/**
 * The `type` of the `item` to which this entitlement belongs. \* plan - Plan \* item - Item \* subscription - Subscription \* addon - Addon \* charge - Charge

 */
export type UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlementsItemTypeItem =
  (typeof UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlementsItemTypeItem)[keyof typeof UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlementsItemTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlementsItemTypeItem =
  {
    plan: "plan",
    addon: "addon",
    charge: "charge",
    subscription: "subscription",
    item: "item",
  } as const;

/**
 * Parameters for item_entitlements

 */
export type UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlements = {
  /** The `id` of the `item` to which this entitlement belongs.
   */
  item_id: string[];
  item_type?: UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlementsItemTypeItem[];
  /** The level of entitlement that the item has towards the feature. The possible values depend on the value of `feature.type`:

* When `feature.type` is `quantity` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any one of `feature.levels[value][]`.
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can also be:
    * any one of `feature.levels[value][]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `range` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any whole number between `levels[value][0]` and `levels[value][1]` (inclusive).
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can be:
    * any whole number equal to or greater than `levels[value][0]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `custom`, then the value can be any one of `feature.levels[value][]`.
* When `type` is `switch`, then the value is set as `available` or `true`.
 */
  value?: string[];
};

/**
 * The specific action to be performed for each `item_entitlement` specified. \* remove - Deletes the `item_entitlement` for the `feature_id` and `item_id` combination, if it exists. \* upsert - If the `item_entitlement` already exists for the `feature_id` and `item_id` combination, the `value` of the `item_entitlement` is updated. If it doesn't exist, a new `item_entitelment` is created.

 */
export type UpsertOrRemoveItemEntitlementsForAFeatureBodyAction =
  (typeof UpsertOrRemoveItemEntitlementsForAFeatureBodyAction)[keyof typeof UpsertOrRemoveItemEntitlementsForAFeatureBodyAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAFeatureBodyAction = {
  upsert: "upsert",
  remove: "remove",
} as const;

export type UpsertOrRemoveItemEntitlementsForAFeatureBody = {
  /** The specific action to be performed for each `item_entitlement` specified. \* remove - Deletes the `item_entitlement` for the `feature_id` and `item_id` combination, if it exists. \* upsert - If the `item_entitlement` already exists for the `feature_id` and `item_id` combination, the `value` of the `item_entitlement` is updated. If it doesn't exist, a new `item_entitelment` is created.
   */
  action: UpsertOrRemoveItemEntitlementsForAFeatureBodyAction;
  /** Parameters for item_entitlements
   */
  item_entitlements?: UpsertOrRemoveItemEntitlementsForAFeatureBodyItemEntitlements;
};

export type UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventWebhook =
  (typeof UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventWebhook)[keyof typeof UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventEmail =
  (typeof UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventEmail)[keyof typeof UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventActions =
  (typeof UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventActions)[keyof typeof UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpsertOrRemoveItemEntitlementsForAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpsertOrRemoveItemEntitlementsForAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemEntitlementsForAFeature200ListItem = {
  item_entitlement: ItemEntitlement;
};

export type ListItemEntitlementsForAFeature200 = {
  list: ListItemEntitlementsForAFeature200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListItemEntitlementsForAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemEntitlementsForAFeatureParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type ListSubscriptionEntitlements200ListItem = {
  subscription_entitlement: SubscriptionEntitlement;
};

export type ListSubscriptionEntitlements200 = {
  list: ListSubscriptionEntitlements200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListSubscriptionEntitlementsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListSubscriptionEntitlementsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type EnableDisableSubscriptionEntitlements200 = {
  subscription_entitlement: SubscriptionEntitlement;
};

/**
 * Parameters for subscription_entitlements

 */
export type EnableDisableSubscriptionEntitlementsBodySubscriptionEntitlements =
  {
    /** The `id` of the feature towards which the `subscription_entitlement` is to be enabled or disabled. An error is returned if a `subscription_entitlement` does not exist for the feature.
     */
    feature_id: string[];
  };

export type EnableDisableSubscriptionEntitlementsBody = {
  /** Specifies whether the `subscription_entitlements` are to be enabled or disabled.
   */
  is_enabled: boolean;
  /** Parameters for subscription_entitlements
   */
  subscription_entitlements?: EnableDisableSubscriptionEntitlementsBodySubscriptionEntitlements;
};

export type EnableDisableSubscriptionEntitlementsChargebeeEventWebhook =
  (typeof EnableDisableSubscriptionEntitlementsChargebeeEventWebhook)[keyof typeof EnableDisableSubscriptionEntitlementsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EnableDisableSubscriptionEntitlementsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EnableDisableSubscriptionEntitlementsChargebeeEventEmail =
  (typeof EnableDisableSubscriptionEntitlementsChargebeeEventEmail)[keyof typeof EnableDisableSubscriptionEntitlementsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EnableDisableSubscriptionEntitlementsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EnableDisableSubscriptionEntitlementsChargebeeEventActions =
  (typeof EnableDisableSubscriptionEntitlementsChargebeeEventActions)[keyof typeof EnableDisableSubscriptionEntitlementsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EnableDisableSubscriptionEntitlementsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EnableDisableSubscriptionEntitlementsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EnableDisableSubscriptionEntitlementsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EnableDisableSubscriptionEntitlementsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EnableDisableSubscriptionEntitlementsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ReactivateAFeature200 = {
  feature: Feature;
};

export type ReactivateAFeatureChargebeeEventWebhook =
  (typeof ReactivateAFeatureChargebeeEventWebhook)[keyof typeof ReactivateAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ReactivateAFeatureChargebeeEventEmail =
  (typeof ReactivateAFeatureChargebeeEventEmail)[keyof typeof ReactivateAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ReactivateAFeatureChargebeeEventActions =
  (typeof ReactivateAFeatureChargebeeEventActions)[keyof typeof ReactivateAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ReactivateAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ReactivateAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ReactivateAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ReactivateAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ActivateAFeature200 = {
  feature: Feature;
};

export type ActivateAFeatureChargebeeEventWebhook =
  (typeof ActivateAFeatureChargebeeEventWebhook)[keyof typeof ActivateAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActivateAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ActivateAFeatureChargebeeEventEmail =
  (typeof ActivateAFeatureChargebeeEventEmail)[keyof typeof ActivateAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActivateAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ActivateAFeatureChargebeeEventActions =
  (typeof ActivateAFeatureChargebeeEventActions)[keyof typeof ActivateAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActivateAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ActivateAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ActivateAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ActivateAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ActivateAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ArchiveAFeature200 = {
  feature: Feature;
};

export type ArchiveAFeatureChargebeeEventWebhook =
  (typeof ArchiveAFeatureChargebeeEventWebhook)[keyof typeof ArchiveAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchiveAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ArchiveAFeatureChargebeeEventEmail =
  (typeof ArchiveAFeatureChargebeeEventEmail)[keyof typeof ArchiveAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchiveAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ArchiveAFeatureChargebeeEventActions =
  (typeof ArchiveAFeatureChargebeeEventActions)[keyof typeof ArchiveAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchiveAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ArchiveAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ArchiveAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ArchiveAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ArchiveAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAFeature200 = {
  feature: Feature;
};

/**
 * Parameters for levels

 */
export type UpdateAFeatureBodyLevels = {
  /** A case-sensitive display name for the entitlement level. Provide a name that helps you clearly identify the entitlement level. For example: a feature such as `Email Support` can have entitlement levels named as `All weekdays`, `All days`, `40 hours per week` and so on. When not provided for `feature.type` `quantity` or `range`, this name is auto-generated as the space-separated concatenation of `levels[].value` and the pluralized version of `unit`. For example, if `levels[].value` is `20` and `unit` is `user`, then `levels[].name` becomes `20 users`.
   */
  name?: string[];
  /** The value denoting the entitlement level granted.

* **When `type` is `quantity`:** this attribute denotes the quantity of units of the feature for this entitlement level. For example, a feature such as `number of users` can have `levels[].value` as `5`, `20`, `50`, and `100`. `levels[].is_unlimited` is used to set the entitlement level to "unlimited".
* **When `type` is `range`:** there can be only two elements in the `levels[]` array; one corresponding to the minimum value (`levels[0]`) and the other to the maximum value (`levels[1]`) of the range of possible entitlement levels. For example, a feature such as `number of users` may have `levels[0].value` = `5` and `levels[1].value` = `50000`. When the upper limit is "unlimited", then `levels[1].value` is not set and `levels[1].is_unlimited` is `true`.
* **When `type` is `custom`:** this attribute denotes the value of this custom entitlement level. For example, a feature `Email Support` can have `levels[].value` as one of say, `24√ó7` and `24√ó5`.

**Note**

This must be provided exactly as it already exists for the feature if the `value` is currently mapped to an [item_entitlement](item_entitlements)s or [subscription_entitlement](subscription_entitlements)s.
 */
  value?: string[];
  /** When `type` is `quantity` or `range`, this attribute indicates whether the entitlement level corresponds to unlimited units of the feature. Possible values are:

* `true`: The entitlement level corresponds to unlimited units of the feature. `levels[].value` is ignored for this level. This can only be set for the level that has the highest value for `levels[].level.`
* `false`: The entitlement level does not correspond to unlimited units of the feature.

Either this or levels\[value\] should be passed.
 */
  is_unlimited?: boolean[];
  /** Represents the order of the entitlement levels from lowest to highest.

* **When `type` is `quantity`:** Provide the `level` for the lowest entitlement level as `0`, the next higher level as `1`, followed by `2`, and so on.
* **When `type` is `custom`:** Provide the `level` for the lowest entitlement level as `0`, the next higher level as `1`, followed by `2`, and so on. **Note:** There are some validations to be considered.
* **When `type` is `range`:** Provide `0` for the minimum value and `1` for the maximum value in the range.

When not defined, it is assumed as the index of the `levels[]` array.
 */
  level?: number[];
};

/**
 * The current status of the feature. \* active - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* draft - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`. \* archived - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective.

 */
export type UpdateAFeatureBodyStatus =
  (typeof UpdateAFeatureBodyStatus)[keyof typeof UpdateAFeatureBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAFeatureBodyStatus = {
  active: "active",
  archived: "archived",
  draft: "draft",
} as const;

export type UpdateAFeatureBody = {
  /** A case-sensitive unique name for the feature. For example: `user license`, `data storage`, `Salesforce Integration`, `devices`, `UHD Streaming`, and so on.
   **Note:** This name is not displayed on any customer-facing documents or pages such as [invoice PDFs](invoices#retrieve_invoice_as_pdf) or [hosted pages](hosted_pages). However, in the future, it is likely to be introduced on the [Self-Serve Portal](portal_sessions).
   */
  name?: string;
  /** A brief description of the feature. For example: `Access to 10TB cloud storage`.
   */
  description?: string;
  /** The current status of the feature. \* active - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* draft - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`. \* archived - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective.
   */
  status?: UpdateAFeatureBodyStatus;
  /** For features of `type` `quantity` or `range`, this specifies the unit of measure. The value is expected in the singular form and when used by the system, it is pluralized automatically as needed. For example, for a feature such as `user licenses`, the `unit` can be `license`.
   */
  unit?: string;
  /** Parameters for levels
   */
  levels?: UpdateAFeatureBodyLevels;
  [key: string]: any;
};

export type UpdateAFeatureChargebeeEventWebhook =
  (typeof UpdateAFeatureChargebeeEventWebhook)[keyof typeof UpdateAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAFeatureChargebeeEventEmail =
  (typeof UpdateAFeatureChargebeeEventEmail)[keyof typeof UpdateAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAFeatureChargebeeEventActions =
  (typeof UpdateAFeatureChargebeeEventActions)[keyof typeof UpdateAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAFeature200 = {
  feature: Feature;
};

export type RetrieveAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAFeature200 = {
  feature: Feature;
};

export type DeleteAFeatureChargebeeEventWebhook =
  (typeof DeleteAFeatureChargebeeEventWebhook)[keyof typeof DeleteAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAFeatureChargebeeEventEmail =
  (typeof DeleteAFeatureChargebeeEventEmail)[keyof typeof DeleteAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAFeatureChargebeeEventActions =
  (typeof DeleteAFeatureChargebeeEventActions)[keyof typeof DeleteAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAFeature200 = {
  feature: Feature;
};

/**
 * Parameters for levels

 */
export type CreateAFeatureBodyLevels = {
  /** A case-sensitive display name for the entitlement level. Provide a name that helps you clearly identify the entitlement level. For example: a feature such as `Email Support` can have entitlement levels named as `All weekdays`, `All days`, `40 hours per week` and so on. When not provided for `feature.type` `quantity` or `range`, this name is auto-generated as the space-separated concatenation of `levels[].value` and the pluralized version of `unit`. For example, if `levels[].value` is `20` and `unit` is `user`, then `levels[].name` becomes `20 users`.
   */
  name?: string[];
  /** The value denoting the entitlement level granted.

* **When `type` is `quantity`:** this attribute denotes the quantity of units of the feature for this entitlement level. For example, a feature such as `number of users` can have `levels[].value` as `5`, `20`, `50`, and `100`. `levels[].is_unlimited` is used to set the entitlement level to "unlimited".
* **When `type` is `range`:** there can be be only two elements in the `levels[]` array; one corresponding to the minimum value (`levels[0]`) and the other to the maximum value (`levels[1]`) of the range of possible entitlement levels. For example, a feature such as `number of users` may have `levels[0].value` = `5` and `levels[1].value` = `50000`. When the upper limit is "unlimited", then `levels[1].value` is not set and `levels[1].is_unlimited` is `true`.
* **When `type` is `custom`:** this attribute denotes the value of this custom entitlement level. For example, a feature `Email Support` can have `levels[].value` as one of say, `24√ó7` and `24√ó5`.
 */
  value?: string[];
  /** When `type` is `quantity` or `range`, this attribute indicates whether the entitlement level corresponds to unlimited units of the feature. Possible values are:

* `true`: The entitlement level corresponds to unlimited units of the feature. `levels[].value` is ignored for this level. This can only be set for the level that has the highest value for `levels[].level.`
* `false`: The entitlement level does not correspond to unlimited units of the feature.

Either this or levels\[value\] should be passed.
 */
  is_unlimited?: boolean[];
  /** Represents the order of the entitlement levels from lowest to highest.

* **When `type` is `quantity` or `custom`:** Provide the `level` for the lowest entitlement level as `0`, the next higher level as `1`, followed by `2`, and so on.
* **When `type` is `range`:** Provide `0` for the minimum value and `1` for the maximum value in the range.

When not defined, it is assumed as the index of the `levels[]` array.
 */
  level?: number[];
};

/**
 * The current status of the feature. \* active - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* draft - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`. \* archived - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective.

 */
export type CreateAFeatureBodyStatus =
  (typeof CreateAFeatureBodyStatus)[keyof typeof CreateAFeatureBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAFeatureBodyStatus = {
  active: "active",
  draft: "draft",
} as const;

/**
 * The type of feature. \* quantity - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* range - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* switch - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* custom - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`.

 */
export type CreateAFeatureBodyType =
  (typeof CreateAFeatureBodyType)[keyof typeof CreateAFeatureBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAFeatureBodyType = {
  switch: "switch",
  custom: "custom",
  quantity: "quantity",
  range: "range",
} as const;

export type CreateAFeatureBody = {
  /** A unique and immutable identifier for the feature. You can set it yourself, in which case it is recommended that a human-readable format (or slug) be used. For example, `number-of-users-ccjht01`. When not provided, a random value is automatically set.
   */
  id?: string;
  /** A case-sensitive unique name for the feature. For example: `user license`, `data storage`, `Salesforce Integration`, `devices`, `UHD Streaming`, and so on.
   **Note:** This name is not displayed on any customer-facing documents or pages such as [invoice PDFs](invoices#retrieve_invoice_as_pdf) or [hosted pages](hosted_pages). However, in the future, it is likely to be introduced on the [Self-Serve Portal](portal_sessions).
   */
  name: string;
  /** A brief description of the feature. For example: `Access to 10TB cloud storage`.
   */
  description?: string;
  /** The type of feature. \* quantity - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* range - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* switch - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* custom - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`.
   */
  type?: CreateAFeatureBodyType;
  /** The current status of the feature. \* active - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* draft - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`. \* archived - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective.
   */
  status?: CreateAFeatureBodyStatus;
  /** For features of `type` `quantity` or `range`, this specifies the unit of measure. The value is expected in the singular form and when used by the system, it is pluralized automatically as needed. For example, for a feature such as `user licenses`, the `unit` can be `license`.
   */
  unit?: string;
  /** Parameters for levels
   */
  levels?: CreateAFeatureBodyLevels;
  [key: string]: any;
};

export type CreateAFeatureChargebeeEventWebhook =
  (typeof CreateAFeatureChargebeeEventWebhook)[keyof typeof CreateAFeatureChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAFeatureChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAFeatureChargebeeEventEmail =
  (typeof CreateAFeatureChargebeeEventEmail)[keyof typeof CreateAFeatureChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAFeatureChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAFeatureChargebeeEventActions =
  (typeof CreateAFeatureChargebeeEventActions)[keyof typeof CreateAFeatureChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAFeatureChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAFeatureHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAFeatureChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAFeatureChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAFeatureChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListFeatures200ListItem = {
  feature: Feature;
};

export type ListFeatures200 = {
  list: ListFeatures200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListFeaturesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`switch\` - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* \`custom\` - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`. \* \`quantity\` - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* \`range\` - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level.

 */
export type ListFeaturesTypeIsNot =
  (typeof ListFeaturesTypeIsNot)[keyof typeof ListFeaturesTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListFeaturesTypeIsNot = {
  switch: "switch",
  custom: "custom",
  quantity: "quantity",
  range: "range",
} as const;

/**
 * \* \`switch\` - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* \`custom\` - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`. \* \`quantity\` - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* \`range\` - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level.

 */
export type ListFeaturesTypeIs =
  (typeof ListFeaturesTypeIs)[keyof typeof ListFeaturesTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListFeaturesTypeIs = {
  switch: "switch",
  custom: "custom",
  quantity: "quantity",
  range: "range",
} as const;

/**
 * \* \`active\` - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* \`archived\` - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective. \* \`draft\` - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`.

 */
export type ListFeaturesStatusIsNot =
  (typeof ListFeaturesStatusIsNot)[keyof typeof ListFeaturesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListFeaturesStatusIsNot = {
  active: "active",
  archived: "archived",
  draft: "draft",
} as const;

/**
 * \* \`active\` - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* \`archived\` - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective. \* \`draft\` - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`.

 */
export type ListFeaturesStatusIs =
  (typeof ListFeaturesStatusIs)[keyof typeof ListFeaturesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListFeaturesStatusIs = {
  active: "active",
  archived: "archived",
  draft: "draft",
} as const;

export type ListFeaturesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
 * <dfn class="text-muted">optional, string filter</dfn><br>A case-sensitive unique name for the feature. For example: <code>user license</code>, <code>data storage</code>, <code>Salesforce Integration</code>, <code>devices</code>, <code>UHD Streaming</code>, and so on. <br>

<b>Note:</b> This name is not displayed on any customer-facing documents or pages such as <a href="invoices#retrieve_invoice_as_pdf">invoice PDFs</a> or <a href="hosted_pages">hosted pages</a>. However, in the future, it is likely to be introduced on the <a href="portal_sessions">Self-Serve Portal</a>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is] = "User licenses"</i>
 */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique and immutable identifier for the feature. You can set it yourself, in which case it is recommended that a human-readable format (or slug) be used. For example, <code>number-of-users-ccjht01</code>. When not provided, a random value is automatically set.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "fea-user-licenses"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The current status of the feature. Possible values are : <dfn>active, archived, draft.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "active"</i>
   */
  status?: {
    /** \* \`active\` - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* \`archived\` - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective. \* \`draft\` - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`.
     */
    is?: ListFeaturesStatusIs;
    /** \* \`active\` - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* \`archived\` - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective. \* \`draft\` - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`.
     */
    is_not?: ListFeaturesStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The type of feature. Possible values are : <dfn>switch, custom, quantity, range.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is] = "boolean"</i>
   */
  type?: {
    /** \* \`switch\` - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* \`custom\` - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`. \* \`quantity\` - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* \`range\` - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level.
     */
    is?: ListFeaturesTypeIs;
    /** \* \`switch\` - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* \`custom\` - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`. \* \`quantity\` - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* \`range\` - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level.
     */
    is_not?: ListFeaturesTypeIsNot;
    in?: string;
    not_in?: string;
  };
};

export type ListRsDataExportResources200ListItem = {
  rs_data_export_resource: RsDataExportResource;
};

export type ListRsDataExportResources200 = {
  list: ListRsDataExportResources200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListRsDataExportResourcesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListRsDataExportResourcesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>To filter based on RsDataExportResource Resource.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>resource[is_not] = "null"</i>
   */
  resource?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
};

export type UpdateADifferentialPrice200 = {
  differential_price: DifferentialPrice;
};

/**
 * Parameters for tiers

 */
export type UpdateADifferentialPriceBodyTiers = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`; the total cost for the item price when the `pricing_model` is `stairstep`. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the addon. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * The unit of time for `period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year.

 */
export type UpdateADifferentialPriceBodyParentPeriodsPeriodUnitItem =
  (typeof UpdateADifferentialPriceBodyParentPeriodsPeriodUnitItem)[keyof typeof UpdateADifferentialPriceBodyParentPeriodsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateADifferentialPriceBodyParentPeriodsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Parameters for parent_periods

 */
export type UpdateADifferentialPriceBodyParentPeriods = {
  period_unit: UpdateADifferentialPriceBodyParentPeriodsPeriodUnitItem[];
  /** The billing period of the plan in `period_unit`s. For example, a 6 month plan has `period` as 6 and `period_unit` as `month`.
   */
  period?: unknown[][];
};

export type UpdateADifferentialPriceBody = {
  /** The id of the item price (`addon` or `charge`) whose price should change according to the plan-item it is applied to.
   */
  item_price_id: string;
  /** The differential price. If the pricing model of the `item_price_id` is `tiered`, `volume`, or `stairstep`, pass `tiers` instead of this.
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** Parameters for parent_periods
   */
  parent_periods?: UpdateADifferentialPriceBodyParentPeriods;
  /** Parameters for tiers
   */
  tiers?: UpdateADifferentialPriceBodyTiers;
};

export type UpdateADifferentialPriceChargebeeEventWebhook =
  (typeof UpdateADifferentialPriceChargebeeEventWebhook)[keyof typeof UpdateADifferentialPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateADifferentialPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateADifferentialPriceChargebeeEventEmail =
  (typeof UpdateADifferentialPriceChargebeeEventEmail)[keyof typeof UpdateADifferentialPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateADifferentialPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateADifferentialPriceChargebeeEventActions =
  (typeof UpdateADifferentialPriceChargebeeEventActions)[keyof typeof UpdateADifferentialPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateADifferentialPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateADifferentialPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateADifferentialPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateADifferentialPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateADifferentialPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveADifferentialPrice200 = {
  differential_price: DifferentialPrice;
};

export type RetrieveADifferentialPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveADifferentialPriceParams = {
  /**
   * The id of the item price (<code>addon</code> or <code>charge</code>) whose price should change according to the plan-item it is applied to.
   */
  item_price_id: string;
};

export type ListDifferentialPrices200ListItem = {
  differential_price: DifferentialPrice;
};

export type ListDifferentialPrices200 = {
  list: ListDifferentialPrices200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListDifferentialPricesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListDifferentialPricesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The id of the item price (<code>addon</code> or <code>charge</code>) whose price should change according to the plan-item it is applied to.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_price_id[is] = "day-pass-USD"</i>
   */
  item_price_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Item Id of Addon / Charge item price for which differential pricing is applied to.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_id[is] = "day-pass"</i>
   */
  item_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique and immutable id for the differential price. It is auto-generated when the differential price is created.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "defcc4f1-f21f-47f4-8019-beddb9beab5f"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The id of the plan-item, in relation to which, the differential pricing for the addon or charge is defined. For example, this would be the id of the <i>Standard</i> or <i>Enterprise</i> plans-items mentioned in the <a href="./differential_prices?prod_cat_ver=2">examples above</a>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>parent_item_id[is_not] = "basic"</i>
   */
  parent_item_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
};

export type CreateADifferentialPrice200 = {
  differential_price: DifferentialPrice;
};

/**
 * Parameters for tiers

 */
export type CreateADifferentialPriceBodyTiers = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`; the total cost for the item price when the `pricing_model` is `stairstep`. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the addon. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * The unit of time for `period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year.

 */
export type CreateADifferentialPriceBodyParentPeriodsPeriodUnitItem =
  (typeof CreateADifferentialPriceBodyParentPeriodsPeriodUnitItem)[keyof typeof CreateADifferentialPriceBodyParentPeriodsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateADifferentialPriceBodyParentPeriodsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Parameters for parent_periods

 */
export type CreateADifferentialPriceBodyParentPeriods = {
  period_unit: CreateADifferentialPriceBodyParentPeriodsPeriodUnitItem[];
  /** The billing period of the plan in `period_unit`s. For example, a 6 month plan has `period` as 6 and `period_unit` as `month`.
   */
  period?: unknown[][];
};

export type CreateADifferentialPriceBody = {
  /** The id of the plan-item, in relation to which, the differential pricing for the addon or charge is defined. For example, this would be the id of the *Standard* or *Enterprise* plans-items mentioned in the [examples above](./differential_prices?prod_cat_ver=2).
   */
  parent_item_id: string;
  /** The differential price. If the pricing model of the `item_price_id` is `tiered`, `volume`, or `stairstep`, pass `tiers` instead of this.
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** Parameters for parent_periods
   */
  parent_periods?: CreateADifferentialPriceBodyParentPeriods;
  /** Parameters for tiers
   */
  tiers?: CreateADifferentialPriceBodyTiers;
};

export type CreateADifferentialPriceChargebeeEventWebhook =
  (typeof CreateADifferentialPriceChargebeeEventWebhook)[keyof typeof CreateADifferentialPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateADifferentialPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateADifferentialPriceChargebeeEventEmail =
  (typeof CreateADifferentialPriceChargebeeEventEmail)[keyof typeof CreateADifferentialPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateADifferentialPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateADifferentialPriceChargebeeEventActions =
  (typeof CreateADifferentialPriceChargebeeEventActions)[keyof typeof CreateADifferentialPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateADifferentialPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateADifferentialPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateADifferentialPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateADifferentialPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateADifferentialPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteADifferentialPrice200 = {
  differential_price: DifferentialPrice;
};

export type DeleteADifferentialPriceBody = {
  /** The id of the item price (`addon` or `charge`) whose price should change according to the plan-item it is applied to.
   */
  item_price_id: string;
};

export type DeleteADifferentialPriceChargebeeEventWebhook =
  (typeof DeleteADifferentialPriceChargebeeEventWebhook)[keyof typeof DeleteADifferentialPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteADifferentialPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteADifferentialPriceChargebeeEventEmail =
  (typeof DeleteADifferentialPriceChargebeeEventEmail)[keyof typeof DeleteADifferentialPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteADifferentialPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteADifferentialPriceChargebeeEventActions =
  (typeof DeleteADifferentialPriceChargebeeEventActions)[keyof typeof DeleteADifferentialPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteADifferentialPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteADifferentialPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteADifferentialPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteADifferentialPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteADifferentialPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAnAttachedItem200 = {
  attached_item: AttachedItem;
};

export type DeleteAnAttachedItemBody = {
  /** The id of the addon or charge that is being attached to the plan-item.
   */
  parent_item_id: string;
};

export type DeleteAnAttachedItemChargebeeEventWebhook =
  (typeof DeleteAnAttachedItemChargebeeEventWebhook)[keyof typeof DeleteAnAttachedItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnAttachedItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnAttachedItemChargebeeEventEmail =
  (typeof DeleteAnAttachedItemChargebeeEventEmail)[keyof typeof DeleteAnAttachedItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnAttachedItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnAttachedItemChargebeeEventActions =
  (typeof DeleteAnAttachedItemChargebeeEventActions)[keyof typeof DeleteAnAttachedItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnAttachedItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnAttachedItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnAttachedItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnAttachedItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnAttachedItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAnAttachedItem200 = {
  attached_item: AttachedItem;
};

/**
 * Indicates when the item is charged. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_creation - the time of creation of the subscription. \* subscription_trial_start - the time when the trial period of the subscription begins. \* on_demand - Item can be charged on demand \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions.

 */
export type CreateAnAttachedItemBodyChargeOnEvent =
  (typeof CreateAnAttachedItemBodyChargeOnEvent)[keyof typeof CreateAnAttachedItemBodyChargeOnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAttachedItemBodyChargeOnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * The type of attachment for the addon. Only applicable for addon-items and is a required parameter as well for addon-items. \* recommended - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* optional - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan. \* mandatory - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API.

 */
export type CreateAnAttachedItemBodyType =
  (typeof CreateAnAttachedItemBodyType)[keyof typeof CreateAnAttachedItemBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAttachedItemBodyType = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

export type CreateAnAttachedItemBody = {
  /** The id of the addon or charge that is being attached to the plan-item.
   */
  item_id: string;
  /** The type of attachment for the addon. Only applicable for addon-items and is a required parameter as well for addon-items. \* recommended - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* optional - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan. \* mandatory - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API.
   */
  type?: CreateAnAttachedItemBodyType;
  /** The number of subscription billing cycles for which this item is attached when applied to a subscription. Applicable only for items of type addon. Requires [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) to be enabled for the site.  

The value set explicitly for `billing_cycles` while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items) takes precedence over this parameter. This parameter, in turn, has a higher precedence than [the value set for the addon-item price](./item_prices?prod_cat_ver=2).
 */
  billing_cycles?: number;
  /** The default quantity of the addon to be attached when the quantity is not specified while [creating](subscriptions?prod_cat_ver=2#create_subscription_for_items)/[updating](subscriptions?prod_cat_ver=2#update_subscription_for_items) the subscription.
   */
  quantity?: number;
  /** The decimal representation of the quantity of the addon. Returned for quantity-based addons when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** Indicates when the item is charged. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_creation - the time of creation of the subscription. \* subscription_trial_start - the time when the trial period of the subscription begins. \* on_demand - Item can be charged on demand \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions.
   */
  charge_on_event?: CreateAnAttachedItemBodyChargeOnEvent;
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean;
};

export type CreateAnAttachedItemChargebeeEventWebhook =
  (typeof CreateAnAttachedItemChargebeeEventWebhook)[keyof typeof CreateAnAttachedItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAttachedItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnAttachedItemChargebeeEventEmail =
  (typeof CreateAnAttachedItemChargebeeEventEmail)[keyof typeof CreateAnAttachedItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAttachedItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnAttachedItemChargebeeEventActions =
  (typeof CreateAnAttachedItemChargebeeEventActions)[keyof typeof CreateAnAttachedItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAttachedItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnAttachedItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnAttachedItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnAttachedItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnAttachedItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListAttachedItems200ListItem = {
  attached_item: AttachedItem;
};

export type ListAttachedItems200 = {
  list: ListAttachedItems200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListAttachedItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand

 */
export type ListAttachedItemsChargeOnEventIsNot =
  (typeof ListAttachedItemsChargeOnEventIsNot)[keyof typeof ListAttachedItemsChargeOnEventIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListAttachedItemsChargeOnEventIsNot = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand

 */
export type ListAttachedItemsChargeOnEventIs =
  (typeof ListAttachedItemsChargeOnEventIs)[keyof typeof ListAttachedItemsChargeOnEventIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListAttachedItemsChargeOnEventIs = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ListAttachedItemsItemTypeIsNot =
  (typeof ListAttachedItemsItemTypeIsNot)[keyof typeof ListAttachedItemsItemTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListAttachedItemsItemTypeIsNot = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ListAttachedItemsItemTypeIs =
  (typeof ListAttachedItemsItemTypeIs)[keyof typeof ListAttachedItemsItemTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListAttachedItemsItemTypeIs = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.

 */
export type ListAttachedItemsTypeIsNot =
  (typeof ListAttachedItemsTypeIsNot)[keyof typeof ListAttachedItemsTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListAttachedItemsTypeIsNot = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

/**
 * \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.

 */
export type ListAttachedItemsTypeIs =
  (typeof ListAttachedItemsTypeIs)[keyof typeof ListAttachedItemsTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListAttachedItemsTypeIs = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

export type ListAttachedItemsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter attached items based on their id.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "bec0c324-adb6-44d3-ad4f-694f449be97c"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter attached items based on the <code>item_id</code> of the item being attached.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_id[is] = "basic"</i>
   */
  item_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter attached items based on the <code>type</code> of attached item. Possible values are : <code>recommended</code>, <code>mandatory</code>, <code>optional</code>. Possible values are : <dfn>recommended, mandatory, optional.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is] = "mandatory"</i>
   */
  type?: {
    /** \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.
     */
    is?: ListAttachedItemsTypeIs;
    /** \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.
     */
    is_not?: ListAttachedItemsTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>To filter based on the type of of the attached item. Possible values are : <code>addon</code>, <code>charge</code>. Possible values are : <dfn>plan, addon, charge.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_type[is_not] = "plan"</i>
   */
  item_type?: {
    /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
     */
    is?: ListAttachedItemsItemTypeIs;
    /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
     */
    is_not?: ListAttachedItemsItemTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Indicates when the item is charged. This attribute only applies to charge-items. Possible values are : <dfn>subscription_creation, subscription_trial_start, plan_activation, subscription_activation, contract_termination, on_demand.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>charge_on_event[is] = "subscription_creation"</i>
   */
  charge_on_event?: {
    /** \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand
     */
    is?: ListAttachedItemsChargeOnEventIs;
    /** \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand
     */
    is_not?: ListAttachedItemsChargeOnEventIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter attached items based on when the attached items were last updated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
};

export type UpdateAnAttachedItem200 = {
  attached_item: AttachedItem;
};

/**
 * Indicates when the item is charged. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_creation - the time of creation of the subscription. \* subscription_trial_start - the time when the trial period of the subscription begins. \* on_demand - Item can be charged on demand \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions.

 */
export type UpdateAnAttachedItemBodyChargeOnEvent =
  (typeof UpdateAnAttachedItemBodyChargeOnEvent)[keyof typeof UpdateAnAttachedItemBodyChargeOnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAttachedItemBodyChargeOnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * The type of attachment for the addon. Only applicable for addon-items and is a required parameter as well for addon-items. \* recommended - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* optional - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan. \* mandatory - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API.

 */
export type UpdateAnAttachedItemBodyType =
  (typeof UpdateAnAttachedItemBodyType)[keyof typeof UpdateAnAttachedItemBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAttachedItemBodyType = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

export type UpdateAnAttachedItemBody = {
  /** The id of the parent item in the attachment relationship.
   */
  parent_item_id: string;
  /** The type of attachment for the addon. Only applicable for addon-items and is a required parameter as well for addon-items. \* recommended - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* optional - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan. \* mandatory - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API.
   */
  type?: UpdateAnAttachedItemBodyType;
  /** The number of subscription billing cycles for which this item is attached when applied to a subscription. Applicable only for items of type addon. Requires [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) to be enabled for the site.  

The value set explicitly for `billing_cycles` while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items) takes precedence over this parameter. This parameter, in turn, has a higher precedence than [the value set for the addon-item price](./item_prices?prod_cat_ver=2).
 */
  billing_cycles?: number;
  /** The default quantity of the addon to be attached when the quantity is not specified while [creating](subscriptions?prod_cat_ver=2#create_subscription_for_items)/[updating](subscriptions?prod_cat_ver=2#update_subscription_for_items) the subscription.
   */
  quantity?: number;
  /** The decimal representation of the quantity of the addon. Returned for quantity-based addons when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** Indicates when the item is charged. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_creation - the time of creation of the subscription. \* subscription_trial_start - the time when the trial period of the subscription begins. \* on_demand - Item can be charged on demand \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions.
   */
  charge_on_event?: UpdateAnAttachedItemBodyChargeOnEvent;
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean;
};

export type UpdateAnAttachedItemChargebeeEventWebhook =
  (typeof UpdateAnAttachedItemChargebeeEventWebhook)[keyof typeof UpdateAnAttachedItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAttachedItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnAttachedItemChargebeeEventEmail =
  (typeof UpdateAnAttachedItemChargebeeEventEmail)[keyof typeof UpdateAnAttachedItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAttachedItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnAttachedItemChargebeeEventActions =
  (typeof UpdateAnAttachedItemChargebeeEventActions)[keyof typeof UpdateAnAttachedItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAttachedItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnAttachedItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAnAttachedItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAnAttachedItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAnAttachedItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnAttachedItem200 = {
  attached_item: AttachedItem;
};

export type RetrieveAnAttachedItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnAttachedItemParams = {
  /**
   * The id of the addon or charge that is being attached to the plan-item.
   */
  parent_item_id: string;
};

export type CreateAnItemPrice200 = {
  item_price: ItemPrice;
};

/**
 * Parameters for tiers

 */
export type CreateAnItemPriceBodyTiers = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`; the total cost for the item price when the `pricing_model` is `stairstep`. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the addon. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for accounting_detail

 */
export type CreateAnItemPriceBodyAccountingDetail = {
  /** This maps to the sku or product name in the accounting integration.
   */
  sku?: string;
  /** The identifier of the chart of accounts under which the item price falls in the accounting system.
   */
  accounting_code?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, provide the category name and option. Use the format: `<category-name>: <option>`. For example:`Location: Singapore.`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Classes, provide the class name here. Use the following format: `<parent class>:<sub-class-1>:<sub-class-2>...`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Classes, provide the class name here. Use the following format: `<parent class>: <sub-class-1>: <sub-class2>....` For example: `Services: Plan.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Locations, provide the name of the Location here.

 */
  accounting_category1?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, then provide the second category name and option here. Use the format: `<category-name>: <option>....` For example, `Region: South`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Location, provide the Location name here. Use the following format: `<parent-location>:<sub-location-1>:<sub-location-2>....` For example: `Location: North America: Canada`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Locations, provide the location name here. Use the following format `<parent-location> : <sub-location-1>: <sub-location-2>....` For example: `NA:US:CA`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Dimensions, provide the value of the Dimension here.

 */
  accounting_category2?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Departments, pass the department name here. Use the following format: `<parent-department> : <sub-department-1>: <sub-department-2>....` For example: `Production: Assembly.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under multiple Dimensions, provide the value of the second Dimension here.
 */
  accounting_category3?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/1.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )Provide the "Revenue Recognition Rule Id" for the product from NetSuite.
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you have configured "Revenue Recognition Templates" for products in Intacct, provide the template ID for the product.
 */
  accounting_category4?: string;
};

/**
 * Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type CreateAnItemPriceBodyTaxDetailAvalaraSaleType =
  (typeof CreateAnItemPriceBodyTaxDetailAvalaraSaleType)[keyof typeof CreateAnItemPriceBodyTaxDetailAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceBodyTaxDetailAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

/**
 * Parameters for tax_detail

 */
export type CreateAnItemPriceBodyTaxDetail = {
  /** The tax profile of the item price.
   */
  tax_profile_id?: string;
  /** The [Avalara tax codes](https://taxcode.avatax.avalara.com) for the item price. Applicable only if you use [AvaTax for Sales integration](https://www.chargebee.com/docs/2.0/avalara-for-sales.html).
   */
  avalara_tax_code?: string;
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string;
  /** Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user
   */
  avalara_sale_type?: CreateAnItemPriceBodyTaxDetailAvalaraSaleType;
  /** Indicates the [Avalara transaction type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_transaction_type?: number;
  /** Indicates the [Avalara service type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_service_type?: number;
  /** The [TaxJar product code](https://developers.taxjar.com/api/reference/#get-list-tax-categories) for the item price. Applicable only if you use [TaxJar integration](https://www.chargebee.com/docs/2.0/taxjar.html).
   */
  taxjar_product_code?: string;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.

 */
export type CreateAnItemPriceBodyTrialEndAction =
  (typeof CreateAnItemPriceBodyTrialEndAction)[keyof typeof CreateAnItemPriceBodyTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceBodyTrialEndAction = {
  site_default: "site_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * Defines the shipping frequency in association with shipping period. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month.

 */
export type CreateAnItemPriceBodyShippingPeriodUnit =
  (typeof CreateAnItemPriceBodyShippingPeriodUnit)[keyof typeof CreateAnItemPriceBodyShippingPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceBodyShippingPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.

 */
export type CreateAnItemPriceBodyTrialPeriodUnit =
  (typeof CreateAnItemPriceBodyTrialPeriodUnit)[keyof typeof CreateAnItemPriceBodyTrialPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceBodyTrialPeriodUnit = {
  day: "day",
  month: "month",
} as const;

/**
 * The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon`. \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.

 */
export type CreateAnItemPriceBodyPeriodUnit =
  (typeof CreateAnItemPriceBodyPeriodUnit)[keyof typeof CreateAnItemPriceBodyPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceBodyPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type CreateAnItemPriceBodyPricingModel =
  (typeof CreateAnItemPriceBodyPricingModel)[keyof typeof CreateAnItemPriceBodyPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceBodyPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * A set of key-value pairs stored as additional information for the item price. \[Learn more\](./#meta_data).

 */
export type CreateAnItemPriceBodyMetadata = { [key: string]: any };

export type CreateAnItemPriceBody = {
  /** The identifier for the item price. It is unique and immutable.
   */
  id: string;
  /** A unique display name for the item price in the Chargebee UI. If `external_name` is not provided, this is also used in customer-facing pages and documents such as [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2).
   */
  name: string;
  /** Description of the item price.
   */
  description?: string;
  /** The id of the item that the item price belongs to.
   */
  item_id: string;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** The name of the item price used in customer-facing pages and documents. These include [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2). If not provided, then `name` is used.
   */
  external_name?: string;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) for the item price. Is required when multiple currencies have been enabled.
   */
  currency_code?: string;
  /** Specifies whether taxes apply to this item price. This value is set and returned even if [Taxes](https://www.chargebee.com/docs/tax.html) have been disabled in Chargebee. However, the value is effective only while Taxes are enabled.
   */
  is_taxable?: boolean;
  /** Free quantity the subscriptions of this item_price will have. Only the quantity more than this will be charged for the subscription.
   */
  free_quantity?: number;
  /** The quantity of the item that is available free-of-charge, represented in decimal. When a subscription is created for this plan or when the plan of a subscription is changed to this one, only the quantity above this number is charged for. Applicable for quantity-based plans and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  free_quantity_in_decimal?: string;
  /** A set of key-value pairs stored as additional information for the item price. \[Learn more\](./#meta_data).
   */
  metadata?: CreateAnItemPriceBodyMetadata;
  /** Whether the item price's description should be shown on [invoice PDFs](/docs/api/invoices#retrieve_invoice_as_pdf). If this Boolean is changed, only invoices generated (or [regenerated](https://www.chargebee.com/docs/invoice-operations.html#actions-for-payment-due-not-paid-invoices_regenerate-invoice)) after the change are affected; past invoices are not.
   */
  show_description_in_invoices?: boolean;
  /** Whether the item price's description should be shown on [quote PDFs](/docs/api/quotes#retrieve_quote_as_pdf). If this Boolean is changed, only quotes created after the change are affected; past quotes are not.
   */
  show_description_in_quotes?: boolean;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
 */
  pricing_model?: CreateAnItemPriceBodyPricingModel;
  /** The cost of the item price when the pricing model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon`. \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.
   */
  period_unit?: CreateAnItemPriceBodyPeriodUnit;
  /** 

* When the item `type` is `plan`: The billing period of the plan in `period_unit`s. For example, create a 6 month plan by providing `period` as 6 and `period_unit` as month.
* When item `type` is `addon`: The period of the addon in `period_unit`s. For example, create an addon with a 2 month `period` by providing period as 2 and `period_unit` as `month`. The period of an addon is the duration for which its `price` applies. When attached to a plan, the addon is billed for the billing period of the plan. [Learn more.](https://www.chargebee.com/docs/2.0/addons-billingcycle.html)



If subscriptions or invoices exist for this item price, `period` cannot be changed. The `period` is mandatory when the item `type` is `plan` or `addon`.
 */
  period?: number;
  /** The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.
   */
  trial_period_unit?: CreateAnItemPriceBodyTrialPeriodUnit;
  /** The trial period of the plan in `trial_period_unit`s. You can also set [trial periods for addons](https://www.chargebee.com/docs/2.0/addons-trial.html); contact [Support](https://chargebee.freshdesk.com/support/home) to enable that feature.
   */
  trial_period?: number;
  /** Defines the shipping frequency. Example: to bill customer every 2 weeks, provide "2" here.
   */
  shipping_period?: number;
  /** Defines the shipping frequency in association with shipping period. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month.
   */
  shipping_period_unit?: CreateAnItemPriceBodyShippingPeriodUnit;
  /** The default number of billing cycles a subscription to the plan must run. Can be [overridden](./subscriptions?prod_cat_ver=2) for a subscription.

Addons can also [have billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html). However, you must contact [Support](https://chargebee.freshdesk.com/support/home) to enable that. Also, for addons, you can [override this](./attached_items?prod_cat_ver=2) while attaching it to a plan. However, if you provide the value while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items_item_type), then that value takes still higher precedence.
If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `billing_cycles` cannot be changed.
 */
  billing_cycles?: number;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.
   */
  trial_end_action?: CreateAnItemPriceBodyTrialEndAction;
  /** Parameters for tax_detail
   */
  tax_detail?: CreateAnItemPriceBodyTaxDetail;
  /** Parameters for accounting_detail
   */
  accounting_detail?: CreateAnItemPriceBodyAccountingDetail;
  /** Parameters for tiers
   */
  tiers?: CreateAnItemPriceBodyTiers;
  [key: string]: any;
};

export type CreateAnItemPriceChargebeeEventWebhook =
  (typeof CreateAnItemPriceChargebeeEventWebhook)[keyof typeof CreateAnItemPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemPriceChargebeeEventEmail =
  (typeof CreateAnItemPriceChargebeeEventEmail)[keyof typeof CreateAnItemPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemPriceChargebeeEventActions =
  (typeof CreateAnItemPriceChargebeeEventActions)[keyof typeof CreateAnItemPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnItemPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnItemPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnItemPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemPrices200ListItem = {
  item_price: ItemPrice;
};

export type ListItemPrices200 = {
  list: ListItemPrices200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListItemPricesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemPricesSortByDesc =
  (typeof ListItemPricesSortByDesc)[keyof typeof ListItemPricesSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesSortByDesc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

export type ListItemPricesSortByAsc =
  (typeof ListItemPricesSortByAsc)[keyof typeof ListItemPricesSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesSortByAsc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListItemPricesChannelIsNot =
  (typeof ListItemPricesChannelIsNot)[keyof typeof ListItemPricesChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListItemPricesChannelIs =
  (typeof ListItemPricesChannelIs)[keyof typeof ListItemPricesChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.

 */
export type ListItemPricesPeriodUnitIsNot =
  (typeof ListItemPricesPeriodUnitIsNot)[keyof typeof ListItemPricesPeriodUnitIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesPeriodUnitIsNot = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.

 */
export type ListItemPricesPeriodUnitIs =
  (typeof ListItemPricesPeriodUnitIs)[keyof typeof ListItemPricesPeriodUnitIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesPeriodUnitIs = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type ListItemPricesStatusIsNot =
  (typeof ListItemPricesStatusIsNot)[keyof typeof ListItemPricesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesStatusIsNot = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type ListItemPricesStatusIs =
  (typeof ListItemPricesStatusIs)[keyof typeof ListItemPricesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesStatusIs = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.

 */
export type ListItemPricesTrialPeriodUnitIsNot =
  (typeof ListItemPricesTrialPeriodUnitIsNot)[keyof typeof ListItemPricesTrialPeriodUnitIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesTrialPeriodUnitIsNot = {
  day: "day",
  month: "month",
} as const;

/**
 * \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.

 */
export type ListItemPricesTrialPeriodUnitIs =
  (typeof ListItemPricesTrialPeriodUnitIs)[keyof typeof ListItemPricesTrialPeriodUnitIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesTrialPeriodUnitIs = {
  day: "day",
  month: "month",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ListItemPricesItemTypeIsNot =
  (typeof ListItemPricesItemTypeIsNot)[keyof typeof ListItemPricesItemTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesItemTypeIsNot = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ListItemPricesItemTypeIs =
  (typeof ListItemPricesItemTypeIs)[keyof typeof ListItemPricesItemTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesItemTypeIs = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type ListItemPricesPricingModelIsNot =
  (typeof ListItemPricesPricingModelIsNot)[keyof typeof ListItemPricesPricingModelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesPricingModelIsNot = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type ListItemPricesPricingModelIs =
  (typeof ListItemPricesPricingModelIs)[keyof typeof ListItemPricesPricingModelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemPricesPricingModelIs = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type ListItemPricesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter item prices based on their <a href="#">id</a>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "basic_USD"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter item prices based on their <code>name</code>s.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is] = "basic USD"</i>
   */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter item prices based on their <code>pricing_model</code>. Possible values are : <dfn>flat_fee, per_unit, tiered, volume, stairstep.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>pricing_model[is] = "flat_fee"</i>
   */
  pricing_model?: {
    /** \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
     */
    is?: ListItemPricesPricingModelIs;
    /** \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
     */
    is_not?: ListItemPricesPricingModelIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter item prices based on their <code>item_id</code>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_id[is] = "basic"</i>
   */
  item_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter item prices based on <code>item_family_id</code>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_family_id[is] = "Acme"</i>
   */
  item_family_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter item prices based on <code>item_type</code>. Possible values are : <dfn>plan, addon, charge.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_type[is_not] = "plan"</i>
   */
  item_type?: {
    /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
     */
    is?: ListItemPricesItemTypeIs;
    /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
     */
    is_not?: ListItemPricesItemTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter item prices based on their <code>currency_code</code>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>currency_code[is_not] = "USD"</i>
   */
  currency_code?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, integer filter</dfn><br>Filter item prices based on their <code>trial_period</code>.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>trial_period[is] = "14"</i>
   */
  trial_period?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter item prices based on their <code>trial_period_unit</code>. Possible values are : <dfn>day, month.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>trial_period_unit[is] = "day"</i>
   */
  trial_period_unit?: {
    /** \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.
     */
    is?: ListItemPricesTrialPeriodUnitIs;
    /** \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.
     */
    is_not?: ListItemPricesTrialPeriodUnitIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter item prices based on their <code>status</code>. Possible values are : <dfn>active, archived, deleted.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "active"</i>
   */
  status?: {
    /** \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.
     */
    is?: ListItemPricesStatusIs;
    /** \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.
     */
    is_not?: ListItemPricesStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter item prices based on their <code>updated_at</code>.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter item prices based on their <code>period_unit</code>. Possible values are : <dfn>day, week, month, year.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>period_unit[is] = "month"</i>
   */
  period_unit?: {
    /** \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.
     */
    is?: ListItemPricesPeriodUnitIs;
    /** \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.
     */
    is_not?: ListItemPricesPeriodUnitIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, integer filter</dfn><br>Filter item prices based on their <code>period</code>.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>period[is] = "3"</i>
   */
  period?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The subscription channel this object originated from and is maintained in. Possible values are : <dfn>web, app_store, play_store.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>channel[is] = "APP STORE"</i>
   */
  channel?: {
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is?: ListItemPricesChannelIs;
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is_not?: ListItemPricesChannelIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>name, id, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "name"</i><br>This will sort the result based on the 'name' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListItemPricesSortByAsc;
    desc?: ListItemPricesSortByDesc;
  };
};

export type ListApplicableItemPricesForAPlanItemPrice200ListItem = {
  item_price: ItemPrice;
};

export type ListApplicableItemPricesForAPlanItemPrice200 = {
  list: ListApplicableItemPricesForAPlanItemPrice200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListApplicableItemPricesForAPlanItemPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListApplicableItemPricesForAPlanItemPriceSortByDesc =
  (typeof ListApplicableItemPricesForAPlanItemPriceSortByDesc)[keyof typeof ListApplicableItemPricesForAPlanItemPriceSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListApplicableItemPricesForAPlanItemPriceSortByDesc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

export type ListApplicableItemPricesForAPlanItemPriceSortByAsc =
  (typeof ListApplicableItemPricesForAPlanItemPriceSortByAsc)[keyof typeof ListApplicableItemPricesForAPlanItemPriceSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListApplicableItemPricesForAPlanItemPriceSortByAsc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

export type ListApplicableItemPricesForAPlanItemPriceParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * The id of the item that the item price belongs to.
   */
  item_id?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>name, id, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "name"</i><br>This will sort the result based on the 'name' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListApplicableItemPricesForAPlanItemPriceSortByAsc;
    desc?: ListApplicableItemPricesForAPlanItemPriceSortByDesc;
  };
};

export type DeleteAnItemPrice200 = {
  item_price: ItemPrice;
};

export type DeleteAnItemPriceChargebeeEventWebhook =
  (typeof DeleteAnItemPriceChargebeeEventWebhook)[keyof typeof DeleteAnItemPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemPriceChargebeeEventEmail =
  (typeof DeleteAnItemPriceChargebeeEventEmail)[keyof typeof DeleteAnItemPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemPriceChargebeeEventActions =
  (typeof DeleteAnItemPriceChargebeeEventActions)[keyof typeof DeleteAnItemPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnItemPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnItemPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnItemPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAnItemPrice200 = {
  item_price: ItemPrice;
};

/**
 * Parameters for tiers

 */
export type UpdateAnItemPriceBodyTiers = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`; the total cost for the item price when the `pricing_model` is `stairstep`. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the addon. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for accounting_detail

 */
export type UpdateAnItemPriceBodyAccountingDetail = {
  /** This maps to the sku or product name in the accounting integration.
   */
  sku?: string;
  /** The identifier of the chart of accounts under which the item price falls in the accounting system.
   */
  accounting_code?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, provide the category name and option. Use the format: `<category-name>: <option>`. For example:`Location: Singapore.`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Classes, provide the class name here. Use the following format: `<parent class>:<sub-class-1>:<sub-class-2>...`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Classes, provide the class name here. Use the following format: `<parent class>: <sub-class-1>: <sub-class2>....` For example: `Services: Plan.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Locations, provide the name of the Location here.

 */
  accounting_category1?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, then provide the second category name and option here. Use the format: `<category-name>: <option>....` For example, `Region: South`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Location, provide the Location name here. Use the following format: `<parent-location>:<sub-location-1>:<sub-location-2>....` For example: `Location: North America: Canada`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Locations, provide the location name here. Use the following format `<parent-location> : <sub-location-1>: <sub-location-2>....` For example: `NA:US:CA`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Dimensions, provide the value of the Dimension here.

 */
  accounting_category2?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Departments, pass the department name here. Use the following format: `<parent-department> : <sub-department-1>: <sub-department-2>....` For example: `Production: Assembly.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under multiple Dimensions, provide the value of the second Dimension here.
 */
  accounting_category3?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/1.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )Provide the "Revenue Recognition Rule Id" for the product from NetSuite.
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you have configured "Revenue Recognition Templates" for products in Intacct, provide the template ID for the product.
 */
  accounting_category4?: string;
};

/**
 * Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type UpdateAnItemPriceBodyTaxDetailAvalaraSaleType =
  (typeof UpdateAnItemPriceBodyTaxDetailAvalaraSaleType)[keyof typeof UpdateAnItemPriceBodyTaxDetailAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyTaxDetailAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

/**
 * Parameters for tax_detail

 */
export type UpdateAnItemPriceBodyTaxDetail = {
  /** The tax profile of the item price.
   */
  tax_profile_id?: string;
  /** The [Avalara tax codes](https://taxcode.avatax.avalara.com) for the item price. Applicable only if you use [AvaTax for Sales integration](https://www.chargebee.com/docs/2.0/avalara-for-sales.html).
   */
  avalara_tax_code?: string;
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string;
  /** Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user
   */
  avalara_sale_type?: UpdateAnItemPriceBodyTaxDetailAvalaraSaleType;
  /** Indicates the [Avalara transaction type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_transaction_type?: number;
  /** Indicates the [Avalara service type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_service_type?: number;
  /** The [TaxJar product code](https://developers.taxjar.com/api/reference/#get-list-tax-categories) for the item price. Applicable only if you use [TaxJar integration](https://www.chargebee.com/docs/2.0/taxjar.html).
   */
  taxjar_product_code?: string;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.

 */
export type UpdateAnItemPriceBodyTrialEndAction =
  (typeof UpdateAnItemPriceBodyTrialEndAction)[keyof typeof UpdateAnItemPriceBodyTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyTrialEndAction = {
  site_default: "site_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * Defines the shipping frequency in association with shipping period. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month.

 */
export type UpdateAnItemPriceBodyShippingPeriodUnit =
  (typeof UpdateAnItemPriceBodyShippingPeriodUnit)[keyof typeof UpdateAnItemPriceBodyShippingPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyShippingPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.

 */
export type UpdateAnItemPriceBodyTrialPeriodUnit =
  (typeof UpdateAnItemPriceBodyTrialPeriodUnit)[keyof typeof UpdateAnItemPriceBodyTrialPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyTrialPeriodUnit = {
  day: "day",
  month: "month",
} as const;

/**
 * The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon`. \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.

 */
export type UpdateAnItemPriceBodyPeriodUnit =
  (typeof UpdateAnItemPriceBodyPeriodUnit)[keyof typeof UpdateAnItemPriceBodyPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type UpdateAnItemPriceBodyPricingModel =
  (typeof UpdateAnItemPriceBodyPricingModel)[keyof typeof UpdateAnItemPriceBodyPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * A set of key-value pairs stored as additional information for the item price. \[Learn more\](./#meta_data).

 */
export type UpdateAnItemPriceBodyMetadata = { [key: string]: any };

/**
 * The status of the item price. \* archived - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* active - The item price can be used in subscriptions. \* deleted - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type UpdateAnItemPriceBodyStatus =
  (typeof UpdateAnItemPriceBodyStatus)[keyof typeof UpdateAnItemPriceBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceBodyStatus = {
  active: "active",
  archived: "archived",
} as const;

export type UpdateAnItemPriceBody = {
  /** A unique display name for the item price in the Chargebee UI. If `external_name` is not provided, this is also used in customer-facing pages and documents such as [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2).
   */
  name?: string;
  /** Description of the item price.
   */
  description?: string;
  /** The status of the item price. \* archived - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* active - The item price can be used in subscriptions. \* deleted - Indicates that the item price has been deleted. The `id` and `name` can be reused.
   */
  status?: UpdateAnItemPriceBodyStatus;
  /** The name of the item price used in customer-facing pages and documents. These include [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2). If not provided, then `name` is used.
   */
  external_name?: string;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/2.0/supported-currencies.html)) for the item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `currency_code` cannot be changed.
   */
  currency_code?: string;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** Specifies whether taxes apply to this item price. This value is set and returned even if [Taxes](https://www.chargebee.com/docs/tax.html) have been disabled in Chargebee. However, the value is effective only while Taxes are enabled.
   */
  is_taxable?: boolean;
  /** Free quantity the subscriptions of this item_price will have. Only the quantity more than this will be charged for the subscription.
   */
  free_quantity?: number;
  /** The quantity of the item that is available free-of-charge, represented in decimal. When a subscription is created for this plan or when the plan of a subscription is changed to this one, only the quantity above this number is charged for. Applicable for quantity-based plans and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  free_quantity_in_decimal?: string;
  /** A set of key-value pairs stored as additional information for the item price. \[Learn more\](./#meta_data).
   */
  metadata?: UpdateAnItemPriceBodyMetadata;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
 */
  pricing_model?: UpdateAnItemPriceBodyPricingModel;
  /** The cost of the item price when the pricing model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon`. \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.
   */
  period_unit?: UpdateAnItemPriceBodyPeriodUnit;
  /** 

* When the item `type` is `plan`: The billing period of the plan in `period_unit`s. For example, create a 6 month plan by providing `period` as 6 and `period_unit` as month.
* When item `type` is `addon`: The period of the addon in `period_unit`s. For example, create an addon with a 2 month `period` by providing period as 2 and `period_unit` as `month`. The period of an addon is the duration for which its `price` applies. When attached to a plan, the addon is billed for the billing period of the plan. [Learn more.](https://www.chargebee.com/docs/2.0/addons-billingcycle.html)



If subscriptions or invoices exist for this item price, `period` cannot be changed. The `period` is mandatory when the item `type` is `plan` or `addon`.
 */
  period?: number;
  /** The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.
   */
  trial_period_unit?: UpdateAnItemPriceBodyTrialPeriodUnit;
  /** The trial period of the plan in `trial_period_unit`s. You can also set [trial periods for addons](https://www.chargebee.com/docs/2.0/addons-trial.html); contact [Support](https://chargebee.freshdesk.com/support/home) to enable that feature.
   */
  trial_period?: number;
  /** Defines the shipping frequency. Example: to bill customer every 2 weeks, provide "2" here.
   */
  shipping_period?: number;
  /** Defines the shipping frequency in association with shipping period. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month.
   */
  shipping_period_unit?: UpdateAnItemPriceBodyShippingPeriodUnit;
  /** The default number of billing cycles a subscription to the plan must run. Can be [overridden](./subscriptions?prod_cat_ver=2) for a subscription.

Addons can also [have billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html). However, you must contact [Support](https://chargebee.freshdesk.com/support/home) to enable that. Also, for addons, you can [override this](./attached_items?prod_cat_ver=2) while attaching it to a plan. However, if you provide the value while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items_item_type), then that value takes still higher precedence.
If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `billing_cycles` cannot be changed.
 */
  billing_cycles?: number;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.
   */
  trial_end_action?: UpdateAnItemPriceBodyTrialEndAction;
  /** Whether the item price's description should be shown on [invoice PDFs](/docs/api/invoices#retrieve_invoice_as_pdf). If this Boolean is changed, only invoices generated (or [regenerated](https://www.chargebee.com/docs/invoice-operations.html#actions-for-payment-due-not-paid-invoices_regenerate-invoice)) after the change are affected; past invoices are not.
   */
  show_description_in_invoices?: boolean;
  /** Whether the item price's description should be shown on [quote PDFs](/docs/api/quotes#retrieve_quote_as_pdf). If this Boolean is changed, only quotes created after the change are affected; past quotes are not.
   */
  show_description_in_quotes?: boolean;
  /** Parameters for tax_detail
   */
  tax_detail?: UpdateAnItemPriceBodyTaxDetail;
  /** Parameters for accounting_detail
   */
  accounting_detail?: UpdateAnItemPriceBodyAccountingDetail;
  /** Parameters for tiers
   */
  tiers?: UpdateAnItemPriceBodyTiers;
  [key: string]: any;
};

export type UpdateAnItemPriceChargebeeEventWebhook =
  (typeof UpdateAnItemPriceChargebeeEventWebhook)[keyof typeof UpdateAnItemPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemPriceChargebeeEventEmail =
  (typeof UpdateAnItemPriceChargebeeEventEmail)[keyof typeof UpdateAnItemPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemPriceChargebeeEventActions =
  (typeof UpdateAnItemPriceChargebeeEventActions)[keyof typeof UpdateAnItemPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAnItemPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAnItemPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAnItemPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnItemPrice200 = {
  item_price: ItemPrice;
};

export type RetrieveAnItemPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListApplicableItemsForAPlanItemPrice200ListItem = {
  item: Item;
};

export type ListApplicableItemsForAPlanItemPrice200 = {
  list: ListApplicableItemsForAPlanItemPrice200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListApplicableItemsForAPlanItemPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListApplicableItemsForAPlanItemPriceSortByDesc =
  (typeof ListApplicableItemsForAPlanItemPriceSortByDesc)[keyof typeof ListApplicableItemsForAPlanItemPriceSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListApplicableItemsForAPlanItemPriceSortByDesc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

export type ListApplicableItemsForAPlanItemPriceSortByAsc =
  (typeof ListApplicableItemsForAPlanItemPriceSortByAsc)[keyof typeof ListApplicableItemsForAPlanItemPriceSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListApplicableItemsForAPlanItemPriceSortByAsc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

export type ListApplicableItemsForAPlanItemPriceParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>name, id, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "name"</i><br>This will sort the result based on the 'name' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListApplicableItemsForAPlanItemPriceSortByAsc;
    desc?: ListApplicableItemsForAPlanItemPriceSortByDesc;
  };
};

export type UpdateAnItem200 = {
  item: Item;
};

/**
 * The status of the item. \* active - The item can be used to create new item prices. \* deleted - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items). \* archived - The item is no longer active and no new item prices can be created

 */
export type UpdateAnItemBodyStatus =
  (typeof UpdateAnItemBodyStatus)[keyof typeof UpdateAnItemBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemBodyStatus = {
  active: "active",
  archived: "archived",
} as const;

/**
 * A set of key-value pairs stored as additional information for the item. \[Learn more\](./#meta_data).

 */
export type UpdateAnItemBodyMetadata = { [key: string]: any };

/**
 * Indicates which addon-items and charge-items can be applied to the item. Only possible for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type UpdateAnItemBodyItemApplicability =
  (typeof UpdateAnItemBodyItemApplicability)[keyof typeof UpdateAnItemBodyItemApplicability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemBodyItemApplicability = {
  all: "all",
  restricted: "restricted",
} as const;

export type UpdateAnItemBody = {
  /** The display name for the item. Must be unique. This is visible only in Chargebee and not to customers.
   */
  name?: string;
  /** Description of the item. This is visible only in Chargebee and not to customers.
   */
  description?: string;
  /** Indicates that the item is a physical product. If Orders are enabled in Chargebee, subscriptions created for this item will have orders associated with them.
   */
  is_shippable?: boolean;
  /** A unique display name for the item.
   */
  external_name?: string;
  /** The `id` of the [Item family](./item_families?prod_cat_ver=2) that the item belongs to. Is mandatory when [Product Families](https://www.chargebee.com/docs/2.0/product-families.html) have been enabled.
   */
  item_family_id?: string;
  /** Allow customers to change their subscription to this plan via the [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html). Applies only for plan-items. This requires the Portal configuration to [allow changing subscriptions](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription).
   */
  enabled_in_portal?: boolean;
  /** If `enabled_for_checkout`, then the URL to be redirected to once the checkout is complete. This parameter is only meant for plan-items.
   */
  redirect_url?: string;
  /** Allow the plan to subscribed to via Checkout. Applies only for plan-items.
   **Note:** Only the in-app version of Checkout is supported for Product Catalog v2.
   */
  enabled_for_checkout?: boolean;
  /** Indicates which addon-items and charge-items can be applied to the item. Only possible for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
   */
  item_applicability?: UpdateAnItemBodyItemApplicability;
  /** The list of ids of addon-items and charge-items that can be applied to the plan-item. This parameter can be provided only for plan-items and that too when item_applicability is restricted. Other details of attaching items can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API.
   */
  applicable_items?: string[];
  /** The unit of measure for a quantity-based item. This is displayed on the Chargebee UI and on customer facing documents/pages. The latter includes [hosted pages](./hosted_pages?prod_cat_ver=2), [invoices](./invoices?prod_cat_ver=2) and [quotes](./quotes?prod_cat_ver=2#). Examples follow:  

* "user" for a cloud-collaboration platform.
* "GB" for a data service.
* "issue" for a magazine.

**Note:** `unit` is only exposed via the API to quantity-based addons; it is however NOT exposed to quantity-based plans. .
 */
  unit?: string;
  /** The URL to redirect to once the gift has been claimed by the receiver.
   */
  gift_claim_redirect_url?: string;
  /** A set of key-value pairs stored as additional information for the item. \[Learn more\](./#meta_data).
   */
  metadata?: UpdateAnItemBodyMetadata;
  /** The item is included in MRR calculations for your site. This attribute is only applicable for items of `type = charge` and when the feature is enabled in Chargebee. Note: If the site-level setting is to exclude charge-items from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean;
  /** The status of the item. \* active - The item can be used to create new item prices. \* deleted - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items). \* archived - The item is no longer active and no new item prices can be created
   */
  status?: UpdateAnItemBodyStatus;
  [key: string]: any;
};

export type UpdateAnItemChargebeeEventWebhook =
  (typeof UpdateAnItemChargebeeEventWebhook)[keyof typeof UpdateAnItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemChargebeeEventEmail =
  (typeof UpdateAnItemChargebeeEventEmail)[keyof typeof UpdateAnItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemChargebeeEventActions =
  (typeof UpdateAnItemChargebeeEventActions)[keyof typeof UpdateAnItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAnItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAnItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAnItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnItem200 = {
  item: Item;
};

export type RetrieveAnItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAnItem200 = {
  item: Item;
};

export type DeleteAnItemChargebeeEventWebhook =
  (typeof DeleteAnItemChargebeeEventWebhook)[keyof typeof DeleteAnItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemChargebeeEventEmail =
  (typeof DeleteAnItemChargebeeEventEmail)[keyof typeof DeleteAnItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemChargebeeEventActions =
  (typeof DeleteAnItemChargebeeEventActions)[keyof typeof DeleteAnItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAnItem200 = {
  item: Item;
};

/**
 * A set of key-value pairs stored as additional information for the item. \[Learn more\](./#meta_data).

 */
export type CreateAnItemBodyMetadata = { [key: string]: any };

/**
 * How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is `metered`. This value overrides the one [set at the site level](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing). . \* sum_of_usages - the net quantity is the sum of the `quantity` of all usages for the current term. \* last_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* max_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.

 */
export type CreateAnItemBodyUsageCalculation =
  (typeof CreateAnItemBodyUsageCalculation)[keyof typeof CreateAnItemBodyUsageCalculation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemBodyUsageCalculation = {
  sum_of_usages: "sum_of_usages",
  last_usage: "last_usage",
  max_usage: "max_usage",
} as const;

/**
 * Indicates which addon-items and charge-items can be applied to the item. Only possible for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type CreateAnItemBodyItemApplicability =
  (typeof CreateAnItemBodyItemApplicability)[keyof typeof CreateAnItemBodyItemApplicability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemBodyItemApplicability = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * The type of the item. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* addon - A recurring component that can be added to a subscription in addition to its plan.

 */
export type CreateAnItemBodyType =
  (typeof CreateAnItemBodyType)[keyof typeof CreateAnItemBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemBodyType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

export type CreateAnItemBody = {
  /** The identifier for the item. Must be unique and is immutable once set.
   */
  id: string;
  /** A unique display name for the item. Must be unique. This is visible only in Chargebee and not to customers.
   */
  name: string;
  /** The type of the item. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* addon - A recurring component that can be added to a subscription in addition to its plan.
   */
  type: CreateAnItemBodyType;
  /** Description of the item. This is visible only in Chargebee and not to customers.
   */
  description?: string;
  /** The `id` of the [Item family](./item_families?prod_cat_ver=2) that the item belongs to. Is mandatory when [Product Families](https://www.chargebee.com/docs/2.0/product-families.html) have been enabled.
   */
  item_family_id: string;
  /** Specifies if gift subscriptions can be created for this item.
   */
  is_giftable?: boolean;
  /** Indicates that the item is a physical product. If Orders are enabled in Chargebee, subscriptions created for this item will have orders associated with them.
   */
  is_shippable?: boolean;
  /** A unique display name for the item.
   */
  external_name?: string;
  /** Allow customers to change their subscription to this plan via the [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html). Applies only for plan-items. This requires the Portal configuration to [allow changing subscriptions](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). Only the in-app version of the Portal is supported for Product Catalog v2.
   */
  enabled_in_portal?: boolean;
  /** If `enabled_for_checkout`, then the URL to be redirected to once the checkout is complete. This attribute is only available for plan-items.
   */
  redirect_url?: string;
  /** Allow the plan to subscribed to via Checkout. Applies only for plan-items.
   **Note:** Only the in-app version of Checkout is supported for Product Catalog v2.
   */
  enabled_for_checkout?: boolean;
  /** Indicates which addon-items and charge-items can be applied to the item. Only possible for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
   */
  item_applicability?: CreateAnItemBodyItemApplicability;
  /** The list of ids of addon-items and charge-items that can be applied to the plan-item. This parameter can be provided only for plan-items and that too when item_applicability is restricted. Other details of attaching items can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API.
   */
  applicable_items?: string[];
  /** The unit of measure for a quantity-based item. This is displayed on the Chargebee UI and on customer facing documents/pages. The latter includes [hosted pages](./hosted_pages?prod_cat_ver=2), [invoices](./invoices?prod_cat_ver=2) and [quotes](./quotes?prod_cat_ver=2#). Examples follow:  

* "user" for a cloud-collaboration platform.
* "GB" for a data service.
* "issue" for a magazine.

**Note:** `unit` is only exposed via the API to quantity-based addons; it is however NOT exposed to quantity-based plans. .
 */
  unit?: string;
  /** The URL to redirect to once the gift has been claimed by the receiver.
   */
  gift_claim_redirect_url?: string;
  /** The item is included in MRR calculations for your site. This attribute is only applicable for items of `type = charge` and when the feature is enabled in Chargebee. Note: If the site-level setting is to exclude charge-items from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean;
  /** Specifies whether the item undergoes metered billing. When `true`, the quantity is calculated from [usage records](/docs/api/usages?prod_cat_ver=2). When `false`, the `quantity` is as determined while adding an item price to the subscription. Applicable only for items of `type` `plan` or `addon` and when [Metered Billing](https://www.chargebee.com/docs/2.0/metered_billing.html) is enabled. The value of this attribute cannot be changed.
   */
  metered?: boolean;
  /** How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is `metered`. This value overrides the one [set at the site level](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing). . \* sum_of_usages - the net quantity is the sum of the `quantity` of all usages for the current term. \* last_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* max_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.
   */
  usage_calculation?: CreateAnItemBodyUsageCalculation;
  /** A set of key-value pairs stored as additional information for the item. \[Learn more\](./#meta_data).
   */
  metadata?: CreateAnItemBodyMetadata;
  [key: string]: any;
};

export type CreateAnItemChargebeeEventWebhook =
  (typeof CreateAnItemChargebeeEventWebhook)[keyof typeof CreateAnItemChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemChargebeeEventEmail =
  (typeof CreateAnItemChargebeeEventEmail)[keyof typeof CreateAnItemChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemChargebeeEventActions =
  (typeof CreateAnItemChargebeeEventActions)[keyof typeof CreateAnItemChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnItemChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnItemChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnItemChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItems200ListItem = {
  item: Item;
};

export type ListItems200 = {
  list: ListItems200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemsSortByDesc =
  (typeof ListItemsSortByDesc)[keyof typeof ListItemsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsSortByDesc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

export type ListItemsSortByAsc =
  (typeof ListItemsSortByAsc)[keyof typeof ListItemsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsSortByAsc = {
  name: "name",
  id: "id",
  updated_at: "updated_at",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListItemsChannelIsNot =
  (typeof ListItemsChannelIsNot)[keyof typeof ListItemsChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListItemsChannelIs =
  (typeof ListItemsChannelIs)[keyof typeof ListItemsChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.

 */
export type ListItemsUsageCalculationIsNot =
  (typeof ListItemsUsageCalculationIsNot)[keyof typeof ListItemsUsageCalculationIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsUsageCalculationIsNot = {
  sum_of_usages: "sum_of_usages",
  last_usage: "last_usage",
  max_usage: "max_usage",
} as const;

/**
 * \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.

 */
export type ListItemsUsageCalculationIs =
  (typeof ListItemsUsageCalculationIs)[keyof typeof ListItemsUsageCalculationIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsUsageCalculationIs = {
  sum_of_usages: "sum_of_usages",
  last_usage: "last_usage",
  max_usage: "max_usage",
} as const;

export type ListItemsMeteredIs =
  (typeof ListItemsMeteredIs)[keyof typeof ListItemsMeteredIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsMeteredIs = {
  true: "true",
  false: "false",
} as const;

export type ListItemsEnabledInPortalIs =
  (typeof ListItemsEnabledInPortalIs)[keyof typeof ListItemsEnabledInPortalIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsEnabledInPortalIs = {
  true: "true",
  false: "false",
} as const;

export type ListItemsEnabledForCheckoutIs =
  (typeof ListItemsEnabledForCheckoutIs)[keyof typeof ListItemsEnabledForCheckoutIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsEnabledForCheckoutIs = {
  true: "true",
  false: "false",
} as const;

export type ListItemsIsGiftableIs =
  (typeof ListItemsIsGiftableIs)[keyof typeof ListItemsIsGiftableIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsIsGiftableIs = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).

 */
export type ListItemsStatusIsNot =
  (typeof ListItemsStatusIsNot)[keyof typeof ListItemsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsStatusIsNot = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).

 */
export type ListItemsStatusIs =
  (typeof ListItemsStatusIs)[keyof typeof ListItemsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsStatusIs = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type ListItemsItemApplicabilityIsNot =
  (typeof ListItemsItemApplicabilityIsNot)[keyof typeof ListItemsItemApplicabilityIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsItemApplicabilityIsNot = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type ListItemsItemApplicabilityIs =
  (typeof ListItemsItemApplicabilityIs)[keyof typeof ListItemsItemApplicabilityIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsItemApplicabilityIs = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ListItemsTypeIsNot =
  (typeof ListItemsTypeIsNot)[keyof typeof ListItemsTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsTypeIsNot = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ListItemsTypeIs =
  (typeof ListItemsTypeIs)[keyof typeof ListItemsTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListItemsTypeIs = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

export type ListItemsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter items based on item id.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "basic"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter items based on <code>item_family_id</code>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_family_id[is] = "acme"</i>
   */
  item_family_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter items based on item <code>type</code>. Possible values are : <dfn>plan, addon, charge.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is] = "plan"</i>
   */
  type?: {
    /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
     */
    is?: ListItemsTypeIs;
    /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
     */
    is_not?: ListItemsTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter items based on item <code>name</code>.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is_not] = "basic"</i>
   */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter items based on <code>item_applicability</code>. Possible values are : <dfn>all, restricted.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_applicability[is_not] = "all"</i>
   */
  item_applicability?: {
    /** \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
     */
    is?: ListItemsItemApplicabilityIs;
    /** \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
     */
    is_not?: ListItemsItemApplicabilityIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter items based on item <code>status</code>. Possible values are : <dfn>active, archived, deleted.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "active"</i>
   */
  status?: {
    /** \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).
     */
    is?: ListItemsStatusIs;
    /** \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).
     */
    is_not?: ListItemsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Specifies if gift subscriptions can be created for this item. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>is_giftable[is] = "true"</i>
   */
  is_giftable?: {
    is?: ListItemsIsGiftableIs;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter items based on when the items were last updated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Allow the plan to subscribed to via Checkout. Applies only for plan-items. <br><strong>Note:</strong> Only the in-app version of Checkout is supported for Product Catalog v2. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>enabled_for_checkout[is] = "null"</i>
   */
  enabled_for_checkout?: {
    is?: ListItemsEnabledForCheckoutIs;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Allow customers to change their subscription to this plan via the <a href="https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html" target="_blank">Self-Serve Portal</a>. Applies only for plan-items. This requires the Portal configuration to <a target="_blank" href="https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription" target="_blank"> allow changing subscriptions</a>. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>enabled_in_portal[is] = "null"</i>
   */
  enabled_in_portal?: {
    is?: ListItemsEnabledInPortalIs;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Specifies whether the item undergoes metered billing. When <code>true</code>, the quantity is calculated from <a href="/docs/api/usages?prod_cat_ver=2">usage records</a>. When <code>false</code>, the <code>quantity</code> is as determined while adding an item price to the subscription. Applicable only for items of <code>type</code> <code>plan</code> or <code>addon</code> and when <a href="https://www.chargebee.com/docs/2.0/metered_billing.html" rel="noopener noreferrer" target="_blank">Metered Billing</a> is enabled. The value of this attribute cannot be changed. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>metered[is] = "true"</i>
   */
  metered?: {
    is?: ListItemsMeteredIs;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is <code>metered</code>. This value overrides the one <a href="https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing" rel="noopener noreferrer" target="_blank">set at the site level</a>. . Possible values are : <dfn>sum_of_usages, last_usage, max_usage.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>usage_calculation[is_not] = "SUM_OF_USAGES"</i>
   */
  usage_calculation?: {
    /** \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.
     */
    is?: ListItemsUsageCalculationIs;
    /** \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.
     */
    is_not?: ListItemsUsageCalculationIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The subscription channel this object originated from and is maintained in. Possible values are : <dfn>web, app_store, play_store.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>channel[is] = "APP STORE"</i>
   */
  channel?: {
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is?: ListItemsChannelIs;
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is_not?: ListItemsChannelIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>name, id, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "name"</i><br>This will sort the result based on the 'name' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListItemsSortByAsc;
    desc?: ListItemsSortByDesc;
  };
};

export type DeleteAProductVariant200 = {
  variant: Variant;
};

export type DeleteAProductVariantChargebeeEventWebhook =
  (typeof DeleteAProductVariantChargebeeEventWebhook)[keyof typeof DeleteAProductVariantChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAProductVariantChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAProductVariantChargebeeEventEmail =
  (typeof DeleteAProductVariantChargebeeEventEmail)[keyof typeof DeleteAProductVariantChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAProductVariantChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAProductVariantChargebeeEventActions =
  (typeof DeleteAProductVariantChargebeeEventActions)[keyof typeof DeleteAProductVariantChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAProductVariantChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAProductVariantHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAProductVariantChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAProductVariantChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAProductVariantChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAProductVariant200 = {
  variant: Variant;
};

/**
 * The meta description of the product variant for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).

 */
export type UpdateAProductVariantBodyMetadata = { [key: string]: any };

/**
 * Status of the product variant. \* active - The active product variants are visible on the storefront, subscription, or checkout. \* inactive - The inactive product variants are not visible on the storefront, subscription, or checkout.

 */
export type UpdateAProductVariantBodyStatus =
  (typeof UpdateAProductVariantBodyStatus)[keyof typeof UpdateAProductVariantBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductVariantBodyStatus = {
  active: "active",
  inactive: "inactive",
} as const;

export type UpdateAProductVariantBody = {
  /** This is a unique name that appears for each product variant to the end user.
   */
  name?: string;
  /** A detailed description of this product variant.
   */
  description?: string;
  /** Status of the product variant. \* active - The active product variants are visible on the storefront, subscription, or checkout. \* inactive - The inactive product variants are not visible on the storefront, subscription, or checkout.
   */
  status?: UpdateAProductVariantBodyStatus;
  /** The unique name that appears for each product variant to the end user.
   */
  external_name?: string;
  /** A unique identifier code a seller assigns to each product variant. Retailers and merchants use SKUs to keep track of inventory and sales data and help organize products within a store or warehouse. SKUs can include a combination of letters, numbers, and symbols and can vary in length depending on the seller's needs.
   */
  sku?: string;
  /** The meta description of the product variant for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).
   */
  metadata?: UpdateAProductVariantBodyMetadata;
};

export type UpdateAProductVariantChargebeeEventWebhook =
  (typeof UpdateAProductVariantChargebeeEventWebhook)[keyof typeof UpdateAProductVariantChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductVariantChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAProductVariantChargebeeEventEmail =
  (typeof UpdateAProductVariantChargebeeEventEmail)[keyof typeof UpdateAProductVariantChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductVariantChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAProductVariantChargebeeEventActions =
  (typeof UpdateAProductVariantChargebeeEventActions)[keyof typeof UpdateAProductVariantChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductVariantChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAProductVariantHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAProductVariantChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAProductVariantChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAProductVariantChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAProductVariant200 = {
  variant: Variant;
};

export type RetrieveAProductVariantHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAProductVariant200 = {
  variant: Variant;
};

/**
 * List of product variants option values.

 */
export type CreateAProductVariantBodyOptionValues = {
  /** Name of the option values.
   */
  name: string[];
  /** Pass values of the `option_values`
   */
  value: string[];
};

/**
 * Status of the product variant. Refer to the [table](https://apidocs.chargebee.com/docs/api/variants?prod_cat_ver=2#create_a_product_variant) for more information. \* active - The active product variants are visible on the storefront, subscription, or checkout. \* inactive - The inactive product variants are not visible on the storefront, subscription, or checkout.

 */
export type CreateAProductVariantBodyStatus =
  (typeof CreateAProductVariantBodyStatus)[keyof typeof CreateAProductVariantBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductVariantBodyStatus = {
  active: "active",
  inactive: "inactive",
} as const;

/**
 * The meta description of the product variant for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).

 */
export type CreateAProductVariantBodyMetadata = { [key: string]: any };

export type CreateAProductVariantBody = {
  /** The immutable unique identifier of a product variant. If not passed, it will get autogenerated.
   */
  id?: string;
  /** This is a unique name that appears for each product variant to the end user.
   */
  name: string;
  /** The unique name that appears for each product variant to the end user.
   */
  external_name?: string;
  /** A detailed description of this product variant.
   */
  description?: string;
  /** A unique identifier code a seller assigns to each product variant. Retailers and merchants use SKUs to keep track of inventory and sales data and help organize products within a store or warehouse. SKUs can include a combination of letters, numbers, and symbols and can vary in length depending on the seller's needs.
   */
  sku?: string;
  /** The meta description of the product variant for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).
   */
  metadata?: CreateAProductVariantBodyMetadata;
  /** Status of the product variant. Refer to the [table](https://apidocs.chargebee.com/docs/api/variants?prod_cat_ver=2#create_a_product_variant) for more information. \* active - The active product variants are visible on the storefront, subscription, or checkout. \* inactive - The inactive product variants are not visible on the storefront, subscription, or checkout.
   */
  status?: CreateAProductVariantBodyStatus;
  /** List of product variants option values.
   */
  option_values?: CreateAProductVariantBodyOptionValues;
};

export type CreateAProductVariantChargebeeEventWebhook =
  (typeof CreateAProductVariantChargebeeEventWebhook)[keyof typeof CreateAProductVariantChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductVariantChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAProductVariantChargebeeEventEmail =
  (typeof CreateAProductVariantChargebeeEventEmail)[keyof typeof CreateAProductVariantChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductVariantChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAProductVariantChargebeeEventActions =
  (typeof CreateAProductVariantChargebeeEventActions)[keyof typeof CreateAProductVariantChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductVariantChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAProductVariantHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAProductVariantChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAProductVariantChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAProductVariantChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListProductVariants200ListItem = {
  variant: Variant;
};

export type ListProductVariants200 = {
  list: ListProductVariants200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListProductVariantsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListProductVariantsSortByDesc =
  (typeof ListProductVariantsSortByDesc)[keyof typeof ListProductVariantsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductVariantsSortByDesc = {
  name: "name",
  id: "id",
  status: "status",
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListProductVariantsSortByAsc =
  (typeof ListProductVariantsSortByAsc)[keyof typeof ListProductVariantsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductVariantsSortByAsc = {
  name: "name",
  id: "id",
  status: "status",
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

/**
 * \* \`active\` - active \* \`inactive\` - inactive

 */
export type ListProductVariantsStatusIsNot =
  (typeof ListProductVariantsStatusIsNot)[keyof typeof ListProductVariantsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductVariantsStatusIsNot = {
  active: "active",
  inactive: "inactive",
} as const;

/**
 * \* \`active\` - active \* \`inactive\` - inactive

 */
export type ListProductVariantsStatusIs =
  (typeof ListProductVariantsStatusIs)[keyof typeof ListProductVariantsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductVariantsStatusIs = {
  active: "active",
  inactive: "inactive",
} as const;

export type ListProductVariantsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to <code>true</code>, it includes the deleted variants in the API response.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter variant based on their <a href="#">id</a>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is_not] = "basic"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter variant based on their <code>name</code>s.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is] = "basic"</i>
   */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter variant based on their <code>sku</code>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sku[is] = "basic"</i>
   */
  sku?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter variant based on their <code>status</code>. Possible values are : <dfn>active, inactive.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "active"</i>
   */
  status?: {
    /** \* \`active\` - active \* \`inactive\` - inactive
     */
    is?: ListProductVariantsStatusIs;
    /** \* \`active\` - active \* \`inactive\` - inactive
     */
    is_not?: ListProductVariantsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter product  based on their <code>updated time</code>.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[before] = "basic"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter product  based on their <code>created time</code>.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[before] = "basic"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>name, id, status, created_at, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "name"</i><br>This will sort the result based on the 'name' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListProductVariantsSortByAsc;
    desc?: ListProductVariantsSortByDesc;
  };
};

export type CreateAProduct200 = {
  product: Product;
};

/**
 * The meta description of the product for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).

 */
export type CreateAProductBodyMetadata = { [key: string]: any };

/**
 * Status of the product. \* active - The active products are visible on the storefront, subscription, or checkout. \* inactive - The inactive products are not visible on the storefront, subscription, or checkout.

 */
export type CreateAProductBodyStatus =
  (typeof CreateAProductBodyStatus)[keyof typeof CreateAProductBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductBodyStatus = {
  active: "active",
  inactive: "inactive",
} as const;

export type CreateAProductBody = {
  /** A unique internal name for the product. This is only visible in Chargebee.
   */
  name: string;
  /** The unique name that appears to the end user for each product.
   */
  external_name: string;
  /** Status of the product. \* active - The active products are visible on the storefront, subscription, or checkout. \* inactive - The inactive products are not visible on the storefront, subscription, or checkout.
   */
  status: CreateAProductBodyStatus;
  /** The immutable unique identifier of the product. If not passed, it will get autogenerated.
   */
  id?: string;
  /** Description of the product.
   */
  description?: string;
  /** A unique identifier code a seller assigns to each product or item. Retailers and merchants use SKUs to keep track of inventory and sales data and help organize products within a store or warehouse. SKUs can include a combination of letters, numbers, and symbols and can vary in length depending on the seller's needs.
   */
  sku?: string;
  /** The meta description of the product for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).
   */
  metadata?: CreateAProductBodyMetadata;
  /** Whether a product is shippable or not. Pass the value as `true` if it is a shippable physical product, else pass the value as `false`.
   */
  shippable?: boolean;
};

export type CreateAProductChargebeeEventWebhook =
  (typeof CreateAProductChargebeeEventWebhook)[keyof typeof CreateAProductChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAProductChargebeeEventEmail =
  (typeof CreateAProductChargebeeEventEmail)[keyof typeof CreateAProductChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAProductChargebeeEventActions =
  (typeof CreateAProductChargebeeEventActions)[keyof typeof CreateAProductChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAProductChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAProductHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAProductChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAProductChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAProductChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListProducts200ListItem = {
  product: Product;
};

export type ListProducts200 = {
  list: ListProducts200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListProductsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListProductsSortByDesc =
  (typeof ListProductsSortByDesc)[keyof typeof ListProductsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductsSortByDesc = {
  name: "name",
  id: "id",
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListProductsSortByAsc =
  (typeof ListProductsSortByAsc)[keyof typeof ListProductsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductsSortByAsc = {
  name: "name",
  id: "id",
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListProductsHasVariantIs =
  (typeof ListProductsHasVariantIs)[keyof typeof ListProductsHasVariantIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductsHasVariantIs = {
  true: "true",
  false: "false",
} as const;

export type ListProductsShippableIs =
  (typeof ListProductsShippableIs)[keyof typeof ListProductsShippableIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductsShippableIs = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`active\` - active \* \`inactive\` - inactive

 */
export type ListProductsStatusIsNot =
  (typeof ListProductsStatusIsNot)[keyof typeof ListProductsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductsStatusIsNot = {
  active: "active",
  inactive: "inactive",
} as const;

/**
 * \* \`active\` - active \* \`inactive\` - inactive

 */
export type ListProductsStatusIs =
  (typeof ListProductsStatusIs)[keyof typeof ListProductsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListProductsStatusIs = {
  active: "active",
  inactive: "inactive",
} as const;

export type ListProductsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to <code>true</code>, it includes the deleted products in the API response.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter product based on their <a href="#">id</a>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "basic"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Filter product based on their <code>name</code>s.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is] = "basic"</i>
   */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Filter product based on their <code>status</code>. Possible values are : <dfn>active, inactive.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "basic"</i>
   */
  status?: {
    /** \* \`active\` - active \* \`inactive\` - inactive
     */
    is?: ListProductsStatusIs;
    /** \* \`active\` - active \* \`inactive\` - inactive
     */
    is_not?: ListProductsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Filter product based on whether it is shippable or not. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>shippable[is] = "true"</i>
   */
  shippable?: {
    is?: ListProductsShippableIs;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Filter product based on whether it has variants or not. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>has_variant[is] = "true"</i>
   */
  has_variant?: {
    is?: ListProductsHasVariantIs;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter product  based on their <code>created time</code>.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[after] = "1243545465"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Filter product  based on their <code>updated time</code>.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>name, id, created_at, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "name"</i><br>This will sort the result based on the 'name' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListProductsSortByAsc;
    desc?: ListProductsSortByDesc;
  };
};

export type AddRemoveOrUpdateOptionsForTheProduct200 = {
  product: Product;
};

/**
 * The list of options that you want to add when the \`options\[name\]\` are absent in a product, you can use this parameter to update the option values that already exist in a product.

 */
export type AddRemoveOrUpdateOptionsForTheProductBodyOptions = {
  /** Unique name of the option.
   */
  name: string[];
  /** List of possible values for the option. For example. if the option name is Size(options\[name\]\[1\]="Size"), then the values can be Small, Medium, and Large(options\[values\]\[1\]=\["Small", "Medium", "Large"\]).
   */
  values?: unknown[][];
  /** Set the default value of an option.
   */
  default_value?: string[];
};

export type AddRemoveOrUpdateOptionsForTheProductBody = {
  /** List of options that you want to remove from the product. You can provide option names.
   */
  remove_options?: string[];
  /** The list of options that you want to add when the \`options\[name\]\` are absent in a product, you can use this parameter to update the option values that already exist in a product.
   */
  options?: AddRemoveOrUpdateOptionsForTheProductBodyOptions;
};

export type AddRemoveOrUpdateOptionsForTheProductChargebeeEventWebhook =
  (typeof AddRemoveOrUpdateOptionsForTheProductChargebeeEventWebhook)[keyof typeof AddRemoveOrUpdateOptionsForTheProductChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddRemoveOrUpdateOptionsForTheProductChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddRemoveOrUpdateOptionsForTheProductChargebeeEventEmail =
  (typeof AddRemoveOrUpdateOptionsForTheProductChargebeeEventEmail)[keyof typeof AddRemoveOrUpdateOptionsForTheProductChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddRemoveOrUpdateOptionsForTheProductChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddRemoveOrUpdateOptionsForTheProductChargebeeEventActions =
  (typeof AddRemoveOrUpdateOptionsForTheProductChargebeeEventActions)[keyof typeof AddRemoveOrUpdateOptionsForTheProductChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddRemoveOrUpdateOptionsForTheProductChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddRemoveOrUpdateOptionsForTheProductHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddRemoveOrUpdateOptionsForTheProductChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddRemoveOrUpdateOptionsForTheProductChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddRemoveOrUpdateOptionsForTheProductChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAProduct200 = {
  product: Product;
};

export type DeleteAProductChargebeeEventWebhook =
  (typeof DeleteAProductChargebeeEventWebhook)[keyof typeof DeleteAProductChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAProductChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAProductChargebeeEventEmail =
  (typeof DeleteAProductChargebeeEventEmail)[keyof typeof DeleteAProductChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAProductChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAProductChargebeeEventActions =
  (typeof DeleteAProductChargebeeEventActions)[keyof typeof DeleteAProductChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAProductChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAProductHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAProductChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAProductChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAProductChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAProduct200 = {
  product: Product;
};

/**
 * The meta description of the product for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).

 */
export type UpdateAProductBodyMetadata = { [key: string]: any };

/**
 * Status of the product. Refer to the [table](https://apidocs.chargebee.com/docs/api/products?prod_cat_ver=2#update_a_product) for more information. \* active - The active products are visible on the storefront, subscription, or checkout. \* inactive - The inactive products are not visible on the storefront, subscription, or checkout.

 */
export type UpdateAProductBodyStatus =
  (typeof UpdateAProductBodyStatus)[keyof typeof UpdateAProductBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductBodyStatus = {
  active: "active",
  inactive: "inactive",
} as const;

export type UpdateAProductBody = {
  /** A unique internal name for the product. This is only visible in Chargebee.
   */
  name?: string;
  /** The unique name that appears for each product to the end user.
   */
  external_name?: string;
  /** Description of the product.
   */
  description?: string;
  /** Status of the product. Refer to the [table](https://apidocs.chargebee.com/docs/api/products?prod_cat_ver=2#update_a_product) for more information. \* active - The active products are visible on the storefront, subscription, or checkout. \* inactive - The inactive products are not visible on the storefront, subscription, or checkout.
   */
  status?: UpdateAProductBodyStatus;
  /** A unique identifier code a seller assigns to each product or item. Retailers and merchants use SKUs to keep track of inventory and sales data and help organize products within a store or warehouse. SKUs can include a combination of letters, numbers, and symbols and can vary in length depending on the seller's needs.
   */
  sku?: string;
  /** Whether a product is shippable or not. Pass the value as `true` if it is a shippable physical product, else pass the value as `false`.
   */
  shippable?: boolean;
  /** The meta description of the product for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).
   */
  metadata?: UpdateAProductBodyMetadata;
};

export type UpdateAProductChargebeeEventWebhook =
  (typeof UpdateAProductChargebeeEventWebhook)[keyof typeof UpdateAProductChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAProductChargebeeEventEmail =
  (typeof UpdateAProductChargebeeEventEmail)[keyof typeof UpdateAProductChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAProductChargebeeEventActions =
  (typeof UpdateAProductChargebeeEventActions)[keyof typeof UpdateAProductChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAProductChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAProductHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAProductChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAProductChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAProductChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAProduct200 = {
  product: Product;
};

export type RetrieveAProductHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAnItemFamily200 = {
  item_family: ItemFamily;
};

export type UpdateAnItemFamilyBody = {
  /** The display name for the item family. Must be unique. This is visible only in Chargebee and not to customers.
   */
  name?: string;
  /** Description of the item family. This is visible only in Chargebee and not to customers.
   */
  description?: string;
  [key: string]: any;
};

export type UpdateAnItemFamilyChargebeeEventWebhook =
  (typeof UpdateAnItemFamilyChargebeeEventWebhook)[keyof typeof UpdateAnItemFamilyChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemFamilyChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemFamilyChargebeeEventEmail =
  (typeof UpdateAnItemFamilyChargebeeEventEmail)[keyof typeof UpdateAnItemFamilyChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemFamilyChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemFamilyChargebeeEventActions =
  (typeof UpdateAnItemFamilyChargebeeEventActions)[keyof typeof UpdateAnItemFamilyChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnItemFamilyChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnItemFamilyHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAnItemFamilyChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAnItemFamilyChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAnItemFamilyChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnItemFamily200 = {
  item_family: ItemFamily;
};

export type RetrieveAnItemFamilyHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAnItemFamily200 = {
  item_family: ItemFamily;
};

export type CreateAnItemFamilyBody = {
  /** The identifier for the item family. Must be unique and is immutable.
   */
  id: string;
  /** The display name for the item family. Must be unique. This is visible only in Chargebee and not to customers.
   */
  name: string;
  /** Description of the item family. This is visible only in Chargebee and not to customers.
   */
  description?: string;
  [key: string]: any;
};

export type CreateAnItemFamilyChargebeeEventWebhook =
  (typeof CreateAnItemFamilyChargebeeEventWebhook)[keyof typeof CreateAnItemFamilyChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemFamilyChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemFamilyChargebeeEventEmail =
  (typeof CreateAnItemFamilyChargebeeEventEmail)[keyof typeof CreateAnItemFamilyChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemFamilyChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemFamilyChargebeeEventActions =
  (typeof CreateAnItemFamilyChargebeeEventActions)[keyof typeof CreateAnItemFamilyChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnItemFamilyChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnItemFamilyHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnItemFamilyChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnItemFamilyChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnItemFamilyChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemFamilies200ListItem = {
  item_family: ItemFamily;
};

export type ListItemFamilies200 = {
  list: ListItemFamilies200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListItemFamiliesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListItemFamiliesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The identifier for the item family. It is unique and immutable.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "family-id"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique display name for the item family. This is visible only in Chargebee and not to customers.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is_not] = "family-name"</i>
   */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>When the item family was last updated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[before] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
};

export type DeleteAnItemFamily200 = {
  item_family: ItemFamily;
};

export type DeleteAnItemFamilyChargebeeEventWebhook =
  (typeof DeleteAnItemFamilyChargebeeEventWebhook)[keyof typeof DeleteAnItemFamilyChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemFamilyChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemFamilyChargebeeEventEmail =
  (typeof DeleteAnItemFamilyChargebeeEventEmail)[keyof typeof DeleteAnItemFamilyChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemFamilyChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemFamilyChargebeeEventActions =
  (typeof DeleteAnItemFamilyChargebeeEventActions)[keyof typeof DeleteAnItemFamilyChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnItemFamilyChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnItemFamilyHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnItemFamilyChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnItemFamilyChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnItemFamilyChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCustomFieldConfigs200ListItem = {
  custom_field_config: CustomFieldConfig;
};

export type ListCustomFieldConfigs200 = {
  list: ListCustomFieldConfigs200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCustomFieldConfigsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCustomFieldConfigsEntityType =
  (typeof ListCustomFieldConfigsEntityType)[keyof typeof ListCustomFieldConfigsEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomFieldConfigsEntityType = {
  customer: "customer",
  subscription: "subscription",
  plan: "plan",
  addon: "addon",
  item_family: "item_family",
  plan_item: "plan_item",
  addon_item: "addon_item",
  charge_item: "charge_item",
  plan_price: "plan_price",
  addon_price: "addon_price",
  charge_price: "charge_price",
} as const;

export type ListCustomFieldConfigsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * Allowed entity types for custom fields.
   * customer - Entity that represents a customer
   * addon_item - Entity that represents item of type addon
   * plan - Entity that represents a subscription plan
   * subscription - Entity that represents a subscription of a customer
   * charge_price - Entity that represents charge price
   * item_family - Entity that represents item family
   * addon - Entity that represents an addon
   * addon_price - Entity that represents addon price
   * charge_item - Entity that represents item of type charge
   * plan_item - Entity that represents item of type plan
   * plan_price - Entity that represents plan price
   */
  entity_type?: ListCustomFieldConfigsEntityType;
};

export type RetrieveTheMetaData200 = {
  custom_field_config: CustomFieldConfig;
};

export type RetrieveTheMetaDataHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveTheMetaDataEntityType =
  (typeof RetrieveTheMetaDataEntityType)[keyof typeof RetrieveTheMetaDataEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveTheMetaDataEntityType = {
  customer: "customer",
  subscription: "subscription",
  plan: "plan",
  addon: "addon",
  item_family: "item_family",
  plan_item: "plan_item",
  addon_item: "addon_item",
  charge_item: "charge_item",
  plan_price: "plan_price",
  addon_price: "addon_price",
  charge_price: "charge_price",
} as const;

export type RetrieveTheMetaDataParams = {
  /**
   * Allowed entity types for custom fields.
   * customer - Entity that represents a customer
   * addon_item - Entity that represents item of type addon
   * plan - Entity that represents a subscription plan
   * subscription - Entity that represents a subscription of a customer
   * charge_price - Entity that represents charge price
   * item_family - Entity that represents item family
   * addon - Entity that represents an addon
   * addon_price - Entity that represents addon price
   * charge_item - Entity that represents item of type charge
   * plan_item - Entity that represents item of type plan
   * plan_price - Entity that represents plan price
   */
  entity_type: RetrieveTheMetaDataEntityType;
  /**
   * Custom field identifier.
   */
  api_name: string;
};

export type CreateAPaymentIntent200 = {
  payment_intent: PaymentIntent;
};

/**
 * The payment method of this intent. \* google_pay - google_pay \* boleto - boleto \* apple_pay - apple_pay \* ideal - ideal \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* card - card \* dotpay - dotpay \* giropay - giropay \* upi - upi \* sofort - sofort \* paypal_express_checkout - paypal_express_checkout

 */
export type CreateAPaymentIntentBodyPaymentMethodType =
  (typeof CreateAPaymentIntentBodyPaymentMethodType)[keyof typeof CreateAPaymentIntentBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPaymentIntentBodyPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type CreateAPaymentIntentBody = {
  /** Sets the [context]() for this operation to the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) specified. Applicable only when multiple business entities have been created for the site. When this parameter is provided, the operation is able to read/write data associated only to the business entity specified. When not provided, the operation can read/write data for the entire site.  
**Note**

An alternative way of passing this parameter is by means of a [custom HTTP header](/docs/api/advanced-features?prod_cat_ver=2#mbe-header-main).  
**See also**

[Customer resource lookup and creation.](/docs/api/payment_intents#customer_lookup)
 */
  business_entity_id?: string;
  /** The unique ID of the customer for which this `payment_intent` should be created. If not provided, a new customer is created and its ID is autogenerated.  
**See also**

[Customer resource lookup and creation](/docs/api/payment_intents#customer_lookup)
.
 */
  customer_id?: string;
  /** Amount(in cents) to be authorized for 3DS flow.
   */
  amount: number;
  /** The currency code (ISO 4217 format) of the amount used in transaction.
   */
  currency_code: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Reference for payment method at gateway. Only applicable when the PaymentIntent is created for cards stored in the gateway.
   */
  reference_id?: string;
  /** The payment method of this intent. \* google_pay - google_pay \* boleto - boleto \* apple_pay - apple_pay \* ideal - ideal \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* card - card \* dotpay - dotpay \* giropay - giropay \* upi - upi \* sofort - sofort \* paypal_express_checkout - paypal_express_checkout
   */
  payment_method_type?: CreateAPaymentIntentBodyPaymentMethodType;
  /** The URL the customer will be directed to once 3DS verification is successful. Applicable only when `payment_method_type` is `ideal`, `sofort`, `dotpay` or `giropay`.
   */
  success_url?: string;
  /** The URL the customer will be directed to when 3DS verification fails. Applicable only when `payment_method_type` is `ideal`, `sofort`, `dotpay` or `giropay`.
   */
  failure_url?: string;
};

export type CreateAPaymentIntentChargebeeEventWebhook =
  (typeof CreateAPaymentIntentChargebeeEventWebhook)[keyof typeof CreateAPaymentIntentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPaymentIntentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPaymentIntentChargebeeEventEmail =
  (typeof CreateAPaymentIntentChargebeeEventEmail)[keyof typeof CreateAPaymentIntentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPaymentIntentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPaymentIntentChargebeeEventActions =
  (typeof CreateAPaymentIntentChargebeeEventActions)[keyof typeof CreateAPaymentIntentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPaymentIntentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPaymentIntentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAPaymentIntentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAPaymentIntentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAPaymentIntentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAPaymentIntent200 = {
  payment_intent: PaymentIntent;
};

/**
 * The payment method of this intent. \* google_pay - google_pay \* boleto - boleto \* apple_pay - apple_pay \* ideal - ideal \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* card - card \* dotpay - dotpay \* giropay - giropay \* upi - upi \* sofort - sofort \* paypal_express_checkout - paypal_express_checkout

 */
export type UpdateAPaymentIntentBodyPaymentMethodType =
  (typeof UpdateAPaymentIntentBodyPaymentMethodType)[keyof typeof UpdateAPaymentIntentBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAPaymentIntentBodyPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type UpdateAPaymentIntentBody = {
  /** Amount(in cents) to be authorized for 3DS flow.
   */
  amount?: number;
  /** The currency code (ISO 4217 format) of the amount used in transaction.
   */
  currency_code?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** The payment method of this intent. \* google_pay - google_pay \* boleto - boleto \* apple_pay - apple_pay \* ideal - ideal \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* card - card \* dotpay - dotpay \* giropay - giropay \* upi - upi \* sofort - sofort \* paypal_express_checkout - paypal_express_checkout
   */
  payment_method_type?: UpdateAPaymentIntentBodyPaymentMethodType;
  /** The URL the customer will be directed to once 3DS verification is successful. Applicable only when `payment_method_type` is `ideal`, `sofort`, `dotpay` or `giropay`.
   */
  success_url?: string;
  /** The URL the customer will be directed to when 3DS verification fails. Applicable only when `payment_method_type` is `ideal`, `sofort`, `dotpay` or `giropay`.
   */
  failure_url?: string;
};

export type UpdateAPaymentIntentChargebeeEventWebhook =
  (typeof UpdateAPaymentIntentChargebeeEventWebhook)[keyof typeof UpdateAPaymentIntentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAPaymentIntentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAPaymentIntentChargebeeEventEmail =
  (typeof UpdateAPaymentIntentChargebeeEventEmail)[keyof typeof UpdateAPaymentIntentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAPaymentIntentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAPaymentIntentChargebeeEventActions =
  (typeof UpdateAPaymentIntentChargebeeEventActions)[keyof typeof UpdateAPaymentIntentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAPaymentIntentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAPaymentIntentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAPaymentIntentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAPaymentIntentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAPaymentIntentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAPaymentIntent200 = {
  payment_intent: PaymentIntent;
};

export type RetrieveAPaymentIntentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveFullExportStatus200 = {
  full_export: FullExport;
};

export type RetrieveFullExportStatusHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveFullExportStatusParams = {
  table: string;
  date: string;
};

export type ExportSubscriptions200 = {
  export: Export;
};

export type ExportSubscriptionsBody = {
  /** Determines the format of the data. Returns the export type based on the selected value. \* data - Download your current data in CSV. \* import_friendly_data - Download import friendly data in CSV. This CSV can be used to perform [bulk operations](https://www.chargebee.com/docs/bulk-operations.html).
   */
  export_type?: ExportSubscriptionsBodyExportType;
  /** optional, string filter The plan item code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "silver"\*
   */
  item_id?: ExportSubscriptionsBodyItemId;
  /** optional, string filter The plan item price code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_price_id\\\[is\\\] = "silver-USD-monthly"\*
   */
  item_price_id?: ExportSubscriptionsBodyItemPriceId;
  /** optional, string filter Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Subscriptions \\\> Subscription Cancellation\*\* . Must be passed if set as mandatory in the app. The codes are case-sensitive. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*cancel_reason_code\\\[is\\\] = "Not Paid"\*
   */
  cancel_reason_code?: ExportSubscriptionsBodyCancelReasonCode;
  /** Parameters for subscription
   */
  subscription?: ExportSubscriptionsBodySubscription;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportSubscriptionsBodySubscriptionChannelIsNot =
  (typeof ExportSubscriptionsBodySubscriptionChannelIsNot)[keyof typeof ExportSubscriptionsBodySubscriptionChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportSubscriptionsBodySubscriptionChannelIs =
  (typeof ExportSubscriptionsBodySubscriptionChannelIs)[keyof typeof ExportSubscriptionsBodySubscriptionChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportSubscriptionsBodySubscriptionChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportSubscriptionsBodySubscriptionChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportSubscriptionsBodySubscriptionChannelIsNot;
  in?: string;
  not_in?: string;
};

export type ExportSubscriptionsBodySubscriptionAutoCloseInvoicesIs =
  (typeof ExportSubscriptionsBodySubscriptionAutoCloseInvoicesIs)[keyof typeof ExportSubscriptionsBodySubscriptionAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Set to \`false\` to override for this subscription, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the \[customer level\](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).

 */
export type ExportSubscriptionsBodySubscriptionAutoCloseInvoices = {
  is?: ExportSubscriptionsBodySubscriptionAutoCloseInvoicesIs;
};

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIsNot =
  (typeof ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIsNot)[keyof typeof ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIsNot = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIs =
  (typeof ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIs)[keyof typeof ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIs = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * The preferred offline payment method for the subscription.

 */
export type ExportSubscriptionsBodySubscriptionOfflinePaymentMethod = {
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is?: ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIs;
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is_not?: ExportSubscriptionsBodySubscriptionOfflinePaymentMethodIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportSubscriptionsBodySubscriptionUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportSubscriptionsBodySubscriptionHasScheduledChangesIs =
  (typeof ExportSubscriptionsBodySubscriptionHasScheduledChangesIs)[keyof typeof ExportSubscriptionsBodySubscriptionHasScheduledChangesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionHasScheduledChangesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * If \`true\`, there are subscription changes scheduled on next renewal.

 */
export type ExportSubscriptionsBodySubscriptionHasScheduledChanges = {
  is?: ExportSubscriptionsBodySubscriptionHasScheduledChangesIs;
};

/**
 * Time at which subscription was cancelled or is set to be cancelled.

 */
export type ExportSubscriptionsBodySubscriptionCancelledAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The date/time at which the next billing for the subscription happens. This is usually right after \`current_term_end\` unless multiple subscription terms were invoiced in advance using the \`terms_to_charge\` parameter.

 */
export type ExportSubscriptionsBodySubscriptionNextBillingAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportSubscriptionsBodySubscriptionActivatedAtIsPresent =
  (typeof ExportSubscriptionsBodySubscriptionActivatedAtIsPresent)[keyof typeof ExportSubscriptionsBodySubscriptionActivatedAtIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionActivatedAtIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Time at which the subscription \`status\` last changed to \`active\`. For example, this value is updated when an \`in_trial\` or \`cancelled\` subscription activates.

 */
export type ExportSubscriptionsBodySubscriptionActivatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
  is_present?: ExportSubscriptionsBodySubscriptionActivatedAtIsPresent;
};

/**
 * The time at which the subscription was created.

 */
export type ExportSubscriptionsBodySubscriptionCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportSubscriptionsBodySubscriptionRemainingBillingCyclesIsPresent =
  (typeof ExportSubscriptionsBodySubscriptionRemainingBillingCyclesIsPresent)[keyof typeof ExportSubscriptionsBodySubscriptionRemainingBillingCyclesIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionRemainingBillingCyclesIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * \* When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels. \* When the subscription is on a \[contract term\](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.

 */
export type ExportSubscriptionsBodySubscriptionRemainingBillingCycles = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
  is_present?: ExportSubscriptionsBodySubscriptionRemainingBillingCyclesIsPresent;
};

/**
 * Parameters for subscription

 */
export type ExportSubscriptionsBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: ExportSubscriptionsBodySubscriptionId;
  /** Identifier of the customer with whom this subscription is associated.
   */
  customer_id?: ExportSubscriptionsBodySubscriptionCustomerId;
  /** Current state of the subscription
   */
  status?: ExportSubscriptionsBodySubscriptionStatus;
  /** The reason for canceling the subscription. Set by Chargebee automatically.
   */
  cancel_reason?: ExportSubscriptionsBodySubscriptionCancelReason;
  /** \* When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels. \* When the subscription is on a \[contract term\](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.
   */
  remaining_billing_cycles?: ExportSubscriptionsBodySubscriptionRemainingBillingCycles;
  /** The time at which the subscription was created.
   */
  created_at?: ExportSubscriptionsBodySubscriptionCreatedAt;
  /** Time at which the subscription \`status\` last changed to \`active\`. For example, this value is updated when an \`in_trial\` or \`cancelled\` subscription activates.
   */
  activated_at?: ExportSubscriptionsBodySubscriptionActivatedAt;
  /** The date/time at which the next billing for the subscription happens. This is usually right after \`current_term_end\` unless multiple subscription terms were invoiced in advance using the \`terms_to_charge\` parameter.
   */
  next_billing_at?: ExportSubscriptionsBodySubscriptionNextBillingAt;
  /** Time at which subscription was cancelled or is set to be cancelled.
   */
  cancelled_at?: ExportSubscriptionsBodySubscriptionCancelledAt;
  /** If \`true\`, there are subscription changes scheduled on next renewal.
   */
  has_scheduled_changes?: ExportSubscriptionsBodySubscriptionHasScheduledChanges;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportSubscriptionsBodySubscriptionUpdatedAt;
  /** The preferred offline payment method for the subscription.
   */
  offline_payment_method?: ExportSubscriptionsBodySubscriptionOfflinePaymentMethod;
  /** Set to \`false\` to override for this subscription, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the \[customer level\](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: ExportSubscriptionsBodySubscriptionAutoCloseInvoices;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportSubscriptionsBodySubscriptionChannel;
};

export type ExportSubscriptionsBodySubscriptionCancelReasonIsPresent =
  (typeof ExportSubscriptionsBodySubscriptionCancelReasonIsPresent)[keyof typeof ExportSubscriptionsBodySubscriptionCancelReasonIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionCancelReasonIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ExportSubscriptionsBodySubscriptionCancelReasonIsNot =
  (typeof ExportSubscriptionsBodySubscriptionCancelReasonIsNot)[keyof typeof ExportSubscriptionsBodySubscriptionCancelReasonIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionCancelReasonIsNot = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ExportSubscriptionsBodySubscriptionCancelReasonIs =
  (typeof ExportSubscriptionsBodySubscriptionCancelReasonIs)[keyof typeof ExportSubscriptionsBodySubscriptionCancelReasonIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionCancelReasonIs = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * The reason for canceling the subscription. Set by Chargebee automatically.

 */
export type ExportSubscriptionsBodySubscriptionCancelReason = {
  /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
   */
  is?: ExportSubscriptionsBodySubscriptionCancelReasonIs;
  /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
   */
  is_not?: ExportSubscriptionsBodySubscriptionCancelReasonIsNot;
  in?: string;
  not_in?: string;
  is_present?: ExportSubscriptionsBodySubscriptionCancelReasonIsPresent;
};

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ExportSubscriptionsBodySubscriptionStatusIsNot =
  (typeof ExportSubscriptionsBodySubscriptionStatusIsNot)[keyof typeof ExportSubscriptionsBodySubscriptionStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionStatusIsNot = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ExportSubscriptionsBodySubscriptionStatusIs =
  (typeof ExportSubscriptionsBodySubscriptionStatusIs)[keyof typeof ExportSubscriptionsBodySubscriptionStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodySubscriptionStatusIs = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * Current state of the subscription

 */
export type ExportSubscriptionsBodySubscriptionStatus = {
  /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
   */
  is?: ExportSubscriptionsBodySubscriptionStatusIs;
  /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
   */
  is_not?: ExportSubscriptionsBodySubscriptionStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Identifier of the customer with whom this subscription is associated.

 */
export type ExportSubscriptionsBodySubscriptionCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * A unique and immutable identifier for the subscription. If not provided, it is autogenerated.

 */
export type ExportSubscriptionsBodySubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Subscriptions \\\> Subscription Cancellation\*\* . Must be passed if set as mandatory in the app. The codes are case-sensitive. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*cancel_reason_code\\\[is\\\] = "Not Paid"\*

 */
export type ExportSubscriptionsBodyCancelReasonCode = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The plan item price code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_price_id\\\[is\\\] = "silver-USD-monthly"\*

 */
export type ExportSubscriptionsBodyItemPriceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The plan item code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "silver"\*

 */
export type ExportSubscriptionsBodyItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Determines the format of the data. Returns the export type based on the selected value. \* data - Download your current data in CSV. \* import_friendly_data - Download import friendly data in CSV. This CSV can be used to perform [bulk operations](https://www.chargebee.com/docs/bulk-operations.html).

 */
export type ExportSubscriptionsBodyExportType =
  (typeof ExportSubscriptionsBodyExportType)[keyof typeof ExportSubscriptionsBodyExportType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsBodyExportType = {
  data: "data",
  import_friendly_data: "import_friendly_data",
} as const;

export type ExportSubscriptionsChargebeeEventWebhook =
  (typeof ExportSubscriptionsChargebeeEventWebhook)[keyof typeof ExportSubscriptionsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportSubscriptionsChargebeeEventEmail =
  (typeof ExportSubscriptionsChargebeeEventEmail)[keyof typeof ExportSubscriptionsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportSubscriptionsChargebeeEventActions =
  (typeof ExportSubscriptionsChargebeeEventActions)[keyof typeof ExportSubscriptionsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportSubscriptionsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportSubscriptionsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportSubscriptionsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportSubscriptionsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportSubscriptionsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportItemPrices200 = {
  export: Export;
};

export type ExportItemPricesBody = {
  /** optional, string filter Filter item prices based on \`item_family_id\`. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_family_id\\\[is\\\] = "Acme"\*
   */
  item_family_id?: ExportItemPricesBodyItemFamilyId;
  /** optional, enumerated string filter Filter item prices based on \`item_type\`. Possible values are : plan, addon, charge. \*\*Supported operators :\*\* is, is_not, in, not_in \*\*Example ‚Üí\*\* \*item_type\\\[is_not\\\] = "plan"\*
   */
  item_type?: ExportItemPricesBodyItemType;
  /** optional, string filter Filter item prices based on their \`currency_code\`. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*currency_code\\\[is\\\] = "USD"\*
   */
  currency_code?: ExportItemPricesBodyCurrencyCode;
  /** Parameters for item_price
   */
  item_price?: ExportItemPricesBodyItemPrice;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportItemPricesBodyItemPriceChannelIsNot =
  (typeof ExportItemPricesBodyItemPriceChannelIsNot)[keyof typeof ExportItemPricesBodyItemPriceChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPriceChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportItemPricesBodyItemPriceChannelIs =
  (typeof ExportItemPricesBodyItemPriceChannelIs)[keyof typeof ExportItemPricesBodyItemPriceChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPriceChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportItemPricesBodyItemPriceChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportItemPricesBodyItemPriceChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportItemPricesBodyItemPriceChannelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter item prices based on their \`period\`.

 */
export type ExportItemPricesBodyItemPricePeriod = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.

 */
export type ExportItemPricesBodyItemPricePeriodUnitIsNot =
  (typeof ExportItemPricesBodyItemPricePeriodUnitIsNot)[keyof typeof ExportItemPricesBodyItemPricePeriodUnitIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPricePeriodUnitIsNot = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.

 */
export type ExportItemPricesBodyItemPricePeriodUnitIs =
  (typeof ExportItemPricesBodyItemPricePeriodUnitIs)[keyof typeof ExportItemPricesBodyItemPricePeriodUnitIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPricePeriodUnitIs = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Filter item prices based on their \`period_unit\`.

 */
export type ExportItemPricesBodyItemPricePeriodUnit = {
  /** \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.
   */
  is?: ExportItemPricesBodyItemPricePeriodUnitIs;
  /** \* \`day\` - A period of 24 hours. \* \`week\` - A period of 7 days. \* \`month\` - A period of 1 calendar month. \* \`year\` - A period of 1 calendar year.
   */
  is_not?: ExportItemPricesBodyItemPricePeriodUnitIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter item prices based on their \`updated_at\`.

 */
export type ExportItemPricesBodyItemPriceUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type ExportItemPricesBodyItemPriceStatusIsNot =
  (typeof ExportItemPricesBodyItemPriceStatusIsNot)[keyof typeof ExportItemPricesBodyItemPriceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPriceStatusIsNot = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type ExportItemPricesBodyItemPriceStatusIs =
  (typeof ExportItemPricesBodyItemPriceStatusIs)[keyof typeof ExportItemPricesBodyItemPriceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPriceStatusIs = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * Filter item prices based on their \`status\`.

 */
export type ExportItemPricesBodyItemPriceStatus = {
  /** \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.
   */
  is?: ExportItemPricesBodyItemPriceStatusIs;
  /** \* \`active\` - The item price can be used in subscriptions. \* \`archived\` - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* \`deleted\` - Indicates that the item price has been deleted. The `id` and `name` can be reused.
   */
  is_not?: ExportItemPricesBodyItemPriceStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.

 */
export type ExportItemPricesBodyItemPriceTrialPeriodUnitIsNot =
  (typeof ExportItemPricesBodyItemPriceTrialPeriodUnitIsNot)[keyof typeof ExportItemPricesBodyItemPriceTrialPeriodUnitIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPriceTrialPeriodUnitIsNot = {
  day: "day",
  month: "month",
} as const;

/**
 * \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.

 */
export type ExportItemPricesBodyItemPriceTrialPeriodUnitIs =
  (typeof ExportItemPricesBodyItemPriceTrialPeriodUnitIs)[keyof typeof ExportItemPricesBodyItemPriceTrialPeriodUnitIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPriceTrialPeriodUnitIs = {
  day: "day",
  month: "month",
} as const;

/**
 * Filter item prices based on their \`trial_period_unit\`.

 */
export type ExportItemPricesBodyItemPriceTrialPeriodUnit = {
  /** \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.
   */
  is?: ExportItemPricesBodyItemPriceTrialPeriodUnitIs;
  /** \* \`day\` - A period of 24 hours. \* \`month\` - A period of 1 calendar month.
   */
  is_not?: ExportItemPricesBodyItemPriceTrialPeriodUnitIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter item prices based on their \`trial_period\`.

 */
export type ExportItemPricesBodyItemPriceTrialPeriod = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Filter item prices based on their \`item_id\`.

 */
export type ExportItemPricesBodyItemPriceItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type ExportItemPricesBodyItemPricePricingModelIsNot =
  (typeof ExportItemPricesBodyItemPricePricingModelIsNot)[keyof typeof ExportItemPricesBodyItemPricePricingModelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPricePricingModelIsNot = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type ExportItemPricesBodyItemPricePricingModelIs =
  (typeof ExportItemPricesBodyItemPricePricingModelIs)[keyof typeof ExportItemPricesBodyItemPricePricingModelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemPricePricingModelIs = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * Filter item prices based on their \`pricing_model\`.

 */
export type ExportItemPricesBodyItemPricePricingModel = {
  /** \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
   */
  is?: ExportItemPricesBodyItemPricePricingModelIs;
  /** \* \`flat_fee\` - A fixed price that is not quantity-based. \* \`per_unit\` - A fixed price per unit quantity. \* \`tiered\` - The per unit price is based on the tier that the total quantity falls in. \* \`volume\` - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* \`stairstep\` - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
   */
  is_not?: ExportItemPricesBodyItemPricePricingModelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter item prices based on their \`name\`s.

 */
export type ExportItemPricesBodyItemPriceName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Filter item prices based on their \[id\](#).

 */
export type ExportItemPricesBodyItemPriceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for item_price

 */
export type ExportItemPricesBodyItemPrice = {
  /** Filter item prices based on their \[id\](#).
   */
  id?: ExportItemPricesBodyItemPriceId;
  /** Filter item prices based on their \`name\`s.
   */
  name?: ExportItemPricesBodyItemPriceName;
  /** Filter item prices based on their \`pricing_model\`.
   */
  pricing_model?: ExportItemPricesBodyItemPricePricingModel;
  /** Filter item prices based on their \`item_id\`.
   */
  item_id?: ExportItemPricesBodyItemPriceItemId;
  /** Filter item prices based on their \`trial_period\`.
   */
  trial_period?: ExportItemPricesBodyItemPriceTrialPeriod;
  /** Filter item prices based on their \`trial_period_unit\`.
   */
  trial_period_unit?: ExportItemPricesBodyItemPriceTrialPeriodUnit;
  /** Filter item prices based on their \`status\`.
   */
  status?: ExportItemPricesBodyItemPriceStatus;
  /** Filter item prices based on their \`updated_at\`.
   */
  updated_at?: ExportItemPricesBodyItemPriceUpdatedAt;
  /** Filter item prices based on their \`period_unit\`.
   */
  period_unit?: ExportItemPricesBodyItemPricePeriodUnit;
  /** Filter item prices based on their \`period\`.
   */
  period?: ExportItemPricesBodyItemPricePeriod;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportItemPricesBodyItemPriceChannel;
};

/**
 * optional, string filter Filter item prices based on their \`currency_code\`. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*currency_code\\\[is\\\] = "USD"\*

 */
export type ExportItemPricesBodyCurrencyCode = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ExportItemPricesBodyItemTypeIsNot =
  (typeof ExportItemPricesBodyItemTypeIsNot)[keyof typeof ExportItemPricesBodyItemTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemTypeIsNot = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ExportItemPricesBodyItemTypeIs =
  (typeof ExportItemPricesBodyItemTypeIs)[keyof typeof ExportItemPricesBodyItemTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesBodyItemTypeIs = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * optional, enumerated string filter Filter item prices based on \`item_type\`. Possible values are : plan, addon, charge. \*\*Supported operators :\*\* is, is_not, in, not_in \*\*Example ‚Üí\*\* \*item_type\\\[is_not\\\] = "plan"\*

 */
export type ExportItemPricesBodyItemType = {
  /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
   */
  is?: ExportItemPricesBodyItemTypeIs;
  /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
   */
  is_not?: ExportItemPricesBodyItemTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter Filter item prices based on \`item_family_id\`. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_family_id\\\[is\\\] = "Acme"\*

 */
export type ExportItemPricesBodyItemFamilyId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportItemPricesChargebeeEventWebhook =
  (typeof ExportItemPricesChargebeeEventWebhook)[keyof typeof ExportItemPricesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemPricesChargebeeEventEmail =
  (typeof ExportItemPricesChargebeeEventEmail)[keyof typeof ExportItemPricesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemPricesChargebeeEventActions =
  (typeof ExportItemPricesChargebeeEventActions)[keyof typeof ExportItemPricesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemPricesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemPricesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportItemPricesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportItemPricesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportItemPricesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportOrders200 = {
  export: Export;
};

export type ExportOrdersBody = {
  /** optional, in cents filter Total amount charged for the order. \*\*Supported operators :\*\* is, is_not, lt, lte, gt, gte, between \*\*Example ‚Üí\*\* \*total\\\[is\\\] = "1394532759"\*
   */
  total?: ExportOrdersBodyTotal;
  /** Parameters for order
   */
  order?: ExportOrdersBodyOrder;
};

/**
 * If resent order what is the parent order id.

 */
export type ExportOrdersBodyOrderOriginalOrderId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

export type ExportOrdersBodyOrderIsResentIs =
  (typeof ExportOrdersBodyOrderIsResentIs)[keyof typeof ExportOrdersBodyOrderIsResentIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderIsResentIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Order is resent order or not.

 */
export type ExportOrdersBodyOrderIsResent = {
  is?: ExportOrdersBodyOrderIsResentIs;
};

/**
 * \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent

 */
export type ExportOrdersBodyOrderResentStatusIsNot =
  (typeof ExportOrdersBodyOrderResentStatusIsNot)[keyof typeof ExportOrdersBodyOrderResentStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderResentStatusIsNot = {
  fully_resent: "fully_resent",
  partially_resent: "partially_resent",
} as const;

/**
 * \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent

 */
export type ExportOrdersBodyOrderResentStatusIs =
  (typeof ExportOrdersBodyOrderResentStatusIs)[keyof typeof ExportOrdersBodyOrderResentStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderResentStatusIs = {
  fully_resent: "fully_resent",
  partially_resent: "partially_resent",
} as const;

/**
 * Resent order status.

 */
export type ExportOrdersBodyOrderResentStatus = {
  /** \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent
   */
  is?: ExportOrdersBodyOrderResentStatusIs;
  /** \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent
   */
  is_not?: ExportOrdersBodyOrderResentStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter based on the time at which order has been updated.

 */
export type ExportOrdersBodyOrderUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The total amount issued as credits on behalf of this order.

 */
export type ExportOrdersBodyOrderRefundableCreditsIssued = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * The total amount that can be issued as credits for this order.

 */
export type ExportOrdersBodyOrderRefundableCredits = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total amount paid for the order.

 */
export type ExportOrdersBodyOrderAmountPaid = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * The time at which the order was cancelled.

 */
export type ExportOrdersBodyOrderCancelledAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The time at which the order was delivered

 */
export type ExportOrdersBodyOrderDeliveredAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The time at which the order was shipped.

 */
export type ExportOrdersBodyOrderShippedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * This is the date on which the order will be delivered to the customer.

 */
export type ExportOrdersBodyOrderShippingDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The date on which the order will start getting processed.

 */
export type ExportOrdersBodyOrderOrderDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Parameters for order

 */
export type ExportOrdersBodyOrder = {
  /** Uniquely identifies the order. It is the api identifier for the order
   */
  id?: ExportOrdersBodyOrderId;
  /** To filter based on subscription_id.
   */
  subscription_id?: ExportOrdersBodyOrderSubscriptionId;
  /** The customer for which the order is created
   */
  customer_id?: ExportOrdersBodyOrderCustomerId;
  /** The status of this order.
   */
  status?: ExportOrdersBodyOrderStatus;
  /** The price type of the order
   */
  price_type?: ExportOrdersBodyOrderPriceType;
  /** The date on which the order will start getting processed.
   */
  order_date?: ExportOrdersBodyOrderOrderDate;
  /** This is the date on which the order will be delivered to the customer.
   */
  shipping_date?: ExportOrdersBodyOrderShippingDate;
  /** The time at which the order was shipped.
   */
  shipped_at?: ExportOrdersBodyOrderShippedAt;
  /** The time at which the order was delivered
   */
  delivered_at?: ExportOrdersBodyOrderDeliveredAt;
  /** The time at which the order was cancelled.
   */
  cancelled_at?: ExportOrdersBodyOrderCancelledAt;
  /** Total amount paid for the order.
   */
  amount_paid?: ExportOrdersBodyOrderAmountPaid;
  /** The total amount that can be issued as credits for this order.
   */
  refundable_credits?: ExportOrdersBodyOrderRefundableCredits;
  /** The total amount issued as credits on behalf of this order.
   */
  refundable_credits_issued?: ExportOrdersBodyOrderRefundableCreditsIssued;
  /** Filter based on the time at which order has been updated.
   */
  updated_at?: ExportOrdersBodyOrderUpdatedAt;
  /** Resent order status.
   */
  resent_status?: ExportOrdersBodyOrderResentStatus;
  /** Order is resent order or not.
   */
  is_resent?: ExportOrdersBodyOrderIsResent;
  /** If resent order what is the parent order id.
   */
  original_order_id?: ExportOrdersBodyOrderOriginalOrderId;
};

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportOrdersBodyOrderPriceTypeIsNot =
  (typeof ExportOrdersBodyOrderPriceTypeIsNot)[keyof typeof ExportOrdersBodyOrderPriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderPriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportOrdersBodyOrderPriceTypeIs =
  (typeof ExportOrdersBodyOrderPriceTypeIs)[keyof typeof ExportOrdersBodyOrderPriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderPriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * The price type of the order

 */
export type ExportOrdersBodyOrderPriceType = {
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is?: ExportOrdersBodyOrderPriceTypeIs;
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is_not?: ExportOrdersBodyOrderPriceTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.

 */
export type ExportOrdersBodyOrderStatusIsNot =
  (typeof ExportOrdersBodyOrderStatusIsNot)[keyof typeof ExportOrdersBodyOrderStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderStatusIsNot = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

/**
 * \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.

 */
export type ExportOrdersBodyOrderStatusIs =
  (typeof ExportOrdersBodyOrderStatusIs)[keyof typeof ExportOrdersBodyOrderStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderStatusIs = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

/**
 * The status of this order.

 */
export type ExportOrdersBodyOrderStatus = {
  /** \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.
   */
  is?: ExportOrdersBodyOrderStatusIs;
  /** \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.
   */
  is_not?: ExportOrdersBodyOrderStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * The customer for which the order is created

 */
export type ExportOrdersBodyOrderCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportOrdersBodyOrderSubscriptionIdIsPresent =
  (typeof ExportOrdersBodyOrderSubscriptionIdIsPresent)[keyof typeof ExportOrdersBodyOrderSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersBodyOrderSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * To filter based on subscription_id.

 */
export type ExportOrdersBodyOrderSubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportOrdersBodyOrderSubscriptionIdIsPresent;
  in?: string;
  not_in?: string;
};

/**
 * Uniquely identifies the order. It is the api identifier for the order

 */
export type ExportOrdersBodyOrderId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, in cents filter Total amount charged for the order. \*\*Supported operators :\*\* is, is_not, lt, lte, gt, gte, between \*\*Example ‚Üí\*\* \*total\\\[is\\\] = "1394532759"\*

 */
export type ExportOrdersBodyTotal = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

export type ExportOrdersChargebeeEventWebhook =
  (typeof ExportOrdersChargebeeEventWebhook)[keyof typeof ExportOrdersChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportOrdersChargebeeEventEmail =
  (typeof ExportOrdersChargebeeEventEmail)[keyof typeof ExportOrdersChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportOrdersChargebeeEventActions =
  (typeof ExportOrdersChargebeeEventActions)[keyof typeof ExportOrdersChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportOrdersChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportOrdersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportOrdersChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportOrdersChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportOrdersChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportCoupons200 = {
  export: Export;
};

export type ExportCouponsBody = {
  /** optional, string filter The currency code (\[ISO 4217 format\](https://www.chargebee.com/docs/supported-currencies.html)) of the coupon. Applicable for \*fixed_amount\* coupons alone. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*currency_code\\\[is\\\] = "USD"\*
   */
  currency_code?: ExportCouponsBodyCurrencyCode;
  /** Parameters for coupon
   */
  coupon?: ExportCouponsBodyCoupon;
};

/**
 * To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-11-09.

 */
export type ExportCouponsBodyCouponUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Timestamp indicating when this coupon is created.

 */
export type ExportCouponsBodyCouponCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Parameters for coupon

 */
export type ExportCouponsBodyCoupon = {
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee. \*\*Note:\*\* When the coupon ID contains a special character; for example: \`#\`, the API returns an error. Make sure that you \[encode\](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
   */
  id?: ExportCouponsBodyCouponId;
  /** The display name used in web interface for identifying the coupon. \*\*Note:\*\* When the name of the coupon set contains a special character; for example: \`#\`, the API returns an error. Make sure that you \[encode\](https://www.urlencoder.org/) the name of the coupon set in the path parameter before making an API call.
   */
  name?: ExportCouponsBodyCouponName;
  /** The type of deduction
   */
  discount_type?: ExportCouponsBodyCouponDiscountType;
  /** Specifies the time duration for which this coupon is attached to the subscription.
   */
  duration_type?: ExportCouponsBodyCouponDurationType;
  /** Status of the coupon.
   */
  status?: ExportCouponsBodyCouponStatus;
  /** The amount on the invoice to which the coupon is applied.
   */
  apply_on?: ExportCouponsBodyCouponApplyOn;
  /** Timestamp indicating when this coupon is created.
   */
  created_at?: ExportCouponsBodyCouponCreatedAt;
  /** To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-11-09.
   */
  updated_at?: ExportCouponsBodyCouponUpdatedAt;
};

/**
 * \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.

 */
export type ExportCouponsBodyCouponApplyOnIsNot =
  (typeof ExportCouponsBodyCouponApplyOnIsNot)[keyof typeof ExportCouponsBodyCouponApplyOnIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponApplyOnIsNot = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.

 */
export type ExportCouponsBodyCouponApplyOnIs =
  (typeof ExportCouponsBodyCouponApplyOnIs)[keyof typeof ExportCouponsBodyCouponApplyOnIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponApplyOnIs = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * The amount on the invoice to which the coupon is applied.

 */
export type ExportCouponsBodyCouponApplyOn = {
  /** \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.
 */
  is?: ExportCouponsBodyCouponApplyOnIs;
  /** \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.
 */
  is_not?: ExportCouponsBodyCouponApplyOnIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.

 */
export type ExportCouponsBodyCouponStatusIsNot =
  (typeof ExportCouponsBodyCouponStatusIsNot)[keyof typeof ExportCouponsBodyCouponStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponStatusIsNot = {
  active: "active",
  expired: "expired",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.

 */
export type ExportCouponsBodyCouponStatusIs =
  (typeof ExportCouponsBodyCouponStatusIs)[keyof typeof ExportCouponsBodyCouponStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponStatusIs = {
  active: "active",
  expired: "expired",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * Status of the coupon.

 */
export type ExportCouponsBodyCouponStatus = {
  /** \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.
   */
  is?: ExportCouponsBodyCouponStatusIs;
  /** \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.
   */
  is_not?: ExportCouponsBodyCouponStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type ExportCouponsBodyCouponDurationTypeIsNot =
  (typeof ExportCouponsBodyCouponDurationTypeIsNot)[keyof typeof ExportCouponsBodyCouponDurationTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponDurationTypeIsNot = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type ExportCouponsBodyCouponDurationTypeIs =
  (typeof ExportCouponsBodyCouponDurationTypeIs)[keyof typeof ExportCouponsBodyCouponDurationTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponDurationTypeIs = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * Specifies the time duration for which this coupon is attached to the subscription.

 */
export type ExportCouponsBodyCouponDurationType = {
  /** \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
   */
  is?: ExportCouponsBodyCouponDurationTypeIs;
  /** \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
   */
  is_not?: ExportCouponsBodyCouponDurationTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.

 */
export type ExportCouponsBodyCouponDiscountTypeIsNot =
  (typeof ExportCouponsBodyCouponDiscountTypeIsNot)[keyof typeof ExportCouponsBodyCouponDiscountTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponDiscountTypeIsNot = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.

 */
export type ExportCouponsBodyCouponDiscountTypeIs =
  (typeof ExportCouponsBodyCouponDiscountTypeIs)[keyof typeof ExportCouponsBodyCouponDiscountTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsBodyCouponDiscountTypeIs = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction

 */
export type ExportCouponsBodyCouponDiscountType = {
  /** \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.
   */
  is?: ExportCouponsBodyCouponDiscountTypeIs;
  /** \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.
   */
  is_not?: ExportCouponsBodyCouponDiscountTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * The display name used in web interface for identifying the coupon. \*\*Note:\*\* When the name of the coupon set contains a special character; for example: \`#\`, the API returns an error. Make sure that you \[encode\](https://www.urlencoder.org/) the name of the coupon set in the path parameter before making an API call.

 */
export type ExportCouponsBodyCouponName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Used to uniquely identify the coupon in your website/application and to integrate with Chargebee. \*\*Note:\*\* When the coupon ID contains a special character; for example: \`#\`, the API returns an error. Make sure that you \[encode\](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.

 */
export type ExportCouponsBodyCouponId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The currency code (\[ISO 4217 format\](https://www.chargebee.com/docs/supported-currencies.html)) of the coupon. Applicable for \*fixed_amount\* coupons alone. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*currency_code\\\[is\\\] = "USD"\*

 */
export type ExportCouponsBodyCurrencyCode = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportCouponsChargebeeEventWebhook =
  (typeof ExportCouponsChargebeeEventWebhook)[keyof typeof ExportCouponsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCouponsChargebeeEventEmail =
  (typeof ExportCouponsChargebeeEventEmail)[keyof typeof ExportCouponsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCouponsChargebeeEventActions =
  (typeof ExportCouponsChargebeeEventActions)[keyof typeof ExportCouponsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCouponsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCouponsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportCouponsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportCouponsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportCouponsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportCreditNotes200 = {
  export: Export;
};

export type ExportCreditNotesBody = {
  /** Parameters for credit_note
   */
  credit_note?: ExportCreditNotesBodyCreditNote;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportCreditNotesBodyCreditNoteChannelIsNot =
  (typeof ExportCreditNotesBodyCreditNoteChannelIsNot)[keyof typeof ExportCreditNotesBodyCreditNoteChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportCreditNotesBodyCreditNoteChannelIs =
  (typeof ExportCreditNotesBodyCreditNoteChannelIs)[keyof typeof ExportCreditNotesBodyCreditNoteChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportCreditNotesBodyCreditNoteChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportCreditNotesBodyCreditNoteChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportCreditNotesBodyCreditNoteChannelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-09-28.

 */
export type ExportCreditNotesBodyCreditNoteUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Timestamp indicating the date and time this Credit Note gets voided.

 */
export type ExportCreditNotesBodyCreditNoteVoidedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The yet to be used credits of this Credit Note.

 */
export type ExportCreditNotesBodyCreditNoteAmountAvailable = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * The refunds issued from this Credit Note.

 */
export type ExportCreditNotesBodyCreditNoteAmountRefunded = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * The amount allocated to the invoices.

 */
export type ExportCreditNotesBodyCreditNoteAmountAllocated = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportCreditNotesBodyCreditNotePriceTypeIsNot =
  (typeof ExportCreditNotesBodyCreditNotePriceTypeIsNot)[keyof typeof ExportCreditNotesBodyCreditNotePriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNotePriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportCreditNotesBodyCreditNotePriceTypeIs =
  (typeof ExportCreditNotesBodyCreditNotePriceTypeIs)[keyof typeof ExportCreditNotesBodyCreditNotePriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNotePriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * The price type of the Credit Note.

 */
export type ExportCreditNotesBodyCreditNotePriceType = {
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is?: ExportCreditNotesBodyCreditNotePriceTypeIs;
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is_not?: ExportCreditNotesBodyCreditNotePriceTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Credit Note amount in cents.

 */
export type ExportCreditNotesBodyCreditNoteTotal = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * The date the Credit Note is issued.

 */
export type ExportCreditNotesBodyCreditNoteDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.

 */
export type ExportCreditNotesBodyCreditNoteStatusIsNot =
  (typeof ExportCreditNotesBodyCreditNoteStatusIsNot)[keyof typeof ExportCreditNotesBodyCreditNoteStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteStatusIsNot = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.

 */
export type ExportCreditNotesBodyCreditNoteStatusIs =
  (typeof ExportCreditNotesBodyCreditNoteStatusIs)[keyof typeof ExportCreditNotesBodyCreditNoteStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteStatusIs = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * The credit note status.

 */
export type ExportCreditNotesBodyCreditNoteStatus = {
  /** \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.
   */
  is?: ExportCreditNotesBodyCreditNoteStatusIs;
  /** \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.
   */
  is_not?: ExportCreditNotesBodyCreditNoteStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Credit Notes \\\> Create Credit Note\*\*. Must be passed if set as mandatory in the app. The codes are case-sensitive

 */
export type ExportCreditNotesBodyCreditNoteCreateReasonCode = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT

 */
export type ExportCreditNotesBodyCreditNoteReasonCodeIsNot =
  (typeof ExportCreditNotesBodyCreditNoteReasonCodeIsNot)[keyof typeof ExportCreditNotesBodyCreditNoteReasonCodeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteReasonCodeIsNot = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

/**
 * \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT

 */
export type ExportCreditNotesBodyCreditNoteReasonCodeIs =
  (typeof ExportCreditNotesBodyCreditNoteReasonCodeIs)[keyof typeof ExportCreditNotesBodyCreditNoteReasonCodeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteReasonCodeIs = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

/**
 * The reason for issuing this Credit Note. The following reason codes are supported now\\\[Deprecated; use the \[create_reason_code\](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\\\]

 */
export type ExportCreditNotesBodyCreditNoteReasonCode = {
  /** \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT
   */
  is?: ExportCreditNotesBodyCreditNoteReasonCodeIs;
  /** \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT
   */
  is_not?: ExportCreditNotesBodyCreditNoteReasonCodeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note

 */
export type ExportCreditNotesBodyCreditNoteTypeIsNot =
  (typeof ExportCreditNotesBodyCreditNoteTypeIsNot)[keyof typeof ExportCreditNotesBodyCreditNoteTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteTypeIsNot = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

/**
 * \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note

 */
export type ExportCreditNotesBodyCreditNoteTypeIs =
  (typeof ExportCreditNotesBodyCreditNoteTypeIs)[keyof typeof ExportCreditNotesBodyCreditNoteTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteTypeIs = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

/**
 * The credit note type.

 */
export type ExportCreditNotesBodyCreditNoteType = {
  /** \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note
   */
  is?: ExportCreditNotesBodyCreditNoteTypeIs;
  /** \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note
   */
  is_not?: ExportCreditNotesBodyCreditNoteTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * The identifier of the invoice against which this Credit Note is issued

 */
export type ExportCreditNotesBodyCreditNoteReferenceInvoiceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on subscription_id. NOTE: Not to be used if \*consolidated invoicing\* feature is enabled.

 */
export type ExportCreditNotesBodyCreditNoteSubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportCreditNotesBodyCreditNoteSubscriptionIdIsPresent;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for credit_note

 */
export type ExportCreditNotesBodyCreditNote = {
  /** Credit-note id.
   */
  id?: ExportCreditNotesBodyCreditNoteId;
  /** The identifier of the customer this Credit Note belongs to.
   */
  customer_id?: ExportCreditNotesBodyCreditNoteCustomerId;
  /** To filter based on subscription_id. NOTE: Not to be used if \*consolidated invoicing\* feature is enabled.
   */
  subscription_id?: ExportCreditNotesBodyCreditNoteSubscriptionId;
  /** The identifier of the invoice against which this Credit Note is issued
   */
  reference_invoice_id?: ExportCreditNotesBodyCreditNoteReferenceInvoiceId;
  /** The credit note type.
   */
  type?: ExportCreditNotesBodyCreditNoteType;
  /** The reason for issuing this Credit Note. The following reason codes are supported now\\\[Deprecated; use the \[create_reason_code\](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\\\]
   */
  reason_code?: ExportCreditNotesBodyCreditNoteReasonCode;
  /** Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Credit Notes \\\> Create Credit Note\*\*. Must be passed if set as mandatory in the app. The codes are case-sensitive
   */
  create_reason_code?: ExportCreditNotesBodyCreditNoteCreateReasonCode;
  /** The credit note status.
   */
  status?: ExportCreditNotesBodyCreditNoteStatus;
  /** The date the Credit Note is issued.
   */
  date?: ExportCreditNotesBodyCreditNoteDate;
  /** Credit Note amount in cents.
   */
  total?: ExportCreditNotesBodyCreditNoteTotal;
  /** The price type of the Credit Note.
   */
  price_type?: ExportCreditNotesBodyCreditNotePriceType;
  /** The amount allocated to the invoices.
   */
  amount_allocated?: ExportCreditNotesBodyCreditNoteAmountAllocated;
  /** The refunds issued from this Credit Note.
   */
  amount_refunded?: ExportCreditNotesBodyCreditNoteAmountRefunded;
  /** The yet to be used credits of this Credit Note.
   */
  amount_available?: ExportCreditNotesBodyCreditNoteAmountAvailable;
  /** Timestamp indicating the date and time this Credit Note gets voided.
   */
  voided_at?: ExportCreditNotesBodyCreditNoteVoidedAt;
  /** To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  updated_at?: ExportCreditNotesBodyCreditNoteUpdatedAt;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportCreditNotesBodyCreditNoteChannel;
};

export type ExportCreditNotesBodyCreditNoteSubscriptionIdIsPresent =
  (typeof ExportCreditNotesBodyCreditNoteSubscriptionIdIsPresent)[keyof typeof ExportCreditNotesBodyCreditNoteSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesBodyCreditNoteSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * The identifier of the customer this Credit Note belongs to.

 */
export type ExportCreditNotesBodyCreditNoteCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Credit-note id.

 */
export type ExportCreditNotesBodyCreditNoteId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportCreditNotesChargebeeEventWebhook =
  (typeof ExportCreditNotesChargebeeEventWebhook)[keyof typeof ExportCreditNotesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCreditNotesChargebeeEventEmail =
  (typeof ExportCreditNotesChargebeeEventEmail)[keyof typeof ExportCreditNotesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCreditNotesChargebeeEventActions =
  (typeof ExportCreditNotesChargebeeEventActions)[keyof typeof ExportCreditNotesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCreditNotesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCreditNotesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportCreditNotesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportCreditNotesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportCreditNotesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportRevenueRecognitionReports200 = {
  export: Export;
};

/**
 * Parent who is going to handle invoices

 */
export type ExportRevenueRecognitionReportsBodyRelationshipInvoiceOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parent who is going to pay

 */
export type ExportRevenueRecognitionReportsBodyRelationshipPaymentOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Immediate parent with whom we will link our new customer(child)

 */
export type ExportRevenueRecognitionReportsBodyRelationshipParentId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parameters for relationship

 */
export type ExportRevenueRecognitionReportsBodyRelationship = {
  /** Immediate parent with whom we will link our new customer(child)
   */
  parent_id?: ExportRevenueRecognitionReportsBodyRelationshipParentId;
  /** Parent who is going to pay
   */
  payment_owner_id?: ExportRevenueRecognitionReportsBodyRelationshipPaymentOwnerId;
  /** Parent who is going to handle invoices
   */
  invoice_owner_id?: ExportRevenueRecognitionReportsBodyRelationshipInvoiceOwnerId;
};

export type ExportRevenueRecognitionReportsBody = {
  /** Determines the scope of the report. Returns the report based on the value specified. \* subscription - Subscription \* invoice - Invoice \* product - Product (Includes Plan, Addon and Adhoc) \* customer - Customer
   */
  report_by: ExportRevenueRecognitionReportsBodyReportBy;
  /** Value must be in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) format. Generates the report based on the value specified. If no currency_code value is specified, then consolidated report based on base currency is returned.
   */
  currency_code?: string;
  /** Obtains report data from the specified month, combined with the value specified for report_from_year. Values must be between 1 and 12, where 1 is January and 12 is December.
   */
  report_from_month: number;
  /** Obtains report data from the specified year, combined with the value specified for report_from_month.
   */
  report_from_year: number;
  /** Obtains report data from the specified month, combined with the value specified for report_to_year. Values must be between 1 and 12, where 1 is January and 12 is December.
   */
  report_to_month: number;
  /** Obtains report data until the specified year, combined with the value specified for report_to_month.
   */
  report_to_year: number;
  /** Returns amount with discount in the report. If value specified is false, it returns amount without discount.
   */
  include_discounts?: boolean;
  /** optional, string filter Payment owner of an invoice. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*payment_owner\\\[is\\\] = "payment_customer"\*
   */
  payment_owner?: ExportRevenueRecognitionReportsBodyPaymentOwner;
  /** optional, string filter The plan item code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "silver"\*
   */
  item_id?: ExportRevenueRecognitionReportsBodyItemId;
  /** optional, string filter The plan item price code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_price_id\\\[is\\\] = "silver-USD-monthly"\*
   */
  item_price_id?: ExportRevenueRecognitionReportsBodyItemPriceId;
  /** optional, string filter Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Subscriptions \\\> Subscription Cancellation\*\* . Must be passed if set as mandatory in the app. The codes are case-sensitive. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*cancel_reason_code\\\[is\\\] = "Not Paid"\*
   */
  cancel_reason_code?: ExportRevenueRecognitionReportsBodyCancelReasonCode;
  /** optional, string filter The unique ID of the \[business entity\](/docs/api?prod_cat_ver=2#mbe) of this subscription. This is always the same as the \[business entity\](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer. \*\*Supported operators :\*\* is, is_not, starts_with \*\*Example ‚Üí\*\* \*business_entity_id\\\[is_not\\\] = "business_entity_id"\*
   */
  business_entity_id?: ExportRevenueRecognitionReportsBodyBusinessEntityId;
  /** Parameters for invoice
   */
  invoice?: ExportRevenueRecognitionReportsBodyInvoice;
  /** Parameters for subscription
   */
  subscription?: ExportRevenueRecognitionReportsBodySubscription;
  /** Parameters for customer
   */
  customer?: ExportRevenueRecognitionReportsBodyCustomer;
  /** Parameters for relationship
   */
  relationship?: ExportRevenueRecognitionReportsBodyRelationship;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportRevenueRecognitionReportsBodyCustomerChannelIsNot =
  (typeof ExportRevenueRecognitionReportsBodyCustomerChannelIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportRevenueRecognitionReportsBodyCustomerChannelIs =
  (typeof ExportRevenueRecognitionReportsBodyCustomerChannelIs)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportRevenueRecognitionReportsBodyCustomerChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportRevenueRecognitionReportsBodyCustomerChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportRevenueRecognitionReportsBodyCustomerChannelIsNot;
  in?: string;
  not_in?: string;
};

export type ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoicesIs =
  (typeof ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoicesIs)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Override for this customer, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the \[subscription level\](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.

 */
export type ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoices = {
  is?: ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoicesIs;
};

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIsNot =
  (typeof ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIsNot =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIs =
  (typeof ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIs)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIs =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * The preferred offline payment method for the customer.

 */
export type ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethod = {
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is?: ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIs;
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is_not?: ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethodIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportRevenueRecognitionReportsBodyCustomerUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Timestamp indicating when this customer resource is created.

 */
export type ExportRevenueRecognitionReportsBodyCustomerCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ExportRevenueRecognitionReportsBodyCustomerTaxabilityIsNot =
  (typeof ExportRevenueRecognitionReportsBodyCustomerTaxabilityIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerTaxabilityIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerTaxabilityIsNot = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ExportRevenueRecognitionReportsBodyCustomerTaxabilityIs =
  (typeof ExportRevenueRecognitionReportsBodyCustomerTaxabilityIs)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerTaxabilityIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerTaxabilityIs = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Specifies if the customer is liable for tax

 */
export type ExportRevenueRecognitionReportsBodyCustomerTaxability = {
  /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  is?: ExportRevenueRecognitionReportsBodyCustomerTaxabilityIs;
  /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  is_not?: ExportRevenueRecognitionReportsBodyCustomerTaxabilityIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIsNot =
  (typeof ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIsNot = {
  on: "on",
  off: "off",
} as const;

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIs =
  (typeof ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIs)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIs = {
  on: "on",
  off: "off",
} as const;

/**
 * Whether payments needs to be collected automatically for this customer

 */
export type ExportRevenueRecognitionReportsBodyCustomerAutoCollection = {
  /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  is?: ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIs;
  /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  is_not?: ExportRevenueRecognitionReportsBodyCustomerAutoCollectionIsNot;
  in?: string;
  not_in?: string;
};

export type ExportRevenueRecognitionReportsBodyCustomerPhoneIsPresent =
  (typeof ExportRevenueRecognitionReportsBodyCustomerPhoneIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerPhoneIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerPhoneIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Phone number of the customer

 */
export type ExportRevenueRecognitionReportsBodyCustomerPhone = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportRevenueRecognitionReportsBodyCustomerPhoneIsPresent;
};

export type ExportRevenueRecognitionReportsBodyCustomerCompanyIsPresent =
  (typeof ExportRevenueRecognitionReportsBodyCustomerCompanyIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerCompanyIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerCompanyIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Company name of the customer.

 */
export type ExportRevenueRecognitionReportsBodyCustomerCompany = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportRevenueRecognitionReportsBodyCustomerCompanyIsPresent;
};

export type ExportRevenueRecognitionReportsBodyCustomerEmailIsPresent =
  (typeof ExportRevenueRecognitionReportsBodyCustomerEmailIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerEmailIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerEmailIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Email of the customer. Configured email notifications will be sent to this email.

 */
export type ExportRevenueRecognitionReportsBodyCustomerEmail = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportRevenueRecognitionReportsBodyCustomerEmailIsPresent;
};

export type ExportRevenueRecognitionReportsBodyCustomerLastNameIsPresent =
  (typeof ExportRevenueRecognitionReportsBodyCustomerLastNameIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerLastNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerLastNameIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Last name of the customer

 */
export type ExportRevenueRecognitionReportsBodyCustomerLastName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportRevenueRecognitionReportsBodyCustomerLastNameIsPresent;
};

export type ExportRevenueRecognitionReportsBodyCustomerFirstNameIsPresent =
  (typeof ExportRevenueRecognitionReportsBodyCustomerFirstNameIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodyCustomerFirstNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyCustomerFirstNameIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * First name of the customer

 */
export type ExportRevenueRecognitionReportsBodyCustomerFirstName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportRevenueRecognitionReportsBodyCustomerFirstNameIsPresent;
};

/**
 * Identifier of the customer.

 */
export type ExportRevenueRecognitionReportsBodyCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for customer

 */
export type ExportRevenueRecognitionReportsBodyCustomer = {
  /** Identifier of the customer.
   */
  id?: ExportRevenueRecognitionReportsBodyCustomerId;
  /** First name of the customer
   */
  first_name?: ExportRevenueRecognitionReportsBodyCustomerFirstName;
  /** Last name of the customer
   */
  last_name?: ExportRevenueRecognitionReportsBodyCustomerLastName;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: ExportRevenueRecognitionReportsBodyCustomerEmail;
  /** Company name of the customer.
   */
  company?: ExportRevenueRecognitionReportsBodyCustomerCompany;
  /** Phone number of the customer
   */
  phone?: ExportRevenueRecognitionReportsBodyCustomerPhone;
  /** Whether payments needs to be collected automatically for this customer
   */
  auto_collection?: ExportRevenueRecognitionReportsBodyCustomerAutoCollection;
  /** Specifies if the customer is liable for tax
   */
  taxability?: ExportRevenueRecognitionReportsBodyCustomerTaxability;
  /** Timestamp indicating when this customer resource is created.
   */
  created_at?: ExportRevenueRecognitionReportsBodyCustomerCreatedAt;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportRevenueRecognitionReportsBodyCustomerUpdatedAt;
  /** The preferred offline payment method for the customer.
   */
  offline_payment_method?: ExportRevenueRecognitionReportsBodyCustomerOfflinePaymentMethod;
  /** Override for this customer, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the \[subscription level\](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.
   */
  auto_close_invoices?: ExportRevenueRecognitionReportsBodyCustomerAutoCloseInvoices;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportRevenueRecognitionReportsBodyCustomerChannel;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionChannelIsNot =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionChannelIsNot)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionChannelIs =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionChannelIs)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportRevenueRecognitionReportsBodySubscriptionChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportRevenueRecognitionReportsBodySubscriptionChannelIsNot;
  in?: string;
  not_in?: string;
};

export type ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoicesIs =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoicesIs)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoicesIs =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * Set to \`false\` to override for this subscription, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the \[customer level\](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).

 */
export type ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoices = {
  is?: ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoicesIs;
};

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIsNot =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIsNot)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIsNot =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIs =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIs)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIs =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * The preferred offline payment method for the subscription.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethod =
  {
    /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
     */
    is?: ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIs;
    /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
     */
    is_not?: ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethodIsNot;
    in?: string;
    not_in?: string;
  };

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Parameters for subscription

 */
export type ExportRevenueRecognitionReportsBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: ExportRevenueRecognitionReportsBodySubscriptionId;
  /** Identifier of the customer with whom this subscription is associated.
   */
  customer_id?: ExportRevenueRecognitionReportsBodySubscriptionCustomerId;
  /** Current state of the subscription
   */
  status?: ExportRevenueRecognitionReportsBodySubscriptionStatus;
  /** The reason for canceling the subscription. Set by Chargebee automatically.
   */
  cancel_reason?: ExportRevenueRecognitionReportsBodySubscriptionCancelReason;
  /** \* When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels. \* When the subscription is on a \[contract term\](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.
   */
  remaining_billing_cycles?: ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCycles;
  /** The time at which the subscription was created.
   */
  created_at?: ExportRevenueRecognitionReportsBodySubscriptionCreatedAt;
  /** Time at which the subscription \`status\` last changed to \`active\`. For example, this value is updated when an \`in_trial\` or \`cancelled\` subscription activates.
   */
  activated_at?: ExportRevenueRecognitionReportsBodySubscriptionActivatedAt;
  /** The date/time at which the next billing for the subscription happens. This is usually right after \`current_term_end\` unless multiple subscription terms were invoiced in advance using the \`terms_to_charge\` parameter.
   */
  next_billing_at?: ExportRevenueRecognitionReportsBodySubscriptionNextBillingAt;
  /** Time at which subscription was cancelled or is set to be cancelled.
   */
  cancelled_at?: ExportRevenueRecognitionReportsBodySubscriptionCancelledAt;
  /** If \`true\`, there are subscription changes scheduled on next renewal.
   */
  has_scheduled_changes?: ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChanges;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportRevenueRecognitionReportsBodySubscriptionUpdatedAt;
  /** The preferred offline payment method for the subscription.
   */
  offline_payment_method?: ExportRevenueRecognitionReportsBodySubscriptionOfflinePaymentMethod;
  /** Set to \`false\` to override for this subscription, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the \[customer level\](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: ExportRevenueRecognitionReportsBodySubscriptionAutoCloseInvoices;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportRevenueRecognitionReportsBodySubscriptionChannel;
};

export type ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChangesIs =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChangesIs)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChangesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChangesIs =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * If \`true\`, there are subscription changes scheduled on next renewal.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChanges =
  {
    is?: ExportRevenueRecognitionReportsBodySubscriptionHasScheduledChangesIs;
  };

/**
 * Time at which subscription was cancelled or is set to be cancelled.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionCancelledAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The date/time at which the next billing for the subscription happens. This is usually right after \`current_term_end\` unless multiple subscription terms were invoiced in advance using the \`terms_to_charge\` parameter.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionNextBillingAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportRevenueRecognitionReportsBodySubscriptionActivatedAtIsPresent =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionActivatedAtIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionActivatedAtIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionActivatedAtIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * Time at which the subscription \`status\` last changed to \`active\`. For example, this value is updated when an \`in_trial\` or \`cancelled\` subscription activates.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionActivatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
  is_present?: ExportRevenueRecognitionReportsBodySubscriptionActivatedAtIsPresent;
};

/**
 * The time at which the subscription was created.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCyclesIsPresent =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCyclesIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCyclesIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCyclesIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * \* When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels. \* When the subscription is on a \[contract term\](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCycles =
  {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
    is_present?: ExportRevenueRecognitionReportsBodySubscriptionRemainingBillingCyclesIsPresent;
  };

export type ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsPresent =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsNot =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsNot)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsNot =
  {
    not_paid: "not_paid",
    no_card: "no_card",
    fraud_review_failed: "fraud_review_failed",
    non_compliant_eu_customer: "non_compliant_eu_customer",
    tax_calculation_failed: "tax_calculation_failed",
    currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
    non_compliant_customer: "non_compliant_customer",
  } as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIs =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIs)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIs = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * The reason for canceling the subscription. Set by Chargebee automatically.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionCancelReason = {
  /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
   */
  is?: ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIs;
  /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
   */
  is_not?: ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsNot;
  in?: string;
  not_in?: string;
  is_present?: ExportRevenueRecognitionReportsBodySubscriptionCancelReasonIsPresent;
};

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionStatusIsNot =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionStatusIsNot)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionStatusIsNot = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionStatusIs =
  (typeof ExportRevenueRecognitionReportsBodySubscriptionStatusIs)[keyof typeof ExportRevenueRecognitionReportsBodySubscriptionStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodySubscriptionStatusIs = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * Current state of the subscription

 */
export type ExportRevenueRecognitionReportsBodySubscriptionStatus = {
  /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
   */
  is?: ExportRevenueRecognitionReportsBodySubscriptionStatusIs;
  /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
   */
  is_not?: ExportRevenueRecognitionReportsBodySubscriptionStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Identifier of the customer with whom this subscription is associated.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * A unique and immutable identifier for the subscription. If not provided, it is autogenerated.

 */
export type ExportRevenueRecognitionReportsBodySubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceChannelIsNot =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceChannelIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceChannelIs =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceChannelIs)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportRevenueRecognitionReportsBodyInvoiceChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportRevenueRecognitionReportsBodyInvoiceChannelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsPresent =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsPresent)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsNot =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsNot = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIs =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIs)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIs = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * Current dunning status of the invoice.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceDunningStatus = {
  /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
   */
  is?: ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIs;
  /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
   */
  is_not?: ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsNot;
  in?: string;
  not_in?: string;
  is_present?: ExportRevenueRecognitionReportsBodyInvoiceDunningStatusIsPresent;
};

/**
 * The unpaid amount that is due on the invoice. This is calculated as: \[total\](invoices#invoice_total) - \[amount_paid\](invoices#invoice_amount_paid) - sum of \[applied_credits\](invoices#invoice_applied_credits)\`.applied_amount\` - sum of \[adjustment_credit_notes\](invoices#invoice_adjustment_credit_notes)\`.cn_total\` - sum of \[linked_taxes_withheld\](invoices#invoice_linked_taxes_withheld)\`.amount\`.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceAmountDue = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total credits applied against this invoice.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceCreditsApplied = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total adjustments made against this invoice.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceAmountAdjusted = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Payments collected successfully for the invoice. This is the sum of \[linked_payments\[\]\](invoices#invoice_linked_payments)\`.txn_amount\` for all \`linked_payments\[\]\` that have \`txn_status\` as \`success\`.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceAmountPaid = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceTotal = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Timestamp indicating the date \\\& time this invoice got paid.

 */
export type ExportRevenueRecognitionReportsBodyInvoicePaidAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The document date displayed on the invoice PDF.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportRevenueRecognitionReportsBodyInvoicePriceTypeIsNot =
  (typeof ExportRevenueRecognitionReportsBodyInvoicePriceTypeIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyInvoicePriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoicePriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportRevenueRecognitionReportsBodyInvoicePriceTypeIs =
  (typeof ExportRevenueRecognitionReportsBodyInvoicePriceTypeIs)[keyof typeof ExportRevenueRecognitionReportsBodyInvoicePriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoicePriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * The price type of the invoice.

 */
export type ExportRevenueRecognitionReportsBodyInvoicePriceType = {
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is?: ExportRevenueRecognitionReportsBodyInvoicePriceTypeIs;
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is_not?: ExportRevenueRecognitionReportsBodyInvoicePriceTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceStatusIsNot =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceStatusIsNot)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceStatusIsNot = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceStatusIs =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceStatusIs)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceStatusIs = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * Current status of this invoice.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceStatus = {
  /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
  is?: ExportRevenueRecognitionReportsBodyInvoiceStatusIs;
  /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
  is_not?: ExportRevenueRecognitionReportsBodyInvoiceStatusIsNot;
  in?: string;
  not_in?: string;
};

export type ExportRevenueRecognitionReportsBodyInvoiceRecurringIs =
  (typeof ExportRevenueRecognitionReportsBodyInvoiceRecurringIs)[keyof typeof ExportRevenueRecognitionReportsBodyInvoiceRecurringIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyInvoiceRecurringIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Boolean indicating whether this invoice belongs to a subscription

 */
export type ExportRevenueRecognitionReportsBodyInvoiceRecurring = {
  is?: ExportRevenueRecognitionReportsBodyInvoiceRecurringIs;
};

/**
 * The invoice number. Acts as a identifier for invoice and typically generated sequentially.

 */
export type ExportRevenueRecognitionReportsBodyInvoiceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for invoice

 */
export type ExportRevenueRecognitionReportsBodyInvoice = {
  /** The invoice number. Acts as a identifier for invoice and typically generated sequentially.
   */
  id?: ExportRevenueRecognitionReportsBodyInvoiceId;
  /** Boolean indicating whether this invoice belongs to a subscription
   */
  recurring?: ExportRevenueRecognitionReportsBodyInvoiceRecurring;
  /** Current status of this invoice.
   */
  status?: ExportRevenueRecognitionReportsBodyInvoiceStatus;
  /** The price type of the invoice.
   */
  price_type?: ExportRevenueRecognitionReportsBodyInvoicePriceType;
  /** The document date displayed on the invoice PDF.
   */
  date?: ExportRevenueRecognitionReportsBodyInvoiceDate;
  /** Timestamp indicating the date \\\& time this invoice got paid.
   */
  paid_at?: ExportRevenueRecognitionReportsBodyInvoicePaidAt;
  /** Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.
   */
  total?: ExportRevenueRecognitionReportsBodyInvoiceTotal;
  /** Payments collected successfully for the invoice. This is the sum of \[linked_payments\[\]\](invoices#invoice_linked_payments)\`.txn_amount\` for all \`linked_payments\[\]\` that have \`txn_status\` as \`success\`.
   */
  amount_paid?: ExportRevenueRecognitionReportsBodyInvoiceAmountPaid;
  /** Total adjustments made against this invoice.
   */
  amount_adjusted?: ExportRevenueRecognitionReportsBodyInvoiceAmountAdjusted;
  /** Total credits applied against this invoice.
   */
  credits_applied?: ExportRevenueRecognitionReportsBodyInvoiceCreditsApplied;
  /** The unpaid amount that is due on the invoice. This is calculated as: \[total\](invoices#invoice_total) - \[amount_paid\](invoices#invoice_amount_paid) - sum of \[applied_credits\](invoices#invoice_applied_credits)\`.applied_amount\` - sum of \[adjustment_credit_notes\](invoices#invoice_adjustment_credit_notes)\`.cn_total\` - sum of \[linked_taxes_withheld\](invoices#invoice_linked_taxes_withheld)\`.amount\`.
   */
  amount_due?: ExportRevenueRecognitionReportsBodyInvoiceAmountDue;
  /** Current dunning status of the invoice.
   */
  dunning_status?: ExportRevenueRecognitionReportsBodyInvoiceDunningStatus;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportRevenueRecognitionReportsBodyInvoiceUpdatedAt;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportRevenueRecognitionReportsBodyInvoiceChannel;
};

/**
 * optional, string filter The unique ID of the \[business entity\](/docs/api?prod_cat_ver=2#mbe) of this subscription. This is always the same as the \[business entity\](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer. \*\*Supported operators :\*\* is, is_not, starts_with \*\*Example ‚Üí\*\* \*business_entity_id\\\[is_not\\\] = "business_entity_id"\*

 */
export type ExportRevenueRecognitionReportsBodyBusinessEntityId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * optional, string filter Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Subscriptions \\\> Subscription Cancellation\*\* . Must be passed if set as mandatory in the app. The codes are case-sensitive. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*cancel_reason_code\\\[is\\\] = "Not Paid"\*

 */
export type ExportRevenueRecognitionReportsBodyCancelReasonCode = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The plan item price code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_price_id\\\[is\\\] = "silver-USD-monthly"\*

 */
export type ExportRevenueRecognitionReportsBodyItemPriceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The plan item code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "silver"\*

 */
export type ExportRevenueRecognitionReportsBodyItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter Payment owner of an invoice. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*payment_owner\\\[is\\\] = "payment_customer"\*

 */
export type ExportRevenueRecognitionReportsBodyPaymentOwner = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Determines the scope of the report. Returns the report based on the value specified. \* subscription - Subscription \* invoice - Invoice \* product - Product (Includes Plan, Addon and Adhoc) \* customer - Customer

 */
export type ExportRevenueRecognitionReportsBodyReportBy =
  (typeof ExportRevenueRecognitionReportsBodyReportBy)[keyof typeof ExportRevenueRecognitionReportsBodyReportBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsBodyReportBy = {
  customer: "customer",
  invoice: "invoice",
  product: "product",
  subscription: "subscription",
} as const;

export type ExportRevenueRecognitionReportsChargebeeEventWebhook =
  (typeof ExportRevenueRecognitionReportsChargebeeEventWebhook)[keyof typeof ExportRevenueRecognitionReportsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportRevenueRecognitionReportsChargebeeEventEmail =
  (typeof ExportRevenueRecognitionReportsChargebeeEventEmail)[keyof typeof ExportRevenueRecognitionReportsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportRevenueRecognitionReportsChargebeeEventActions =
  (typeof ExportRevenueRecognitionReportsChargebeeEventActions)[keyof typeof ExportRevenueRecognitionReportsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportRevenueRecognitionReportsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportRevenueRecognitionReportsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportRevenueRecognitionReportsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportRevenueRecognitionReportsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportRevenueRecognitionReportsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportDeferredRevenueReports200 = {
  export: Export;
};

export type ExportDeferredRevenueReportsBody = {
  /** Determines the scope of the report. Returns the report based on the value specified. \* subscription - Subscription \* invoice - Invoice \* product - Product (Includes Plan, Addon and Adhoc) \* customer - Customer
   */
  report_by: ExportDeferredRevenueReportsBodyReportBy;
  /** Value must be in ISO 4217 format. Generates the report based on the value specified. If no currency_code value is specified, then consolidated report based on base currency is returned.
   */
  currency_code?: string;
  /** Obtains report data from the specified month, combined with the value specified for report_from_year.Values must be between 1 and 12, where 1 is January and 12 is December.
   */
  report_from_month: number;
  /** Obtains report data from the specified year, combined with the value specified for report_from_month.
   */
  report_from_year: number;
  /** Obtains report data from the specified month, combined with the value specified for report_to_year.Values must be between 1 and 12, where 1 is January and 12 is December.
   */
  report_to_month: number;
  /** Obtains report data until the specified year, combined with the value specified for report_to_month.
   */
  report_to_year: number;
  /** Returns amount with discount in the report. If value specified is false, it returns amount without discount.
   */
  include_discounts?: boolean;
  /** optional, string filter Payment owner of an invoice. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*payment_owner\\\[is\\\] = "payment_customer"\*
   */
  payment_owner?: ExportDeferredRevenueReportsBodyPaymentOwner;
  /** optional, string filter The plan item code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "silver"\*
   */
  item_id?: ExportDeferredRevenueReportsBodyItemId;
  /** optional, string filter The plan item price code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_price_id\\\[is\\\] = "silver-USD-monthly"\*
   */
  item_price_id?: ExportDeferredRevenueReportsBodyItemPriceId;
  /** optional, string filter Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Subscriptions \\\> Subscription Cancellation\*\* . Must be passed if set as mandatory in the app. The codes are case-sensitive. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*cancel_reason_code\\\[is\\\] = "Not Paid"\*
   */
  cancel_reason_code?: ExportDeferredRevenueReportsBodyCancelReasonCode;
  /** optional, string filter The unique ID of the \[business entity\](/docs/api?prod_cat_ver=2#mbe) of this subscription. This is always the same as the \[business entity\](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer. \*\*Supported operators :\*\* is, is_not, starts_with \*\*Example ‚Üí\*\* \*business_entity_id\\\[is_not\\\] = "business_entity_id"\*
   */
  business_entity_id?: ExportDeferredRevenueReportsBodyBusinessEntityId;
  /** Parameters for invoice
   */
  invoice?: ExportDeferredRevenueReportsBodyInvoice;
  /** Parameters for subscription
   */
  subscription?: ExportDeferredRevenueReportsBodySubscription;
  /** Parameters for customer
   */
  customer?: ExportDeferredRevenueReportsBodyCustomer;
  /** Parameters for relationship
   */
  relationship?: ExportDeferredRevenueReportsBodyRelationship;
};

/**
 * Parent who is going to handle invoices

 */
export type ExportDeferredRevenueReportsBodyRelationshipInvoiceOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parent who is going to pay

 */
export type ExportDeferredRevenueReportsBodyRelationshipPaymentOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Immediate parent with whom we will link our new customer(child)

 */
export type ExportDeferredRevenueReportsBodyRelationshipParentId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parameters for relationship

 */
export type ExportDeferredRevenueReportsBodyRelationship = {
  /** Immediate parent with whom we will link our new customer(child)
   */
  parent_id?: ExportDeferredRevenueReportsBodyRelationshipParentId;
  /** Parent who is going to pay
   */
  payment_owner_id?: ExportDeferredRevenueReportsBodyRelationshipPaymentOwnerId;
  /** Parent who is going to handle invoices
   */
  invoice_owner_id?: ExportDeferredRevenueReportsBodyRelationshipInvoiceOwnerId;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportDeferredRevenueReportsBodyCustomerChannelIsNot =
  (typeof ExportDeferredRevenueReportsBodyCustomerChannelIsNot)[keyof typeof ExportDeferredRevenueReportsBodyCustomerChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportDeferredRevenueReportsBodyCustomerChannelIs =
  (typeof ExportDeferredRevenueReportsBodyCustomerChannelIs)[keyof typeof ExportDeferredRevenueReportsBodyCustomerChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportDeferredRevenueReportsBodyCustomerChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportDeferredRevenueReportsBodyCustomerChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportDeferredRevenueReportsBodyCustomerChannelIsNot;
  in?: string;
  not_in?: string;
};

export type ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoicesIs =
  (typeof ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoicesIs)[keyof typeof ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Override for this customer, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the \[subscription level\](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.

 */
export type ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoices = {
  is?: ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoicesIs;
};

/**
 * Parameters for customer

 */
export type ExportDeferredRevenueReportsBodyCustomer = {
  /** Identifier of the customer.
   */
  id?: ExportDeferredRevenueReportsBodyCustomerId;
  /** First name of the customer
   */
  first_name?: ExportDeferredRevenueReportsBodyCustomerFirstName;
  /** Last name of the customer
   */
  last_name?: ExportDeferredRevenueReportsBodyCustomerLastName;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: ExportDeferredRevenueReportsBodyCustomerEmail;
  /** Company name of the customer.
   */
  company?: ExportDeferredRevenueReportsBodyCustomerCompany;
  /** Phone number of the customer
   */
  phone?: ExportDeferredRevenueReportsBodyCustomerPhone;
  /** Whether payments needs to be collected automatically for this customer
   */
  auto_collection?: ExportDeferredRevenueReportsBodyCustomerAutoCollection;
  /** Specifies if the customer is liable for tax
   */
  taxability?: ExportDeferredRevenueReportsBodyCustomerTaxability;
  /** Timestamp indicating when this customer resource is created.
   */
  created_at?: ExportDeferredRevenueReportsBodyCustomerCreatedAt;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportDeferredRevenueReportsBodyCustomerUpdatedAt;
  /** The preferred offline payment method for the customer.
   */
  offline_payment_method?: ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethod;
  /** Override for this customer, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the \[subscription level\](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.
   */
  auto_close_invoices?: ExportDeferredRevenueReportsBodyCustomerAutoCloseInvoices;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportDeferredRevenueReportsBodyCustomerChannel;
};

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIsNot =
  (typeof ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIsNot)[keyof typeof ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIsNot =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIs =
  (typeof ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIs)[keyof typeof ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIs = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * The preferred offline payment method for the customer.

 */
export type ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethod = {
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is?: ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIs;
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is_not?: ExportDeferredRevenueReportsBodyCustomerOfflinePaymentMethodIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportDeferredRevenueReportsBodyCustomerUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Timestamp indicating when this customer resource is created.

 */
export type ExportDeferredRevenueReportsBodyCustomerCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ExportDeferredRevenueReportsBodyCustomerTaxabilityIsNot =
  (typeof ExportDeferredRevenueReportsBodyCustomerTaxabilityIsNot)[keyof typeof ExportDeferredRevenueReportsBodyCustomerTaxabilityIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerTaxabilityIsNot = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ExportDeferredRevenueReportsBodyCustomerTaxabilityIs =
  (typeof ExportDeferredRevenueReportsBodyCustomerTaxabilityIs)[keyof typeof ExportDeferredRevenueReportsBodyCustomerTaxabilityIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerTaxabilityIs = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Specifies if the customer is liable for tax

 */
export type ExportDeferredRevenueReportsBodyCustomerTaxability = {
  /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  is?: ExportDeferredRevenueReportsBodyCustomerTaxabilityIs;
  /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  is_not?: ExportDeferredRevenueReportsBodyCustomerTaxabilityIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ExportDeferredRevenueReportsBodyCustomerAutoCollectionIsNot =
  (typeof ExportDeferredRevenueReportsBodyCustomerAutoCollectionIsNot)[keyof typeof ExportDeferredRevenueReportsBodyCustomerAutoCollectionIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerAutoCollectionIsNot = {
  on: "on",
  off: "off",
} as const;

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ExportDeferredRevenueReportsBodyCustomerAutoCollectionIs =
  (typeof ExportDeferredRevenueReportsBodyCustomerAutoCollectionIs)[keyof typeof ExportDeferredRevenueReportsBodyCustomerAutoCollectionIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerAutoCollectionIs = {
  on: "on",
  off: "off",
} as const;

/**
 * Whether payments needs to be collected automatically for this customer

 */
export type ExportDeferredRevenueReportsBodyCustomerAutoCollection = {
  /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  is?: ExportDeferredRevenueReportsBodyCustomerAutoCollectionIs;
  /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  is_not?: ExportDeferredRevenueReportsBodyCustomerAutoCollectionIsNot;
  in?: string;
  not_in?: string;
};

export type ExportDeferredRevenueReportsBodyCustomerPhoneIsPresent =
  (typeof ExportDeferredRevenueReportsBodyCustomerPhoneIsPresent)[keyof typeof ExportDeferredRevenueReportsBodyCustomerPhoneIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerPhoneIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Phone number of the customer

 */
export type ExportDeferredRevenueReportsBodyCustomerPhone = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportDeferredRevenueReportsBodyCustomerPhoneIsPresent;
};

export type ExportDeferredRevenueReportsBodyCustomerCompanyIsPresent =
  (typeof ExportDeferredRevenueReportsBodyCustomerCompanyIsPresent)[keyof typeof ExportDeferredRevenueReportsBodyCustomerCompanyIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerCompanyIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Company name of the customer.

 */
export type ExportDeferredRevenueReportsBodyCustomerCompany = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportDeferredRevenueReportsBodyCustomerCompanyIsPresent;
};

export type ExportDeferredRevenueReportsBodyCustomerEmailIsPresent =
  (typeof ExportDeferredRevenueReportsBodyCustomerEmailIsPresent)[keyof typeof ExportDeferredRevenueReportsBodyCustomerEmailIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerEmailIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Email of the customer. Configured email notifications will be sent to this email.

 */
export type ExportDeferredRevenueReportsBodyCustomerEmail = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportDeferredRevenueReportsBodyCustomerEmailIsPresent;
};

export type ExportDeferredRevenueReportsBodyCustomerLastNameIsPresent =
  (typeof ExportDeferredRevenueReportsBodyCustomerLastNameIsPresent)[keyof typeof ExportDeferredRevenueReportsBodyCustomerLastNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerLastNameIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Last name of the customer

 */
export type ExportDeferredRevenueReportsBodyCustomerLastName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportDeferredRevenueReportsBodyCustomerLastNameIsPresent;
};

export type ExportDeferredRevenueReportsBodyCustomerFirstNameIsPresent =
  (typeof ExportDeferredRevenueReportsBodyCustomerFirstNameIsPresent)[keyof typeof ExportDeferredRevenueReportsBodyCustomerFirstNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyCustomerFirstNameIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * First name of the customer

 */
export type ExportDeferredRevenueReportsBodyCustomerFirstName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportDeferredRevenueReportsBodyCustomerFirstNameIsPresent;
};

/**
 * Identifier of the customer.

 */
export type ExportDeferredRevenueReportsBodyCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportDeferredRevenueReportsBodySubscriptionChannelIsNot =
  (typeof ExportDeferredRevenueReportsBodySubscriptionChannelIsNot)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportDeferredRevenueReportsBodySubscriptionChannelIs =
  (typeof ExportDeferredRevenueReportsBodySubscriptionChannelIs)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportDeferredRevenueReportsBodySubscriptionChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportDeferredRevenueReportsBodySubscriptionChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportDeferredRevenueReportsBodySubscriptionChannelIsNot;
  in?: string;
  not_in?: string;
};

export type ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoicesIs =
  (typeof ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoicesIs)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Set to \`false\` to override for this subscription, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the \[customer level\](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).

 */
export type ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoices = {
  is?: ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoicesIs;
};

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIsNot =
  (typeof ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIsNot)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIsNot =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIs =
  (typeof ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIs)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIs =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * The preferred offline payment method for the subscription.

 */
export type ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethod = {
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is?: ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIs;
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is_not?: ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethodIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportDeferredRevenueReportsBodySubscriptionUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportDeferredRevenueReportsBodySubscriptionHasScheduledChangesIs =
  (typeof ExportDeferredRevenueReportsBodySubscriptionHasScheduledChangesIs)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionHasScheduledChangesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionHasScheduledChangesIs =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * If \`true\`, there are subscription changes scheduled on next renewal.

 */
export type ExportDeferredRevenueReportsBodySubscriptionHasScheduledChanges = {
  is?: ExportDeferredRevenueReportsBodySubscriptionHasScheduledChangesIs;
};

/**
 * Time at which subscription was cancelled or is set to be cancelled.

 */
export type ExportDeferredRevenueReportsBodySubscriptionCancelledAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The date/time at which the next billing for the subscription happens. This is usually right after \`current_term_end\` unless multiple subscription terms were invoiced in advance using the \`terms_to_charge\` parameter.

 */
export type ExportDeferredRevenueReportsBodySubscriptionNextBillingAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportDeferredRevenueReportsBodySubscriptionActivatedAtIsPresent =
  (typeof ExportDeferredRevenueReportsBodySubscriptionActivatedAtIsPresent)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionActivatedAtIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionActivatedAtIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * Time at which the subscription \`status\` last changed to \`active\`. For example, this value is updated when an \`in_trial\` or \`cancelled\` subscription activates.

 */
export type ExportDeferredRevenueReportsBodySubscriptionActivatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
  is_present?: ExportDeferredRevenueReportsBodySubscriptionActivatedAtIsPresent;
};

/**
 * The time at which the subscription was created.

 */
export type ExportDeferredRevenueReportsBodySubscriptionCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCyclesIsPresent =
  (typeof ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCyclesIsPresent)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCyclesIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCyclesIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * \* When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels. \* When the subscription is on a \[contract term\](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.

 */
export type ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCycles =
  {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
    is_present?: ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCyclesIsPresent;
  };

/**
 * Parameters for subscription

 */
export type ExportDeferredRevenueReportsBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: ExportDeferredRevenueReportsBodySubscriptionId;
  /** Identifier of the customer with whom this subscription is associated.
   */
  customer_id?: ExportDeferredRevenueReportsBodySubscriptionCustomerId;
  /** Current state of the subscription
   */
  status?: ExportDeferredRevenueReportsBodySubscriptionStatus;
  /** The reason for canceling the subscription. Set by Chargebee automatically.
   */
  cancel_reason?: ExportDeferredRevenueReportsBodySubscriptionCancelReason;
  /** \* When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels. \* When the subscription is on a \[contract term\](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.
   */
  remaining_billing_cycles?: ExportDeferredRevenueReportsBodySubscriptionRemainingBillingCycles;
  /** The time at which the subscription was created.
   */
  created_at?: ExportDeferredRevenueReportsBodySubscriptionCreatedAt;
  /** Time at which the subscription \`status\` last changed to \`active\`. For example, this value is updated when an \`in_trial\` or \`cancelled\` subscription activates.
   */
  activated_at?: ExportDeferredRevenueReportsBodySubscriptionActivatedAt;
  /** The date/time at which the next billing for the subscription happens. This is usually right after \`current_term_end\` unless multiple subscription terms were invoiced in advance using the \`terms_to_charge\` parameter.
   */
  next_billing_at?: ExportDeferredRevenueReportsBodySubscriptionNextBillingAt;
  /** Time at which subscription was cancelled or is set to be cancelled.
   */
  cancelled_at?: ExportDeferredRevenueReportsBodySubscriptionCancelledAt;
  /** If \`true\`, there are subscription changes scheduled on next renewal.
   */
  has_scheduled_changes?: ExportDeferredRevenueReportsBodySubscriptionHasScheduledChanges;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportDeferredRevenueReportsBodySubscriptionUpdatedAt;
  /** The preferred offline payment method for the subscription.
   */
  offline_payment_method?: ExportDeferredRevenueReportsBodySubscriptionOfflinePaymentMethod;
  /** Set to \`false\` to override for this subscription, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the \[customer level\](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: ExportDeferredRevenueReportsBodySubscriptionAutoCloseInvoices;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportDeferredRevenueReportsBodySubscriptionChannel;
};

export type ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsPresent =
  (typeof ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsPresent)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsPresent =
  {
    true: "true",
    false: "false",
  } as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsNot =
  (typeof ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsNot)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsNot = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ExportDeferredRevenueReportsBodySubscriptionCancelReasonIs =
  (typeof ExportDeferredRevenueReportsBodySubscriptionCancelReasonIs)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionCancelReasonIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionCancelReasonIs = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * The reason for canceling the subscription. Set by Chargebee automatically.

 */
export type ExportDeferredRevenueReportsBodySubscriptionCancelReason = {
  /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
   */
  is?: ExportDeferredRevenueReportsBodySubscriptionCancelReasonIs;
  /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
   */
  is_not?: ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsNot;
  in?: string;
  not_in?: string;
  is_present?: ExportDeferredRevenueReportsBodySubscriptionCancelReasonIsPresent;
};

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ExportDeferredRevenueReportsBodySubscriptionStatusIsNot =
  (typeof ExportDeferredRevenueReportsBodySubscriptionStatusIsNot)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionStatusIsNot = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ExportDeferredRevenueReportsBodySubscriptionStatusIs =
  (typeof ExportDeferredRevenueReportsBodySubscriptionStatusIs)[keyof typeof ExportDeferredRevenueReportsBodySubscriptionStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodySubscriptionStatusIs = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * Current state of the subscription

 */
export type ExportDeferredRevenueReportsBodySubscriptionStatus = {
  /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
   */
  is?: ExportDeferredRevenueReportsBodySubscriptionStatusIs;
  /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
   */
  is_not?: ExportDeferredRevenueReportsBodySubscriptionStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Identifier of the customer with whom this subscription is associated.

 */
export type ExportDeferredRevenueReportsBodySubscriptionCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * A unique and immutable identifier for the subscription. If not provided, it is autogenerated.

 */
export type ExportDeferredRevenueReportsBodySubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportDeferredRevenueReportsBodyInvoiceChannelIsNot =
  (typeof ExportDeferredRevenueReportsBodyInvoiceChannelIsNot)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportDeferredRevenueReportsBodyInvoiceChannelIs =
  (typeof ExportDeferredRevenueReportsBodyInvoiceChannelIs)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportDeferredRevenueReportsBodyInvoiceChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportDeferredRevenueReportsBodyInvoiceChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportDeferredRevenueReportsBodyInvoiceChannelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportDeferredRevenueReportsBodyInvoiceUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsPresent =
  (typeof ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsPresent)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsNot =
  (typeof ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsNot)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsNot = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ExportDeferredRevenueReportsBodyInvoiceDunningStatusIs =
  (typeof ExportDeferredRevenueReportsBodyInvoiceDunningStatusIs)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceDunningStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceDunningStatusIs = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * Current dunning status of the invoice.

 */
export type ExportDeferredRevenueReportsBodyInvoiceDunningStatus = {
  /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
   */
  is?: ExportDeferredRevenueReportsBodyInvoiceDunningStatusIs;
  /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
   */
  is_not?: ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsNot;
  in?: string;
  not_in?: string;
  is_present?: ExportDeferredRevenueReportsBodyInvoiceDunningStatusIsPresent;
};

/**
 * The unpaid amount that is due on the invoice. This is calculated as: \[total\](invoices#invoice_total) - \[amount_paid\](invoices#invoice_amount_paid) - sum of \[applied_credits\](invoices#invoice_applied_credits)\`.applied_amount\` - sum of \[adjustment_credit_notes\](invoices#invoice_adjustment_credit_notes)\`.cn_total\` - sum of \[linked_taxes_withheld\](invoices#invoice_linked_taxes_withheld)\`.amount\`.

 */
export type ExportDeferredRevenueReportsBodyInvoiceAmountDue = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total credits applied against this invoice.

 */
export type ExportDeferredRevenueReportsBodyInvoiceCreditsApplied = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total adjustments made against this invoice.

 */
export type ExportDeferredRevenueReportsBodyInvoiceAmountAdjusted = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Payments collected successfully for the invoice. This is the sum of \[linked_payments\[\]\](invoices#invoice_linked_payments)\`.txn_amount\` for all \`linked_payments\[\]\` that have \`txn_status\` as \`success\`.

 */
export type ExportDeferredRevenueReportsBodyInvoiceAmountPaid = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.

 */
export type ExportDeferredRevenueReportsBodyInvoiceTotal = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Timestamp indicating the date \\\& time this invoice got paid.

 */
export type ExportDeferredRevenueReportsBodyInvoicePaidAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The document date displayed on the invoice PDF.

 */
export type ExportDeferredRevenueReportsBodyInvoiceDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The price type of the invoice.

 */
export type ExportDeferredRevenueReportsBodyInvoicePriceType = {
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is?: ExportDeferredRevenueReportsBodyInvoicePriceTypeIs;
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is_not?: ExportDeferredRevenueReportsBodyInvoicePriceTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for invoice

 */
export type ExportDeferredRevenueReportsBodyInvoice = {
  /** The invoice number. Acts as a identifier for invoice and typically generated sequentially.
   */
  id?: ExportDeferredRevenueReportsBodyInvoiceId;
  /** Boolean indicating whether this invoice belongs to a subscription
   */
  recurring?: ExportDeferredRevenueReportsBodyInvoiceRecurring;
  /** Current status of this invoice.
   */
  status?: ExportDeferredRevenueReportsBodyInvoiceStatus;
  /** The price type of the invoice.
   */
  price_type?: ExportDeferredRevenueReportsBodyInvoicePriceType;
  /** The document date displayed on the invoice PDF.
   */
  date?: ExportDeferredRevenueReportsBodyInvoiceDate;
  /** Timestamp indicating the date \\\& time this invoice got paid.
   */
  paid_at?: ExportDeferredRevenueReportsBodyInvoicePaidAt;
  /** Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.
   */
  total?: ExportDeferredRevenueReportsBodyInvoiceTotal;
  /** Payments collected successfully for the invoice. This is the sum of \[linked_payments\[\]\](invoices#invoice_linked_payments)\`.txn_amount\` for all \`linked_payments\[\]\` that have \`txn_status\` as \`success\`.
   */
  amount_paid?: ExportDeferredRevenueReportsBodyInvoiceAmountPaid;
  /** Total adjustments made against this invoice.
   */
  amount_adjusted?: ExportDeferredRevenueReportsBodyInvoiceAmountAdjusted;
  /** Total credits applied against this invoice.
   */
  credits_applied?: ExportDeferredRevenueReportsBodyInvoiceCreditsApplied;
  /** The unpaid amount that is due on the invoice. This is calculated as: \[total\](invoices#invoice_total) - \[amount_paid\](invoices#invoice_amount_paid) - sum of \[applied_credits\](invoices#invoice_applied_credits)\`.applied_amount\` - sum of \[adjustment_credit_notes\](invoices#invoice_adjustment_credit_notes)\`.cn_total\` - sum of \[linked_taxes_withheld\](invoices#invoice_linked_taxes_withheld)\`.amount\`.
   */
  amount_due?: ExportDeferredRevenueReportsBodyInvoiceAmountDue;
  /** Current dunning status of the invoice.
   */
  dunning_status?: ExportDeferredRevenueReportsBodyInvoiceDunningStatus;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportDeferredRevenueReportsBodyInvoiceUpdatedAt;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportDeferredRevenueReportsBodyInvoiceChannel;
};

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportDeferredRevenueReportsBodyInvoicePriceTypeIsNot =
  (typeof ExportDeferredRevenueReportsBodyInvoicePriceTypeIsNot)[keyof typeof ExportDeferredRevenueReportsBodyInvoicePriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoicePriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportDeferredRevenueReportsBodyInvoicePriceTypeIs =
  (typeof ExportDeferredRevenueReportsBodyInvoicePriceTypeIs)[keyof typeof ExportDeferredRevenueReportsBodyInvoicePriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoicePriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ExportDeferredRevenueReportsBodyInvoiceStatusIsNot =
  (typeof ExportDeferredRevenueReportsBodyInvoiceStatusIsNot)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceStatusIsNot = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ExportDeferredRevenueReportsBodyInvoiceStatusIs =
  (typeof ExportDeferredRevenueReportsBodyInvoiceStatusIs)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceStatusIs = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * Current status of this invoice.

 */
export type ExportDeferredRevenueReportsBodyInvoiceStatus = {
  /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
  is?: ExportDeferredRevenueReportsBodyInvoiceStatusIs;
  /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
  is_not?: ExportDeferredRevenueReportsBodyInvoiceStatusIsNot;
  in?: string;
  not_in?: string;
};

export type ExportDeferredRevenueReportsBodyInvoiceRecurringIs =
  (typeof ExportDeferredRevenueReportsBodyInvoiceRecurringIs)[keyof typeof ExportDeferredRevenueReportsBodyInvoiceRecurringIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyInvoiceRecurringIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Boolean indicating whether this invoice belongs to a subscription

 */
export type ExportDeferredRevenueReportsBodyInvoiceRecurring = {
  is?: ExportDeferredRevenueReportsBodyInvoiceRecurringIs;
};

/**
 * The invoice number. Acts as a identifier for invoice and typically generated sequentially.

 */
export type ExportDeferredRevenueReportsBodyInvoiceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The unique ID of the \[business entity\](/docs/api?prod_cat_ver=2#mbe) of this subscription. This is always the same as the \[business entity\](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer. \*\*Supported operators :\*\* is, is_not, starts_with \*\*Example ‚Üí\*\* \*business_entity_id\\\[is_not\\\] = "business_entity_id"\*

 */
export type ExportDeferredRevenueReportsBodyBusinessEntityId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * optional, string filter Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in \*\*Settings \\\> Configure Chargebee \\\> Reason Codes \\\> Subscriptions \\\> Subscription Cancellation\*\* . Must be passed if set as mandatory in the app. The codes are case-sensitive. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*cancel_reason_code\\\[is\\\] = "Not Paid"\*

 */
export type ExportDeferredRevenueReportsBodyCancelReasonCode = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The plan item price code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_price_id\\\[is\\\] = "silver-USD-monthly"\*

 */
export type ExportDeferredRevenueReportsBodyItemPriceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The plan item code. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "silver"\*

 */
export type ExportDeferredRevenueReportsBodyItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter Payment owner of an invoice. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*payment_owner\\\[is\\\] = "payment_customer"\*

 */
export type ExportDeferredRevenueReportsBodyPaymentOwner = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Determines the scope of the report. Returns the report based on the value specified. \* subscription - Subscription \* invoice - Invoice \* product - Product (Includes Plan, Addon and Adhoc) \* customer - Customer

 */
export type ExportDeferredRevenueReportsBodyReportBy =
  (typeof ExportDeferredRevenueReportsBodyReportBy)[keyof typeof ExportDeferredRevenueReportsBodyReportBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsBodyReportBy = {
  customer: "customer",
  invoice: "invoice",
  product: "product",
  subscription: "subscription",
} as const;

export type ExportDeferredRevenueReportsChargebeeEventWebhook =
  (typeof ExportDeferredRevenueReportsChargebeeEventWebhook)[keyof typeof ExportDeferredRevenueReportsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportDeferredRevenueReportsChargebeeEventEmail =
  (typeof ExportDeferredRevenueReportsChargebeeEventEmail)[keyof typeof ExportDeferredRevenueReportsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportDeferredRevenueReportsChargebeeEventActions =
  (typeof ExportDeferredRevenueReportsChargebeeEventActions)[keyof typeof ExportDeferredRevenueReportsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDeferredRevenueReportsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportDeferredRevenueReportsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportDeferredRevenueReportsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportDeferredRevenueReportsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportDeferredRevenueReportsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportItems200 = {
  export: Export;
};

export type ExportItemsBody = {
  /** Parameters for item
   */
  item?: ExportItemsBodyItem;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportItemsBodyItemChannelIsNot =
  (typeof ExportItemsBodyItemChannelIsNot)[keyof typeof ExportItemsBodyItemChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportItemsBodyItemChannelIs =
  (typeof ExportItemsBodyItemChannelIs)[keyof typeof ExportItemsBodyItemChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportItemsBodyItemChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportItemsBodyItemChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportItemsBodyItemChannelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.

 */
export type ExportItemsBodyItemUsageCalculationIsNot =
  (typeof ExportItemsBodyItemUsageCalculationIsNot)[keyof typeof ExportItemsBodyItemUsageCalculationIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemUsageCalculationIsNot = {
  sum_of_usages: "sum_of_usages",
  last_usage: "last_usage",
  max_usage: "max_usage",
} as const;

/**
 * \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.

 */
export type ExportItemsBodyItemUsageCalculationIs =
  (typeof ExportItemsBodyItemUsageCalculationIs)[keyof typeof ExportItemsBodyItemUsageCalculationIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemUsageCalculationIs = {
  sum_of_usages: "sum_of_usages",
  last_usage: "last_usage",
  max_usage: "max_usage",
} as const;

/**
 * How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is \`metered\`. This value overrides the one \[set at the site level\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing).

 */
export type ExportItemsBodyItemUsageCalculation = {
  /** \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.
   */
  is?: ExportItemsBodyItemUsageCalculationIs;
  /** \* \`sum_of_usages\` - the net quantity is the sum of the `quantity` of all usages for the current term. \* \`last_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* \`max_usage\` - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.
   */
  is_not?: ExportItemsBodyItemUsageCalculationIsNot;
  in?: string;
  not_in?: string;
};

export type ExportItemsBodyItemMeteredIs =
  (typeof ExportItemsBodyItemMeteredIs)[keyof typeof ExportItemsBodyItemMeteredIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemMeteredIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Specifies whether the item undergoes metered billing. When \`true\`, the quantity is calculated from \[usage records\](/docs/api/usages?prod_cat_ver=2). When \`false\`, the \`quantity\` is as determined while adding an item price to the subscription. Applicable only for items of \`type\` \`plan\` or \`addon\` and when \[Metered Billing\](https://www.chargebee.com/docs/2.0/metered_billing.html) is enabled. The value of this attribute cannot be changed.

 */
export type ExportItemsBodyItemMetered = {
  is?: ExportItemsBodyItemMeteredIs;
};

export type ExportItemsBodyItemEnabledInPortalIs =
  (typeof ExportItemsBodyItemEnabledInPortalIs)[keyof typeof ExportItemsBodyItemEnabledInPortalIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemEnabledInPortalIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Allow customers to change their subscription to this plan via the \[Self-Serve Portal\](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html). Applies only for plan-items. This requires the Portal configuration to \[allow changing subscriptions\](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription).

 */
export type ExportItemsBodyItemEnabledInPortal = {
  is?: ExportItemsBodyItemEnabledInPortalIs;
};

export type ExportItemsBodyItemEnabledForCheckoutIs =
  (typeof ExportItemsBodyItemEnabledForCheckoutIs)[keyof typeof ExportItemsBodyItemEnabledForCheckoutIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemEnabledForCheckoutIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Allow the plan to subscribed to via Checkout. Applies only for plan-items. \*\*Note:\*\* Only the in-app version of Checkout is supported for Product Catalog v2.

 */
export type ExportItemsBodyItemEnabledForCheckout = {
  is?: ExportItemsBodyItemEnabledForCheckoutIs;
};

/**
 * Filter items based on when the items were last updated.

 */
export type ExportItemsBodyItemUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportItemsBodyItemIsGiftableIs =
  (typeof ExportItemsBodyItemIsGiftableIs)[keyof typeof ExportItemsBodyItemIsGiftableIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemIsGiftableIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Specifies if gift subscriptions can be created for this item.

 */
export type ExportItemsBodyItemIsGiftable = {
  is?: ExportItemsBodyItemIsGiftableIs;
};

/**
 * \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).

 */
export type ExportItemsBodyItemStatusIsNot =
  (typeof ExportItemsBodyItemStatusIsNot)[keyof typeof ExportItemsBodyItemStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemStatusIsNot = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).

 */
export type ExportItemsBodyItemStatusIs =
  (typeof ExportItemsBodyItemStatusIs)[keyof typeof ExportItemsBodyItemStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemStatusIs = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * Filter items based on item \`status\`.

 */
export type ExportItemsBodyItemStatus = {
  /** \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).
   */
  is?: ExportItemsBodyItemStatusIs;
  /** \* \`active\` - The item can be used to create new item prices. \* \`archived\` - The item is no longer active and no new item prices can be created \* \`deleted\` - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).
   */
  is_not?: ExportItemsBodyItemStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type ExportItemsBodyItemItemApplicabilityIsNot =
  (typeof ExportItemsBodyItemItemApplicabilityIsNot)[keyof typeof ExportItemsBodyItemItemApplicabilityIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemItemApplicabilityIsNot = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type ExportItemsBodyItemItemApplicabilityIs =
  (typeof ExportItemsBodyItemItemApplicabilityIs)[keyof typeof ExportItemsBodyItemItemApplicabilityIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemItemApplicabilityIs = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * Filter items based on \`item_applicability\`.

 */
export type ExportItemsBodyItemItemApplicability = {
  /** \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
   */
  is?: ExportItemsBodyItemItemApplicabilityIs;
  /** \* \`all\` - all addon-items and charge-items are applicable to this plan-item. \* \`restricted\` - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
   */
  is_not?: ExportItemsBodyItemItemApplicabilityIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter items based on item \`name\`.

 */
export type ExportItemsBodyItemName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ExportItemsBodyItemTypeIsNot =
  (typeof ExportItemsBodyItemTypeIsNot)[keyof typeof ExportItemsBodyItemTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemTypeIsNot = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ExportItemsBodyItemTypeIs =
  (typeof ExportItemsBodyItemTypeIs)[keyof typeof ExportItemsBodyItemTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsBodyItemTypeIs = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * Filter items based on item \`type\`.

 */
export type ExportItemsBodyItemType = {
  /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
   */
  is?: ExportItemsBodyItemTypeIs;
  /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
   */
  is_not?: ExportItemsBodyItemTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter items based on \`item_family_id\`.

 */
export type ExportItemsBodyItemItemFamilyId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Filter items based on item id.

 */
export type ExportItemsBodyItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for item

 */
export type ExportItemsBodyItem = {
  /** Filter items based on item id.
   */
  id?: ExportItemsBodyItemId;
  /** Filter items based on \`item_family_id\`.
   */
  item_family_id?: ExportItemsBodyItemItemFamilyId;
  /** Filter items based on item \`type\`.
   */
  type?: ExportItemsBodyItemType;
  /** Filter items based on item \`name\`.
   */
  name?: ExportItemsBodyItemName;
  /** Filter items based on \`item_applicability\`.
   */
  item_applicability?: ExportItemsBodyItemItemApplicability;
  /** Filter items based on item \`status\`.
   */
  status?: ExportItemsBodyItemStatus;
  /** Specifies if gift subscriptions can be created for this item.
   */
  is_giftable?: ExportItemsBodyItemIsGiftable;
  /** Filter items based on when the items were last updated.
   */
  updated_at?: ExportItemsBodyItemUpdatedAt;
  /** Allow the plan to subscribed to via Checkout. Applies only for plan-items. \*\*Note:\*\* Only the in-app version of Checkout is supported for Product Catalog v2.
   */
  enabled_for_checkout?: ExportItemsBodyItemEnabledForCheckout;
  /** Allow customers to change their subscription to this plan via the \[Self-Serve Portal\](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html). Applies only for plan-items. This requires the Portal configuration to \[allow changing subscriptions\](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription).
   */
  enabled_in_portal?: ExportItemsBodyItemEnabledInPortal;
  /** Specifies whether the item undergoes metered billing. When \`true\`, the quantity is calculated from \[usage records\](/docs/api/usages?prod_cat_ver=2). When \`false\`, the \`quantity\` is as determined while adding an item price to the subscription. Applicable only for items of \`type\` \`plan\` or \`addon\` and when \[Metered Billing\](https://www.chargebee.com/docs/2.0/metered_billing.html) is enabled. The value of this attribute cannot be changed.
   */
  metered?: ExportItemsBodyItemMetered;
  /** How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is \`metered\`. This value overrides the one \[set at the site level\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing).
   */
  usage_calculation?: ExportItemsBodyItemUsageCalculation;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportItemsBodyItemChannel;
};

export type ExportItemsChargebeeEventWebhook =
  (typeof ExportItemsChargebeeEventWebhook)[keyof typeof ExportItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemsChargebeeEventEmail =
  (typeof ExportItemsChargebeeEventEmail)[keyof typeof ExportItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemsChargebeeEventActions =
  (typeof ExportItemsChargebeeEventActions)[keyof typeof ExportItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnExport200 = {
  export: Export;
};

export type RetrieveAnExportHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportInvoices200 = {
  export: Export;
};

export type ExportInvoicesBody = {
  /** optional, string filter Payment owner of an invoice. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*payment_owner\\\[is\\\] = "payment_customer"\*
   */
  payment_owner?: ExportInvoicesBodyPaymentOwner;
  /** Parameters for invoice
   */
  invoice?: ExportInvoicesBodyInvoice;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportInvoicesBodyInvoiceChannelIsNot =
  (typeof ExportInvoicesBodyInvoiceChannelIsNot)[keyof typeof ExportInvoicesBodyInvoiceChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportInvoicesBodyInvoiceChannelIs =
  (typeof ExportInvoicesBodyInvoiceChannelIs)[keyof typeof ExportInvoicesBodyInvoiceChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportInvoicesBodyInvoiceChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportInvoicesBodyInvoiceChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportInvoicesBodyInvoiceChannelIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportInvoicesBodyInvoiceUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

export type ExportInvoicesBodyInvoiceDunningStatusIsPresent =
  (typeof ExportInvoicesBodyInvoiceDunningStatusIsPresent)[keyof typeof ExportInvoicesBodyInvoiceDunningStatusIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceDunningStatusIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ExportInvoicesBodyInvoiceDunningStatusIsNot =
  (typeof ExportInvoicesBodyInvoiceDunningStatusIsNot)[keyof typeof ExportInvoicesBodyInvoiceDunningStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceDunningStatusIsNot = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ExportInvoicesBodyInvoiceDunningStatusIs =
  (typeof ExportInvoicesBodyInvoiceDunningStatusIs)[keyof typeof ExportInvoicesBodyInvoiceDunningStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceDunningStatusIs = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * Current dunning status of the invoice.

 */
export type ExportInvoicesBodyInvoiceDunningStatus = {
  /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
   */
  is?: ExportInvoicesBodyInvoiceDunningStatusIs;
  /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
   */
  is_not?: ExportInvoicesBodyInvoiceDunningStatusIsNot;
  in?: string;
  not_in?: string;
  is_present?: ExportInvoicesBodyInvoiceDunningStatusIsPresent;
};

/**
 * The unpaid amount that is due on the invoice. This is calculated as: \[total\](invoices#invoice_total) - \[amount_paid\](invoices#invoice_amount_paid) - sum of \[applied_credits\](invoices#invoice_applied_credits)\`.applied_amount\` - sum of \[adjustment_credit_notes\](invoices#invoice_adjustment_credit_notes)\`.cn_total\` - sum of \[linked_taxes_withheld\](invoices#invoice_linked_taxes_withheld)\`.amount\`.

 */
export type ExportInvoicesBodyInvoiceAmountDue = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total credits applied against this invoice.

 */
export type ExportInvoicesBodyInvoiceCreditsApplied = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Total adjustments made against this invoice.

 */
export type ExportInvoicesBodyInvoiceAmountAdjusted = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Payments collected successfully for the invoice. This is the sum of \[linked_payments\[\]\](invoices#invoice_linked_payments)\`.txn_amount\` for all \`linked_payments\[\]\` that have \`txn_status\` as \`success\`.

 */
export type ExportInvoicesBodyInvoiceAmountPaid = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.

 */
export type ExportInvoicesBodyInvoiceTotal = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Timestamp indicating the date \\\& time this invoice got paid.

 */
export type ExportInvoicesBodyInvoicePaidAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * The document date displayed on the invoice PDF.

 */
export type ExportInvoicesBodyInvoiceDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Parameters for invoice

 */
export type ExportInvoicesBodyInvoice = {
  /** The invoice number. Acts as a identifier for invoice and typically generated sequentially.
   */
  id?: ExportInvoicesBodyInvoiceId;
  /** To filter based on subscription_id. NOTE: Not to be used if \*consolidated invoicing\* is enabled.
   */
  subscription_id?: ExportInvoicesBodyInvoiceSubscriptionId;
  /** The identifier of the customer this invoice belongs to.
   */
  customer_id?: ExportInvoicesBodyInvoiceCustomerId;
  /** Boolean indicating whether this invoice belongs to a subscription
   */
  recurring?: ExportInvoicesBodyInvoiceRecurring;
  /** Current status of this invoice.
   */
  status?: ExportInvoicesBodyInvoiceStatus;
  /** The price type of the invoice.
   */
  price_type?: ExportInvoicesBodyInvoicePriceType;
  /** The document date displayed on the invoice PDF.
   */
  date?: ExportInvoicesBodyInvoiceDate;
  /** Timestamp indicating the date \\\& time this invoice got paid.
   */
  paid_at?: ExportInvoicesBodyInvoicePaidAt;
  /** Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.
   */
  total?: ExportInvoicesBodyInvoiceTotal;
  /** Payments collected successfully for the invoice. This is the sum of \[linked_payments\[\]\](invoices#invoice_linked_payments)\`.txn_amount\` for all \`linked_payments\[\]\` that have \`txn_status\` as \`success\`.
   */
  amount_paid?: ExportInvoicesBodyInvoiceAmountPaid;
  /** Total adjustments made against this invoice.
   */
  amount_adjusted?: ExportInvoicesBodyInvoiceAmountAdjusted;
  /** Total credits applied against this invoice.
   */
  credits_applied?: ExportInvoicesBodyInvoiceCreditsApplied;
  /** The unpaid amount that is due on the invoice. This is calculated as: \[total\](invoices#invoice_total) - \[amount_paid\](invoices#invoice_amount_paid) - sum of \[applied_credits\](invoices#invoice_applied_credits)\`.applied_amount\` - sum of \[adjustment_credit_notes\](invoices#invoice_adjustment_credit_notes)\`.cn_total\` - sum of \[linked_taxes_withheld\](invoices#invoice_linked_taxes_withheld)\`.amount\`.
   */
  amount_due?: ExportInvoicesBodyInvoiceAmountDue;
  /** Current dunning status of the invoice.
   */
  dunning_status?: ExportInvoicesBodyInvoiceDunningStatus;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportInvoicesBodyInvoiceUpdatedAt;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportInvoicesBodyInvoiceChannel;
};

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportInvoicesBodyInvoicePriceTypeIsNot =
  (typeof ExportInvoicesBodyInvoicePriceTypeIsNot)[keyof typeof ExportInvoicesBodyInvoicePriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoicePriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ExportInvoicesBodyInvoicePriceTypeIs =
  (typeof ExportInvoicesBodyInvoicePriceTypeIs)[keyof typeof ExportInvoicesBodyInvoicePriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoicePriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * The price type of the invoice.

 */
export type ExportInvoicesBodyInvoicePriceType = {
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is?: ExportInvoicesBodyInvoicePriceTypeIs;
  /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
   */
  is_not?: ExportInvoicesBodyInvoicePriceTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ExportInvoicesBodyInvoiceStatusIsNot =
  (typeof ExportInvoicesBodyInvoiceStatusIsNot)[keyof typeof ExportInvoicesBodyInvoiceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceStatusIsNot = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ExportInvoicesBodyInvoiceStatusIs =
  (typeof ExportInvoicesBodyInvoiceStatusIs)[keyof typeof ExportInvoicesBodyInvoiceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceStatusIs = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * Current status of this invoice.

 */
export type ExportInvoicesBodyInvoiceStatus = {
  /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
  is?: ExportInvoicesBodyInvoiceStatusIs;
  /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
  is_not?: ExportInvoicesBodyInvoiceStatusIsNot;
  in?: string;
  not_in?: string;
};

export type ExportInvoicesBodyInvoiceRecurringIs =
  (typeof ExportInvoicesBodyInvoiceRecurringIs)[keyof typeof ExportInvoicesBodyInvoiceRecurringIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceRecurringIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Boolean indicating whether this invoice belongs to a subscription

 */
export type ExportInvoicesBodyInvoiceRecurring = {
  is?: ExportInvoicesBodyInvoiceRecurringIs;
};

/**
 * The identifier of the customer this invoice belongs to.

 */
export type ExportInvoicesBodyInvoiceCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportInvoicesBodyInvoiceSubscriptionIdIsPresent =
  (typeof ExportInvoicesBodyInvoiceSubscriptionIdIsPresent)[keyof typeof ExportInvoicesBodyInvoiceSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesBodyInvoiceSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * To filter based on subscription_id. NOTE: Not to be used if \*consolidated invoicing\* is enabled.

 */
export type ExportInvoicesBodyInvoiceSubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportInvoicesBodyInvoiceSubscriptionIdIsPresent;
  in?: string;
  not_in?: string;
};

/**
 * The invoice number. Acts as a identifier for invoice and typically generated sequentially.

 */
export type ExportInvoicesBodyInvoiceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter Payment owner of an invoice. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*payment_owner\\\[is\\\] = "payment_customer"\*

 */
export type ExportInvoicesBodyPaymentOwner = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportInvoicesChargebeeEventWebhook =
  (typeof ExportInvoicesChargebeeEventWebhook)[keyof typeof ExportInvoicesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportInvoicesChargebeeEventEmail =
  (typeof ExportInvoicesChargebeeEventEmail)[keyof typeof ExportInvoicesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportInvoicesChargebeeEventActions =
  (typeof ExportInvoicesChargebeeEventActions)[keyof typeof ExportInvoicesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportInvoicesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportInvoicesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportInvoicesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportInvoicesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportInvoicesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportItemFamilies200 = {
  export: Export;
};

/**
 * When the item family was last updated.

 */
export type ExportItemFamiliesBodyItemFamilyUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * A unique display name for the item family. This is visible only in Chargebee and not to customers.

 */
export type ExportItemFamiliesBodyItemFamilyName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * The identifier for the item family. It is unique and immutable.

 */
export type ExportItemFamiliesBodyItemFamilyId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for item_family

 */
export type ExportItemFamiliesBodyItemFamily = {
  /** The identifier for the item family. It is unique and immutable.
   */
  id?: ExportItemFamiliesBodyItemFamilyId;
  /** A unique display name for the item family. This is visible only in Chargebee and not to customers.
   */
  name?: ExportItemFamiliesBodyItemFamilyName;
  /** When the item family was last updated.
   */
  updated_at?: ExportItemFamiliesBodyItemFamilyUpdatedAt;
};

export type ExportItemFamiliesBody = {
  /** Parameters for item_family
   */
  item_family?: ExportItemFamiliesBodyItemFamily;
};

export type ExportItemFamiliesChargebeeEventWebhook =
  (typeof ExportItemFamiliesChargebeeEventWebhook)[keyof typeof ExportItemFamiliesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemFamiliesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemFamiliesChargebeeEventEmail =
  (typeof ExportItemFamiliesChargebeeEventEmail)[keyof typeof ExportItemFamiliesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemFamiliesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemFamiliesChargebeeEventActions =
  (typeof ExportItemFamiliesChargebeeEventActions)[keyof typeof ExportItemFamiliesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportItemFamiliesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportItemFamiliesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportItemFamiliesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportItemFamiliesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportItemFamiliesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportDifferentialPrice200 = {
  export: Export;
};

export type ExportDifferentialPriceBody = {
  /** optional, string filter Item Id of Addon / Charge item price for which differential pricing is applied to. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "day-pass"\*
   */
  item_id?: ExportDifferentialPriceBodyItemId;
  /** Parameters for differential_price
   */
  differential_price?: ExportDifferentialPriceBodyDifferentialPrice;
};

/**
 * The id of the plan-item, in relation to which, the differential pricing for the addon or charge is defined. For example, this would be the id of the \*Standard\* or \*Enterprise\* plans-items mentioned in the \[examples above\](./differential_prices?prod_cat_ver=2).

 */
export type ExportDifferentialPriceBodyDifferentialPriceParentItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * A unique and immutable id for the differential price. It is auto-generated when the differential price is created.

 */
export type ExportDifferentialPriceBodyDifferentialPriceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * The id of the item price (\`addon\` or \`charge\`) whose price should change according to the plan-item it is applied to.

 */
export type ExportDifferentialPriceBodyDifferentialPriceItemPriceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for differential_price

 */
export type ExportDifferentialPriceBodyDifferentialPrice = {
  /** The id of the item price (\`addon\` or \`charge\`) whose price should change according to the plan-item it is applied to.
   */
  item_price_id?: ExportDifferentialPriceBodyDifferentialPriceItemPriceId;
  /** A unique and immutable id for the differential price. It is auto-generated when the differential price is created.
   */
  id?: ExportDifferentialPriceBodyDifferentialPriceId;
  /** The id of the plan-item, in relation to which, the differential pricing for the addon or charge is defined. For example, this would be the id of the \*Standard\* or \*Enterprise\* plans-items mentioned in the \[examples above\](./differential_prices?prod_cat_ver=2).
   */
  parent_item_id?: ExportDifferentialPriceBodyDifferentialPriceParentItemId;
};

/**
 * optional, string filter Item Id of Addon / Charge item price for which differential pricing is applied to. \*\*Supported operators :\*\* is, is_not, starts_with, in, not_in \*\*Example ‚Üí\*\* \*item_id\\\[is\\\] = "day-pass"\*

 */
export type ExportDifferentialPriceBodyItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportDifferentialPriceChargebeeEventWebhook =
  (typeof ExportDifferentialPriceChargebeeEventWebhook)[keyof typeof ExportDifferentialPriceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDifferentialPriceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportDifferentialPriceChargebeeEventEmail =
  (typeof ExportDifferentialPriceChargebeeEventEmail)[keyof typeof ExportDifferentialPriceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDifferentialPriceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportDifferentialPriceChargebeeEventActions =
  (typeof ExportDifferentialPriceChargebeeEventActions)[keyof typeof ExportDifferentialPriceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportDifferentialPriceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportDifferentialPriceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportDifferentialPriceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportDifferentialPriceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportDifferentialPriceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportTransactions200 = {
  export: Export;
};

export type ExportTransactionsBody = {
  /** Parameters for transaction
   */
  transaction?: ExportTransactionsBodyTransaction;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportTransactionsBodyTransactionUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually

 */
export type ExportTransactionsBodyTransactionStatusIsNot =
  (typeof ExportTransactionsBodyTransactionStatusIsNot)[keyof typeof ExportTransactionsBodyTransactionStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionStatusIsNot = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

/**
 * \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually

 */
export type ExportTransactionsBodyTransactionStatusIs =
  (typeof ExportTransactionsBodyTransactionStatusIs)[keyof typeof ExportTransactionsBodyTransactionStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionStatusIs = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

/**
 * The status of this transaction.

 */
export type ExportTransactionsBodyTransactionStatus = {
  /** \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually
   */
  is?: ExportTransactionsBodyTransactionStatusIs;
  /** \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually
   */
  is_not?: ExportTransactionsBodyTransactionStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on transaction's unused authorized/blocked amount.

 */
export type ExportTransactionsBodyTransactionAmountCapturable = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Amount for this transaction.

 */
export type ExportTransactionsBodyTransactionAmount = {
  is?: string;
  is_not?: string;
  lt?: string;
  lte?: string;
  gt?: string;
  gte?: string;
  between?: string;
};

/**
 * Indicates when this transaction occurred.

 */
export type ExportTransactionsBodyTransactionDate = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Parameters for transaction

 */
export type ExportTransactionsBodyTransaction = {
  /** Uniquely identifies the transaction.
   */
  id?: ExportTransactionsBodyTransactionId;
  /** Identifier of the customer for which this transaction is made
   */
  customer_id?: ExportTransactionsBodyTransactionCustomerId;
  /** Identifier of the subscription for which this transaction is made.
   */
  subscription_id?: ExportTransactionsBodyTransactionSubscriptionId;
  /** To filter based on Transaction payment source id.
   */
  payment_source_id?: ExportTransactionsBodyTransactionPaymentSourceId;
  /** The payment method of this transaction
   */
  payment_method?: ExportTransactionsBodyTransactionPaymentMethod;
  /** Gateway through which this transaction was done. Applicable only for 'Card' Payment Method
   */
  gateway?: ExportTransactionsBodyTransactionGateway;
  /** The gateway account used for this transaction
   */
  gateway_account_id?: ExportTransactionsBodyTransactionGatewayAccountId;
  /** The id with which this transaction is referred in gateway.
   */
  id_at_gateway?: ExportTransactionsBodyTransactionIdAtGateway;
  /** The reference number for this transaction. For example, the check number when \[payment_method\](transactions#transaction_payment_method) = \`check\`.
   */
  reference_number?: ExportTransactionsBodyTransactionReferenceNumber;
  /** Type of the transaction.
   */
  type?: ExportTransactionsBodyTransactionType;
  /** Indicates when this transaction occurred.
   */
  date?: ExportTransactionsBodyTransactionDate;
  /** Amount for this transaction.
   */
  amount?: ExportTransactionsBodyTransactionAmount;
  /** To filter based on transaction's unused authorized/blocked amount.
   */
  amount_capturable?: ExportTransactionsBodyTransactionAmountCapturable;
  /** The status of this transaction.
   */
  status?: ExportTransactionsBodyTransactionStatus;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportTransactionsBodyTransactionUpdatedAt;
};

/**
 * \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.

 */
export type ExportTransactionsBodyTransactionTypeIsNot =
  (typeof ExportTransactionsBodyTransactionTypeIsNot)[keyof typeof ExportTransactionsBodyTransactionTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionTypeIsNot = {
  authorization: "authorization",
  payment: "payment",
  refund: "refund",
  payment_reversal: "payment_reversal",
} as const;

/**
 * \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.

 */
export type ExportTransactionsBodyTransactionTypeIs =
  (typeof ExportTransactionsBodyTransactionTypeIs)[keyof typeof ExportTransactionsBodyTransactionTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionTypeIs = {
  authorization: "authorization",
  payment: "payment",
  refund: "refund",
  payment_reversal: "payment_reversal",
} as const;

/**
 * Type of the transaction.

 */
export type ExportTransactionsBodyTransactionType = {
  /** \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.
   */
  is?: ExportTransactionsBodyTransactionTypeIs;
  /** \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.
   */
  is_not?: ExportTransactionsBodyTransactionTypeIsNot;
  in?: string;
  not_in?: string;
};

export type ExportTransactionsBodyTransactionReferenceNumberIsPresent =
  (typeof ExportTransactionsBodyTransactionReferenceNumberIsPresent)[keyof typeof ExportTransactionsBodyTransactionReferenceNumberIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionReferenceNumberIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * The reference number for this transaction. For example, the check number when \[payment_method\](transactions#transaction_payment_method) = \`check\`.

 */
export type ExportTransactionsBodyTransactionReferenceNumber = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportTransactionsBodyTransactionReferenceNumberIsPresent;
};

/**
 * The id with which this transaction is referred in gateway.

 */
export type ExportTransactionsBodyTransactionIdAtGateway = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * The gateway account used for this transaction

 */
export type ExportTransactionsBodyTransactionGatewayAccountId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.

 */
export type ExportTransactionsBodyTransactionGatewayIsNot =
  (typeof ExportTransactionsBodyTransactionGatewayIsNot)[keyof typeof ExportTransactionsBodyTransactionGatewayIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionGatewayIsNot = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.

 */
export type ExportTransactionsBodyTransactionGatewayIs =
  (typeof ExportTransactionsBodyTransactionGatewayIs)[keyof typeof ExportTransactionsBodyTransactionGatewayIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionGatewayIs = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Gateway through which this transaction was done. Applicable only for 'Card' Payment Method

 */
export type ExportTransactionsBodyTransactionGateway = {
  /** \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.
   */
  is?: ExportTransactionsBodyTransactionGatewayIs;
  /** \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.
   */
  is_not?: ExportTransactionsBodyTransactionGatewayIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -

 */
export type ExportTransactionsBodyTransactionPaymentMethodIsNot =
  (typeof ExportTransactionsBodyTransactionPaymentMethodIsNot)[keyof typeof ExportTransactionsBodyTransactionPaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionPaymentMethodIsNot = {
  card: "card",
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  other: "other",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  custom: "custom",
  boleto: "boleto",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -

 */
export type ExportTransactionsBodyTransactionPaymentMethodIs =
  (typeof ExportTransactionsBodyTransactionPaymentMethodIs)[keyof typeof ExportTransactionsBodyTransactionPaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionPaymentMethodIs = {
  card: "card",
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  other: "other",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  custom: "custom",
  boleto: "boleto",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * The payment method of this transaction

 */
export type ExportTransactionsBodyTransactionPaymentMethod = {
  /** \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -
   */
  is?: ExportTransactionsBodyTransactionPaymentMethodIs;
  /** \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -
   */
  is_not?: ExportTransactionsBodyTransactionPaymentMethodIsNot;
  in?: string;
  not_in?: string;
};

export type ExportTransactionsBodyTransactionPaymentSourceIdIsPresent =
  (typeof ExportTransactionsBodyTransactionPaymentSourceIdIsPresent)[keyof typeof ExportTransactionsBodyTransactionPaymentSourceIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionPaymentSourceIdIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * To filter based on Transaction payment source id.

 */
export type ExportTransactionsBodyTransactionPaymentSourceId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportTransactionsBodyTransactionPaymentSourceIdIsPresent;
  in?: string;
  not_in?: string;
};

export type ExportTransactionsBodyTransactionSubscriptionIdIsPresent =
  (typeof ExportTransactionsBodyTransactionSubscriptionIdIsPresent)[keyof typeof ExportTransactionsBodyTransactionSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Identifier of the subscription for which this transaction is made.

 */
export type ExportTransactionsBodyTransactionSubscriptionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportTransactionsBodyTransactionSubscriptionIdIsPresent;
  in?: string;
  not_in?: string;
};

export type ExportTransactionsBodyTransactionCustomerIdIsPresent =
  (typeof ExportTransactionsBodyTransactionCustomerIdIsPresent)[keyof typeof ExportTransactionsBodyTransactionCustomerIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsBodyTransactionCustomerIdIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Identifier of the customer for which this transaction is made

 */
export type ExportTransactionsBodyTransactionCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportTransactionsBodyTransactionCustomerIdIsPresent;
  in?: string;
  not_in?: string;
};

/**
 * Uniquely identifies the transaction.

 */
export type ExportTransactionsBodyTransactionId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

export type ExportTransactionsChargebeeEventWebhook =
  (typeof ExportTransactionsChargebeeEventWebhook)[keyof typeof ExportTransactionsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportTransactionsChargebeeEventEmail =
  (typeof ExportTransactionsChargebeeEventEmail)[keyof typeof ExportTransactionsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportTransactionsChargebeeEventActions =
  (typeof ExportTransactionsChargebeeEventActions)[keyof typeof ExportTransactionsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportTransactionsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportTransactionsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportTransactionsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportTransactionsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportTransactionsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportAttachedItems200 = {
  export: Export;
};

export type ExportAttachedItemsBody = {
  /** optional, enumerated string filter To filter based on the type of of the attached item. Possible values are : \`addon\`, \`charge\`. Possible values are : plan, addon, charge. \*\*Supported operators :\*\* is, is_not, in, not_in \*\*Example ‚Üí\*\* \*item_type\\\[is_not\\\] = "plan"\*
   */
  item_type?: ExportAttachedItemsBodyItemType;
  /** Parameters for attached_item
   */
  attached_item?: ExportAttachedItemsBodyAttachedItem;
};

/**
 * The id of the plan-item to which the item is attached.

 */
export type ExportAttachedItemsBodyAttachedItemParentItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Filter attached items based on when the attached items were last updated.

 */
export type ExportAttachedItemsBodyAttachedItemUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand

 */
export type ExportAttachedItemsBodyAttachedItemChargeOnEventIsNot =
  (typeof ExportAttachedItemsBodyAttachedItemChargeOnEventIsNot)[keyof typeof ExportAttachedItemsBodyAttachedItemChargeOnEventIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsBodyAttachedItemChargeOnEventIsNot = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand

 */
export type ExportAttachedItemsBodyAttachedItemChargeOnEventIs =
  (typeof ExportAttachedItemsBodyAttachedItemChargeOnEventIs)[keyof typeof ExportAttachedItemsBodyAttachedItemChargeOnEventIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsBodyAttachedItemChargeOnEventIs = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * Indicates when the item is charged. This attribute only applies to charge-items.

 */
export type ExportAttachedItemsBodyAttachedItemChargeOnEvent = {
  /** \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand
   */
  is?: ExportAttachedItemsBodyAttachedItemChargeOnEventIs;
  /** \* \`subscription_creation\` - the time of creation of the subscription. \* \`subscription_trial_start\` - the time when the trial period of the subscription begins. \* \`plan_activation\` - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* \`subscription_activation\` - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* \`contract_termination\` - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* \`on_demand\` - Item can be charged on demand
   */
  is_not?: ExportAttachedItemsBodyAttachedItemChargeOnEventIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.

 */
export type ExportAttachedItemsBodyAttachedItemTypeIsNot =
  (typeof ExportAttachedItemsBodyAttachedItemTypeIsNot)[keyof typeof ExportAttachedItemsBodyAttachedItemTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsBodyAttachedItemTypeIsNot = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

/**
 * \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.

 */
export type ExportAttachedItemsBodyAttachedItemTypeIs =
  (typeof ExportAttachedItemsBodyAttachedItemTypeIs)[keyof typeof ExportAttachedItemsBodyAttachedItemTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsBodyAttachedItemTypeIs = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

/**
 * Filter attached items based on the \`type\` of attached item. Possible values are : \`recommended\`, \`mandatory\`, \`optional\`.

 */
export type ExportAttachedItemsBodyAttachedItemType = {
  /** \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.
   */
  is?: ExportAttachedItemsBodyAttachedItemTypeIs;
  /** \* \`recommended\` - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* \`mandatory\` - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API. \* \`optional\` - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.
   */
  is_not?: ExportAttachedItemsBodyAttachedItemTypeIsNot;
  in?: string;
  not_in?: string;
};

/**
 * Filter attached items based on the \`item_id\` of the item being attached.

 */
export type ExportAttachedItemsBodyAttachedItemItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Filter attached items based on their id.

 */
export type ExportAttachedItemsBodyAttachedItemId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * Parameters for attached_item

 */
export type ExportAttachedItemsBodyAttachedItem = {
  /** Filter attached items based on their id.
   */
  id?: ExportAttachedItemsBodyAttachedItemId;
  /** Filter attached items based on the \`item_id\` of the item being attached.
   */
  item_id?: ExportAttachedItemsBodyAttachedItemItemId;
  /** Filter attached items based on the \`type\` of attached item. Possible values are : \`recommended\`, \`mandatory\`, \`optional\`.
   */
  type?: ExportAttachedItemsBodyAttachedItemType;
  /** Indicates when the item is charged. This attribute only applies to charge-items.
   */
  charge_on_event?: ExportAttachedItemsBodyAttachedItemChargeOnEvent;
  /** Filter attached items based on when the attached items were last updated.
   */
  updated_at?: ExportAttachedItemsBodyAttachedItemUpdatedAt;
  /** The id of the plan-item to which the item is attached.
   */
  parent_item_id?: ExportAttachedItemsBodyAttachedItemParentItemId;
};

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ExportAttachedItemsBodyItemTypeIsNot =
  (typeof ExportAttachedItemsBodyItemTypeIsNot)[keyof typeof ExportAttachedItemsBodyItemTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsBodyItemTypeIsNot = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.

 */
export type ExportAttachedItemsBodyItemTypeIs =
  (typeof ExportAttachedItemsBodyItemTypeIs)[keyof typeof ExportAttachedItemsBodyItemTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsBodyItemTypeIs = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * optional, enumerated string filter To filter based on the type of of the attached item. Possible values are : \`addon\`, \`charge\`. Possible values are : plan, addon, charge. \*\*Supported operators :\*\* is, is_not, in, not_in \*\*Example ‚Üí\*\* \*item_type\\\[is_not\\\] = "plan"\*

 */
export type ExportAttachedItemsBodyItemType = {
  /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
   */
  is?: ExportAttachedItemsBodyItemTypeIs;
  /** \* \`plan\` - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* \`addon\` - A recurring component that can be added to a subscription in addition to its plan. \* \`charge\` - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription.
   */
  is_not?: ExportAttachedItemsBodyItemTypeIsNot;
  in?: string;
  not_in?: string;
};

export type ExportAttachedItemsChargebeeEventWebhook =
  (typeof ExportAttachedItemsChargebeeEventWebhook)[keyof typeof ExportAttachedItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportAttachedItemsChargebeeEventEmail =
  (typeof ExportAttachedItemsChargebeeEventEmail)[keyof typeof ExportAttachedItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportAttachedItemsChargebeeEventActions =
  (typeof ExportAttachedItemsChargebeeEventActions)[keyof typeof ExportAttachedItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportAttachedItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportAttachedItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportAttachedItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportAttachedItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportAttachedItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportCustomers200 = {
  export: Export;
};

/**
 * Parent who is going to handle invoices

 */
export type ExportCustomersBodyRelationshipInvoiceOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parent who is going to pay

 */
export type ExportCustomersBodyRelationshipPaymentOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Immediate parent with whom we will link our new customer(child)

 */
export type ExportCustomersBodyRelationshipParentId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parameters for relationship

 */
export type ExportCustomersBodyRelationship = {
  /** Immediate parent with whom we will link our new customer(child)
   */
  parent_id?: ExportCustomersBodyRelationshipParentId;
  /** Parent who is going to pay
   */
  payment_owner_id?: ExportCustomersBodyRelationshipPaymentOwnerId;
  /** Parent who is going to handle invoices
   */
  invoice_owner_id?: ExportCustomersBodyRelationshipInvoiceOwnerId;
};

/**
 * Parameters for customer

 */
export type ExportCustomersBodyCustomer = {
  /** Identifier of the customer.
   */
  id?: ExportCustomersBodyCustomerId;
  /** First name of the customer
   */
  first_name?: ExportCustomersBodyCustomerFirstName;
  /** Last name of the customer
   */
  last_name?: ExportCustomersBodyCustomerLastName;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: ExportCustomersBodyCustomerEmail;
  /** Company name of the customer.
   */
  company?: ExportCustomersBodyCustomerCompany;
  /** Phone number of the customer
   */
  phone?: ExportCustomersBodyCustomerPhone;
  /** Whether payments needs to be collected automatically for this customer
   */
  auto_collection?: ExportCustomersBodyCustomerAutoCollection;
  /** Specifies if the customer is liable for tax
   */
  taxability?: ExportCustomersBodyCustomerTaxability;
  /** Timestamp indicating when this customer resource is created.
   */
  created_at?: ExportCustomersBodyCustomerCreatedAt;
  /** To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.
   */
  updated_at?: ExportCustomersBodyCustomerUpdatedAt;
  /** The preferred offline payment method for the customer.
   */
  offline_payment_method?: ExportCustomersBodyCustomerOfflinePaymentMethod;
  /** Override for this customer, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the \[subscription level\](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.
   */
  auto_close_invoices?: ExportCustomersBodyCustomerAutoCloseInvoices;
  /** The subscription channel this object originated from and is maintained in.
   */
  channel?: ExportCustomersBodyCustomerChannel;
};

export type ExportCustomersBody = {
  /** Determines the format of the data. Returns the export type based on the selected value. \* data - Download your current data in CSV. \* import_friendly_data - Download import friendly data in CSV. This CSV can be used to perform [bulk operations](https://www.chargebee.com/docs/bulk-operations.html).
   */
  export_type?: ExportCustomersBodyExportType;
  /** optional, string filter The unique ID of the \[business entity\](/docs/api?prod_cat_ver=2#mbe) of this subscription. This is always the same as the \[business entity\](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer. \*\*Supported operators :\*\* is, is_not, starts_with \*\*Example ‚Üí\*\* \*business_entity_id\\\[is\\\] = "business_entity_id"\*
   */
  business_entity_id?: ExportCustomersBodyBusinessEntityId;
  /** Parameters for customer
   */
  customer?: ExportCustomersBodyCustomer;
  /** Parameters for relationship
   */
  relationship?: ExportCustomersBodyRelationship;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportCustomersBodyCustomerChannelIsNot =
  (typeof ExportCustomersBodyCustomerChannelIsNot)[keyof typeof ExportCustomersBodyCustomerChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ExportCustomersBodyCustomerChannelIs =
  (typeof ExportCustomersBodyCustomerChannelIs)[keyof typeof ExportCustomersBodyCustomerChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The subscription channel this object originated from and is maintained in.

 */
export type ExportCustomersBodyCustomerChannel = {
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is?: ExportCustomersBodyCustomerChannelIs;
  /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  is_not?: ExportCustomersBodyCustomerChannelIsNot;
  in?: string;
  not_in?: string;
};

export type ExportCustomersBodyCustomerAutoCloseInvoicesIs =
  (typeof ExportCustomersBodyCustomerAutoCloseInvoicesIs)[keyof typeof ExportCustomersBodyCustomerAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * Override for this customer, the \[site-level setting\](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the \[subscription level\](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.

 */
export type ExportCustomersBodyCustomerAutoCloseInvoices = {
  is?: ExportCustomersBodyCustomerAutoCloseInvoicesIs;
};

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportCustomersBodyCustomerOfflinePaymentMethodIsNot =
  (typeof ExportCustomersBodyCustomerOfflinePaymentMethodIsNot)[keyof typeof ExportCustomersBodyCustomerOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerOfflinePaymentMethodIsNot = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ExportCustomersBodyCustomerOfflinePaymentMethodIs =
  (typeof ExportCustomersBodyCustomerOfflinePaymentMethodIs)[keyof typeof ExportCustomersBodyCustomerOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerOfflinePaymentMethodIs = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * The preferred offline payment method for the customer.

 */
export type ExportCustomersBodyCustomerOfflinePaymentMethod = {
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is?: ExportCustomersBodyCustomerOfflinePaymentMethodIs;
  /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
   */
  is_not?: ExportCustomersBodyCustomerOfflinePaymentMethodIsNot;
  in?: string;
  not_in?: string;
};

/**
 * To filter based on \`updated_at\`. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the \`sort_by\` input parameter as \`updated_at\` for a faster response.

 */
export type ExportCustomersBodyCustomerUpdatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * Timestamp indicating when this customer resource is created.

 */
export type ExportCustomersBodyCustomerCreatedAt = {
  after?: string;
  before?: string;
  on?: string;
  between?: string;
};

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ExportCustomersBodyCustomerTaxabilityIsNot =
  (typeof ExportCustomersBodyCustomerTaxabilityIsNot)[keyof typeof ExportCustomersBodyCustomerTaxabilityIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerTaxabilityIsNot = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ExportCustomersBodyCustomerTaxabilityIs =
  (typeof ExportCustomersBodyCustomerTaxabilityIs)[keyof typeof ExportCustomersBodyCustomerTaxabilityIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerTaxabilityIs = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Specifies if the customer is liable for tax

 */
export type ExportCustomersBodyCustomerTaxability = {
  /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  is?: ExportCustomersBodyCustomerTaxabilityIs;
  /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  is_not?: ExportCustomersBodyCustomerTaxabilityIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ExportCustomersBodyCustomerAutoCollectionIsNot =
  (typeof ExportCustomersBodyCustomerAutoCollectionIsNot)[keyof typeof ExportCustomersBodyCustomerAutoCollectionIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerAutoCollectionIsNot = {
  on: "on",
  off: "off",
} as const;

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ExportCustomersBodyCustomerAutoCollectionIs =
  (typeof ExportCustomersBodyCustomerAutoCollectionIs)[keyof typeof ExportCustomersBodyCustomerAutoCollectionIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerAutoCollectionIs = {
  on: "on",
  off: "off",
} as const;

/**
 * Whether payments needs to be collected automatically for this customer

 */
export type ExportCustomersBodyCustomerAutoCollection = {
  /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  is?: ExportCustomersBodyCustomerAutoCollectionIs;
  /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  is_not?: ExportCustomersBodyCustomerAutoCollectionIsNot;
  in?: string;
  not_in?: string;
};

export type ExportCustomersBodyCustomerPhoneIsPresent =
  (typeof ExportCustomersBodyCustomerPhoneIsPresent)[keyof typeof ExportCustomersBodyCustomerPhoneIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerPhoneIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Phone number of the customer

 */
export type ExportCustomersBodyCustomerPhone = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportCustomersBodyCustomerPhoneIsPresent;
};

export type ExportCustomersBodyCustomerCompanyIsPresent =
  (typeof ExportCustomersBodyCustomerCompanyIsPresent)[keyof typeof ExportCustomersBodyCustomerCompanyIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerCompanyIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Company name of the customer.

 */
export type ExportCustomersBodyCustomerCompany = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportCustomersBodyCustomerCompanyIsPresent;
};

export type ExportCustomersBodyCustomerEmailIsPresent =
  (typeof ExportCustomersBodyCustomerEmailIsPresent)[keyof typeof ExportCustomersBodyCustomerEmailIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerEmailIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Email of the customer. Configured email notifications will be sent to this email.

 */
export type ExportCustomersBodyCustomerEmail = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportCustomersBodyCustomerEmailIsPresent;
};

export type ExportCustomersBodyCustomerLastNameIsPresent =
  (typeof ExportCustomersBodyCustomerLastNameIsPresent)[keyof typeof ExportCustomersBodyCustomerLastNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerLastNameIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * Last name of the customer

 */
export type ExportCustomersBodyCustomerLastName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportCustomersBodyCustomerLastNameIsPresent;
};

export type ExportCustomersBodyCustomerFirstNameIsPresent =
  (typeof ExportCustomersBodyCustomerFirstNameIsPresent)[keyof typeof ExportCustomersBodyCustomerFirstNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyCustomerFirstNameIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * First name of the customer

 */
export type ExportCustomersBodyCustomerFirstName = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  is_present?: ExportCustomersBodyCustomerFirstNameIsPresent;
};

/**
 * Identifier of the customer.

 */
export type ExportCustomersBodyCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
  in?: string;
  not_in?: string;
};

/**
 * optional, string filter The unique ID of the \[business entity\](/docs/api?prod_cat_ver=2#mbe) of this subscription. This is always the same as the \[business entity\](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer. \*\*Supported operators :\*\* is, is_not, starts_with \*\*Example ‚Üí\*\* \*business_entity_id\\\[is\\\] = "business_entity_id"\*

 */
export type ExportCustomersBodyBusinessEntityId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Determines the format of the data. Returns the export type based on the selected value. \* data - Download your current data in CSV. \* import_friendly_data - Download import friendly data in CSV. This CSV can be used to perform [bulk operations](https://www.chargebee.com/docs/bulk-operations.html).

 */
export type ExportCustomersBodyExportType =
  (typeof ExportCustomersBodyExportType)[keyof typeof ExportCustomersBodyExportType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersBodyExportType = {
  data: "data",
  import_friendly_data: "import_friendly_data",
} as const;

export type ExportCustomersChargebeeEventWebhook =
  (typeof ExportCustomersChargebeeEventWebhook)[keyof typeof ExportCustomersChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCustomersChargebeeEventEmail =
  (typeof ExportCustomersChargebeeEventEmail)[keyof typeof ExportCustomersChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCustomersChargebeeEventActions =
  (typeof ExportCustomersChargebeeEventActions)[keyof typeof ExportCustomersChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportCustomersChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportCustomersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportCustomersChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportCustomersChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportCustomersChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type StartAfresh200 = {
  time_machine: TimeMachine;
};

export type StartAfreshBody = {
  /** The genesis time to travel back as part of the reset operation. If not provided, then the travel is set to 6 months in the past.
   **Note:** Can only be in the past.
   */
  genesis_time?: number;
};

export type StartAfreshChargebeeEventWebhook =
  (typeof StartAfreshChargebeeEventWebhook)[keyof typeof StartAfreshChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StartAfreshChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type StartAfreshChargebeeEventEmail =
  (typeof StartAfreshChargebeeEventEmail)[keyof typeof StartAfreshChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StartAfreshChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type StartAfreshChargebeeEventActions =
  (typeof StartAfreshChargebeeEventActions)[keyof typeof StartAfreshChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StartAfreshChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type StartAfreshHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: StartAfreshChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: StartAfreshChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: StartAfreshChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type TravelForward200 = {
  time_machine: TimeMachine;
};

export type TravelForwardBody = {
  /** The **time** to travel to. Should be between the 'current' destination time of the time machine and present time.
   */
  destination_time?: number;
};

export type TravelForwardChargebeeEventWebhook =
  (typeof TravelForwardChargebeeEventWebhook)[keyof typeof TravelForwardChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TravelForwardChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type TravelForwardChargebeeEventEmail =
  (typeof TravelForwardChargebeeEventEmail)[keyof typeof TravelForwardChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TravelForwardChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type TravelForwardChargebeeEventActions =
  (typeof TravelForwardChargebeeEventActions)[keyof typeof TravelForwardChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TravelForwardChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type TravelForwardHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: TravelForwardChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: TravelForwardChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: TravelForwardChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveATimeMachine200 = {
  time_machine: TimeMachine;
};

export type RetrieveATimeMachineHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveLatestMigrationDetails200 = {
  resource_migration: ResourceMigration;
};

export type RetrieveLatestMigrationDetailsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveLatestMigrationDetailsEntityType =
  (typeof RetrieveLatestMigrationDetailsEntityType)[keyof typeof RetrieveLatestMigrationDetailsEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveLatestMigrationDetailsEntityType = {
  customer: "customer",
} as const;

export type RetrieveLatestMigrationDetailsParams = {
  /**
   * Domain name to which the item is moved.
   */
  from_site: string;
  /**
   * Type of the entity this record is stored for.
   * customer - Entity that represents a customer
   */
  entity_type: RetrieveLatestMigrationDetailsEntityType;
  /**
   * Handle of the customer in the current site.
   */
  entity_id: string;
};

export type ListSiteMigrationDetails200ListItem = {
  site_migration_detail: SiteMigrationDetail;
};

export type ListSiteMigrationDetails200 = {
  list: ListSiteMigrationDetails200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListSiteMigrationDetailsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`moved_in\` - Moved in from another cb site \* \`moved_out\` - Moved out from one cb site to another \* \`moving_out\` - Moving out from one cb site to another

 */
export type ListSiteMigrationDetailsStatusIsNot =
  (typeof ListSiteMigrationDetailsStatusIsNot)[keyof typeof ListSiteMigrationDetailsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSiteMigrationDetailsStatusIsNot = {
  moved_in: "moved_in",
  moved_out: "moved_out",
  moving_out: "moving_out",
} as const;

/**
 * \* \`moved_in\` - Moved in from another cb site \* \`moved_out\` - Moved out from one cb site to another \* \`moving_out\` - Moving out from one cb site to another

 */
export type ListSiteMigrationDetailsStatusIs =
  (typeof ListSiteMigrationDetailsStatusIs)[keyof typeof ListSiteMigrationDetailsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSiteMigrationDetailsStatusIs = {
  moved_in: "moved_in",
  moved_out: "moved_out",
  moving_out: "moving_out",
} as const;

/**
 * \* \`customer\` - Entity that represents a customer \* \`subscription\` - Entity that represents a subscription of a customer \* \`invoice\` - Invoice description \* \`credit_note\` - Credit note description \* \`transaction\` - Entity that represents a transaction. \* \`order\` - Entity that represents an order

 */
export type ListSiteMigrationDetailsEntityTypeIsNot =
  (typeof ListSiteMigrationDetailsEntityTypeIsNot)[keyof typeof ListSiteMigrationDetailsEntityTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSiteMigrationDetailsEntityTypeIsNot = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  credit_note: "credit_note",
  transaction: "transaction",
  order: "order",
} as const;

/**
 * \* \`customer\` - Entity that represents a customer \* \`subscription\` - Entity that represents a subscription of a customer \* \`invoice\` - Invoice description \* \`credit_note\` - Credit note description \* \`transaction\` - Entity that represents a transaction. \* \`order\` - Entity that represents an order

 */
export type ListSiteMigrationDetailsEntityTypeIs =
  (typeof ListSiteMigrationDetailsEntityTypeIs)[keyof typeof ListSiteMigrationDetailsEntityTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSiteMigrationDetailsEntityTypeIs = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  credit_note: "credit_note",
  transaction: "transaction",
  order: "order",
} as const;

export type ListSiteMigrationDetailsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Entity Id of the record in the other site.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>entity_id_at_other_site[is] = "null"</i>
   */
  entity_id_at_other_site?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Site name to which the record is moved in/out.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>other_site_name[is] = "acme-test"</i>
   */
  other_site_name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Id of the entity in this site.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>entity_id[is] = "8axqwer7as"</i>
   */
  entity_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Entity Type of the record. Possible values are : <dfn>customer, subscription, invoice, credit_note, transaction, order.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>entity_type[is] = "customer"</i>
   */
  entity_type?: {
    /** \* \`customer\` - Entity that represents a customer \* \`subscription\` - Entity that represents a subscription of a customer \* \`invoice\` - Invoice description \* \`credit_note\` - Credit note description \* \`transaction\` - Entity that represents a transaction. \* \`order\` - Entity that represents an order
     */
    is?: ListSiteMigrationDetailsEntityTypeIs;
    /** \* \`customer\` - Entity that represents a customer \* \`subscription\` - Entity that represents a subscription of a customer \* \`invoice\` - Invoice description \* \`credit_note\` - Credit note description \* \`transaction\` - Entity that represents a transaction. \* \`order\` - Entity that represents an order
     */
    is_not?: ListSiteMigrationDetailsEntityTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Status of the migration. Possible values are : <dfn>moved_in, moved_out, moving_out.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "MOVED_OUT"</i>
   */
  status?: {
    /** \* \`moved_in\` - Moved in from another cb site \* \`moved_out\` - Moved out from one cb site to another \* \`moving_out\` - Moving out from one cb site to another
     */
    is?: ListSiteMigrationDetailsStatusIs;
    /** \* \`moved_in\` - Moved in from another cb site \* \`moved_out\` - Moved out from one cb site to another \* \`moving_out\` - Moving out from one cb site to another
     */
    is_not?: ListSiteMigrationDetailsStatusIsNot;
    in?: string;
    not_in?: string;
  };
};

export type RetrieveAPortalSession200 = {
  portal_session: PortalSession;
};

export type RetrieveAPortalSessionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type LogoutAPortalSession200 = {
  portal_session: PortalSession;
};

export type LogoutAPortalSessionChargebeeEventWebhook =
  (typeof LogoutAPortalSessionChargebeeEventWebhook)[keyof typeof LogoutAPortalSessionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogoutAPortalSessionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type LogoutAPortalSessionChargebeeEventEmail =
  (typeof LogoutAPortalSessionChargebeeEventEmail)[keyof typeof LogoutAPortalSessionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogoutAPortalSessionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type LogoutAPortalSessionChargebeeEventActions =
  (typeof LogoutAPortalSessionChargebeeEventActions)[keyof typeof LogoutAPortalSessionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogoutAPortalSessionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type LogoutAPortalSessionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: LogoutAPortalSessionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: LogoutAPortalSessionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: LogoutAPortalSessionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ActivateAPortalSession200 = {
  portal_session: PortalSession;
};

export type ActivateAPortalSessionBody = {
  /** Unique pre-authenticated portal session token to access customer portal directly.
   */
  token: string;
};

export type ActivateAPortalSessionChargebeeEventWebhook =
  (typeof ActivateAPortalSessionChargebeeEventWebhook)[keyof typeof ActivateAPortalSessionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActivateAPortalSessionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ActivateAPortalSessionChargebeeEventEmail =
  (typeof ActivateAPortalSessionChargebeeEventEmail)[keyof typeof ActivateAPortalSessionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActivateAPortalSessionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ActivateAPortalSessionChargebeeEventActions =
  (typeof ActivateAPortalSessionChargebeeEventActions)[keyof typeof ActivateAPortalSessionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActivateAPortalSessionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ActivateAPortalSessionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ActivateAPortalSessionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ActivateAPortalSessionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ActivateAPortalSessionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAPortalSession200 = {
  portal_session: PortalSession;
};

/**
 * Parameters for customer

 */
export type CreateAPortalSessionBodyCustomer = {
  /** Identifier of the customer.
   */
  id: string;
};

export type CreateAPortalSessionBody = {
  /** URL to redirect when the user logs out from the portal.
   */
  redirect_url?: string;
  /** By default access_url redirects the customer to the portal home page. If you would like to redirect the customer to a different URL, you can use this parameter to do so.  

**Note:** This parameter is not applicable for [in-app](https://www.chargebee.com/docs/v3-self-serve-portal.html) portal.
 */
  forward_url?: string;
  /** Parameters for customer
   */
  customer?: CreateAPortalSessionBodyCustomer;
};

export type CreateAPortalSessionChargebeeEventWebhook =
  (typeof CreateAPortalSessionChargebeeEventWebhook)[keyof typeof CreateAPortalSessionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPortalSessionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPortalSessionChargebeeEventEmail =
  (typeof CreateAPortalSessionChargebeeEventEmail)[keyof typeof CreateAPortalSessionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPortalSessionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPortalSessionChargebeeEventActions =
  (typeof CreateAPortalSessionChargebeeEventActions)[keyof typeof CreateAPortalSessionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPortalSessionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPortalSessionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAPortalSessionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAPortalSessionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAPortalSessionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAComment200 = {
  comment: Comment;
};

/**
 * Type of the entity to create the comment for. \* item - Entity that represents item \* order - Entity that represents an order \* item_price - Entity that represents item price \* customer - Entity that represents a customer \* variant - Entity that represents product variants \* invoice - Invoice description \* product - Entity that represents product \* business_entity - Entity that represents item of type business entity \* plan - Entity that represents a subscription plan \* coupon - Entity that represents a discount coupon \* subscription - Entity that represents a subscription of a customer \* item_family - Entity that represents item family \* transaction - Entity that represents a transaction. \* addon - Entity that represents an addon \* credit_note - Credit note description \* quote - Entity that represents a quote

 */
export type CreateACommentBodyEntityType =
  (typeof CreateACommentBodyEntityType)[keyof typeof CreateACommentBodyEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACommentBodyEntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  quote: "quote",
  credit_note: "credit_note",
  transaction: "transaction",
  plan: "plan",
  addon: "addon",
  coupon: "coupon",
  order: "order",
  business_entity: "business_entity",
  item_family: "item_family",
  item: "item",
  item_price: "item_price",
  product: "product",
  variant: "variant",
} as const;

export type CreateACommentBody = {
  /** Type of the entity to create the comment for. \* item - Entity that represents item \* order - Entity that represents an order \* item_price - Entity that represents item price \* customer - Entity that represents a customer \* variant - Entity that represents product variants \* invoice - Invoice description \* product - Entity that represents product \* business_entity - Entity that represents item of type business entity \* plan - Entity that represents a subscription plan \* coupon - Entity that represents a discount coupon \* subscription - Entity that represents a subscription of a customer \* item_family - Entity that represents item family \* transaction - Entity that represents a transaction. \* addon - Entity that represents an addon \* credit_note - Credit note description \* quote - Entity that represents a quote
   */
  entity_type: CreateACommentBodyEntityType;
  /** Unique identifier of the entity.
   */
  entity_id: string;
  /** Actual notes for the comment.
   */
  notes: string;
  /** The user who created the comment. If created via API, this contains the name given for the API key used.
   */
  added_by?: string;
};

export type CreateACommentChargebeeEventWebhook =
  (typeof CreateACommentChargebeeEventWebhook)[keyof typeof CreateACommentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACommentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACommentChargebeeEventEmail =
  (typeof CreateACommentChargebeeEventEmail)[keyof typeof CreateACommentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACommentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACommentChargebeeEventActions =
  (typeof CreateACommentChargebeeEventActions)[keyof typeof CreateACommentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACommentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACommentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateACommentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateACommentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateACommentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListComments200ListItem = {
  comment: Comment;
};

export type ListComments200 = {
  list: ListComments200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCommentsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCommentsSortByDesc =
  (typeof ListCommentsSortByDesc)[keyof typeof ListCommentsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCommentsSortByDesc = {
  created_at: "created_at",
} as const;

export type ListCommentsSortByAsc =
  (typeof ListCommentsSortByAsc)[keyof typeof ListCommentsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCommentsSortByAsc = {
  created_at: "created_at",
} as const;

export type ListCommentsEntityType =
  (typeof ListCommentsEntityType)[keyof typeof ListCommentsEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCommentsEntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  quote: "quote",
  credit_note: "credit_note",
  transaction: "transaction",
  plan: "plan",
  addon: "addon",
  coupon: "coupon",
  order: "order",
  business_entity: "business_entity",
  item_family: "item_family",
  item: "item",
  item_price: "item_price",
  product: "product",
  variant: "variant",
} as const;

export type ListCommentsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * Type of the entity this comment generated for.
   * item - Entity that represents item
   * order - Entity that represents an order
   * item_price - Entity that represents item price
   * customer - Entity that represents a customer
   * variant - Entity that represents product variants
   * invoice - Invoice description
   * product - Entity that represents product
   * business_entity - Entity that represents item of type business entity
   * plan - Entity that represents a subscription plan
   * coupon - Entity that represents a discount coupon
   * subscription - Entity that represents a subscription of a customer
   * item_family - Entity that represents item family
   * transaction - Entity that represents a transaction.
   * addon - Entity that represents an addon
   * credit_note - Credit note description
   * quote - Entity that represents a quote
   */
  entity_type?: ListCommentsEntityType;
  /**
   * Unique identifier of the entity.
   */
  entity_id?: string;
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The time at which this comment was created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[on] = "1456332678"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>created_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "created_at"</i><br>This will sort the result based on the 'created_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListCommentsSortByAsc;
    desc?: ListCommentsSortByDesc;
  };
};

export type RetrieveAComment200 = {
  comment: Comment;
};

export type RetrieveACommentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAComment200 = {
  comment: Comment;
};

export type DeleteACommentChargebeeEventWebhook =
  (typeof DeleteACommentChargebeeEventWebhook)[keyof typeof DeleteACommentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACommentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACommentChargebeeEventEmail =
  (typeof DeleteACommentChargebeeEventEmail)[keyof typeof DeleteACommentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACommentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACommentChargebeeEventActions =
  (typeof DeleteACommentChargebeeEventActions)[keyof typeof DeleteACommentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACommentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACommentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteACommentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteACommentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteACommentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnEvent200 = {
  event: Event;
};

export type RetrieveAnEventHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListEvents200ListItem = {
  event: Event;
};

export type ListEvents200 = {
  list: ListEvents200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListEventsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListEventsSortByDesc =
  (typeof ListEventsSortByDesc)[keyof typeof ListEventsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsSortByDesc = {
  occurred_at: "occurred_at",
} as const;

export type ListEventsSortByAsc =
  (typeof ListEventsSortByAsc)[keyof typeof ListEventsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsSortByAsc = {
  occurred_at: "occurred_at",
} as const;

/**
 * \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`scheduled_job\` - Operation made through the Scheduled Jobs \* \`hosted_page\` - Operation made through the Hosted Pages \* \`portal\` - Operation made through [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html) \* \`system\` - Operation that are triggered by ChargeBee System \* \`none\` - If no source can be identified for an operation \* \`js_api\` - Operation made through the JS API \* \`migration\` - Deprecated \* \`bulk_operation\` - Operation that are triggerd through bulk operation. \* \`external_service\` - Operation that are triggered via webhook

 */
export type ListEventsSourceIsNot =
  (typeof ListEventsSourceIsNot)[keyof typeof ListEventsSourceIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsSourceIsNot = {
  admin_console: "admin_console",
  api: "api",
  scheduled_job: "scheduled_job",
  hosted_page: "hosted_page",
  portal: "portal",
  system: "system",
  none: "none",
  js_api: "js_api",
  migration: "migration",
  bulk_operation: "bulk_operation",
  external_service: "external_service",
} as const;

/**
 * \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`scheduled_job\` - Operation made through the Scheduled Jobs \* \`hosted_page\` - Operation made through the Hosted Pages \* \`portal\` - Operation made through [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html) \* \`system\` - Operation that are triggered by ChargeBee System \* \`none\` - If no source can be identified for an operation \* \`js_api\` - Operation made through the JS API \* \`migration\` - Deprecated \* \`bulk_operation\` - Operation that are triggerd through bulk operation. \* \`external_service\` - Operation that are triggered via webhook

 */
export type ListEventsSourceIs =
  (typeof ListEventsSourceIs)[keyof typeof ListEventsSourceIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsSourceIs = {
  admin_console: "admin_console",
  api: "api",
  scheduled_job: "scheduled_job",
  hosted_page: "hosted_page",
  portal: "portal",
  system: "system",
  none: "none",
  js_api: "js_api",
  migration: "migration",
  bulk_operation: "bulk_operation",
  external_service: "external_service",
} as const;

/**
 * \* \`plan_created\` - Sent when a plan is created. \* \`plan_updated\` - Sent when a plan is changed. \* \`plan_deleted\` - Sent when a plan is deleted. \* \`addon_created\` - Sent when a addon is created. \* \`addon_updated\` - Sent when a addon is changed. \* \`addon_deleted\` - Sent when a addon is deleted. \* \`coupon_created\` - Sent when a coupon is created. \* \`coupon_updated\` - Sent when a coupon is changed. \* \`coupon_deleted\` - Sent when a coupon is deleted. \* \`coupon_set_created\` - Sent when a coupon set is created \* \`coupon_set_updated\` - Sent when a coupon set is changed \* \`coupon_set_deleted\` - Sent when a coupon set is deleted \* \`coupon_codes_added\` - Sent when coupon codes are added in coupon set \* \`coupon_codes_deleted\` - Sent when coupon codes are deleted in coupon set \* \`coupon_codes_updated\` - Sent when coupon codes are updated \* \`customer_created\` - Sent when a customer is created. This event happens when only a new customer is created or when a customer is automatically created during new subscription creation. \* \`customer_changed\` - Sent when a customer is changed \* \`customer_deleted\` - Sent when a customer is deleted \* \`customer_moved_out\` - Sent when a customer is copied to another site \* \`customer_moved_in\` - Sent when a customer is copied from another site \* \`promotional_credits_added\` - Sent when a customer prmotion credits added \* \`promotional_credits_deducted\` - Sent when a customer prmotion credits deducted \* \`subscription_created\` - Sent when a new subscription is created. \* \`subscription_created_with_backdating\` - Sent when a new subscription is created with backdating. \* \`subscription_started\` - Sent when a 'future' subscription gets started at the scheduled date. \* \`subscription_trial_end_reminder\` - Sent when the customer's trial period is about to end. \* \`subscription_activated\` - Sent after the subscription has been moved from trial to active state \* \`subscription_activated_with_backdating\` - Sent after the subscription changes to \`active\` from another \`status\`, while the change is backdated. \* \`subscription_changed\` - Sent after the subscription's recurring items have been changed \* \`subscription_trial_extended\` - Trial Extension \* \`mrr_updated\` - Sent when either of MRR or CMRR of a subscription changes \* \`subscription_changed_with_backdating\` - Sent after the subscription's recurring items have been changed with backdated date \* \`subscription_cancellation_scheduled\` - Sent when subscription is scheduled to cancel at end of current term \* \`subscription_cancellation_reminder\` - Sent when the customer's subscription is nearing it's scheduled cancellation date. \* \`subscription_cancelled\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_canceled_with_backdating\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_reactivated\` - Sent when the subscription is moved from cancelled state to active or in_trial state \* \`subscription_reactivated_with_backdating\` - Sent when the subscription is moved from cancelled state to active or in_trial state with past date \* \`subscription_renewed\` - Sent when the subscription is renewed from the current term. \* \`subscription_scheduled_cancellation_removed\` - Sent when scheduled cancellation is removed for the subscription. \* \`subscription_changes_scheduled\` - Sent when subscription changes are scheduled for later. Changes will be applied at the end of current term. \* \`subscription_scheduled_changes_removed\` - Sent when scheduled change for the subscription is removed. \* \`subscription_shipping_address_updated\` - Triggered when shipping address is added or updated for a subscription. \* \`subscription_deleted\` - Sent when a subscription has been deleted \* \`subscription_paused\` - Sent when the subscription is paused. \* \`subscription_pause_scheduled\` - Sent when the subscription is scheduled to pause. \* \`subscription_scheduled_pause_removed\` - Triggered when scheduled pause is removed for the subscription. \* \`subscription_resumed\` - Sent when the subscription is moved from paused state to active state \* \`subscription_resumption_scheduled\` - Triggered when the subscription resumption is scheduled. \* \`subscription_scheduled_resumption_removed\` - Triggered when scheduled resumption is removed for the subscription. \* \`subscription_advance_invoice_schedule_added\` - Triggered when advance invoice is scheduled for a subscription. \* \`subscription_advance_invoice_schedule_updated\` - Triggered when scheduled advance invoice is updated for a subscription. \* \`subscription_advance_invoice_schedule_removed\` - Triggered when scheduled advance invoice is removed for a subscription. \* \`pending_invoice_created\` - Event triggered (in the case of metered billing) when a "Pending" invoice is created that has usage related charges or line items to be added, before being closed. This is triggered only when the "Notify for Pending Invoices" option is enabled. \* \`pending_invoice_updated\` - Event triggered when the option "Notify and wait to close invoices" is enabled, and the 'Pending' invoice is updated. \* \`invoice_generated\` - Event triggered when a new invoice is generated. In case of metered billing, this event is triggered when a "Pending" invoice is closed. \* \`invoice_generated_with_backdating\` - Event triggered when a new invoice is generated with past date as invoice date. \* \`invoice_updated\` - Triggered when the invoice's shipping/billing address is updated, if the invoice is voided, or when the amount due is modified due to payments applied/removed. \* \`invoice_deleted\` - Event triggered when an invoice is deleted. \* \`credit_note_created\` - Sent when a credit note is created \* \`credit_note_created_with_backdating\` - Sent when a credit note is created with past date as credit note date \* \`credit_note_updated\` - Sent when a credit note is updated \* \`credit_note_deleted\` - Sent when a credit note is deleted \* \`subscription_renewal_reminder\` - Sent before each subscription's renewal based on plan's period \* \`add_usages_reminder\` - Sent every month day before renewal date of plan's period \* \`transaction_created\` - Triggered when a transaction is recorded \* \`transaction_updated\` - Triggered when a transaction is updated. E.g. (1) When a transaction is removed, (2) or when an excess payment is applied on an invoice, (3) or when amount_capturable gets updated. \* \`transaction_deleted\` - Triggered when a transaction is deleted. \* \`payment_succeeded\` - Sent when the payment is successfully collected \* \`payment_failed\` - Sent when attempt to charge customer's credit card fails \* \`payment_refunded\` - Sent when a payment refund is made \* \`payment_initiated\` - Sent when a payment is initiated via direct debit \* \`refund_initiated\` - Sent when a refund is initiated via direct debit \* \`netd_payment_due_reminder\` - \*\*(Deprecated)\*\* Sent when a invoice's due period is about to end \* \`authorization_succeeded\` - Triggered when a authorization transaction is created. \* \`authorization_voided\` - Triggered when a authorization transaction is voided. Authorization can be voided either manually or when blocked funds are released by the gateway after a certain period of time. \* \`card_added\` - Sent when a card is added for a customer. \* \`card_updated\` - Sent when the card is updated for a customer. \* \`card_expiry_reminder\` - Sent when the customer's credit card is expiring soon. Sent 30 days before the expiry date. \* \`card_expired\` - Sent when a card for a customer is expired \* \`card_deleted\` - Sent when a card is deleted for a customer \* \`payment_source_added\` - Sent when a payment source is added for a customer. \* \`payment_source_updated\` - Sent when the payment source is updated for a customer or when role is assigned to the payment source. \* \`payment_source_deleted\` - Sent when a payment source is deleted for a customer \* \`payment_source_expiring\` - Sent when the customer's payment source is expiring soon. Sent 30 days before the expiry date. \* \`payment_source_expired\` - Sent when a payment source for a customer is expired \* \`payment_source_locally_deleted\` - Sent when a payment source for a customer removed from Chargebee \* \`virtual_bank_account_added\` - Sent when a virtual bank account is added for a customer. \* \`virtual_bank_account_updated\` - Sent when the virtual bank account is updated for a customer. \* \`virtual_bank_account_deleted\` - Sent when a virtual bank account is deleted for a customer. \* \`token_created\` - Sent when a Token is created \* \`token_consumed\` - Sent when a Token is consumed \* \`token_expired\` - Sent when a Token is expired \* \`unbilled_charges_created\` - Triggered when unbilled charges are created \* \`unbilled_charges_voided\` - Triggered when unbilled charges are voided \* \`unbilled_charges_deleted\` - Triggered when unbilled charges are deleted \* \`unbilled_charges_invoiced\` - Triggered when unbilled charges are invoiced \* \`order_created\` - Triggered when order is created \* \`order_updated\` - Triggered when order is updated \* \`order_cancelled\` - Triggered when order is cancelled \* \`order_delivered\` - Triggered when order is marked as delivered \* \`order_returned\` - Triggered when order is marked as returned \* \`order_ready_to_process\` - Triggered when order reaches it's order date \* \`order_ready_to_ship\` - Triggered when order reaches it's shipping date \* \`order_deleted\` - Triggered when order is deleted \* \`order_resent\` - Triggered when order is resent \* \`quote_created\` - Triggered when quote is created \* \`quote_updated\` - Triggered when quote is updated \* \`quote_deleted\` - Triggered when quote is deleted \* \`tax_withheld_recorded\` - Triggered when a tax withheld is recorded for an invoice \* \`tax_withheld_deleted\` - Triggered when a tax withheld is deleted \* \`tax_withheld_refunded\` - Sent when a tax withheld refund is made \* \`gift_scheduled\` - Triggered when a new gift is created \* \`gift_unclaimed\` - Triggered when a new gift is unclaimed and is ready to be claimed \* \`gift_claimed\` - Triggered when a gift is claimed \* \`gift_expired\` - Triggered when a gift expires \* \`gift_cancelled\` - Triggered when a gift is cancelled. \* \`gift_updated\` - Triggered when a gift is updated \* \`hierarchy_created\` - Triggered when a hierarchy is created \* \`hierarchy_deleted\` - Triggered when a hierarchy is deleted \* \`payment_intent_created\` - Sent when a Payment intent is created \* \`payment_intent_updated\` - Sent when a Payment intent is updated \* \`contract_term_created\` - Triggered when new contract term is created \* \`contract_term_renewed\` - Triggered when new contract term is renewed \* \`contract_term_terminated\` - Triggered when contract term is terminated \* \`contract_term_completed\` - Triggered when contract term is completed \* \`contract_term_cancelled\` - Triggered when contract term is cancelled \* \`item_family_created\` - Triggered when an item family is created \* \`item_family_updated\` - Triggered when an item family is updated \* \`item_family_deleted\` - Triggered when an item family is deleted \* \`item_created\` - Triggered when an item is created \* \`item_updated\` - Triggered when an item is updated \* \`item_deleted\` - Triggered when an item is deleted \* \`item_price_created\` - Triggered when an item price is created \* \`item_price_updated\` - Triggered when an item price is updated \* \`item_price_deleted\` - Triggered when an item price is deleted \* \`attached_item_created\` - Triggered when an Attached item is created \* \`attached_item_updated\` - Triggered when an Attached item is updated \* \`attached_item_deleted\` - Triggered when an Attached item is deleted \* \`differential_price_created\` - Triggered when a differential price is created \* \`differential_price_updated\` - Triggered when a differential price is updated \* \`differential_price_deleted\` - Triggered when a differential price is deleted \* \`feature_created\` - Triggered when a feature is created. \* \`feature_updated\` - Triggered when an feature is updated \* \`feature_deleted\` - Triggered when a feature is deleted \* \`feature_activated\` - Triggered when a feature \`status\` transitions to \`active\` for the first time. \* \`feature_reactivated\` - Triggered when a feature \`status\` transitions to \`active\` for the second time or more. \* \`feature_archived\` - Triggered when an feature is archived \* \`item_entitlements_updated\` - Triggered when item entitlements are updated to a feature \* \`entitlement_overrides_updated\` - Triggered when an override entitlement is updated \* \`entitlement_overrides_removed\` - Triggered when an override entitlement is removed \* \`item_entitlements_removed\` - Triggered when item entitlements are removed for a feature \* \`entitlement_overrides_auto_removed\` - Triggered when Subscription entitlements overrides for a feature are auto removed after expiry \* \`subscription_entitlements_created\` - Triggered when subscription entitlements are created for a new subscription \* \`business_entity_created\` - Sent when a business entity is created. \* \`business_entity_updated\` - Sent when a business entity is updated. \* \`business_entity_deleted\` - Sent when a business entity is deleted. \* \`purchase_created\` - Triggered when purchase action is completed successfully \* \`voucher_created\` - Triggered when a payment voucher is created \* \`voucher_expired\` - Triggered when a payment voucher is expired \* \`voucher_create_failed\` - Triggered when a payment voucher creation is failed \* \`product_created\` - Triggered when the product create is completed successfully \* \`product_updated\` - Triggered when the product update is completed successfully \* \`product_deleted\` - Triggered when the product delete is completed successfully \* \`variant_created\` - Triggered when product variant create completed successfully \* \`variant_updated\` - Triggered when product variant update completed successfully \* \`variant_deleted\` - Triggered when product variant delete completed successfully

 */
export type ListEventsEventTypeIsNot =
  (typeof ListEventsEventTypeIsNot)[keyof typeof ListEventsEventTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsEventTypeIsNot = {
  plan_created: "plan_created",
  plan_updated: "plan_updated",
  plan_deleted: "plan_deleted",
  addon_created: "addon_created",
  addon_updated: "addon_updated",
  addon_deleted: "addon_deleted",
  coupon_created: "coupon_created",
  coupon_updated: "coupon_updated",
  coupon_deleted: "coupon_deleted",
  coupon_set_created: "coupon_set_created",
  coupon_set_updated: "coupon_set_updated",
  coupon_set_deleted: "coupon_set_deleted",
  coupon_codes_added: "coupon_codes_added",
  coupon_codes_deleted: "coupon_codes_deleted",
  coupon_codes_updated: "coupon_codes_updated",
  customer_created: "customer_created",
  customer_changed: "customer_changed",
  customer_deleted: "customer_deleted",
  customer_moved_out: "customer_moved_out",
  customer_moved_in: "customer_moved_in",
  promotional_credits_added: "promotional_credits_added",
  promotional_credits_deducted: "promotional_credits_deducted",
  subscription_created: "subscription_created",
  subscription_created_with_backdating: "subscription_created_with_backdating",
  subscription_started: "subscription_started",
  subscription_trial_end_reminder: "subscription_trial_end_reminder",
  subscription_activated: "subscription_activated",
  subscription_activated_with_backdating:
    "subscription_activated_with_backdating",
  subscription_changed: "subscription_changed",
  subscription_trial_extended: "subscription_trial_extended",
  mrr_updated: "mrr_updated",
  subscription_changed_with_backdating: "subscription_changed_with_backdating",
  subscription_cancellation_scheduled: "subscription_cancellation_scheduled",
  subscription_cancellation_reminder: "subscription_cancellation_reminder",
  subscription_cancelled: "subscription_cancelled",
  subscription_canceled_with_backdating:
    "subscription_canceled_with_backdating",
  subscription_reactivated: "subscription_reactivated",
  subscription_reactivated_with_backdating:
    "subscription_reactivated_with_backdating",
  subscription_renewed: "subscription_renewed",
  subscription_scheduled_cancellation_removed:
    "subscription_scheduled_cancellation_removed",
  subscription_changes_scheduled: "subscription_changes_scheduled",
  subscription_scheduled_changes_removed:
    "subscription_scheduled_changes_removed",
  subscription_shipping_address_updated:
    "subscription_shipping_address_updated",
  subscription_deleted: "subscription_deleted",
  subscription_paused: "subscription_paused",
  subscription_pause_scheduled: "subscription_pause_scheduled",
  subscription_scheduled_pause_removed: "subscription_scheduled_pause_removed",
  subscription_resumed: "subscription_resumed",
  subscription_resumption_scheduled: "subscription_resumption_scheduled",
  subscription_scheduled_resumption_removed:
    "subscription_scheduled_resumption_removed",
  subscription_advance_invoice_schedule_added:
    "subscription_advance_invoice_schedule_added",
  subscription_advance_invoice_schedule_updated:
    "subscription_advance_invoice_schedule_updated",
  subscription_advance_invoice_schedule_removed:
    "subscription_advance_invoice_schedule_removed",
  pending_invoice_created: "pending_invoice_created",
  pending_invoice_updated: "pending_invoice_updated",
  invoice_generated: "invoice_generated",
  invoice_generated_with_backdating: "invoice_generated_with_backdating",
  invoice_updated: "invoice_updated",
  invoice_deleted: "invoice_deleted",
  credit_note_created: "credit_note_created",
  credit_note_created_with_backdating: "credit_note_created_with_backdating",
  credit_note_updated: "credit_note_updated",
  credit_note_deleted: "credit_note_deleted",
  subscription_renewal_reminder: "subscription_renewal_reminder",
  add_usages_reminder: "add_usages_reminder",
  transaction_created: "transaction_created",
  transaction_updated: "transaction_updated",
  transaction_deleted: "transaction_deleted",
  payment_succeeded: "payment_succeeded",
  payment_failed: "payment_failed",
  payment_refunded: "payment_refunded",
  payment_initiated: "payment_initiated",
  refund_initiated: "refund_initiated",
  authorization_succeeded: "authorization_succeeded",
  authorization_voided: "authorization_voided",
  card_added: "card_added",
  card_updated: "card_updated",
  card_expiry_reminder: "card_expiry_reminder",
  card_expired: "card_expired",
  card_deleted: "card_deleted",
  payment_source_added: "payment_source_added",
  payment_source_updated: "payment_source_updated",
  payment_source_deleted: "payment_source_deleted",
  payment_source_expiring: "payment_source_expiring",
  payment_source_expired: "payment_source_expired",
  payment_source_locally_deleted: "payment_source_locally_deleted",
  virtual_bank_account_added: "virtual_bank_account_added",
  virtual_bank_account_updated: "virtual_bank_account_updated",
  virtual_bank_account_deleted: "virtual_bank_account_deleted",
  token_created: "token_created",
  token_consumed: "token_consumed",
  token_expired: "token_expired",
  unbilled_charges_created: "unbilled_charges_created",
  unbilled_charges_voided: "unbilled_charges_voided",
  unbilled_charges_deleted: "unbilled_charges_deleted",
  unbilled_charges_invoiced: "unbilled_charges_invoiced",
  order_created: "order_created",
  order_updated: "order_updated",
  order_cancelled: "order_cancelled",
  order_delivered: "order_delivered",
  order_returned: "order_returned",
  order_ready_to_process: "order_ready_to_process",
  order_ready_to_ship: "order_ready_to_ship",
  order_deleted: "order_deleted",
  order_resent: "order_resent",
  quote_created: "quote_created",
  quote_updated: "quote_updated",
  quote_deleted: "quote_deleted",
  tax_withheld_recorded: "tax_withheld_recorded",
  tax_withheld_deleted: "tax_withheld_deleted",
  tax_withheld_refunded: "tax_withheld_refunded",
  gift_scheduled: "gift_scheduled",
  gift_unclaimed: "gift_unclaimed",
  gift_claimed: "gift_claimed",
  gift_expired: "gift_expired",
  gift_cancelled: "gift_cancelled",
  gift_updated: "gift_updated",
  hierarchy_created: "hierarchy_created",
  hierarchy_deleted: "hierarchy_deleted",
  payment_intent_created: "payment_intent_created",
  payment_intent_updated: "payment_intent_updated",
  contract_term_created: "contract_term_created",
  contract_term_renewed: "contract_term_renewed",
  contract_term_terminated: "contract_term_terminated",
  contract_term_completed: "contract_term_completed",
  contract_term_cancelled: "contract_term_cancelled",
  item_family_created: "item_family_created",
  item_family_updated: "item_family_updated",
  item_family_deleted: "item_family_deleted",
  item_created: "item_created",
  item_updated: "item_updated",
  item_deleted: "item_deleted",
  item_price_created: "item_price_created",
  item_price_updated: "item_price_updated",
  item_price_deleted: "item_price_deleted",
  attached_item_created: "attached_item_created",
  attached_item_updated: "attached_item_updated",
  attached_item_deleted: "attached_item_deleted",
  differential_price_created: "differential_price_created",
  differential_price_updated: "differential_price_updated",
  differential_price_deleted: "differential_price_deleted",
  feature_created: "feature_created",
  feature_updated: "feature_updated",
  feature_deleted: "feature_deleted",
  feature_activated: "feature_activated",
  feature_reactivated: "feature_reactivated",
  feature_archived: "feature_archived",
  item_entitlements_updated: "item_entitlements_updated",
  entitlement_overrides_updated: "entitlement_overrides_updated",
  entitlement_overrides_removed: "entitlement_overrides_removed",
  item_entitlements_removed: "item_entitlements_removed",
  entitlement_overrides_auto_removed: "entitlement_overrides_auto_removed",
  subscription_entitlements_created: "subscription_entitlements_created",
  business_entity_created: "business_entity_created",
  business_entity_updated: "business_entity_updated",
  business_entity_deleted: "business_entity_deleted",
  purchase_created: "purchase_created",
  voucher_created: "voucher_created",
  voucher_expired: "voucher_expired",
  voucher_create_failed: "voucher_create_failed",
  product_created: "product_created",
  product_updated: "product_updated",
  product_deleted: "product_deleted",
  variant_created: "variant_created",
  variant_updated: "variant_updated",
  variant_deleted: "variant_deleted",
} as const;

/**
 * \* \`plan_created\` - Sent when a plan is created. \* \`plan_updated\` - Sent when a plan is changed. \* \`plan_deleted\` - Sent when a plan is deleted. \* \`addon_created\` - Sent when a addon is created. \* \`addon_updated\` - Sent when a addon is changed. \* \`addon_deleted\` - Sent when a addon is deleted. \* \`coupon_created\` - Sent when a coupon is created. \* \`coupon_updated\` - Sent when a coupon is changed. \* \`coupon_deleted\` - Sent when a coupon is deleted. \* \`coupon_set_created\` - Sent when a coupon set is created \* \`coupon_set_updated\` - Sent when a coupon set is changed \* \`coupon_set_deleted\` - Sent when a coupon set is deleted \* \`coupon_codes_added\` - Sent when coupon codes are added in coupon set \* \`coupon_codes_deleted\` - Sent when coupon codes are deleted in coupon set \* \`coupon_codes_updated\` - Sent when coupon codes are updated \* \`customer_created\` - Sent when a customer is created. This event happens when only a new customer is created or when a customer is automatically created during new subscription creation. \* \`customer_changed\` - Sent when a customer is changed \* \`customer_deleted\` - Sent when a customer is deleted \* \`customer_moved_out\` - Sent when a customer is copied to another site \* \`customer_moved_in\` - Sent when a customer is copied from another site \* \`promotional_credits_added\` - Sent when a customer prmotion credits added \* \`promotional_credits_deducted\` - Sent when a customer prmotion credits deducted \* \`subscription_created\` - Sent when a new subscription is created. \* \`subscription_created_with_backdating\` - Sent when a new subscription is created with backdating. \* \`subscription_started\` - Sent when a 'future' subscription gets started at the scheduled date. \* \`subscription_trial_end_reminder\` - Sent when the customer's trial period is about to end. \* \`subscription_activated\` - Sent after the subscription has been moved from trial to active state \* \`subscription_activated_with_backdating\` - Sent after the subscription changes to \`active\` from another \`status\`, while the change is backdated. \* \`subscription_changed\` - Sent after the subscription's recurring items have been changed \* \`subscription_trial_extended\` - Trial Extension \* \`mrr_updated\` - Sent when either of MRR or CMRR of a subscription changes \* \`subscription_changed_with_backdating\` - Sent after the subscription's recurring items have been changed with backdated date \* \`subscription_cancellation_scheduled\` - Sent when subscription is scheduled to cancel at end of current term \* \`subscription_cancellation_reminder\` - Sent when the customer's subscription is nearing it's scheduled cancellation date. \* \`subscription_cancelled\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_canceled_with_backdating\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_reactivated\` - Sent when the subscription is moved from cancelled state to active or in_trial state \* \`subscription_reactivated_with_backdating\` - Sent when the subscription is moved from cancelled state to active or in_trial state with past date \* \`subscription_renewed\` - Sent when the subscription is renewed from the current term. \* \`subscription_scheduled_cancellation_removed\` - Sent when scheduled cancellation is removed for the subscription. \* \`subscription_changes_scheduled\` - Sent when subscription changes are scheduled for later. Changes will be applied at the end of current term. \* \`subscription_scheduled_changes_removed\` - Sent when scheduled change for the subscription is removed. \* \`subscription_shipping_address_updated\` - Triggered when shipping address is added or updated for a subscription. \* \`subscription_deleted\` - Sent when a subscription has been deleted \* \`subscription_paused\` - Sent when the subscription is paused. \* \`subscription_pause_scheduled\` - Sent when the subscription is scheduled to pause. \* \`subscription_scheduled_pause_removed\` - Triggered when scheduled pause is removed for the subscription. \* \`subscription_resumed\` - Sent when the subscription is moved from paused state to active state \* \`subscription_resumption_scheduled\` - Triggered when the subscription resumption is scheduled. \* \`subscription_scheduled_resumption_removed\` - Triggered when scheduled resumption is removed for the subscription. \* \`subscription_advance_invoice_schedule_added\` - Triggered when advance invoice is scheduled for a subscription. \* \`subscription_advance_invoice_schedule_updated\` - Triggered when scheduled advance invoice is updated for a subscription. \* \`subscription_advance_invoice_schedule_removed\` - Triggered when scheduled advance invoice is removed for a subscription. \* \`pending_invoice_created\` - Event triggered (in the case of metered billing) when a "Pending" invoice is created that has usage related charges or line items to be added, before being closed. This is triggered only when the "Notify for Pending Invoices" option is enabled. \* \`pending_invoice_updated\` - Event triggered when the option "Notify and wait to close invoices" is enabled, and the 'Pending' invoice is updated. \* \`invoice_generated\` - Event triggered when a new invoice is generated. In case of metered billing, this event is triggered when a "Pending" invoice is closed. \* \`invoice_generated_with_backdating\` - Event triggered when a new invoice is generated with past date as invoice date. \* \`invoice_updated\` - Triggered when the invoice's shipping/billing address is updated, if the invoice is voided, or when the amount due is modified due to payments applied/removed. \* \`invoice_deleted\` - Event triggered when an invoice is deleted. \* \`credit_note_created\` - Sent when a credit note is created \* \`credit_note_created_with_backdating\` - Sent when a credit note is created with past date as credit note date \* \`credit_note_updated\` - Sent when a credit note is updated \* \`credit_note_deleted\` - Sent when a credit note is deleted \* \`subscription_renewal_reminder\` - Sent before each subscription's renewal based on plan's period \* \`add_usages_reminder\` - Sent every month day before renewal date of plan's period \* \`transaction_created\` - Triggered when a transaction is recorded \* \`transaction_updated\` - Triggered when a transaction is updated. E.g. (1) When a transaction is removed, (2) or when an excess payment is applied on an invoice, (3) or when amount_capturable gets updated. \* \`transaction_deleted\` - Triggered when a transaction is deleted. \* \`payment_succeeded\` - Sent when the payment is successfully collected \* \`payment_failed\` - Sent when attempt to charge customer's credit card fails \* \`payment_refunded\` - Sent when a payment refund is made \* \`payment_initiated\` - Sent when a payment is initiated via direct debit \* \`refund_initiated\` - Sent when a refund is initiated via direct debit \* \`netd_payment_due_reminder\` - \*\*(Deprecated)\*\* Sent when a invoice's due period is about to end \* \`authorization_succeeded\` - Triggered when a authorization transaction is created. \* \`authorization_voided\` - Triggered when a authorization transaction is voided. Authorization can be voided either manually or when blocked funds are released by the gateway after a certain period of time. \* \`card_added\` - Sent when a card is added for a customer. \* \`card_updated\` - Sent when the card is updated for a customer. \* \`card_expiry_reminder\` - Sent when the customer's credit card is expiring soon. Sent 30 days before the expiry date. \* \`card_expired\` - Sent when a card for a customer is expired \* \`card_deleted\` - Sent when a card is deleted for a customer \* \`payment_source_added\` - Sent when a payment source is added for a customer. \* \`payment_source_updated\` - Sent when the payment source is updated for a customer or when role is assigned to the payment source. \* \`payment_source_deleted\` - Sent when a payment source is deleted for a customer \* \`payment_source_expiring\` - Sent when the customer's payment source is expiring soon. Sent 30 days before the expiry date. \* \`payment_source_expired\` - Sent when a payment source for a customer is expired \* \`payment_source_locally_deleted\` - Sent when a payment source for a customer removed from Chargebee \* \`virtual_bank_account_added\` - Sent when a virtual bank account is added for a customer. \* \`virtual_bank_account_updated\` - Sent when the virtual bank account is updated for a customer. \* \`virtual_bank_account_deleted\` - Sent when a virtual bank account is deleted for a customer. \* \`token_created\` - Sent when a Token is created \* \`token_consumed\` - Sent when a Token is consumed \* \`token_expired\` - Sent when a Token is expired \* \`unbilled_charges_created\` - Triggered when unbilled charges are created \* \`unbilled_charges_voided\` - Triggered when unbilled charges are voided \* \`unbilled_charges_deleted\` - Triggered when unbilled charges are deleted \* \`unbilled_charges_invoiced\` - Triggered when unbilled charges are invoiced \* \`order_created\` - Triggered when order is created \* \`order_updated\` - Triggered when order is updated \* \`order_cancelled\` - Triggered when order is cancelled \* \`order_delivered\` - Triggered when order is marked as delivered \* \`order_returned\` - Triggered when order is marked as returned \* \`order_ready_to_process\` - Triggered when order reaches it's order date \* \`order_ready_to_ship\` - Triggered when order reaches it's shipping date \* \`order_deleted\` - Triggered when order is deleted \* \`order_resent\` - Triggered when order is resent \* \`quote_created\` - Triggered when quote is created \* \`quote_updated\` - Triggered when quote is updated \* \`quote_deleted\` - Triggered when quote is deleted \* \`tax_withheld_recorded\` - Triggered when a tax withheld is recorded for an invoice \* \`tax_withheld_deleted\` - Triggered when a tax withheld is deleted \* \`tax_withheld_refunded\` - Sent when a tax withheld refund is made \* \`gift_scheduled\` - Triggered when a new gift is created \* \`gift_unclaimed\` - Triggered when a new gift is unclaimed and is ready to be claimed \* \`gift_claimed\` - Triggered when a gift is claimed \* \`gift_expired\` - Triggered when a gift expires \* \`gift_cancelled\` - Triggered when a gift is cancelled. \* \`gift_updated\` - Triggered when a gift is updated \* \`hierarchy_created\` - Triggered when a hierarchy is created \* \`hierarchy_deleted\` - Triggered when a hierarchy is deleted \* \`payment_intent_created\` - Sent when a Payment intent is created \* \`payment_intent_updated\` - Sent when a Payment intent is updated \* \`contract_term_created\` - Triggered when new contract term is created \* \`contract_term_renewed\` - Triggered when new contract term is renewed \* \`contract_term_terminated\` - Triggered when contract term is terminated \* \`contract_term_completed\` - Triggered when contract term is completed \* \`contract_term_cancelled\` - Triggered when contract term is cancelled \* \`item_family_created\` - Triggered when an item family is created \* \`item_family_updated\` - Triggered when an item family is updated \* \`item_family_deleted\` - Triggered when an item family is deleted \* \`item_created\` - Triggered when an item is created \* \`item_updated\` - Triggered when an item is updated \* \`item_deleted\` - Triggered when an item is deleted \* \`item_price_created\` - Triggered when an item price is created \* \`item_price_updated\` - Triggered when an item price is updated \* \`item_price_deleted\` - Triggered when an item price is deleted \* \`attached_item_created\` - Triggered when an Attached item is created \* \`attached_item_updated\` - Triggered when an Attached item is updated \* \`attached_item_deleted\` - Triggered when an Attached item is deleted \* \`differential_price_created\` - Triggered when a differential price is created \* \`differential_price_updated\` - Triggered when a differential price is updated \* \`differential_price_deleted\` - Triggered when a differential price is deleted \* \`feature_created\` - Triggered when a feature is created. \* \`feature_updated\` - Triggered when an feature is updated \* \`feature_deleted\` - Triggered when a feature is deleted \* \`feature_activated\` - Triggered when a feature \`status\` transitions to \`active\` for the first time. \* \`feature_reactivated\` - Triggered when a feature \`status\` transitions to \`active\` for the second time or more. \* \`feature_archived\` - Triggered when an feature is archived \* \`item_entitlements_updated\` - Triggered when item entitlements are updated to a feature \* \`entitlement_overrides_updated\` - Triggered when an override entitlement is updated \* \`entitlement_overrides_removed\` - Triggered when an override entitlement is removed \* \`item_entitlements_removed\` - Triggered when item entitlements are removed for a feature \* \`entitlement_overrides_auto_removed\` - Triggered when Subscription entitlements overrides for a feature are auto removed after expiry \* \`subscription_entitlements_created\` - Triggered when subscription entitlements are created for a new subscription \* \`business_entity_created\` - Sent when a business entity is created. \* \`business_entity_updated\` - Sent when a business entity is updated. \* \`business_entity_deleted\` - Sent when a business entity is deleted. \* \`purchase_created\` - Triggered when purchase action is completed successfully \* \`voucher_created\` - Triggered when a payment voucher is created \* \`voucher_expired\` - Triggered when a payment voucher is expired \* \`voucher_create_failed\` - Triggered when a payment voucher creation is failed \* \`product_created\` - Triggered when the product create is completed successfully \* \`product_updated\` - Triggered when the product update is completed successfully \* \`product_deleted\` - Triggered when the product delete is completed successfully \* \`variant_created\` - Triggered when product variant create completed successfully \* \`variant_updated\` - Triggered when product variant update completed successfully \* \`variant_deleted\` - Triggered when product variant delete completed successfully

 */
export type ListEventsEventTypeIs =
  (typeof ListEventsEventTypeIs)[keyof typeof ListEventsEventTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsEventTypeIs = {
  plan_created: "plan_created",
  plan_updated: "plan_updated",
  plan_deleted: "plan_deleted",
  addon_created: "addon_created",
  addon_updated: "addon_updated",
  addon_deleted: "addon_deleted",
  coupon_created: "coupon_created",
  coupon_updated: "coupon_updated",
  coupon_deleted: "coupon_deleted",
  coupon_set_created: "coupon_set_created",
  coupon_set_updated: "coupon_set_updated",
  coupon_set_deleted: "coupon_set_deleted",
  coupon_codes_added: "coupon_codes_added",
  coupon_codes_deleted: "coupon_codes_deleted",
  coupon_codes_updated: "coupon_codes_updated",
  customer_created: "customer_created",
  customer_changed: "customer_changed",
  customer_deleted: "customer_deleted",
  customer_moved_out: "customer_moved_out",
  customer_moved_in: "customer_moved_in",
  promotional_credits_added: "promotional_credits_added",
  promotional_credits_deducted: "promotional_credits_deducted",
  subscription_created: "subscription_created",
  subscription_created_with_backdating: "subscription_created_with_backdating",
  subscription_started: "subscription_started",
  subscription_trial_end_reminder: "subscription_trial_end_reminder",
  subscription_activated: "subscription_activated",
  subscription_activated_with_backdating:
    "subscription_activated_with_backdating",
  subscription_changed: "subscription_changed",
  subscription_trial_extended: "subscription_trial_extended",
  mrr_updated: "mrr_updated",
  subscription_changed_with_backdating: "subscription_changed_with_backdating",
  subscription_cancellation_scheduled: "subscription_cancellation_scheduled",
  subscription_cancellation_reminder: "subscription_cancellation_reminder",
  subscription_cancelled: "subscription_cancelled",
  subscription_canceled_with_backdating:
    "subscription_canceled_with_backdating",
  subscription_reactivated: "subscription_reactivated",
  subscription_reactivated_with_backdating:
    "subscription_reactivated_with_backdating",
  subscription_renewed: "subscription_renewed",
  subscription_scheduled_cancellation_removed:
    "subscription_scheduled_cancellation_removed",
  subscription_changes_scheduled: "subscription_changes_scheduled",
  subscription_scheduled_changes_removed:
    "subscription_scheduled_changes_removed",
  subscription_shipping_address_updated:
    "subscription_shipping_address_updated",
  subscription_deleted: "subscription_deleted",
  subscription_paused: "subscription_paused",
  subscription_pause_scheduled: "subscription_pause_scheduled",
  subscription_scheduled_pause_removed: "subscription_scheduled_pause_removed",
  subscription_resumed: "subscription_resumed",
  subscription_resumption_scheduled: "subscription_resumption_scheduled",
  subscription_scheduled_resumption_removed:
    "subscription_scheduled_resumption_removed",
  subscription_advance_invoice_schedule_added:
    "subscription_advance_invoice_schedule_added",
  subscription_advance_invoice_schedule_updated:
    "subscription_advance_invoice_schedule_updated",
  subscription_advance_invoice_schedule_removed:
    "subscription_advance_invoice_schedule_removed",
  pending_invoice_created: "pending_invoice_created",
  pending_invoice_updated: "pending_invoice_updated",
  invoice_generated: "invoice_generated",
  invoice_generated_with_backdating: "invoice_generated_with_backdating",
  invoice_updated: "invoice_updated",
  invoice_deleted: "invoice_deleted",
  credit_note_created: "credit_note_created",
  credit_note_created_with_backdating: "credit_note_created_with_backdating",
  credit_note_updated: "credit_note_updated",
  credit_note_deleted: "credit_note_deleted",
  subscription_renewal_reminder: "subscription_renewal_reminder",
  add_usages_reminder: "add_usages_reminder",
  transaction_created: "transaction_created",
  transaction_updated: "transaction_updated",
  transaction_deleted: "transaction_deleted",
  payment_succeeded: "payment_succeeded",
  payment_failed: "payment_failed",
  payment_refunded: "payment_refunded",
  payment_initiated: "payment_initiated",
  refund_initiated: "refund_initiated",
  authorization_succeeded: "authorization_succeeded",
  authorization_voided: "authorization_voided",
  card_added: "card_added",
  card_updated: "card_updated",
  card_expiry_reminder: "card_expiry_reminder",
  card_expired: "card_expired",
  card_deleted: "card_deleted",
  payment_source_added: "payment_source_added",
  payment_source_updated: "payment_source_updated",
  payment_source_deleted: "payment_source_deleted",
  payment_source_expiring: "payment_source_expiring",
  payment_source_expired: "payment_source_expired",
  payment_source_locally_deleted: "payment_source_locally_deleted",
  virtual_bank_account_added: "virtual_bank_account_added",
  virtual_bank_account_updated: "virtual_bank_account_updated",
  virtual_bank_account_deleted: "virtual_bank_account_deleted",
  token_created: "token_created",
  token_consumed: "token_consumed",
  token_expired: "token_expired",
  unbilled_charges_created: "unbilled_charges_created",
  unbilled_charges_voided: "unbilled_charges_voided",
  unbilled_charges_deleted: "unbilled_charges_deleted",
  unbilled_charges_invoiced: "unbilled_charges_invoiced",
  order_created: "order_created",
  order_updated: "order_updated",
  order_cancelled: "order_cancelled",
  order_delivered: "order_delivered",
  order_returned: "order_returned",
  order_ready_to_process: "order_ready_to_process",
  order_ready_to_ship: "order_ready_to_ship",
  order_deleted: "order_deleted",
  order_resent: "order_resent",
  quote_created: "quote_created",
  quote_updated: "quote_updated",
  quote_deleted: "quote_deleted",
  tax_withheld_recorded: "tax_withheld_recorded",
  tax_withheld_deleted: "tax_withheld_deleted",
  tax_withheld_refunded: "tax_withheld_refunded",
  gift_scheduled: "gift_scheduled",
  gift_unclaimed: "gift_unclaimed",
  gift_claimed: "gift_claimed",
  gift_expired: "gift_expired",
  gift_cancelled: "gift_cancelled",
  gift_updated: "gift_updated",
  hierarchy_created: "hierarchy_created",
  hierarchy_deleted: "hierarchy_deleted",
  payment_intent_created: "payment_intent_created",
  payment_intent_updated: "payment_intent_updated",
  contract_term_created: "contract_term_created",
  contract_term_renewed: "contract_term_renewed",
  contract_term_terminated: "contract_term_terminated",
  contract_term_completed: "contract_term_completed",
  contract_term_cancelled: "contract_term_cancelled",
  item_family_created: "item_family_created",
  item_family_updated: "item_family_updated",
  item_family_deleted: "item_family_deleted",
  item_created: "item_created",
  item_updated: "item_updated",
  item_deleted: "item_deleted",
  item_price_created: "item_price_created",
  item_price_updated: "item_price_updated",
  item_price_deleted: "item_price_deleted",
  attached_item_created: "attached_item_created",
  attached_item_updated: "attached_item_updated",
  attached_item_deleted: "attached_item_deleted",
  differential_price_created: "differential_price_created",
  differential_price_updated: "differential_price_updated",
  differential_price_deleted: "differential_price_deleted",
  feature_created: "feature_created",
  feature_updated: "feature_updated",
  feature_deleted: "feature_deleted",
  feature_activated: "feature_activated",
  feature_reactivated: "feature_reactivated",
  feature_archived: "feature_archived",
  item_entitlements_updated: "item_entitlements_updated",
  entitlement_overrides_updated: "entitlement_overrides_updated",
  entitlement_overrides_removed: "entitlement_overrides_removed",
  item_entitlements_removed: "item_entitlements_removed",
  entitlement_overrides_auto_removed: "entitlement_overrides_auto_removed",
  subscription_entitlements_created: "subscription_entitlements_created",
  business_entity_created: "business_entity_created",
  business_entity_updated: "business_entity_updated",
  business_entity_deleted: "business_entity_deleted",
  purchase_created: "purchase_created",
  voucher_created: "voucher_created",
  voucher_expired: "voucher_expired",
  voucher_create_failed: "voucher_create_failed",
  product_created: "product_created",
  product_updated: "product_updated",
  product_deleted: "product_deleted",
  variant_created: "variant_created",
  variant_updated: "variant_updated",
  variant_deleted: "variant_deleted",
} as const;

/**
 * \* \`not_configured\` - Webhook was not configured when this event occurred \* \`scheduled\` - Webhook call has been scheduled. \* \`succeeded\` - Webhook call was successful. \* \`re_scheduled\` - Webhook call has been rescheduled due failure(s) in previous call(s) \* \`failed\` - Webhook call has been suspended after the all retries have resulted in failure. \* \`skipped\` - Skipped as specified in request \* \`not_applicable\` - Webhook call is not applicable for this event.

 */
export type ListEventsWebhookStatusIsNot =
  (typeof ListEventsWebhookStatusIsNot)[keyof typeof ListEventsWebhookStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsWebhookStatusIsNot = {
  not_configured: "not_configured",
  scheduled: "scheduled",
  succeeded: "succeeded",
  re_scheduled: "re_scheduled",
  failed: "failed",
  skipped: "skipped",
  not_applicable: "not_applicable",
} as const;

/**
 * \* \`not_configured\` - Webhook was not configured when this event occurred \* \`scheduled\` - Webhook call has been scheduled. \* \`succeeded\` - Webhook call was successful. \* \`re_scheduled\` - Webhook call has been rescheduled due failure(s) in previous call(s) \* \`failed\` - Webhook call has been suspended after the all retries have resulted in failure. \* \`skipped\` - Skipped as specified in request \* \`not_applicable\` - Webhook call is not applicable for this event.

 */
export type ListEventsWebhookStatusIs =
  (typeof ListEventsWebhookStatusIs)[keyof typeof ListEventsWebhookStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsWebhookStatusIs = {
  not_configured: "not_configured",
  scheduled: "scheduled",
  succeeded: "succeeded",
  re_scheduled: "re_scheduled",
  failed: "failed",
  skipped: "skipped",
  not_applicable: "not_applicable",
} as const;

export type ListEventsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Uniquely identifies a event.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "8ndk0hbKm"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Returns the events (occurred in the past 6 days) which has this status in any of the events' webhooks.<br/> <b> Note </b>: To retrieve events which have occurred before the 6 day period, use the occurred_at(start_time/end_time) attribute. Possible values are : <dfn>not_configured, scheduled, succeeded, re_scheduled, failed, skipped, not_applicable.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>webhook_status[is] = "succeeded"</i>
   */
  webhook_status?: {
    /** \* \`not_configured\` - Webhook was not configured when this event occurred \* \`scheduled\` - Webhook call has been scheduled. \* \`succeeded\` - Webhook call was successful. \* \`re_scheduled\` - Webhook call has been rescheduled due failure(s) in previous call(s) \* \`failed\` - Webhook call has been suspended after the all retries have resulted in failure. \* \`skipped\` - Skipped as specified in request \* \`not_applicable\` - Webhook call is not applicable for this event.
     */
    is?: ListEventsWebhookStatusIs;
    /** \* \`not_configured\` - Webhook was not configured when this event occurred \* \`scheduled\` - Webhook call has been scheduled. \* \`succeeded\` - Webhook call was successful. \* \`re_scheduled\` - Webhook call has been rescheduled due failure(s) in previous call(s) \* \`failed\` - Webhook call has been suspended after the all retries have resulted in failure. \* \`skipped\` - Skipped as specified in request \* \`not_applicable\` - Webhook call is not applicable for this event.
     */
    is_not?: ListEventsWebhookStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Specify it if you need to fetch events of a particular type. Possible values are : <dfn>coupon_created, coupon_updated, coupon_deleted, coupon_set_created, coupon_set_updated, coupon_set_deleted, coupon_codes_added, coupon_codes_deleted, coupon_codes_updated, customer_created, customer_changed, customer_deleted, customer_moved_out, customer_moved_in, promotional_credits_added, promotional_credits_deducted, subscription_created, subscription_created_with_backdating, subscription_started, subscription_trial_end_reminder, subscription_activated, subscription_activated_with_backdating, subscription_changed, mrr_updated, subscription_changed_with_backdating, subscription_cancellation_scheduled, subscription_cancellation_reminder, subscription_cancelled, subscription_canceled_with_backdating, subscription_reactivated, subscription_reactivated_with_backdating, subscription_renewed, subscription_scheduled_cancellation_removed, subscription_changes_scheduled, subscription_scheduled_changes_removed, subscription_shipping_address_updated, subscription_deleted, subscription_paused, subscription_pause_scheduled, subscription_scheduled_pause_removed, subscription_resumed, subscription_resumption_scheduled, subscription_scheduled_resumption_removed, subscription_advance_invoice_schedule_added, subscription_advance_invoice_schedule_updated, subscription_advance_invoice_schedule_removed, pending_invoice_created, pending_invoice_updated, invoice_generated, invoice_generated_with_backdating, invoice_updated, invoice_deleted, credit_note_created, credit_note_created_with_backdating, credit_note_updated, credit_note_deleted, subscription_renewal_reminder, add_usages_reminder, transaction_created, transaction_updated, transaction_deleted, payment_succeeded, payment_failed, payment_refunded, payment_initiated, refund_initiated, authorization_succeeded, authorization_voided, card_added, card_updated, card_expiry_reminder, card_expired, card_deleted, payment_source_added, payment_source_updated, payment_source_deleted, payment_source_expiring, payment_source_expired, virtual_bank_account_added, virtual_bank_account_updated, virtual_bank_account_deleted, token_created, token_consumed, token_expired, unbilled_charges_created, unbilled_charges_voided, unbilled_charges_deleted, unbilled_charges_invoiced, order_created, order_updated, order_cancelled, order_delivered, order_returned, order_ready_to_process, order_ready_to_ship, order_deleted, order_resent, quote_created, quote_updated, quote_deleted, tax_withheld_recorded, tax_withheld_deleted, tax_withheld_refunded, gift_scheduled, gift_unclaimed, gift_claimed, gift_expired, gift_cancelled, gift_updated, hierarchy_created, hierarchy_deleted, payment_intent_created, payment_intent_updated, contract_term_created, contract_term_renewed, contract_term_terminated, contract_term_completed, contract_term_cancelled, item_family_created, item_family_updated, item_family_deleted, item_created, item_updated, item_deleted, item_price_created, item_price_updated, item_price_deleted, attached_item_created, attached_item_updated, attached_item_deleted, differential_price_created, differential_price_updated, differential_price_deleted, feature_created, feature_updated, feature_deleted, feature_activated, feature_reactivated, feature_archived, item_entitlements_updated, entitlement_overrides_updated, entitlement_overrides_removed, item_entitlements_removed, entitlement_overrides_auto_removed, business_entity_created, business_entity_updated, business_entity_deleted, purchase_created.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>event_type[is] = "customer_created"</i>
   */
  event_type?: {
    /** \* \`plan_created\` - Sent when a plan is created. \* \`plan_updated\` - Sent when a plan is changed. \* \`plan_deleted\` - Sent when a plan is deleted. \* \`addon_created\` - Sent when a addon is created. \* \`addon_updated\` - Sent when a addon is changed. \* \`addon_deleted\` - Sent when a addon is deleted. \* \`coupon_created\` - Sent when a coupon is created. \* \`coupon_updated\` - Sent when a coupon is changed. \* \`coupon_deleted\` - Sent when a coupon is deleted. \* \`coupon_set_created\` - Sent when a coupon set is created \* \`coupon_set_updated\` - Sent when a coupon set is changed \* \`coupon_set_deleted\` - Sent when a coupon set is deleted \* \`coupon_codes_added\` - Sent when coupon codes are added in coupon set \* \`coupon_codes_deleted\` - Sent when coupon codes are deleted in coupon set \* \`coupon_codes_updated\` - Sent when coupon codes are updated \* \`customer_created\` - Sent when a customer is created. This event happens when only a new customer is created or when a customer is automatically created during new subscription creation. \* \`customer_changed\` - Sent when a customer is changed \* \`customer_deleted\` - Sent when a customer is deleted \* \`customer_moved_out\` - Sent when a customer is copied to another site \* \`customer_moved_in\` - Sent when a customer is copied from another site \* \`promotional_credits_added\` - Sent when a customer prmotion credits added \* \`promotional_credits_deducted\` - Sent when a customer prmotion credits deducted \* \`subscription_created\` - Sent when a new subscription is created. \* \`subscription_created_with_backdating\` - Sent when a new subscription is created with backdating. \* \`subscription_started\` - Sent when a 'future' subscription gets started at the scheduled date. \* \`subscription_trial_end_reminder\` - Sent when the customer's trial period is about to end. \* \`subscription_activated\` - Sent after the subscription has been moved from trial to active state \* \`subscription_activated_with_backdating\` - Sent after the subscription changes to \`active\` from another \`status\`, while the change is backdated. \* \`subscription_changed\` - Sent after the subscription's recurring items have been changed \* \`subscription_trial_extended\` - Trial Extension \* \`mrr_updated\` - Sent when either of MRR or CMRR of a subscription changes \* \`subscription_changed_with_backdating\` - Sent after the subscription's recurring items have been changed with backdated date \* \`subscription_cancellation_scheduled\` - Sent when subscription is scheduled to cancel at end of current term \* \`subscription_cancellation_reminder\` - Sent when the customer's subscription is nearing it's scheduled cancellation date. \* \`subscription_cancelled\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_canceled_with_backdating\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_reactivated\` - Sent when the subscription is moved from cancelled state to active or in_trial state \* \`subscription_reactivated_with_backdating\` - Sent when the subscription is moved from cancelled state to active or in_trial state with past date \* \`subscription_renewed\` - Sent when the subscription is renewed from the current term. \* \`subscription_scheduled_cancellation_removed\` - Sent when scheduled cancellation is removed for the subscription. \* \`subscription_changes_scheduled\` - Sent when subscription changes are scheduled for later. Changes will be applied at the end of current term. \* \`subscription_scheduled_changes_removed\` - Sent when scheduled change for the subscription is removed. \* \`subscription_shipping_address_updated\` - Triggered when shipping address is added or updated for a subscription. \* \`subscription_deleted\` - Sent when a subscription has been deleted \* \`subscription_paused\` - Sent when the subscription is paused. \* \`subscription_pause_scheduled\` - Sent when the subscription is scheduled to pause. \* \`subscription_scheduled_pause_removed\` - Triggered when scheduled pause is removed for the subscription. \* \`subscription_resumed\` - Sent when the subscription is moved from paused state to active state \* \`subscription_resumption_scheduled\` - Triggered when the subscription resumption is scheduled. \* \`subscription_scheduled_resumption_removed\` - Triggered when scheduled resumption is removed for the subscription. \* \`subscription_advance_invoice_schedule_added\` - Triggered when advance invoice is scheduled for a subscription. \* \`subscription_advance_invoice_schedule_updated\` - Triggered when scheduled advance invoice is updated for a subscription. \* \`subscription_advance_invoice_schedule_removed\` - Triggered when scheduled advance invoice is removed for a subscription. \* \`pending_invoice_created\` - Event triggered (in the case of metered billing) when a "Pending" invoice is created that has usage related charges or line items to be added, before being closed. This is triggered only when the "Notify for Pending Invoices" option is enabled. \* \`pending_invoice_updated\` - Event triggered when the option "Notify and wait to close invoices" is enabled, and the 'Pending' invoice is updated. \* \`invoice_generated\` - Event triggered when a new invoice is generated. In case of metered billing, this event is triggered when a "Pending" invoice is closed. \* \`invoice_generated_with_backdating\` - Event triggered when a new invoice is generated with past date as invoice date. \* \`invoice_updated\` - Triggered when the invoice's shipping/billing address is updated, if the invoice is voided, or when the amount due is modified due to payments applied/removed. \* \`invoice_deleted\` - Event triggered when an invoice is deleted. \* \`credit_note_created\` - Sent when a credit note is created \* \`credit_note_created_with_backdating\` - Sent when a credit note is created with past date as credit note date \* \`credit_note_updated\` - Sent when a credit note is updated \* \`credit_note_deleted\` - Sent when a credit note is deleted \* \`subscription_renewal_reminder\` - Sent before each subscription's renewal based on plan's period \* \`add_usages_reminder\` - Sent every month day before renewal date of plan's period \* \`transaction_created\` - Triggered when a transaction is recorded \* \`transaction_updated\` - Triggered when a transaction is updated. E.g. (1) When a transaction is removed, (2) or when an excess payment is applied on an invoice, (3) or when amount_capturable gets updated. \* \`transaction_deleted\` - Triggered when a transaction is deleted. \* \`payment_succeeded\` - Sent when the payment is successfully collected \* \`payment_failed\` - Sent when attempt to charge customer's credit card fails \* \`payment_refunded\` - Sent when a payment refund is made \* \`payment_initiated\` - Sent when a payment is initiated via direct debit \* \`refund_initiated\` - Sent when a refund is initiated via direct debit \* \`netd_payment_due_reminder\` - \*\*(Deprecated)\*\* Sent when a invoice's due period is about to end \* \`authorization_succeeded\` - Triggered when a authorization transaction is created. \* \`authorization_voided\` - Triggered when a authorization transaction is voided. Authorization can be voided either manually or when blocked funds are released by the gateway after a certain period of time. \* \`card_added\` - Sent when a card is added for a customer. \* \`card_updated\` - Sent when the card is updated for a customer. \* \`card_expiry_reminder\` - Sent when the customer's credit card is expiring soon. Sent 30 days before the expiry date. \* \`card_expired\` - Sent when a card for a customer is expired \* \`card_deleted\` - Sent when a card is deleted for a customer \* \`payment_source_added\` - Sent when a payment source is added for a customer. \* \`payment_source_updated\` - Sent when the payment source is updated for a customer or when role is assigned to the payment source. \* \`payment_source_deleted\` - Sent when a payment source is deleted for a customer \* \`payment_source_expiring\` - Sent when the customer's payment source is expiring soon. Sent 30 days before the expiry date. \* \`payment_source_expired\` - Sent when a payment source for a customer is expired \* \`payment_source_locally_deleted\` - Sent when a payment source for a customer removed from Chargebee \* \`virtual_bank_account_added\` - Sent when a virtual bank account is added for a customer. \* \`virtual_bank_account_updated\` - Sent when the virtual bank account is updated for a customer. \* \`virtual_bank_account_deleted\` - Sent when a virtual bank account is deleted for a customer. \* \`token_created\` - Sent when a Token is created \* \`token_consumed\` - Sent when a Token is consumed \* \`token_expired\` - Sent when a Token is expired \* \`unbilled_charges_created\` - Triggered when unbilled charges are created \* \`unbilled_charges_voided\` - Triggered when unbilled charges are voided \* \`unbilled_charges_deleted\` - Triggered when unbilled charges are deleted \* \`unbilled_charges_invoiced\` - Triggered when unbilled charges are invoiced \* \`order_created\` - Triggered when order is created \* \`order_updated\` - Triggered when order is updated \* \`order_cancelled\` - Triggered when order is cancelled \* \`order_delivered\` - Triggered when order is marked as delivered \* \`order_returned\` - Triggered when order is marked as returned \* \`order_ready_to_process\` - Triggered when order reaches it's order date \* \`order_ready_to_ship\` - Triggered when order reaches it's shipping date \* \`order_deleted\` - Triggered when order is deleted \* \`order_resent\` - Triggered when order is resent \* \`quote_created\` - Triggered when quote is created \* \`quote_updated\` - Triggered when quote is updated \* \`quote_deleted\` - Triggered when quote is deleted \* \`tax_withheld_recorded\` - Triggered when a tax withheld is recorded for an invoice \* \`tax_withheld_deleted\` - Triggered when a tax withheld is deleted \* \`tax_withheld_refunded\` - Sent when a tax withheld refund is made \* \`gift_scheduled\` - Triggered when a new gift is created \* \`gift_unclaimed\` - Triggered when a new gift is unclaimed and is ready to be claimed \* \`gift_claimed\` - Triggered when a gift is claimed \* \`gift_expired\` - Triggered when a gift expires \* \`gift_cancelled\` - Triggered when a gift is cancelled. \* \`gift_updated\` - Triggered when a gift is updated \* \`hierarchy_created\` - Triggered when a hierarchy is created \* \`hierarchy_deleted\` - Triggered when a hierarchy is deleted \* \`payment_intent_created\` - Sent when a Payment intent is created \* \`payment_intent_updated\` - Sent when a Payment intent is updated \* \`contract_term_created\` - Triggered when new contract term is created \* \`contract_term_renewed\` - Triggered when new contract term is renewed \* \`contract_term_terminated\` - Triggered when contract term is terminated \* \`contract_term_completed\` - Triggered when contract term is completed \* \`contract_term_cancelled\` - Triggered when contract term is cancelled \* \`item_family_created\` - Triggered when an item family is created \* \`item_family_updated\` - Triggered when an item family is updated \* \`item_family_deleted\` - Triggered when an item family is deleted \* \`item_created\` - Triggered when an item is created \* \`item_updated\` - Triggered when an item is updated \* \`item_deleted\` - Triggered when an item is deleted \* \`item_price_created\` - Triggered when an item price is created \* \`item_price_updated\` - Triggered when an item price is updated \* \`item_price_deleted\` - Triggered when an item price is deleted \* \`attached_item_created\` - Triggered when an Attached item is created \* \`attached_item_updated\` - Triggered when an Attached item is updated \* \`attached_item_deleted\` - Triggered when an Attached item is deleted \* \`differential_price_created\` - Triggered when a differential price is created \* \`differential_price_updated\` - Triggered when a differential price is updated \* \`differential_price_deleted\` - Triggered when a differential price is deleted \* \`feature_created\` - Triggered when a feature is created. \* \`feature_updated\` - Triggered when an feature is updated \* \`feature_deleted\` - Triggered when a feature is deleted \* \`feature_activated\` - Triggered when a feature \`status\` transitions to \`active\` for the first time. \* \`feature_reactivated\` - Triggered when a feature \`status\` transitions to \`active\` for the second time or more. \* \`feature_archived\` - Triggered when an feature is archived \* \`item_entitlements_updated\` - Triggered when item entitlements are updated to a feature \* \`entitlement_overrides_updated\` - Triggered when an override entitlement is updated \* \`entitlement_overrides_removed\` - Triggered when an override entitlement is removed \* \`item_entitlements_removed\` - Triggered when item entitlements are removed for a feature \* \`entitlement_overrides_auto_removed\` - Triggered when Subscription entitlements overrides for a feature are auto removed after expiry \* \`subscription_entitlements_created\` - Triggered when subscription entitlements are created for a new subscription \* \`business_entity_created\` - Sent when a business entity is created. \* \`business_entity_updated\` - Sent when a business entity is updated. \* \`business_entity_deleted\` - Sent when a business entity is deleted. \* \`purchase_created\` - Triggered when purchase action is completed successfully \* \`voucher_created\` - Triggered when a payment voucher is created \* \`voucher_expired\` - Triggered when a payment voucher is expired \* \`voucher_create_failed\` - Triggered when a payment voucher creation is failed \* \`product_created\` - Triggered when the product create is completed successfully \* \`product_updated\` - Triggered when the product update is completed successfully \* \`product_deleted\` - Triggered when the product delete is completed successfully \* \`variant_created\` - Triggered when product variant create completed successfully \* \`variant_updated\` - Triggered when product variant update completed successfully \* \`variant_deleted\` - Triggered when product variant delete completed successfully
     */
    is?: ListEventsEventTypeIs;
    /** \* \`plan_created\` - Sent when a plan is created. \* \`plan_updated\` - Sent when a plan is changed. \* \`plan_deleted\` - Sent when a plan is deleted. \* \`addon_created\` - Sent when a addon is created. \* \`addon_updated\` - Sent when a addon is changed. \* \`addon_deleted\` - Sent when a addon is deleted. \* \`coupon_created\` - Sent when a coupon is created. \* \`coupon_updated\` - Sent when a coupon is changed. \* \`coupon_deleted\` - Sent when a coupon is deleted. \* \`coupon_set_created\` - Sent when a coupon set is created \* \`coupon_set_updated\` - Sent when a coupon set is changed \* \`coupon_set_deleted\` - Sent when a coupon set is deleted \* \`coupon_codes_added\` - Sent when coupon codes are added in coupon set \* \`coupon_codes_deleted\` - Sent when coupon codes are deleted in coupon set \* \`coupon_codes_updated\` - Sent when coupon codes are updated \* \`customer_created\` - Sent when a customer is created. This event happens when only a new customer is created or when a customer is automatically created during new subscription creation. \* \`customer_changed\` - Sent when a customer is changed \* \`customer_deleted\` - Sent when a customer is deleted \* \`customer_moved_out\` - Sent when a customer is copied to another site \* \`customer_moved_in\` - Sent when a customer is copied from another site \* \`promotional_credits_added\` - Sent when a customer prmotion credits added \* \`promotional_credits_deducted\` - Sent when a customer prmotion credits deducted \* \`subscription_created\` - Sent when a new subscription is created. \* \`subscription_created_with_backdating\` - Sent when a new subscription is created with backdating. \* \`subscription_started\` - Sent when a 'future' subscription gets started at the scheduled date. \* \`subscription_trial_end_reminder\` - Sent when the customer's trial period is about to end. \* \`subscription_activated\` - Sent after the subscription has been moved from trial to active state \* \`subscription_activated_with_backdating\` - Sent after the subscription changes to \`active\` from another \`status\`, while the change is backdated. \* \`subscription_changed\` - Sent after the subscription's recurring items have been changed \* \`subscription_trial_extended\` - Trial Extension \* \`mrr_updated\` - Sent when either of MRR or CMRR of a subscription changes \* \`subscription_changed_with_backdating\` - Sent after the subscription's recurring items have been changed with backdated date \* \`subscription_cancellation_scheduled\` - Sent when subscription is scheduled to cancel at end of current term \* \`subscription_cancellation_reminder\` - Sent when the customer's subscription is nearing it's scheduled cancellation date. \* \`subscription_cancelled\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_canceled_with_backdating\` - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* \`subscription_reactivated\` - Sent when the subscription is moved from cancelled state to active or in_trial state \* \`subscription_reactivated_with_backdating\` - Sent when the subscription is moved from cancelled state to active or in_trial state with past date \* \`subscription_renewed\` - Sent when the subscription is renewed from the current term. \* \`subscription_scheduled_cancellation_removed\` - Sent when scheduled cancellation is removed for the subscription. \* \`subscription_changes_scheduled\` - Sent when subscription changes are scheduled for later. Changes will be applied at the end of current term. \* \`subscription_scheduled_changes_removed\` - Sent when scheduled change for the subscription is removed. \* \`subscription_shipping_address_updated\` - Triggered when shipping address is added or updated for a subscription. \* \`subscription_deleted\` - Sent when a subscription has been deleted \* \`subscription_paused\` - Sent when the subscription is paused. \* \`subscription_pause_scheduled\` - Sent when the subscription is scheduled to pause. \* \`subscription_scheduled_pause_removed\` - Triggered when scheduled pause is removed for the subscription. \* \`subscription_resumed\` - Sent when the subscription is moved from paused state to active state \* \`subscription_resumption_scheduled\` - Triggered when the subscription resumption is scheduled. \* \`subscription_scheduled_resumption_removed\` - Triggered when scheduled resumption is removed for the subscription. \* \`subscription_advance_invoice_schedule_added\` - Triggered when advance invoice is scheduled for a subscription. \* \`subscription_advance_invoice_schedule_updated\` - Triggered when scheduled advance invoice is updated for a subscription. \* \`subscription_advance_invoice_schedule_removed\` - Triggered when scheduled advance invoice is removed for a subscription. \* \`pending_invoice_created\` - Event triggered (in the case of metered billing) when a "Pending" invoice is created that has usage related charges or line items to be added, before being closed. This is triggered only when the "Notify for Pending Invoices" option is enabled. \* \`pending_invoice_updated\` - Event triggered when the option "Notify and wait to close invoices" is enabled, and the 'Pending' invoice is updated. \* \`invoice_generated\` - Event triggered when a new invoice is generated. In case of metered billing, this event is triggered when a "Pending" invoice is closed. \* \`invoice_generated_with_backdating\` - Event triggered when a new invoice is generated with past date as invoice date. \* \`invoice_updated\` - Triggered when the invoice's shipping/billing address is updated, if the invoice is voided, or when the amount due is modified due to payments applied/removed. \* \`invoice_deleted\` - Event triggered when an invoice is deleted. \* \`credit_note_created\` - Sent when a credit note is created \* \`credit_note_created_with_backdating\` - Sent when a credit note is created with past date as credit note date \* \`credit_note_updated\` - Sent when a credit note is updated \* \`credit_note_deleted\` - Sent when a credit note is deleted \* \`subscription_renewal_reminder\` - Sent before each subscription's renewal based on plan's period \* \`add_usages_reminder\` - Sent every month day before renewal date of plan's period \* \`transaction_created\` - Triggered when a transaction is recorded \* \`transaction_updated\` - Triggered when a transaction is updated. E.g. (1) When a transaction is removed, (2) or when an excess payment is applied on an invoice, (3) or when amount_capturable gets updated. \* \`transaction_deleted\` - Triggered when a transaction is deleted. \* \`payment_succeeded\` - Sent when the payment is successfully collected \* \`payment_failed\` - Sent when attempt to charge customer's credit card fails \* \`payment_refunded\` - Sent when a payment refund is made \* \`payment_initiated\` - Sent when a payment is initiated via direct debit \* \`refund_initiated\` - Sent when a refund is initiated via direct debit \* \`netd_payment_due_reminder\` - \*\*(Deprecated)\*\* Sent when a invoice's due period is about to end \* \`authorization_succeeded\` - Triggered when a authorization transaction is created. \* \`authorization_voided\` - Triggered when a authorization transaction is voided. Authorization can be voided either manually or when blocked funds are released by the gateway after a certain period of time. \* \`card_added\` - Sent when a card is added for a customer. \* \`card_updated\` - Sent when the card is updated for a customer. \* \`card_expiry_reminder\` - Sent when the customer's credit card is expiring soon. Sent 30 days before the expiry date. \* \`card_expired\` - Sent when a card for a customer is expired \* \`card_deleted\` - Sent when a card is deleted for a customer \* \`payment_source_added\` - Sent when a payment source is added for a customer. \* \`payment_source_updated\` - Sent when the payment source is updated for a customer or when role is assigned to the payment source. \* \`payment_source_deleted\` - Sent when a payment source is deleted for a customer \* \`payment_source_expiring\` - Sent when the customer's payment source is expiring soon. Sent 30 days before the expiry date. \* \`payment_source_expired\` - Sent when a payment source for a customer is expired \* \`payment_source_locally_deleted\` - Sent when a payment source for a customer removed from Chargebee \* \`virtual_bank_account_added\` - Sent when a virtual bank account is added for a customer. \* \`virtual_bank_account_updated\` - Sent when the virtual bank account is updated for a customer. \* \`virtual_bank_account_deleted\` - Sent when a virtual bank account is deleted for a customer. \* \`token_created\` - Sent when a Token is created \* \`token_consumed\` - Sent when a Token is consumed \* \`token_expired\` - Sent when a Token is expired \* \`unbilled_charges_created\` - Triggered when unbilled charges are created \* \`unbilled_charges_voided\` - Triggered when unbilled charges are voided \* \`unbilled_charges_deleted\` - Triggered when unbilled charges are deleted \* \`unbilled_charges_invoiced\` - Triggered when unbilled charges are invoiced \* \`order_created\` - Triggered when order is created \* \`order_updated\` - Triggered when order is updated \* \`order_cancelled\` - Triggered when order is cancelled \* \`order_delivered\` - Triggered when order is marked as delivered \* \`order_returned\` - Triggered when order is marked as returned \* \`order_ready_to_process\` - Triggered when order reaches it's order date \* \`order_ready_to_ship\` - Triggered when order reaches it's shipping date \* \`order_deleted\` - Triggered when order is deleted \* \`order_resent\` - Triggered when order is resent \* \`quote_created\` - Triggered when quote is created \* \`quote_updated\` - Triggered when quote is updated \* \`quote_deleted\` - Triggered when quote is deleted \* \`tax_withheld_recorded\` - Triggered when a tax withheld is recorded for an invoice \* \`tax_withheld_deleted\` - Triggered when a tax withheld is deleted \* \`tax_withheld_refunded\` - Sent when a tax withheld refund is made \* \`gift_scheduled\` - Triggered when a new gift is created \* \`gift_unclaimed\` - Triggered when a new gift is unclaimed and is ready to be claimed \* \`gift_claimed\` - Triggered when a gift is claimed \* \`gift_expired\` - Triggered when a gift expires \* \`gift_cancelled\` - Triggered when a gift is cancelled. \* \`gift_updated\` - Triggered when a gift is updated \* \`hierarchy_created\` - Triggered when a hierarchy is created \* \`hierarchy_deleted\` - Triggered when a hierarchy is deleted \* \`payment_intent_created\` - Sent when a Payment intent is created \* \`payment_intent_updated\` - Sent when a Payment intent is updated \* \`contract_term_created\` - Triggered when new contract term is created \* \`contract_term_renewed\` - Triggered when new contract term is renewed \* \`contract_term_terminated\` - Triggered when contract term is terminated \* \`contract_term_completed\` - Triggered when contract term is completed \* \`contract_term_cancelled\` - Triggered when contract term is cancelled \* \`item_family_created\` - Triggered when an item family is created \* \`item_family_updated\` - Triggered when an item family is updated \* \`item_family_deleted\` - Triggered when an item family is deleted \* \`item_created\` - Triggered when an item is created \* \`item_updated\` - Triggered when an item is updated \* \`item_deleted\` - Triggered when an item is deleted \* \`item_price_created\` - Triggered when an item price is created \* \`item_price_updated\` - Triggered when an item price is updated \* \`item_price_deleted\` - Triggered when an item price is deleted \* \`attached_item_created\` - Triggered when an Attached item is created \* \`attached_item_updated\` - Triggered when an Attached item is updated \* \`attached_item_deleted\` - Triggered when an Attached item is deleted \* \`differential_price_created\` - Triggered when a differential price is created \* \`differential_price_updated\` - Triggered when a differential price is updated \* \`differential_price_deleted\` - Triggered when a differential price is deleted \* \`feature_created\` - Triggered when a feature is created. \* \`feature_updated\` - Triggered when an feature is updated \* \`feature_deleted\` - Triggered when a feature is deleted \* \`feature_activated\` - Triggered when a feature \`status\` transitions to \`active\` for the first time. \* \`feature_reactivated\` - Triggered when a feature \`status\` transitions to \`active\` for the second time or more. \* \`feature_archived\` - Triggered when an feature is archived \* \`item_entitlements_updated\` - Triggered when item entitlements are updated to a feature \* \`entitlement_overrides_updated\` - Triggered when an override entitlement is updated \* \`entitlement_overrides_removed\` - Triggered when an override entitlement is removed \* \`item_entitlements_removed\` - Triggered when item entitlements are removed for a feature \* \`entitlement_overrides_auto_removed\` - Triggered when Subscription entitlements overrides for a feature are auto removed after expiry \* \`subscription_entitlements_created\` - Triggered when subscription entitlements are created for a new subscription \* \`business_entity_created\` - Sent when a business entity is created. \* \`business_entity_updated\` - Sent when a business entity is updated. \* \`business_entity_deleted\` - Sent when a business entity is deleted. \* \`purchase_created\` - Triggered when purchase action is completed successfully \* \`voucher_created\` - Triggered when a payment voucher is created \* \`voucher_expired\` - Triggered when a payment voucher is expired \* \`voucher_create_failed\` - Triggered when a payment voucher creation is failed \* \`product_created\` - Triggered when the product create is completed successfully \* \`product_updated\` - Triggered when the product update is completed successfully \* \`product_deleted\` - Triggered when the product delete is completed successfully \* \`variant_created\` - Triggered when product variant create completed successfully \* \`variant_updated\` - Triggered when product variant update completed successfully \* \`variant_deleted\` - Triggered when product variant delete completed successfully
     */
    is_not?: ListEventsEventTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Source of the event. Possible values are : <dfn>admin_console, api, scheduled_job, hosted_page, portal, system, none, js_api, migration, bulk_operation, external_service.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>source[is_not] = "hosted_page"</i>
   */
  source?: {
    /** \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`scheduled_job\` - Operation made through the Scheduled Jobs \* \`hosted_page\` - Operation made through the Hosted Pages \* \`portal\` - Operation made through [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html) \* \`system\` - Operation that are triggered by ChargeBee System \* \`none\` - If no source can be identified for an operation \* \`js_api\` - Operation made through the JS API \* \`migration\` - Deprecated \* \`bulk_operation\` - Operation that are triggerd through bulk operation. \* \`external_service\` - Operation that are triggered via webhook
     */
    is?: ListEventsSourceIs;
    /** \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`scheduled_job\` - Operation made through the Scheduled Jobs \* \`hosted_page\` - Operation made through the Hosted Pages \* \`portal\` - Operation made through [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html) \* \`system\` - Operation that are triggered by ChargeBee System \* \`none\` - If no source can be identified for an operation \* \`js_api\` - Operation made through the JS API \* \`migration\` - Deprecated \* \`bulk_operation\` - Operation that are triggerd through bulk operation. \* \`external_service\` - Operation that are triggered via webhook
     */
    is_not?: ListEventsSourceIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this event had occurred.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>occurred_at[after] = "1349116200"</i>
   */
  occurred_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>occurred_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "occurred_at"</i><br>This will sort the result based on the 'occurred_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListEventsSortByAsc;
    desc?: ListEventsSortByDesc;
  };
};

export type ListUsages200ListItem = {
  usage: Usage;
};

export type ListUsages200 = {
  list: ListUsages200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListUsagesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListUsagesSortByDesc =
  (typeof ListUsagesSortByDesc)[keyof typeof ListUsagesSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUsagesSortByDesc = {
  usage_date: "usage_date",
} as const;

export type ListUsagesSortByAsc =
  (typeof ListUsagesSortByAsc)[keyof typeof ListUsagesSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUsagesSortByAsc = {
  usage_date: "usage_date",
} as const;

/**
 * \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`bulk_operation\` - Operation that are triggerd through bulk operation.

 */
export type ListUsagesSourceIsNot =
  (typeof ListUsagesSourceIsNot)[keyof typeof ListUsagesSourceIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUsagesSourceIsNot = {
  admin_console: "admin_console",
  api: "api",
  bulk_operation: "bulk_operation",
} as const;

/**
 * \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`bulk_operation\` - Operation that are triggerd through bulk operation.

 */
export type ListUsagesSourceIs =
  (typeof ListUsagesSourceIs)[keyof typeof ListUsagesSourceIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUsagesSourceIs = {
  admin_console: "admin_console",
  api: "api",
  bulk_operation: "bulk_operation",
} as const;

export type ListUsagesInvoiceIdIsPresent =
  (typeof ListUsagesInvoiceIdIsPresent)[keyof typeof ListUsagesInvoiceIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUsagesInvoiceIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListUsagesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique and immutable id for the usage. If not provided, it is autogenerated.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "usage_lsfja24411"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The id of the <a href="/docs/api/subscriptions?prod_cat_ver=2">subscription</a> to which this usage record belongs.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is] = "active2"</i>
   */
  subscription_id: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
 * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The time at which this usage occurred. Chargebee bills only those usages whose
<code>usage_date</code> falls within a time when the subscription <code>status</code> was <code>active</code> or <code>non_renewing</code>. However, the remaining usage records are still stored and are
<a href="/docs/api/usages?prod_cat_ver=2#retrieve_a_usage">retrievable</a>. <br> <b>Note:</b> If <code>usage_date</code> corresponds to a time already invoiced, then it is stored but never invoiced unless the <a href="/docs/api/subscriptions?prod_cat_ver=2#regenerate_an_invoice">invoice is regenerated</a>.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>usage_date[after] = "1601220958"</i>
 */
  usage_date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The id of the <a href="/docs/api/item_prices?prod_cat_ver=2">item price</a> to which this usage belongs. The item price must be a part of the subscription or should have been part of it historically.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_price_id[is] = "sprout"</i>
   */
  item_price_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>When the usage has been invoiced, this is the <code>id</code> of the <a href="/docs/api/invoices?prod_cat_ver=2">invoice</a>. This is cleared when the invoice is <code>voided</code> or deleted.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>invoice_id[is] = "null"</i>
   */
  invoice_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListUsagesInvoiceIdIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The source from which the usage record was created. Possible values are : <dfn>admin_console, api, bulk_operation.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>source[is] = "api"</i>
   */
  source?: {
    /** \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`bulk_operation\` - Operation that are triggerd through bulk operation.
     */
    is?: ListUsagesSourceIs;
    /** \* \`admin_console\` - Operation made through the Chargebee admin UI \* \`api\` - Operation made through the API \* \`bulk_operation\` - Operation that are triggerd through bulk operation.
     */
    is_not?: ListUsagesSourceIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>usage_date</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "usage_date"</i><br>This will sort the result based on the 'usage_date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListUsagesSortByAsc;
    desc?: ListUsagesSortByDesc;
  };
};

export type DeleteAUsage200 = {
  usage: Usage;
};

export type DeleteAUsageBody = {
  /** A unique and immutable id for the usage. If not provided, it is autogenerated.
   */
  id: string;
};

export type DeleteAUsageChargebeeEventWebhook =
  (typeof DeleteAUsageChargebeeEventWebhook)[keyof typeof DeleteAUsageChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAUsageChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAUsageChargebeeEventEmail =
  (typeof DeleteAUsageChargebeeEventEmail)[keyof typeof DeleteAUsageChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAUsageChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAUsageChargebeeEventActions =
  (typeof DeleteAUsageChargebeeEventActions)[keyof typeof DeleteAUsageChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAUsageChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAUsageHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAUsageChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAUsageChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAUsageChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAUsage200 = {
  usage: Usage;
};

export type CreateAUsageBody = {
  /** A unique and immutable id for the usage. If not provided, it is autogenerated.
   */
  id?: string;
  /** The id of the [item price](/docs/api/item_prices?prod_cat_ver=2) to which this usage belongs. The item price must be a part of the subscription or should have been part of it historically.
   */
  item_price_id: string;
  /** The quantity specified for this usage record.
   */
  quantity: string;
  /** The time at which this usage occurred. Chargebee bills only those usages whose `usage_date` falls within a time when the subscription `status` was `active` or `non_renewing`. However, the remaining usage records are still stored and are [retrievable](/docs/api/usages?prod_cat_ver=2#retrieve_a_usage).
   **Note:** If `usage_date` corresponds to a time already invoiced, then it is stored but never invoiced unless the [invoice is regenerated](/docs/api/subscriptions?prod_cat_ver=2#regenerate_an_invoice).
   */
  usage_date: number;
  /** A note for this usage record. This appears against the usage on the Chargebee UI. This note is not displayed on any customer-facing document or interface such as [invoice PDFs](/docs/api/invoices?prod_cat_ver=2#retrieve_invoice_as_pdf) or [Hosted Pages](/docs/api/hosted_pages?prod_cat_ver=2).
   */
  note?: string;
};

export type CreateAUsageChargebeeEventWebhook =
  (typeof CreateAUsageChargebeeEventWebhook)[keyof typeof CreateAUsageChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAUsageChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAUsageChargebeeEventEmail =
  (typeof CreateAUsageChargebeeEventEmail)[keyof typeof CreateAUsageChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAUsageChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAUsageChargebeeEventActions =
  (typeof CreateAUsageChargebeeEventActions)[keyof typeof CreateAUsageChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAUsageChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAUsageHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAUsageChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAUsageChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAUsageChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAUsage200 = {
  usage: Usage;
};

export type RetrieveAUsageHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAUsageParams = {
  /**
   * A unique and immutable id for the usage. If not provided, it is autogenerated.
   */
  id: string;
};

export type RetrieveUsagesForAnInvoiceAsPdf200 = {
  download: Download;
};

/**
 * Parameters for invoice

 */
export type RetrieveUsagesForAnInvoiceAsPdfBodyInvoice = {
  /** The invoice number. Acts as a identifier for invoice and typically generated sequentially.
   */
  id: string;
};

/**
 * Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser

 */
export type RetrieveUsagesForAnInvoiceAsPdfBodyDispositionType =
  (typeof RetrieveUsagesForAnInvoiceAsPdfBodyDispositionType)[keyof typeof RetrieveUsagesForAnInvoiceAsPdfBodyDispositionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveUsagesForAnInvoiceAsPdfBodyDispositionType = {
  attachment: "attachment",
  inline: "inline",
} as const;

export type RetrieveUsagesForAnInvoiceAsPdfBody = {
  /** Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser
   */
  disposition_type?: RetrieveUsagesForAnInvoiceAsPdfBodyDispositionType;
  /** Parameters for invoice
   */
  invoice?: RetrieveUsagesForAnInvoiceAsPdfBodyInvoice;
};

export type RetrieveUsagesForAnInvoiceAsPdfChargebeeEventWebhook =
  (typeof RetrieveUsagesForAnInvoiceAsPdfChargebeeEventWebhook)[keyof typeof RetrieveUsagesForAnInvoiceAsPdfChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveUsagesForAnInvoiceAsPdfChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveUsagesForAnInvoiceAsPdfChargebeeEventEmail =
  (typeof RetrieveUsagesForAnInvoiceAsPdfChargebeeEventEmail)[keyof typeof RetrieveUsagesForAnInvoiceAsPdfChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveUsagesForAnInvoiceAsPdfChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveUsagesForAnInvoiceAsPdfChargebeeEventActions =
  (typeof RetrieveUsagesForAnInvoiceAsPdfChargebeeEventActions)[keyof typeof RetrieveUsagesForAnInvoiceAsPdfChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveUsagesForAnInvoiceAsPdfChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveUsagesForAnInvoiceAsPdfHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RetrieveUsagesForAnInvoiceAsPdfChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RetrieveUsagesForAnInvoiceAsPdfChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RetrieveUsagesForAnInvoiceAsPdfChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAnAddress200 = {
  address: Address;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated. \* invalid - Address is invalid. \* valid - Address was validated successfully.

 */
export type UpdateAnAddressBodyValidationStatus =
  (typeof UpdateAnAddressBodyValidationStatus)[keyof typeof UpdateAnAddressBodyValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAddressBodyValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

export type UpdateAnAddressBody = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  subscription_id: string;
  /** Label to identify the address. This is unique for all the address for a subscription.
   */
  label: string;
  /** First name.
   */
  first_name?: string;
  /** Last name.
   */
  last_name?: string;
  /** Email.
   */
  email?: string;
  /** Company name.
   */
  company?: string;
  /** Phone number.
   */
  phone?: string;
  /** Address line 1.
   */
  addr?: string;
  /** Address line 2.
   */
  extended_addr?: string;
  /** Address line 3.
   */
  extended_addr2?: string;
  /** Name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated. \* invalid - Address is invalid. \* valid - Address was validated successfully.
   */
  validation_status?: UpdateAnAddressBodyValidationStatus;
};

export type UpdateAnAddressChargebeeEventWebhook =
  (typeof UpdateAnAddressChargebeeEventWebhook)[keyof typeof UpdateAnAddressChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAddressChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnAddressChargebeeEventEmail =
  (typeof UpdateAnAddressChargebeeEventEmail)[keyof typeof UpdateAnAddressChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAddressChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnAddressChargebeeEventActions =
  (typeof UpdateAnAddressChargebeeEventActions)[keyof typeof UpdateAnAddressChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnAddressChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnAddressHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAnAddressChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAnAddressChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAnAddressChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnAddress200 = {
  address: Address;
};

export type RetrieveAnAddressHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnAddressParams = {
  /**
   * A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  subscription_id: string;
  /**
   * Label to identify the address. This is unique for all the address for a subscription.
   */
  label: string;
};

export type ArchiveACouponCode200 = {
  coupon_code: CouponCode;
};

export type ArchiveACouponCodeChargebeeEventWebhook =
  (typeof ArchiveACouponCodeChargebeeEventWebhook)[keyof typeof ArchiveACouponCodeChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchiveACouponCodeChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ArchiveACouponCodeChargebeeEventEmail =
  (typeof ArchiveACouponCodeChargebeeEventEmail)[keyof typeof ArchiveACouponCodeChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchiveACouponCodeChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ArchiveACouponCodeChargebeeEventActions =
  (typeof ArchiveACouponCodeChargebeeEventActions)[keyof typeof ArchiveACouponCodeChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchiveACouponCodeChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ArchiveACouponCodeHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ArchiveACouponCodeChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ArchiveACouponCodeChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ArchiveACouponCodeChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveACouponCode200 = {
  coupon_code: CouponCode;
};

export type RetrieveACouponCodeHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCouponCodes200ListItem = {
  coupon_code: CouponCode;
};

export type ListCouponCodes200 = {
  list: ListCouponCodes200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCouponCodesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`not_redeemed\` - Can be applied to a subscription. \* \`redeemed\` - Cannot be applied to a subscription as the coupon code has been already used. \* \`archived\` - Cannot be applied to a subscription as it has been made inactive.

 */
export type ListCouponCodesStatusIsNot =
  (typeof ListCouponCodesStatusIsNot)[keyof typeof ListCouponCodesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponCodesStatusIsNot = {
  not_redeemed: "not_redeemed",
  redeemed: "redeemed",
  archived: "archived",
} as const;

/**
 * \* \`not_redeemed\` - Can be applied to a subscription. \* \`redeemed\` - Cannot be applied to a subscription as the coupon code has been already used. \* \`archived\` - Cannot be applied to a subscription as it has been made inactive.

 */
export type ListCouponCodesStatusIs =
  (typeof ListCouponCodesStatusIs)[keyof typeof ListCouponCodesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponCodesStatusIs = {
  not_redeemed: "not_redeemed",
  redeemed: "redeemed",
  archived: "archived",
} as const;

export type ListCouponCodesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Unique coupon code that can be redeemed only once.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>code[is_not] = "OFF2009"</i>
   */
  code?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Id of the main coupon resource.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>coupon_id[is] = "OFF20"</i>
   */
  coupon_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Coupon set name to which this coupon code would be grouped under. If the coupon set with the passed name is not present, a new coupon set will be created.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>coupon_set_name[is_not] = "OFF20"</i>
   */
  coupon_set_name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Status of the coupon code. Possible values are : <dfn>not_redeemed, redeemed, archived.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "redeemed"</i>
   */
  status?: {
    /** \* \`not_redeemed\` - Can be applied to a subscription. \* \`redeemed\` - Cannot be applied to a subscription as the coupon code has been already used. \* \`archived\` - Cannot be applied to a subscription as it has been made inactive.
     */
    is?: ListCouponCodesStatusIs;
    /** \* \`not_redeemed\` - Can be applied to a subscription. \* \`redeemed\` - Cannot be applied to a subscription as the coupon code has been already used. \* \`archived\` - Cannot be applied to a subscription as it has been made inactive.
     */
    is_not?: ListCouponCodesStatusIsNot;
    in?: string;
    not_in?: string;
  };
};

export type DeleteACouponSet200 = {
  coupon_set: CouponSet;
};

export type DeleteACouponSetChargebeeEventWebhook =
  (typeof DeleteACouponSetChargebeeEventWebhook)[keyof typeof DeleteACouponSetChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACouponSetChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACouponSetChargebeeEventEmail =
  (typeof DeleteACouponSetChargebeeEventEmail)[keyof typeof DeleteACouponSetChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACouponSetChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACouponSetChargebeeEventActions =
  (typeof DeleteACouponSetChargebeeEventActions)[keyof typeof DeleteACouponSetChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACouponSetChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACouponSetHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteACouponSetChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteACouponSetChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteACouponSetChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteUnusedCouponCodes200 = {
  coupon_set: CouponSet;
};

export type DeleteUnusedCouponCodesChargebeeEventWebhook =
  (typeof DeleteUnusedCouponCodesChargebeeEventWebhook)[keyof typeof DeleteUnusedCouponCodesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUnusedCouponCodesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteUnusedCouponCodesChargebeeEventEmail =
  (typeof DeleteUnusedCouponCodesChargebeeEventEmail)[keyof typeof DeleteUnusedCouponCodesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUnusedCouponCodesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteUnusedCouponCodesChargebeeEventActions =
  (typeof DeleteUnusedCouponCodesChargebeeEventActions)[keyof typeof DeleteUnusedCouponCodesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUnusedCouponCodesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteUnusedCouponCodesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteUnusedCouponCodesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteUnusedCouponCodesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteUnusedCouponCodesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AddCouponCodesToCouponSet200 = {
  coupon_set: CouponSet;
};

export type AddCouponCodesToCouponSetBody = {
  /** You can pass up to 100 values per API call. You can also use the Chargebee UI to pass up to 1000 codes per operation. There is no limit on the total number of coupon codes that can be included in a coupon set.
   */
  code?: string[];
};

export type AddCouponCodesToCouponSetChargebeeEventWebhook =
  (typeof AddCouponCodesToCouponSetChargebeeEventWebhook)[keyof typeof AddCouponCodesToCouponSetChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddCouponCodesToCouponSetChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddCouponCodesToCouponSetChargebeeEventEmail =
  (typeof AddCouponCodesToCouponSetChargebeeEventEmail)[keyof typeof AddCouponCodesToCouponSetChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddCouponCodesToCouponSetChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddCouponCodesToCouponSetChargebeeEventActions =
  (typeof AddCouponCodesToCouponSetChargebeeEventActions)[keyof typeof AddCouponCodesToCouponSetChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddCouponCodesToCouponSetChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddCouponCodesToCouponSetHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddCouponCodesToCouponSetChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddCouponCodesToCouponSetChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddCouponCodesToCouponSetChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveACouponSet200 = {
  coupon_set: CouponSet;
};

export type RetrieveACouponSetHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateACouponSet200 = {
  coupon_set: CouponSet;
};

/**
 * A set of key-value pairs stored as additional information for the coupon set. \[Learn more\](./#meta_data).

 */
export type UpdateACouponSetBodyMetaData = { [key: string]: any };

export type UpdateACouponSetBody = {
  /** Name of the coupon set.
   */
  name?: string;
  /** A set of key-value pairs stored as additional information for the coupon set. \[Learn more\](./#meta_data).
   */
  meta_data?: UpdateACouponSetBodyMetaData;
};

export type UpdateACouponSetChargebeeEventWebhook =
  (typeof UpdateACouponSetChargebeeEventWebhook)[keyof typeof UpdateACouponSetChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponSetChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACouponSetChargebeeEventEmail =
  (typeof UpdateACouponSetChargebeeEventEmail)[keyof typeof UpdateACouponSetChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponSetChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACouponSetChargebeeEventActions =
  (typeof UpdateACouponSetChargebeeEventActions)[keyof typeof UpdateACouponSetChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponSetChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACouponSetHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateACouponSetChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateACouponSetChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateACouponSetChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateACouponSet200 = {
  coupon_set: CouponSet;
};

/**
 * A set of key-value pairs stored as additional information for the coupon set. \[Learn more\](./#meta_data).

 */
export type CreateACouponSetBodyMetaData = { [key: string]: any };

export type CreateACouponSetBody = {
  /** Coupon id linked to coupon set.
   */
  coupon_id: string;
  /** Name of the coupon set.
   */
  name: string;
  /** Uniquely identifies a coupon_set.
   */
  id: string;
  /** A set of key-value pairs stored as additional information for the coupon set. \[Learn more\](./#meta_data).
   */
  meta_data?: CreateACouponSetBodyMetaData;
};

export type CreateACouponSetChargebeeEventWebhook =
  (typeof CreateACouponSetChargebeeEventWebhook)[keyof typeof CreateACouponSetChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponSetChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACouponSetChargebeeEventEmail =
  (typeof CreateACouponSetChargebeeEventEmail)[keyof typeof CreateACouponSetChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponSetChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACouponSetChargebeeEventActions =
  (typeof CreateACouponSetChargebeeEventActions)[keyof typeof CreateACouponSetChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponSetChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACouponSetHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateACouponSetChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateACouponSetChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateACouponSetChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCouponSets200ListItem = {
  coupon_set: CouponSet;
};

export type ListCouponSets200 = {
  list: ListCouponSets200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCouponSetsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCouponSetsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Uniquely identifies a coupon_set.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "bulk-codes-1"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Name of the coupon set.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is_not] = "bulk-codes-1"</i>
   */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Coupon id linked to coupon set.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>coupon_id[is] = "OFF2008"</i>
   */
  coupon_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, integer filter</dfn><br>No of coupon codes present in coupon set.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>total_count[gt] = "10"</i>
   */
  total_count?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, integer filter</dfn><br>No of redeemed codes.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>redeemed_count[is] = "5"</i>
   */
  redeemed_count?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, integer filter</dfn><br>No of archived codes.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>archived_count[is] = "2"</i>
   */
  archived_count?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
};

export type CreateACouponForItems200 = {
  coupon: Coupon;
};

/**
 * The type of coupon constraint. \* unique_by - Indicates - when `entity_type` is `customer` - that the coupon can be redeemed only once for every unique value of a specified `customer` attribute. The `customer` attribute is specified using `value`. For example, if `value` is `email`, then the coupon can be redeemed only once for every unique value of `customer.email`. In other words, when there are multiple `customer` records with the same value for `email`, once the coupon has been redeemed for one of those customer records, no further redemptions of the coupon are allowed for any of those `customer` records. \* max_redemptions - The coupon can be redeemed up to a set number of times for a specific resource type. The maximum redemptions are specified using `value`, and the resource type is specified using `entity_type`. For example, if `entity_type` is `customer` and `value` is `10` then the coupon can only be redeemed up to 10 times for any particular `customer` record.

 */
export type CreateACouponForItemsBodyCouponConstraintsTypeItem =
  (typeof CreateACouponForItemsBodyCouponConstraintsTypeItem)[keyof typeof CreateACouponForItemsBodyCouponConstraintsTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyCouponConstraintsTypeItem = {
  max_redemptions: "max_redemptions",
  unique_by: "unique_by",
} as const;

/**
 * The resource type for the constraint. This, along with `type` and `value`, helps define the specific rule applied. \* customer - The constraint is based on `customer` records.

 */
export type CreateACouponForItemsBodyCouponConstraintsEntityTypeItem =
  (typeof CreateACouponForItemsBodyCouponConstraintsEntityTypeItem)[keyof typeof CreateACouponForItemsBodyCouponConstraintsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyCouponConstraintsEntityTypeItem = {
  customer: "customer",
} as const;

/**
 * Parameters for \`coupon_constraints\`. Multiple \`coupon_constraints\` can be passed by specifying unique indices.

 */
export type CreateACouponForItemsBodyCouponConstraints = {
  entity_type: CreateACouponForItemsBodyCouponConstraintsEntityTypeItem[];
  type: CreateACouponForItemsBodyCouponConstraintsTypeItem[];
  /** The value of the coupon constraint. The possible values depend on the value of `constraints[type]`:

* When `type` is `unique_by`, then `value` can be `email` or `id`.

* When `type` is `max_redemptions`, then `value` can be any integer in the range `1` `coupon.max_redemptions`, inclusive.

 */
  value?: string[];
};

/**
 * Item type for which this criteria is applicable for. \* charge - Charge is a type of item \* plan - Plan is a type of item \* addon - Addon is a type of item

 */
export type CreateACouponForItemsBodyItemConstraintCriteriaItemTypeItem =
  (typeof CreateACouponForItemsBodyItemConstraintCriteriaItemTypeItem)[keyof typeof CreateACouponForItemsBodyItemConstraintCriteriaItemTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyItemConstraintCriteriaItemTypeItem = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * Parameters for item_constraint_criteria

 */
export type CreateACouponForItemsBodyItemConstraintCriteria = {
  item_type?: CreateACouponForItemsBodyItemConstraintCriteriaItemTypeItem[];
  /** List of families for which this coupon is applicable.
   */
  item_family_ids?: unknown[][];
  /** List of currencies ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) for which this coupon is applicable.
   */
  currencies?: unknown[][];
  /** Pass the item price period units for this criterion. `period` followed by `period_units`. Such as `[1 day,1 week,3 month,6 month]`
   */
  item_price_periods?: unknown[][];
};

/**
 * Item type for which this criteria is applicable for. \* charge - Charge \* plan - Plan \* addon - Addon

 */
export type CreateACouponForItemsBodyItemConstraintsItemTypeItem =
  (typeof CreateACouponForItemsBodyItemConstraintsItemTypeItem)[keyof typeof CreateACouponForItemsBodyItemConstraintsItemTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyItemConstraintsItemTypeItem = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * Constraint applicable for the item \* specific - Coupon applicable to specific items. \* all - Coupon applicable to all items. \* criteria - Coupon applicable based on criteria. \* none - Coupon not applicable to any items.

 */
export type CreateACouponForItemsBodyItemConstraintsConstraintItem =
  (typeof CreateACouponForItemsBodyItemConstraintsConstraintItem)[keyof typeof CreateACouponForItemsBodyItemConstraintsConstraintItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyItemConstraintsConstraintItem = {
  none: "none",
  all: "all",
  specific: "specific",
  criteria: "criteria",
} as const;

/**
 * Parameters for item_constraints

 */
export type CreateACouponForItemsBodyItemConstraints = {
  constraint: CreateACouponForItemsBodyItemConstraintsConstraintItem[];
  item_type: CreateACouponForItemsBodyItemConstraintsItemTypeItem[];
  /** List of item price ids for which this coupon is applicable.  

**Note:**


When specifying a value for `item_price_ids`, make sure that the value is wrapped in square brackets (`[]`), for example:
`[cbdemo_advanced-USD-Daily]` instead of `cbdemo_advanced-USD-Daily`; otherwise, a `param_wrong_value` error returns.



For information about `item_price_ids`, refer to *Defining Price Points* in [Plans](https://www.chargebee.com/docs/2.0/plans.html#defining-price-points-for-plan), [Addons](https://www.chargebee.com/docs/2.0/addons.html#defining-price-points-for-an-addon),
and [Charges](https://www.chargebee.com/docs/2.0/charges.html#defining-price-points-for-a-charge).
 */
  item_price_ids?: unknown[][];
};

/**
 * Status of the coupon. \* expired - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* archived - Cannot be applied to a subscription. Existing associations remain unaffected. \* active - Can be applied to a subscription. \* deleted - Indicates the coupon has been deleted.

 */
export type CreateACouponForItemsBodyStatus =
  (typeof CreateACouponForItemsBodyStatus)[keyof typeof CreateACouponForItemsBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyStatus = {
  active: "active",
  archived: "archived",
} as const;

/**
 * The unit of time for period. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type). \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.

 */
export type CreateACouponForItemsBodyPeriodUnit =
  (typeof CreateACouponForItemsBodyPeriodUnit)[keyof typeof CreateACouponForItemsBodyPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * A set of key-value pairs stored as additional information for the coupon. \[Learn more\](./#meta_data).

 */
export type CreateACouponForItemsBodyMetaData = { [key: string]: any };

/**
 * Specifies the time duration for which this coupon is attached to the subscription. \* forever - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* one_time - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type CreateACouponForItemsBodyDurationType =
  (typeof CreateACouponForItemsBodyDurationType)[keyof typeof CreateACouponForItemsBodyDurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyDurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the coupon is applied. \* invoice_amount - The coupon is applied to the invoice `sub_total`. \* each_unit_of_specified_items - Discount will be applied to each unit of plan and addon items specified. \* each_specified_item - The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`. \* specified_items_total - Discount will be applied to the total of plan and addon items specified.

 */
export type CreateACouponForItemsBodyApplyOn =
  (typeof CreateACouponForItemsBodyApplyOn)[keyof typeof CreateACouponForItemsBodyApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyApplyOn = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * The type of deduction. \* percentage - The specified percentage will be deducted. \* fixed_amount - The specified amount will be deducted. \* offer_quantity - The specified units will be offered for free.

 */
export type CreateACouponForItemsBodyDiscountType =
  (typeof CreateACouponForItemsBodyDiscountType)[keyof typeof CreateACouponForItemsBodyDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsBodyDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type CreateACouponForItemsBody = {
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.  
**Note:**


When the coupon ID contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
.
 */
  id: string;
  /** The display name used in web interface for identifying the coupon.  
**Note:**


When the name of the coupon set contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the name of the coupon set in the path parameter before making an API call.
.
 */
  name: string;
  /** Display name used in invoice. If it is not configured then name is used in invoice.
   */
  invoice_name?: string;
  /** The type of deduction. \* percentage - The specified percentage will be deducted. \* fixed_amount - The specified amount will be deducted. \* offer_quantity - The specified units will be offered for free.
   */
  discount_type: CreateACouponForItemsBodyDiscountType;
  /** The value of the deduction. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/2.0/supported-currencies.html)) of the coupon. Applicable for *fixed_amount* coupons alone.
   */
  currency_code?: string;
  /** The percentage of the original amount that should be deducted from it.
   */
  discount_percentage?: number;
  /** The amount on the invoice to which the coupon is applied. \* invoice_amount - The coupon is applied to the invoice `sub_total`. \* each_unit_of_specified_items - Discount will be applied to each unit of plan and addon items specified. \* each_specified_item - The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`. \* specified_items_total - Discount will be applied to the total of plan and addon items specified.
   */
  apply_on: CreateACouponForItemsBodyApplyOn;
  /** Specifies the time duration for which this coupon is attached to the subscription. \* forever - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* one_time - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
   */
  duration_type: CreateACouponForItemsBodyDurationType;
  /** **(Deprecated)** The duration of time in months for which the coupon is attached to the subscription. Applicable only when `duration_type` is `limited_period`.
   **Note:** This parameter has been deprecated. Use `period` and `period_unit` instead.
   */
  duration_month?: number;
  /** Date upto which the coupon can be applied to new subscriptions.
   */
  valid_till?: number;
  /** Maximum number of times this coupon can be redeemed.  
**Note:**


If not specified, the coupon can be redeemed an indefinite number of times.
.
 */
  max_redemptions?: number;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** A set of key-value pairs stored as additional information for the coupon. \[Learn more\](./#meta_data).
   */
  meta_data?: CreateACouponForItemsBodyMetaData;
  /** The coupon is included in MRR calculations for your site. This attribute is only applicable for coupons of `duration_type = one_time` and when the feature is enabled in Chargebee. Note: If the site-level setting is to exclude one-time coupons from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean;
  /** The duration of time for which the coupon is attached to the subscription, in `period_units`. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type).
   */
  period?: number;
  /** The unit of time for period. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type). \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.
   */
  period_unit?: CreateACouponForItemsBodyPeriodUnit;
  /** Status of the coupon. \* expired - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* archived - Cannot be applied to a subscription. Existing associations remain unaffected. \* active - Can be applied to a subscription. \* deleted - Indicates the coupon has been deleted.
   */
  status?: CreateACouponForItemsBodyStatus;
  /** Parameters for item_constraints
   */
  item_constraints?: CreateACouponForItemsBodyItemConstraints;
  /** Parameters for item_constraint_criteria
   */
  item_constraint_criteria?: CreateACouponForItemsBodyItemConstraintCriteria;
  /** Parameters for \`coupon_constraints\`. Multiple \`coupon_constraints\` can be passed by specifying unique indices.
   */
  coupon_constraints?: CreateACouponForItemsBodyCouponConstraints;
};

export type CreateACouponForItemsChargebeeEventWebhook =
  (typeof CreateACouponForItemsChargebeeEventWebhook)[keyof typeof CreateACouponForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACouponForItemsChargebeeEventEmail =
  (typeof CreateACouponForItemsChargebeeEventEmail)[keyof typeof CreateACouponForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACouponForItemsChargebeeEventActions =
  (typeof CreateACouponForItemsChargebeeEventActions)[keyof typeof CreateACouponForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACouponForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACouponForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateACouponForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateACouponForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateACouponForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveACoupon200 = {
  coupon: Coupon;
};

export type RetrieveACouponHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CopyACoupon200 = {
  coupon: Coupon;
};

export type CopyACouponBody = {
  /** Your Chargebee site name having the coupon to be copied.
   **Note:** Unless you are copying from a twin site (acme \& acme-test are twin sites), [contact support](https://chargebee.freshdesk.com/support/home) to have this allow-listed.
   */
  from_site: string;
  /** Id of the coupon to be copied. The new coupon created in this site will have the same Id.
   */
  id_at_from_site: string;
  /** Id of copied coupon in this site.
   */
  id?: string;
  /** If copy action is performed as part of Chargebee site merge action, pass the value as true.
   **Note:** If this parameter is passed true coupon state, redemptions, coupon set and coupon codes associated with this coupon will be copied.
   */
  for_site_merging?: boolean;
};

export type CopyACouponChargebeeEventWebhook =
  (typeof CopyACouponChargebeeEventWebhook)[keyof typeof CopyACouponChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CopyACouponChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CopyACouponChargebeeEventEmail =
  (typeof CopyACouponChargebeeEventEmail)[keyof typeof CopyACouponChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CopyACouponChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CopyACouponChargebeeEventActions =
  (typeof CopyACouponChargebeeEventActions)[keyof typeof CopyACouponChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CopyACouponChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CopyACouponHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CopyACouponChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CopyACouponChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CopyACouponChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteACoupon200 = {
  coupon: Coupon;
};

export type DeleteACouponChargebeeEventWebhook =
  (typeof DeleteACouponChargebeeEventWebhook)[keyof typeof DeleteACouponChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACouponChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACouponChargebeeEventEmail =
  (typeof DeleteACouponChargebeeEventEmail)[keyof typeof DeleteACouponChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACouponChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACouponChargebeeEventActions =
  (typeof DeleteACouponChargebeeEventActions)[keyof typeof DeleteACouponChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACouponChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACouponHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteACouponChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteACouponChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteACouponChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UnarchiveACoupon200 = {
  coupon: Coupon;
};

export type UnarchiveACouponChargebeeEventWebhook =
  (typeof UnarchiveACouponChargebeeEventWebhook)[keyof typeof UnarchiveACouponChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnarchiveACouponChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UnarchiveACouponChargebeeEventEmail =
  (typeof UnarchiveACouponChargebeeEventEmail)[keyof typeof UnarchiveACouponChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnarchiveACouponChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UnarchiveACouponChargebeeEventActions =
  (typeof UnarchiveACouponChargebeeEventActions)[keyof typeof UnarchiveACouponChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnarchiveACouponChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UnarchiveACouponHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UnarchiveACouponChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UnarchiveACouponChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UnarchiveACouponChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateACouponForItems200 = {
  coupon: Coupon;
};

/**
 * The type of coupon constraint. \* unique_by - Indicates - when `entity_type` is `customer` - that the coupon can be redeemed only once for every unique value of a specified `customer` attribute. The `customer` attribute is specified using `value`. For example, if `value` is `email`, then the coupon can be redeemed only once for every unique value of `customer.email`. In other words, when there are multiple `customer` records with the same value for `email`, once the coupon has been redeemed for one of those customer records, no further redemptions of the coupon are allowed for any of those `customer` records. \* max_redemptions - The coupon can be redeemed up to a set number of times for a specific resource type. The maximum redemptions are specified using `value`, and the resource type is specified using `entity_type`. For example, if `entity_type` is `customer` and `value` is `10` then the coupon can only be redeemed up to 10 times for any particular `customer` record.

 */
export type UpdateACouponForItemsBodyCouponConstraintsTypeItem =
  (typeof UpdateACouponForItemsBodyCouponConstraintsTypeItem)[keyof typeof UpdateACouponForItemsBodyCouponConstraintsTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyCouponConstraintsTypeItem = {
  max_redemptions: "max_redemptions",
  unique_by: "unique_by",
} as const;

/**
 * The resource type for the constraint. This, along with `type` and `value`, helps define the specific rule applied. \* customer - The constraint is based on `customer` records.

 */
export type UpdateACouponForItemsBodyCouponConstraintsEntityTypeItem =
  (typeof UpdateACouponForItemsBodyCouponConstraintsEntityTypeItem)[keyof typeof UpdateACouponForItemsBodyCouponConstraintsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyCouponConstraintsEntityTypeItem = {
  customer: "customer",
} as const;

/**
 * Parameters for \`coupon_constraints\`. Multiple \`coupon_constraints\` can be passed by specifying unique indices.

 */
export type UpdateACouponForItemsBodyCouponConstraints = {
  entity_type: UpdateACouponForItemsBodyCouponConstraintsEntityTypeItem[];
  type: UpdateACouponForItemsBodyCouponConstraintsTypeItem[];
  /** The value of the coupon constraint. The possible values depend on the value of `constraints[type]`:

* When `type` is `unique_by`, then `value` can be `email` or `id`.

* When `type` is `max_redemptions`, then `value` can be any integer in the range `1` `coupon.max_redemptions`, inclusive.

 */
  value?: string[];
};

/**
 * Item type for which this criteria is applicable for. \* charge - Charge is a type of item \* plan - Plan is a type of item \* addon - Addon is a type of item

 */
export type UpdateACouponForItemsBodyItemConstraintCriteriaItemTypeItem =
  (typeof UpdateACouponForItemsBodyItemConstraintCriteriaItemTypeItem)[keyof typeof UpdateACouponForItemsBodyItemConstraintCriteriaItemTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyItemConstraintCriteriaItemTypeItem = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * Parameters for item_constraint_criteria

 */
export type UpdateACouponForItemsBodyItemConstraintCriteria = {
  item_type?: UpdateACouponForItemsBodyItemConstraintCriteriaItemTypeItem[];
  /** List of families for which this coupon is applicable.
   */
  item_family_ids?: unknown[][];
  /** List of currencies ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) for which this coupon is applicable.
   */
  currencies?: unknown[][];
  /** Pass the item price period units for this criterion. `period` followed by `period_units`. Such as `[1 day,1 week,3 month,6 month]`
   */
  item_price_periods?: unknown[][];
};

/**
 * The amount on the invoice to which the coupon is applied. \* invoice_amount - The coupon is applied to the invoice `sub_total`. \* each_unit_of_specified_items - Discount will be applied to each unit of plan and addon items specified. \* each_specified_item - The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`. \* specified_items_total - Discount will be applied to the total of plan and addon items specified.

 */
export type UpdateACouponForItemsBodyApplyOn =
  (typeof UpdateACouponForItemsBodyApplyOn)[keyof typeof UpdateACouponForItemsBodyApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyApplyOn = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * The type of deduction. \* percentage - The specified percentage will be deducted. \* fixed_amount - The specified amount will be deducted. \* offer_quantity - The specified units will be offered for free.

 */
export type UpdateACouponForItemsBodyDiscountType =
  (typeof UpdateACouponForItemsBodyDiscountType)[keyof typeof UpdateACouponForItemsBodyDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type UpdateACouponForItemsBody = {
  /** The display name used in web interface for identifying the coupon.  
**Note:**


When the name of the coupon set contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the name of the coupon set in the path parameter before making an API call.
.
 */
  name?: string;
  /** Display name used in invoice. If it is not configured then name is used in invoice.
   */
  invoice_name?: string;
  /** The type of deduction. \* percentage - The specified percentage will be deducted. \* fixed_amount - The specified amount will be deducted. \* offer_quantity - The specified units will be offered for free.
   */
  discount_type?: UpdateACouponForItemsBodyDiscountType;
  /** The value of the deduction. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/2.0/supported-currencies.html)) of the coupon. Applicable for *fixed_amount* coupons alone.
   */
  currency_code?: string;
  /** The percentage of the original amount that should be deducted from it.
   */
  discount_percentage?: number;
  /** The amount on the invoice to which the coupon is applied. \* invoice_amount - The coupon is applied to the invoice `sub_total`. \* each_unit_of_specified_items - Discount will be applied to each unit of plan and addon items specified. \* each_specified_item - The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`. \* specified_items_total - Discount will be applied to the total of plan and addon items specified.
   */
  apply_on?: UpdateACouponForItemsBodyApplyOn;
  /** Specifies the time duration for which this coupon is attached to the subscription. \* forever - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* one_time - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
   */
  duration_type?: UpdateACouponForItemsBodyDurationType;
  /** **(Deprecated)** The duration of time in months for which the coupon is attached to the subscription. Applicable only when `duration_type` is `limited_period`.
   **Note:** This parameter has been deprecated. Use `period` and `period_unit` instead.
   */
  duration_month?: number;
  /** Date upto which the coupon can be applied to new subscriptions.
   */
  valid_till?: number;
  /** Maximum number of times this coupon can be redeemed.  
**Note:**


If not specified, the coupon can be redeemed an indefinite number of times.
.
 */
  max_redemptions?: number;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** A set of key-value pairs stored as additional information for the coupon. \[Learn more\](./#meta_data).
   */
  meta_data?: UpdateACouponForItemsBodyMetaData;
  /** The coupon is included in MRR calculations for your site. This attribute is only applicable for coupons of `duration_type = one_time` and when the feature is enabled in Chargebee. Note: If the site-level setting is to exclude one-time coupons from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean;
  /** The duration of time for which the coupon is attached to the subscription, in `period_units`. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type).
   */
  period?: number;
  /** The unit of time for period. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type). \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.
   */
  period_unit?: UpdateACouponForItemsBodyPeriodUnit;
  /** Parameters for item_constraints
   */
  item_constraints?: UpdateACouponForItemsBodyItemConstraints;
  /** Parameters for item_constraint_criteria
   */
  item_constraint_criteria?: UpdateACouponForItemsBodyItemConstraintCriteria;
  /** Parameters for \`coupon_constraints\`. Multiple \`coupon_constraints\` can be passed by specifying unique indices.
   */
  coupon_constraints?: UpdateACouponForItemsBodyCouponConstraints;
};

/**
 * Item type for which this criteria is applicable for. \* charge - Charge \* plan - Plan \* addon - Addon

 */
export type UpdateACouponForItemsBodyItemConstraintsItemTypeItem =
  (typeof UpdateACouponForItemsBodyItemConstraintsItemTypeItem)[keyof typeof UpdateACouponForItemsBodyItemConstraintsItemTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyItemConstraintsItemTypeItem = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * Constraint applicable for the item \* specific - Coupon applicable to specific items. \* all - Coupon applicable to all items. \* criteria - Coupon applicable based on criteria. \* none - Coupon not applicable to any items.

 */
export type UpdateACouponForItemsBodyItemConstraintsConstraintItem =
  (typeof UpdateACouponForItemsBodyItemConstraintsConstraintItem)[keyof typeof UpdateACouponForItemsBodyItemConstraintsConstraintItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyItemConstraintsConstraintItem = {
  none: "none",
  all: "all",
  specific: "specific",
  criteria: "criteria",
} as const;

/**
 * Parameters for item_constraints

 */
export type UpdateACouponForItemsBodyItemConstraints = {
  constraint: UpdateACouponForItemsBodyItemConstraintsConstraintItem[];
  item_type: UpdateACouponForItemsBodyItemConstraintsItemTypeItem[];
  /** List of item price ids for which this coupon is applicable.  

**Note:**


When specifying a value for `item_price_ids`, make sure that the value is wrapped in square brackets (`[]`), for example:
`[cbdemo_advanced-USD-Daily]` instead of `cbdemo_advanced-USD-Daily`; otherwise, a `param_wrong_value` error returns.



For information about `item_price_ids`, refer to *Defining Price Points* in [Plans](https://www.chargebee.com/docs/2.0/plans.html#defining-price-points-for-plan), [Addons](https://www.chargebee.com/docs/2.0/addons.html#defining-price-points-for-an-addon),
and [Charges](https://www.chargebee.com/docs/2.0/charges.html#defining-price-points-for-a-charge).
 */
  item_price_ids?: unknown[][];
};

/**
 * The unit of time for period. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type). \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.

 */
export type UpdateACouponForItemsBodyPeriodUnit =
  (typeof UpdateACouponForItemsBodyPeriodUnit)[keyof typeof UpdateACouponForItemsBodyPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * A set of key-value pairs stored as additional information for the coupon. \[Learn more\](./#meta_data).

 */
export type UpdateACouponForItemsBodyMetaData = { [key: string]: any };

/**
 * Specifies the time duration for which this coupon is attached to the subscription. \* forever - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* one_time - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type UpdateACouponForItemsBodyDurationType =
  (typeof UpdateACouponForItemsBodyDurationType)[keyof typeof UpdateACouponForItemsBodyDurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsBodyDurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

export type UpdateACouponForItemsChargebeeEventWebhook =
  (typeof UpdateACouponForItemsChargebeeEventWebhook)[keyof typeof UpdateACouponForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACouponForItemsChargebeeEventEmail =
  (typeof UpdateACouponForItemsChargebeeEventEmail)[keyof typeof UpdateACouponForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACouponForItemsChargebeeEventActions =
  (typeof UpdateACouponForItemsChargebeeEventActions)[keyof typeof UpdateACouponForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACouponForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACouponForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateACouponForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateACouponForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateACouponForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCoupons200ListItem = {
  coupon: Coupon;
};

export type ListCoupons200 = {
  list: ListCoupons200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCouponsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCouponsSortByDesc =
  (typeof ListCouponsSortByDesc)[keyof typeof ListCouponsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsSortByDesc = {
  created_at: "created_at",
} as const;

export type ListCouponsSortByAsc =
  (typeof ListCouponsSortByAsc)[keyof typeof ListCouponsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsSortByAsc = {
  created_at: "created_at",
} as const;

/**
 * \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.

 */
export type ListCouponsApplyOnIsNot =
  (typeof ListCouponsApplyOnIsNot)[keyof typeof ListCouponsApplyOnIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsApplyOnIsNot = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.

 */
export type ListCouponsApplyOnIs =
  (typeof ListCouponsApplyOnIs)[keyof typeof ListCouponsApplyOnIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsApplyOnIs = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.

 */
export type ListCouponsStatusIsNot =
  (typeof ListCouponsStatusIsNot)[keyof typeof ListCouponsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsStatusIsNot = {
  active: "active",
  expired: "expired",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.

 */
export type ListCouponsStatusIs =
  (typeof ListCouponsStatusIs)[keyof typeof ListCouponsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsStatusIs = {
  active: "active",
  expired: "expired",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type ListCouponsDurationTypeIsNot =
  (typeof ListCouponsDurationTypeIsNot)[keyof typeof ListCouponsDurationTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsDurationTypeIsNot = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type ListCouponsDurationTypeIs =
  (typeof ListCouponsDurationTypeIs)[keyof typeof ListCouponsDurationTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsDurationTypeIs = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.

 */
export type ListCouponsDiscountTypeIsNot =
  (typeof ListCouponsDiscountTypeIsNot)[keyof typeof ListCouponsDiscountTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsDiscountTypeIsNot = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.

 */
export type ListCouponsDiscountTypeIs =
  (typeof ListCouponsDiscountTypeIs)[keyof typeof ListCouponsDiscountTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCouponsDiscountTypeIs = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type ListCouponsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
 * <dfn class="text-muted">optional, string filter</dfn><br><p>Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.</p>
<div class="alert alert-info">
    <p><strong>Note:</strong></p>
    <p>
         When the coupon ID contains a special character; for example: <code>#</code>, the API returns an error.
         Make sure that you <a href="https://www.urlencoder.org/">encode</a> the coupon ID in the path parameter before making an API call.
    </p>
</div>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "OFF2008"</i>
 */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
 * <dfn class="text-muted">optional, string filter</dfn><br><p>The display name used in web interface for identifying the coupon.</p>
<div class="alert alert-info">
    <p><strong>Note:</strong></p>
    <p>
         When the name of the coupon set contains a special character; for example: <code>#</code>, the API returns an error.
         Make sure that you <a href="https://www.urlencoder.org/">encode</a> the name of the coupon set in the path parameter before making an API call.
    </p>
</div>.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>name[is_not] = "Offer 10"</i>
 */
  name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The type of deduction. Possible values are : <dfn>fixed_amount, percentage.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>discount_type[is] = "fixed_amount"</i>
   */
  discount_type?: {
    /** \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.
     */
    is?: ListCouponsDiscountTypeIs;
    /** \* \`fixed_amount\` - The specified amount will be deducted. \* \`percentage\` - The specified percentage will be deducted. \* \`offer_quantity\` - \*\*(Deprecated)\*\* The specified units will be offered for free.
     */
    is_not?: ListCouponsDiscountTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Specifies the time duration for which this coupon is attached to the subscription. Possible values are : <dfn>one_time, forever, limited_period.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>duration_type[is] = "forever"</i>
   */
  duration_type?: {
    /** \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
     */
    is?: ListCouponsDurationTypeIs;
    /** \* \`one_time\` - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* \`forever\` - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* \`limited_period\` - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
     */
    is_not?: ListCouponsDurationTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Status of the coupon. Possible values are : <dfn>active, expired, archived, deleted.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is_not] = "active"</i>
   */
  status?: {
    /** \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.
     */
    is?: ListCouponsStatusIs;
    /** \* \`active\` - Can be applied to a subscription. \* \`expired\` - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* \`archived\` - Cannot be applied to a subscription. Existing associations remain unaffected. \* \`deleted\` - Indicates the coupon has been deleted.
     */
    is_not?: ListCouponsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The amount on the invoice to which the coupon is applied. Possible values are : <dfn>invoice_amount, each_specified_item.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>apply_on[is] = "invoice_amount"</i>
   */
  apply_on?: {
    /** \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.
 */
    is?: ListCouponsApplyOnIs;
    /** \* \`invoice_amount\` - The coupon is applied to the invoice `sub_total`. \* \`specified_items_total\` - \*\*(Deprecated)\*\* Discount will be applied to the total of plan and addon items specified. \* \`each_specified_item\` -  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.  
The coupon is applied to the `invoice.line_item.amount` that corresponds to the plan or addon specified by `plan_ids` and `addon_ids`. \* \`each_unit_of_specified_items\` - \*\*(Deprecated)\*\* Discount will be applied to each unit of plan and addon items specified.
 */
    is_not?: ListCouponsApplyOnIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this coupon is created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[before] = "145222875"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-11-09.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[on] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>created_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "created_at"</i><br>This will sort the result based on the 'created_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListCouponsSortByAsc;
    desc?: ListCouponsSortByDesc;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The currency code (<a href="https://www.chargebee.com/docs/supported-currencies.html" target="_blank">ISO 4217 format</a>) of the coupon. Applicable for <i>fixed_amount</i> coupons alone.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>currency_code[is] = "USD"</i>
   */
  currency_code?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
};

export type DeleteAQuote200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
  quoted_charge?: QuotedCharge;
};

export type DeleteAQuoteBody = {
  /** Reason for deleting quote. This comment will be added to the subscription entity if the quote belongs to a subscription or added to the customer entity if the quote is associated only with a customer.
   */
  comment?: string;
};

export type DeleteAQuoteChargebeeEventWebhook =
  (typeof DeleteAQuoteChargebeeEventWebhook)[keyof typeof DeleteAQuoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAQuoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAQuoteChargebeeEventEmail =
  (typeof DeleteAQuoteChargebeeEventEmail)[keyof typeof DeleteAQuoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAQuoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAQuoteChargebeeEventActions =
  (typeof DeleteAQuoteChargebeeEventActions)[keyof typeof DeleteAQuoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAQuoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAQuoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAQuoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAQuoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAQuoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAQuoteForChargeAndChargeItems200 = {
  quote: Quote;
  quoted_charge?: QuotedCharge;
};

/**
 * The amount on the quote to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateAQuoteForChargeAndChargeItemsBodyDiscountsApplyOnItem =
  (typeof CreateAQuoteForChargeAndChargeItemsBodyDiscountsApplyOnItem)[keyof typeof CreateAQuoteForChargeAndChargeItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForChargeAndChargeItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateAQuoteForChargeAndChargeItemsBodyDiscounts = {
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  apply_on: CreateAQuoteForChargeAndChargeItemsBodyDiscountsApplyOnItem[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* consumed - Transaction is for an item that is consumed directly \* vendor_use - Transaction is for an item that is subject to vendor use tax \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type CreateAQuoteForChargeAndChargeItemsBodyChargesAvalaraSaleTypeItem =
  (typeof CreateAQuoteForChargeAndChargeItemsBodyChargesAvalaraSaleTypeItem)[keyof typeof CreateAQuoteForChargeAndChargeItemsBodyChargesAvalaraSaleTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForChargeAndChargeItemsBodyChargesAvalaraSaleTypeItem =
  {
    wholesale: "wholesale",
    retail: "retail",
    consumed: "consumed",
    vendor_use: "vendor_use",
  } as const;

/**
 * Parameters for charges

 */
export type CreateAQuoteForChargeAndChargeItemsBodyCharges = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number[];
  /** The decimal representation of the amount for the one-time charge. The value is in [major units of the currency](/docs/api#md_enabled). Applicable only when multi-decimal pricing is enabled.
   */
  amount_in_decimal?: string[];
  /** Description for this charge
   */
  description?: string[];
  avalara_sale_type?: CreateAQuoteForChargeAndChargeItemsBodyChargesAvalaraSaleTypeItem[];
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number[];
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number[];
  /** Service period for charge
   */
  service_period?: number[];
};

/**
 * Parameters for item_tiers

 */
export type CreateAQuoteForChargeAndChargeItemsBodyItemTiers = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_prices

 */
export type CreateAQuoteForChargeAndChargeItemsBodyItemPrices = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Item price quantity
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** Defines service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
};

export type CreateAQuoteForChargeAndChargeItemsBody = {
  /** The quote name will be used as the pdf name of the quote.
   */
  name?: string;
  /** Identifier of the customer for which the quote needs to be created.
   */
  customer_id: string;
  /** Purchase Order Number for this quote.
   */
  po_number?: string;
  /** Notes specific to this quote that you want customers to see on the quote PDF.
   */
  notes?: string;
  /** Quotes will be vaild till this date. After this quote will be marked as closed.
   */
  expires_at?: number;
  /** The currency code (ISO 4217 format) of the quote.
   */
  currency_code?: string;
  /** The 'One Time' coupon to be applied.
   */
  coupon?: string;
  /** List of Coupons to be added.
   */
  coupon_ids?: string[];
  /** Parameters for shipping_address
   */
  shipping_address?: CreateAQuoteForChargeAndChargeItemsBodyShippingAddress;
  /** Parameters for item_prices
   */
  item_prices?: CreateAQuoteForChargeAndChargeItemsBodyItemPrices;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateAQuoteForChargeAndChargeItemsBodyItemTiers;
  /** Parameters for charges
   */
  charges?: CreateAQuoteForChargeAndChargeItemsBodyCharges;
  /** Parameters for discounts
   */
  discounts?: CreateAQuoteForChargeAndChargeItemsBodyDiscounts;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateAQuoteForChargeAndChargeItemsBodyShippingAddressValidationStatus =
  (typeof CreateAQuoteForChargeAndChargeItemsBodyShippingAddressValidationStatus)[keyof typeof CreateAQuoteForChargeAndChargeItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForChargeAndChargeItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateAQuoteForChargeAndChargeItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateAQuoteForChargeAndChargeItemsBodyShippingAddressValidationStatus;
};

export type CreateAQuoteForChargeAndChargeItemsChargebeeEventWebhook =
  (typeof CreateAQuoteForChargeAndChargeItemsChargebeeEventWebhook)[keyof typeof CreateAQuoteForChargeAndChargeItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForChargeAndChargeItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForChargeAndChargeItemsChargebeeEventEmail =
  (typeof CreateAQuoteForChargeAndChargeItemsChargebeeEventEmail)[keyof typeof CreateAQuoteForChargeAndChargeItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForChargeAndChargeItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForChargeAndChargeItemsChargebeeEventActions =
  (typeof CreateAQuoteForChargeAndChargeItemsChargebeeEventActions)[keyof typeof CreateAQuoteForChargeAndChargeItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForChargeAndChargeItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForChargeAndChargeItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAQuoteForChargeAndChargeItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAQuoteForChargeAndChargeItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAQuoteForChargeAndChargeItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ConvertAQuote200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
  quoted_charge?: QuotedCharge;
  customer: Customer;
  subscription?: Subscription;
  invoice?: Invoice;
  credit_note?: CreditNote;
  unbilled_charges?: UnbilledCharge[];
};

/**
 * Applicable only for create subscription quote. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type ConvertAQuoteBodySubscriptionAutoCollection =
  (typeof ConvertAQuoteBodySubscriptionAutoCollection)[keyof typeof ConvertAQuoteBodySubscriptionAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConvertAQuoteBodySubscriptionAutoCollection = {
  on: "on",
  off: "off",
} as const;

/**
 * Parameters for subscription

 */
export type ConvertAQuoteBodySubscription = {
  /** Applicable only for create subscription quote.
   */
  id?: string;
  /** Applicable only for create subscription quote. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: ConvertAQuoteBodySubscriptionAutoCollection;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** When [auto-closing of invoices](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) is enabled for the site, you can pass this parameter as `false` to prevent the automatic closing of invoices for this subscription. The value passed here takes precedence over the value stored at the [customer level](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: boolean;
};

export type ConvertAQuoteBody = {
  /** The document date displayed on the invoice PDF. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. When not provided, the value is the same as current date. Moreover, if the invoice is created as `pending`, and if the site is configured to set invoice dates to date of closing, then upon invoice closure, this date is changed to the invoice closing date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* The date is not earlier than `quoted_subscription.start_date` or `quoted_subscription.changes_scheduled_at` (whichever is applicable).
* `invoice_immediately` must be `true`.
.
 */
  invoice_date?: number;
  /** This attribute is set to `true` automatically for the subscription when it has one or more `metered` items. However, when there are no `metered` items, you can pass this parameter as `true` to force all invoices (except the first) to be created as `pending`. This is useful in the following scenarios:

* When you manage metered billing at your end by calculating usage-based charges yourself and add them to the subscription as [one-time charges](https://www.chargebee.com/docs/2.0/charges.html).
* When your workflow involves inspecting all charges before you close invoices.

**Note:**

* You must enable [Metered Billing](https://www.chargebee.com/docs/2.0/metered_billing.html) for this parameter to be acceptable.
* To create the first invoice also as `pending`, pass `first_invoice_pending` as `true`.
.
 */
  create_pending_invoices?: boolean;
  /** Non-metered items are billed at the beginning of a billing cycle while metered items are billed at the end. Consequently, the first invoice of the subscription contains only the non-metered items.

By passing this parameter as `true`, you create the first invoice as `pending` allowing you to add the previous term's metered charges to it before closing. This is useful when the subscription is moved to Chargebee from a different billing system. As applicable to all `pending` invoices, this invoice is also [closed automatically](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) or via an [API call](/docs/api/invoices?prod_cat_ver=2#close_a_pending_invoice).  
**Note:**

This parameter is passed only when there are metered items in the subscription or when `create_pending_invoices` is `true`.
.
 */
  first_invoice_pending?: boolean;
  /** Parameters for subscription
   */
  subscription?: ConvertAQuoteBodySubscription;
};

export type ConvertAQuoteChargebeeEventWebhook =
  (typeof ConvertAQuoteChargebeeEventWebhook)[keyof typeof ConvertAQuoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConvertAQuoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ConvertAQuoteChargebeeEventEmail =
  (typeof ConvertAQuoteChargebeeEventEmail)[keyof typeof ConvertAQuoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConvertAQuoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ConvertAQuoteChargebeeEventActions =
  (typeof ConvertAQuoteChargebeeEventActions)[keyof typeof ConvertAQuoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConvertAQuoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ConvertAQuoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ConvertAQuoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ConvertAQuoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ConvertAQuoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveQuoteAsPdf200 = {
  download: Download;
};

/**
 * Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser

 */
export type RetrieveQuoteAsPdfBodyDispositionType =
  (typeof RetrieveQuoteAsPdfBodyDispositionType)[keyof typeof RetrieveQuoteAsPdfBodyDispositionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveQuoteAsPdfBodyDispositionType = {
  attachment: "attachment",
  inline: "inline",
} as const;

export type RetrieveQuoteAsPdfBody = {
  /** When true, the quote PDF has summary of all charges on the quote. When false, the quote PDF has a detailed view of charges grouped by charge event. This parameter does not affect one-time quotes.
   */
  consolidated_view?: boolean;
  /** Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser
   */
  disposition_type?: RetrieveQuoteAsPdfBodyDispositionType;
};

export type RetrieveQuoteAsPdfChargebeeEventWebhook =
  (typeof RetrieveQuoteAsPdfChargebeeEventWebhook)[keyof typeof RetrieveQuoteAsPdfChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveQuoteAsPdfChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveQuoteAsPdfChargebeeEventEmail =
  (typeof RetrieveQuoteAsPdfChargebeeEventEmail)[keyof typeof RetrieveQuoteAsPdfChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveQuoteAsPdfChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveQuoteAsPdfChargebeeEventActions =
  (typeof RetrieveQuoteAsPdfChargebeeEventActions)[keyof typeof RetrieveQuoteAsPdfChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveQuoteAsPdfChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveQuoteAsPdfHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RetrieveQuoteAsPdfChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RetrieveQuoteAsPdfChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RetrieveQuoteAsPdfChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListQuotes200ListItem = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
};

export type ListQuotes200 = {
  list: ListQuotes200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListQuotesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListQuotesSortByDesc =
  (typeof ListQuotesSortByDesc)[keyof typeof ListQuotesSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuotesSortByDesc = {
  date: "date",
} as const;

export type ListQuotesSortByAsc =
  (typeof ListQuotesSortByAsc)[keyof typeof ListQuotesSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuotesSortByAsc = {
  date: "date",
} as const;

/**
 * \* \`open\` - Open \* \`accepted\` - Accepted. \* \`declined\` - Declined. \* \`invoiced\` - Invoiced \* \`closed\` - Closed

 */
export type ListQuotesStatusIsNot =
  (typeof ListQuotesStatusIsNot)[keyof typeof ListQuotesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuotesStatusIsNot = {
  open: "open",
  accepted: "accepted",
  declined: "declined",
  invoiced: "invoiced",
  closed: "closed",
} as const;

/**
 * \* \`open\` - Open \* \`accepted\` - Accepted. \* \`declined\` - Declined. \* \`invoiced\` - Invoiced \* \`closed\` - Closed

 */
export type ListQuotesStatusIs =
  (typeof ListQuotesStatusIs)[keyof typeof ListQuotesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuotesStatusIs = {
  open: "open",
  accepted: "accepted",
  declined: "declined",
  invoiced: "invoiced",
  closed: "closed",
} as const;

export type ListQuotesSubscriptionIdIsPresent =
  (typeof ListQuotesSubscriptionIdIsPresent)[keyof typeof ListQuotesSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListQuotesSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListQuotesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The quote number. Acts as a identifier for quote and typically generated sequentially.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "123"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The identifier of the customer this quote belongs to.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is_not] = "4gmiXbsjdm"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>To filter based on subscription_id. </br> NOTE: Not to be used if <i>consolidated invoicing</i> feature is enabled.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is_not] = "4gmiXbsjdm"</i>
   */
  subscription_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListQuotesSubscriptionIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current status of this quote. Possible values are : <dfn>open, accepted, declined, invoiced, closed.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "open"</i>
   */
  status?: {
    /** \* \`open\` - Open \* \`accepted\` - Accepted. \* \`declined\` - Declined. \* \`invoiced\` - Invoiced \* \`closed\` - Closed
     */
    is?: ListQuotesStatusIs;
    /** \* \`open\` - Open \* \`accepted\` - Accepted. \* \`declined\` - Declined. \* \`invoiced\` - Invoiced \* \`closed\` - Closed
     */
    is_not?: ListQuotesStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Creation date of the quote. Typically this is the date on which quote is generated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>date[on] = "1435054328"</i>
   */
  date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-09-28.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[on] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>date</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "date"</i><br>This will sort the result based on the 'date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListQuotesSortByAsc;
    desc?: ListQuotesSortByDesc;
  };
};

export type EditUpdateSubscriptionQuoteForItems200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
};

/**
 * Parameters for item_tiers

 */
export type EditUpdateSubscriptionQuoteForItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type EditUpdateSubscriptionQuoteForItemsBody = {
  /** Notes specific to this quote that you want customers to see on the quote PDF.
   */
  notes?: string;
  /** Quotes will be vaild till this date. After this quote will be marked as closed.
   */
  expires_at?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** If `true` then the existing `subscription_items` list for the subscription is replaced by the one provided. If `false` then the provided `subscription_items` list gets added to the existing list.
   */
  replace_items_list?: boolean;
  /** Billing cycles set for plan-item price is used by default.
   */
  billing_cycles?: number;
  /** The number of subscription billing cycles to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html). If a new term is started for the subscription due to this API call, then `terms_to_charge` is inclusive of this new term. See description for the `force_term_reset` parameter to learn more about when a subscription term is reset.
   */
  terms_to_charge?: number;
  /** If the subscription `status` is `cancelled` and it is being reactivated via this operation, this is the date/time at which the subscription should be reactivated.  
**Note:** It is recommended not to pass this parameter along with `changed_scheduled_at`. `reactivate_from` can be backdated (set to a value in the past). Use backdating when the subscription has been reactivated already but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription reactivation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after the last date/time any of the product catalog items of the subscription were changed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  reactivate_from?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: EditUpdateSubscriptionQuoteForItemsBodyBillingAlignmentMode;
  /** Identifier of the coupon as a List. Coupon Codes can also be passed.
   */
  coupon_ids?: string[];
  /** Should be true if the existing coupons should be replaced with the ones that are being passed.
   */
  replace_coupon_list?: boolean;
  /** When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is carried out at the end of the current billing cycle of the subscription. \* specific_date - The change is carried out as of the date specified under `changes_scheduled_at`. \* immediately - The change is carried out immediately.
   */
  change_option?: EditUpdateSubscriptionQuoteForItemsBodyChangeOption;
  /** When `change_option` is set to `specific_date`, then set the date/time at which the subscription change is to happen or has happened. `changes_scheduled_at` can be set to a value in the past. This is called backdating the subscription change and is performed when the subscription change has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription change operations.
* Only the following changes can be backdated:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* Subscription `status` is `active`, `cancelled`, or `non_renewing`.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after `current_term_start`.
* The date is on or after the last date/time any of the following changes were made:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the subscription's plan is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  changes_scheduled_at?: number;
  /** Applicable for 'Active' \& 'Non Renewing' states alone. Generally, subscription's term will be reset (i.e current term is ended and a new term starts immediately) when a new plan having different billing frequency is specified in the input. For all the other cases, the subscription's term will remain intact. Now for this later scenario, if you want to force a term reset you can specify this param as 'true'.
   **Note**: Specifying this value as 'false' has no impact on the default behaviour.
   */
  force_term_reset?: boolean;
  /** Applicable only for cancelled subscriptions. Once this is passed as true, cancelled subscription will become active; otherwise subscription changes will be made but the subscription state will remain cancelled. If not passed, subscription will be activated only if there is any change in subscription data.
   */
  reactivate?: boolean;
  /** Parameters for subscription
   */
  subscription?: EditUpdateSubscriptionQuoteForItemsBodySubscription;
  /** Parameters for billing_address
   */
  billing_address?: EditUpdateSubscriptionQuoteForItemsBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: EditUpdateSubscriptionQuoteForItemsBodyShippingAddress;
  /** Parameters for customer
   */
  customer?: EditUpdateSubscriptionQuoteForItemsBodyCustomer;
  /** Parameters for contract_term
   */
  contract_term?: EditUpdateSubscriptionQuoteForItemsBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: EditUpdateSubscriptionQuoteForItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: EditUpdateSubscriptionQuoteForItemsBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: EditUpdateSubscriptionQuoteForItemsBodyItemTiers;
};

/**
 * The operation to be carried out for the discount. \* add - The discount is attached to the subscription. \* remove - The discount (given by `discounts[id]`) is removed from the subscription. Subsequent invoices will no longer have the discount applied. **Tip:** If you want to replace a discount, `remove` it and `add` another in the same API call.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyDiscountsOperationTypeItem =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsOperationTypeItem)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsOperationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyDiscountsOperationTypeItem =
  {
    add: "add",
    remove: "remove",
  } as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem =
  {
    one_time: "one_time",
    forever: "forever",
    limited_period: "limited_period",
  } as const;

/**
 * The amount on the quote to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type EditUpdateSubscriptionQuoteForItemsBodyDiscounts = {
  apply_on: EditUpdateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem[];
  duration_type: EditUpdateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: EditUpdateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
  operation_type: EditUpdateSubscriptionQuoteForItemsBodyDiscountsOperationTypeItem[];
  /** The id of the discount to be removed or updated. This parameter is only relevant when `discounts[operation_type]` is `remove` or `update`.
   */
  id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem =
  (typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type EditUpdateSubscriptionQuoteForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](/docs/api#handling_currency_units) is enabled. If `changes_scheduled_at` is in the past and a `unit_price_in_decimal` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: EditUpdateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type EditUpdateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
    renew_once: "renew_once",
  } as const;

/**
 * Parameters for contract_term

 */
export type EditUpdateSubscriptionQuoteForItemsBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: EditUpdateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * Parameters for customer

 */
export type EditUpdateSubscriptionQuoteForItemsBodyCustomer = {
  /** VAT number of this customer. If not provided then taxes are not calculated for the estimate. Applicable only when taxes are configured for the EU or UK region. VAT validation is not done for this.
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type EditUpdateSubscriptionQuoteForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: EditUpdateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyBillingAddressValidationStatus =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyBillingAddressValidationStatus)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyBillingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for billing_address

 */
export type EditUpdateSubscriptionQuoteForItemsBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: EditUpdateSubscriptionQuoteForItemsBodyBillingAddressValidationStatus;
};

/**
 * The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check

 */
export type EditUpdateSubscriptionQuoteForItemsBodySubscriptionOfflinePaymentMethod =
  (typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionOfflinePaymentMethod)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodySubscriptionOfflinePaymentMethod =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type EditUpdateSubscriptionQuoteForItemsBodySubscriptionAutoCollection =
  (typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionAutoCollection)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodySubscriptionAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodySubscriptionAutoCollection =
  {
    on: "on",
    off: "off",
  } as const;

/**
 * Parameters for subscription

 */
export type EditUpdateSubscriptionQuoteForItemsBodySubscription = {
  /** The new start date of a `future` subscription. Applicable only for `future` subscriptions.
   */
  start_date?: number;
  /** The time at which the trial has ended or will end for the subscription. This is only allowed when the subscription `status` is `future`, `in_trial`, or `cancelled`. Also, the value must not be earlier than `changes_scheduled_at` or `start_date`. **Note** : This parameter can be backdated (set to a value in the past) only when the subscription is in `cancelled` or `in_trial` `status`. Do this to keep a record of when the trial ended in case it ended at some point in the past. When `trial_end` is backdated, the subscription immediately goes into `active` or `non_renewing` status.
   */
  trial_end?: number;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: EditUpdateSubscriptionQuoteForItemsBodySubscriptionAutoCollection;
  /** The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check
   */
  offline_payment_method?: EditUpdateSubscriptionQuoteForItemsBodySubscriptionOfflinePaymentMethod;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
};

/**
 * When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is carried out at the end of the current billing cycle of the subscription. \* specific_date - The change is carried out as of the date specified under `changes_scheduled_at`. \* immediately - The change is carried out immediately.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyChangeOption =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyChangeOption)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyChangeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyChangeOption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type EditUpdateSubscriptionQuoteForItemsBodyBillingAlignmentMode =
  (typeof EditUpdateSubscriptionQuoteForItemsBodyBillingAlignmentMode)[keyof typeof EditUpdateSubscriptionQuoteForItemsBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type EditUpdateSubscriptionQuoteForItemsChargebeeEventWebhook =
  (typeof EditUpdateSubscriptionQuoteForItemsChargebeeEventWebhook)[keyof typeof EditUpdateSubscriptionQuoteForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EditUpdateSubscriptionQuoteForItemsChargebeeEventEmail =
  (typeof EditUpdateSubscriptionQuoteForItemsChargebeeEventEmail)[keyof typeof EditUpdateSubscriptionQuoteForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EditUpdateSubscriptionQuoteForItemsChargebeeEventActions =
  (typeof EditUpdateSubscriptionQuoteForItemsChargebeeEventActions)[keyof typeof EditUpdateSubscriptionQuoteForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditUpdateSubscriptionQuoteForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EditUpdateSubscriptionQuoteForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EditUpdateSubscriptionQuoteForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EditUpdateSubscriptionQuoteForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EditUpdateSubscriptionQuoteForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type EditQuoteForChargeItemsAndCharges200 = {
  quote: Quote;
  quoted_charge?: QuotedCharge;
};

/**
 * The amount on the quote to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type EditQuoteForChargeItemsAndChargesBodyDiscountsApplyOnItem =
  (typeof EditQuoteForChargeItemsAndChargesBodyDiscountsApplyOnItem)[keyof typeof EditQuoteForChargeItemsAndChargesBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditQuoteForChargeItemsAndChargesBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type EditQuoteForChargeItemsAndChargesBodyDiscounts = {
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  apply_on: EditQuoteForChargeItemsAndChargesBodyDiscountsApplyOnItem[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* consumed - Transaction is for an item that is consumed directly \* vendor_use - Transaction is for an item that is subject to vendor use tax \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type EditQuoteForChargeItemsAndChargesBodyChargesAvalaraSaleTypeItem =
  (typeof EditQuoteForChargeItemsAndChargesBodyChargesAvalaraSaleTypeItem)[keyof typeof EditQuoteForChargeItemsAndChargesBodyChargesAvalaraSaleTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditQuoteForChargeItemsAndChargesBodyChargesAvalaraSaleTypeItem = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

/**
 * Parameters for charges

 */
export type EditQuoteForChargeItemsAndChargesBodyCharges = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number[];
  /** The decimal representation of the amount for the one-time charge. The value is in [major units of the currency](/docs/api#md_enabled). Applicable only when multi-decimal pricing is enabled.
   */
  amount_in_decimal?: string[];
  /** Description for this charge
   */
  description?: string[];
  avalara_sale_type?: EditQuoteForChargeItemsAndChargesBodyChargesAvalaraSaleTypeItem[];
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number[];
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number[];
  /** Service period for charge
   */
  service_period?: number[];
};

/**
 * Parameters for item_tiers

 */
export type EditQuoteForChargeItemsAndChargesBodyItemTiers = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_prices

 */
export type EditQuoteForChargeItemsAndChargesBodyItemPrices = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Item price quantity
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** Defines service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type EditQuoteForChargeItemsAndChargesBodyShippingAddressValidationStatus =
  (typeof EditQuoteForChargeItemsAndChargesBodyShippingAddressValidationStatus)[keyof typeof EditQuoteForChargeItemsAndChargesBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditQuoteForChargeItemsAndChargesBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type EditQuoteForChargeItemsAndChargesBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: EditQuoteForChargeItemsAndChargesBodyShippingAddressValidationStatus;
};

export type EditQuoteForChargeItemsAndChargesBody = {
  /** Purchase Order Number for this quote.
   */
  po_number?: string;
  /** Notes specific to this quote that you want customers to see on the quote PDF.
   */
  notes?: string;
  /** Quotes will be vaild till this date. After this quote will be marked as closed.
   */
  expires_at?: number;
  /** The currency code (ISO 4217 format) of the quote.
   */
  currency_code?: string;
  /** The 'One Time' coupon to be applied.
   */
  coupon?: string;
  /** List of Coupons to be added.
   */
  coupon_ids?: string[];
  /** Parameters for shipping_address
   */
  shipping_address?: EditQuoteForChargeItemsAndChargesBodyShippingAddress;
  /** Parameters for item_prices
   */
  item_prices?: EditQuoteForChargeItemsAndChargesBodyItemPrices;
  /** Parameters for item_tiers
   */
  item_tiers?: EditQuoteForChargeItemsAndChargesBodyItemTiers;
  /** Parameters for charges
   */
  charges?: EditQuoteForChargeItemsAndChargesBodyCharges;
  /** Parameters for discounts
   */
  discounts?: EditQuoteForChargeItemsAndChargesBodyDiscounts;
};

export type EditQuoteForChargeItemsAndChargesChargebeeEventWebhook =
  (typeof EditQuoteForChargeItemsAndChargesChargebeeEventWebhook)[keyof typeof EditQuoteForChargeItemsAndChargesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditQuoteForChargeItemsAndChargesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EditQuoteForChargeItemsAndChargesChargebeeEventEmail =
  (typeof EditQuoteForChargeItemsAndChargesChargebeeEventEmail)[keyof typeof EditQuoteForChargeItemsAndChargesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditQuoteForChargeItemsAndChargesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EditQuoteForChargeItemsAndChargesChargebeeEventActions =
  (typeof EditQuoteForChargeItemsAndChargesChargebeeEventActions)[keyof typeof EditQuoteForChargeItemsAndChargesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditQuoteForChargeItemsAndChargesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EditQuoteForChargeItemsAndChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EditQuoteForChargeItemsAndChargesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EditQuoteForChargeItemsAndChargesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EditQuoteForChargeItemsAndChargesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExtendExpiryDate200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
  quoted_charge?: QuotedCharge;
};

export type ExtendExpiryDateBody = {
  /** Quote will be valid till this date. After this date quote will be marked as closed.
   */
  valid_till: number;
};

export type ExtendExpiryDateChargebeeEventWebhook =
  (typeof ExtendExpiryDateChargebeeEventWebhook)[keyof typeof ExtendExpiryDateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExtendExpiryDateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExtendExpiryDateChargebeeEventEmail =
  (typeof ExtendExpiryDateChargebeeEventEmail)[keyof typeof ExtendExpiryDateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExtendExpiryDateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExtendExpiryDateChargebeeEventActions =
  (typeof ExtendExpiryDateChargebeeEventActions)[keyof typeof ExtendExpiryDateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExtendExpiryDateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExtendExpiryDateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExtendExpiryDateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExtendExpiryDateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExtendExpiryDateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListQuoteLineGroups200ListItem = {
  quote_line_group: QuoteLineGroup;
};

export type ListQuoteLineGroups200 = {
  list: ListQuoteLineGroups200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListQuoteLineGroupsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListQuoteLineGroupsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type CreateAQuoteForUpdateSubscriptionItems200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
};

/**
 * Parameters for item_tiers

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type CreateAQuoteForUpdateSubscriptionItemsBody = {
  /** The quote name will be used as the pdf name of the quote.
   */
  name?: string;
  /** Notes specific to this quote that you want customers to see on the quote PDF.
   */
  notes?: string;
  /** Quotes will be vaild till this date. After this quote will be marked as closed.
   */
  expires_at?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** If `true` then the existing `subscription_items` list for the subscription is replaced by the one provided. If `false` then the provided `subscription_items` list gets added to the existing list.
   */
  replace_items_list?: boolean;
  /** Billing cycles set for plan-item price is used by default.
   */
  billing_cycles?: number;
  /** The number of subscription billing cycles to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html). If a new term is started for the subscription due to this API call, then `terms_to_charge` is inclusive of this new term. See description for the `force_term_reset` parameter to learn more about when a subscription term is reset.
   */
  terms_to_charge?: number;
  /** If the subscription `status` is `cancelled` and it is being reactivated via this operation, this is the date/time at which the subscription should be reactivated.  
**Note:** It is recommended not to pass this parameter along with `changed_scheduled_at`. `reactivate_from` can be backdated (set to a value in the past). Use backdating when the subscription has been reactivated already but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription reactivation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after the last date/time any of the product catalog items of the subscription were changed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  reactivate_from?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: CreateAQuoteForUpdateSubscriptionItemsBodyBillingAlignmentMode;
  /** Identifier of the coupon as a List. Coupon Codes can also be passed.
   */
  coupon_ids?: string[];
  /** Should be true if the existing coupons should be replaced with the ones that are being passed.
   */
  replace_coupon_list?: boolean;
  /** When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is carried out at the end of the current billing cycle of the subscription. \* specific_date - The change is carried out as of the date specified under `changes_scheduled_at`. \* immediately - The change is carried out immediately.
   */
  change_option?: CreateAQuoteForUpdateSubscriptionItemsBodyChangeOption;
  /** When `change_option` is set to `specific_date`, then set the date/time at which the subscription change is to happen or has happened. `changes_scheduled_at` can be set to a value in the past. This is called backdating the subscription change and is performed when the subscription change has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription change operations.
* Only the following changes can be backdated:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* Subscription `status` is `active`, `cancelled`, or `non_renewing`.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after `current_term_start`.
* The date is on or after the last date/time any of the following changes were made:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the subscription's plan is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  changes_scheduled_at?: number;
  /** Applicable for 'Active' \& 'Non Renewing' states alone. Generally, subscription's term will be reset (i.e current term is ended and a new term starts immediately) when a new plan having different billing frequency is specified in the input. For all the other cases, the subscription's term will remain intact. Now for this later scenario, if you want to force a term reset you can specify this param as 'true'.
   **Note**: Specifying this value as 'false' has no impact on the default behaviour.
   */
  force_term_reset?: boolean;
  /** Applicable only for cancelled subscriptions. Once this is passed as true, cancelled subscription will become active; otherwise subscription changes will be made but the subscription state will remain cancelled. If not passed, subscription will be activated only if there is any change in subscription data.
   */
  reactivate?: boolean;
  /** Parameters for subscription
   */
  subscription?: CreateAQuoteForUpdateSubscriptionItemsBodySubscription;
  /** Parameters for billing_address
   */
  billing_address?: CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddress;
  /** Parameters for customer
   */
  customer?: CreateAQuoteForUpdateSubscriptionItemsBodyCustomer;
  /** Parameters for contract_term
   */
  contract_term?: CreateAQuoteForUpdateSubscriptionItemsBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: CreateAQuoteForUpdateSubscriptionItemsBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateAQuoteForUpdateSubscriptionItemsBodyItemTiers;
};

/**
 * The operation to be carried out for the discount. \* add - The discount is attached to the subscription. \* remove - The discount (given by `discounts[id]`) is removed from the subscription. Subsequent invoices will no longer have the discount applied. **Tip:** If you want to replace a discount, `remove` it and `add` another in the same API call.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsOperationTypeItem =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsOperationTypeItem)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsOperationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsOperationTypeItem =
  {
    add: "add",
    remove: "remove",
  } as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsPeriodUnitItem =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsPeriodUnitItem)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsPeriodUnitItem =
  {
    day: "day",
    week: "week",
    month: "month",
    year: "year",
  } as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsDurationTypeItem =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsDurationTypeItem)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsDurationTypeItem =
  {
    one_time: "one_time",
    forever: "forever",
    limited_period: "limited_period",
  } as const;

/**
 * The amount on the quote to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsApplyOnItem =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsApplyOnItem)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyDiscounts = {
  apply_on: CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsApplyOnItem[];
  duration_type: CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
  operation_type: CreateAQuoteForUpdateSubscriptionItemsBodyDiscountsOperationTypeItem[];
  /** The `id` of the discount to be removed or updated. This parameter is only relevant when `discounts[operation_type]` is `remove` or `update`.
   */
  id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](/docs/api#handling_currency_units) is enabled. If `changes_scheduled_at` is in the past and a `unit_price_in_decimal` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyContractTermActionAtTermEnd =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyContractTermActionAtTermEnd)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
    renew_once: "renew_once",
  } as const;

/**
 * Parameters for contract_term

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: CreateAQuoteForUpdateSubscriptionItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * Parameters for customer

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyCustomer = {
  /** VAT number of this customer. If not provided then taxes are not calculated for the estimate. Applicable only when taxes are configured for the EU or UK region. VAT validation is not done for this.
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddressValidationStatus =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddressValidationStatus)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateAQuoteForUpdateSubscriptionItemsBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddressValidationStatus =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddressValidationStatus)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for billing_address

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: CreateAQuoteForUpdateSubscriptionItemsBodyBillingAddressValidationStatus;
};

/**
 * The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionOfflinePaymentMethod =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionOfflinePaymentMethod)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionOfflinePaymentMethod =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionAutoCollection =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionAutoCollection)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionAutoCollection =
  {
    on: "on",
    off: "off",
  } as const;

/**
 * Parameters for subscription

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id: string;
  /** The new start date of a `future` subscription. Applicable only for `future` subscriptions.
   */
  start_date?: number;
  /** The time at which the trial has ended or will end for the subscription. This is only allowed when the subscription `status` is `future`, `in_trial`, or `cancelled`. Also, the value must not be earlier than `changes_scheduled_at` or `start_date`. **Note** : This parameter can be backdated (set to a value in the past) only when the subscription is in `cancelled` or `in_trial` `status`. Do this to keep a record of when the trial ended in case it ended at some point in the past. When `trial_end` is backdated, the subscription immediately goes into `active` or `non_renewing` status.
   */
  trial_end?: number;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionAutoCollection;
  /** The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check
   */
  offline_payment_method?: CreateAQuoteForUpdateSubscriptionItemsBodySubscriptionOfflinePaymentMethod;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
};

/**
 * When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is carried out at the end of the current billing cycle of the subscription. \* specific_date - The change is carried out as of the date specified under `changes_scheduled_at`. \* immediately - The change is carried out immediately.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyChangeOption =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyChangeOption)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyChangeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyChangeOption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type CreateAQuoteForUpdateSubscriptionItemsBodyBillingAlignmentMode =
  (typeof CreateAQuoteForUpdateSubscriptionItemsBodyBillingAlignmentMode)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type CreateAQuoteForUpdateSubscriptionItemsChargebeeEventWebhook =
  (typeof CreateAQuoteForUpdateSubscriptionItemsChargebeeEventWebhook)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForUpdateSubscriptionItemsChargebeeEventEmail =
  (typeof CreateAQuoteForUpdateSubscriptionItemsChargebeeEventEmail)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForUpdateSubscriptionItemsChargebeeEventActions =
  (typeof CreateAQuoteForUpdateSubscriptionItemsChargebeeEventActions)[keyof typeof CreateAQuoteForUpdateSubscriptionItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForUpdateSubscriptionItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForUpdateSubscriptionItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAQuoteForUpdateSubscriptionItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAQuoteForUpdateSubscriptionItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAQuoteForUpdateSubscriptionItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateQuoteStatus200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
  quoted_charge?: QuotedCharge;
};

/**
 * Status to update for the quote. \* accepted - Accepted. \* closed - Closed \* declined - Declined.

 */
export type UpdateQuoteStatusBodyStatus =
  (typeof UpdateQuoteStatusBodyStatus)[keyof typeof UpdateQuoteStatusBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateQuoteStatusBodyStatus = {
  accepted: "accepted",
  declined: "declined",
  closed: "closed",
} as const;

export type UpdateQuoteStatusBody = {
  /** Status to update for the quote. \* accepted - Accepted. \* closed - Closed \* declined - Declined.
   */
  status: UpdateQuoteStatusBodyStatus;
  /** An internal [comment](./comments) to be added for this operation, to the quote. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Quote PDF](./quotes#retrieve_quote_as_pdf).
   */
  comment?: string;
};

export type UpdateQuoteStatusChargebeeEventWebhook =
  (typeof UpdateQuoteStatusChargebeeEventWebhook)[keyof typeof UpdateQuoteStatusChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateQuoteStatusChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateQuoteStatusChargebeeEventEmail =
  (typeof UpdateQuoteStatusChargebeeEventEmail)[keyof typeof UpdateQuoteStatusChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateQuoteStatusChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateQuoteStatusChargebeeEventActions =
  (typeof UpdateQuoteStatusChargebeeEventActions)[keyof typeof UpdateQuoteStatusChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateQuoteStatusChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateQuoteStatusHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateQuoteStatusChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateQuoteStatusChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateQuoteStatusChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type EditCreateSubscriptionQuoteForItems200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
};

/**
 * Parameters for item_tiers

 */
export type EditCreateSubscriptionQuoteForItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* year - A period of 1 calendar year. \* week - A period of 7 days. \* month - A period of 1 calendar month.

 */
export type EditCreateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem =
  (typeof EditCreateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem)[keyof typeof EditCreateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type EditCreateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem =
  (typeof EditCreateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem)[keyof typeof EditCreateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem =
  {
    one_time: "one_time",
    forever: "forever",
    limited_period: "limited_period",
  } as const;

/**
 * The amount on the quote to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type EditCreateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem =
  (typeof EditCreateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem)[keyof typeof EditCreateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type EditCreateSubscriptionQuoteForItemsBodyDiscounts = {
  apply_on: EditCreateSubscriptionQuoteForItemsBodyDiscountsApplyOnItem[];
  duration_type: EditCreateSubscriptionQuoteForItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: EditCreateSubscriptionQuoteForItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

export type EditCreateSubscriptionQuoteForItemsBody = {
  /** Notes specific to this quote that you want customers to see on the quote PDF.
   */
  notes?: string;
  /** Quotes will be vaild till this date. After this quote will be marked as closed.
   */
  expires_at?: number;
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** The number of subscription billing cycles (including the first one) to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html).
   */
  terms_to_charge?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..
   */
  billing_alignment_mode?: EditCreateSubscriptionQuoteForItemsBodyBillingAlignmentMode;
  /** Identifier of the coupon as a List. Coupon Codes can also be passed.
   */
  coupon_ids?: string[];
  /** Parameters for subscription
   */
  subscription?: EditCreateSubscriptionQuoteForItemsBodySubscription;
  /** Parameters for shipping_address
   */
  shipping_address?: EditCreateSubscriptionQuoteForItemsBodyShippingAddress;
  /** Parameters for contract_term
   */
  contract_term?: EditCreateSubscriptionQuoteForItemsBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: EditCreateSubscriptionQuoteForItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: EditCreateSubscriptionQuoteForItemsBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: EditCreateSubscriptionQuoteForItemsBodyItemTiers;
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem =
  (typeof EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem)[keyof typeof EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_creation - the time of creation of the subscription.

 */
export type EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type EditCreateSubscriptionQuoteForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: EditCreateSubscriptionQuoteForItemsBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type EditCreateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd =
  (typeof EditCreateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd)[keyof typeof EditCreateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
  } as const;

/**
 * Parameters for contract_term

 */
export type EditCreateSubscriptionQuoteForItemsBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: EditCreateSubscriptionQuoteForItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type EditCreateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus =
  (typeof EditCreateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus)[keyof typeof EditCreateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type EditCreateSubscriptionQuoteForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: EditCreateSubscriptionQuoteForItemsBodyShippingAddressValidationStatus;
};

/**
 * Parameters for subscription

 */
export type EditCreateSubscriptionQuoteForItemsBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period.
   */
  trial_end?: number;
  /** The date/time at which the subscription is to start or has started. If not provided, the subscription starts immediately on quote conversion. The quote can be converted on a date/time after this date. This is called backdating the subscription creation and is done when the subscription has already been provisioned but the conversion action has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `subscription[start_date]` cannot be earlier than 14th February.
 */
  start_date?: number;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..

 */
export type EditCreateSubscriptionQuoteForItemsBodyBillingAlignmentMode =
  (typeof EditCreateSubscriptionQuoteForItemsBodyBillingAlignmentMode)[keyof typeof EditCreateSubscriptionQuoteForItemsBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type EditCreateSubscriptionQuoteForItemsChargebeeEventWebhook =
  (typeof EditCreateSubscriptionQuoteForItemsChargebeeEventWebhook)[keyof typeof EditCreateSubscriptionQuoteForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EditCreateSubscriptionQuoteForItemsChargebeeEventEmail =
  (typeof EditCreateSubscriptionQuoteForItemsChargebeeEventEmail)[keyof typeof EditCreateSubscriptionQuoteForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EditCreateSubscriptionQuoteForItemsChargebeeEventActions =
  (typeof EditCreateSubscriptionQuoteForItemsChargebeeEventActions)[keyof typeof EditCreateSubscriptionQuoteForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditCreateSubscriptionQuoteForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EditCreateSubscriptionQuoteForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EditCreateSubscriptionQuoteForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EditCreateSubscriptionQuoteForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EditCreateSubscriptionQuoteForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAQuote200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
  quoted_charge?: QuotedCharge;
};

export type RetrieveAQuoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAQuoteForANewSubscriptionItems200 = {
  quote: Quote;
  quoted_subscription?: QuotedSubscription;
};

/**
 * Parameters for item_tiers

 */
export type CreateAQuoteForANewSubscriptionItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type CreateAQuoteForANewSubscriptionItemsBody = {
  /** The quote name will be used as the pdf name of the quote.
   */
  name?: string;
  /** Notes specific to this quote that you want customers to see on the quote PDF.
   */
  notes?: string;
  /** Quotes will be vaild till this date. After this quote will be marked as closed.
   */
  expires_at?: number;
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** The number of subscription billing cycles (including the first one) to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html).
   */
  terms_to_charge?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..
   */
  billing_alignment_mode?: CreateAQuoteForANewSubscriptionItemsBodyBillingAlignmentMode;
  /** Identifier of the coupon as a List. Coupon Codes can also be passed.
   */
  coupon_ids?: string[];
  /** Parameters for subscription
   */
  subscription?: CreateAQuoteForANewSubscriptionItemsBodySubscription;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateAQuoteForANewSubscriptionItemsBodyShippingAddress;
  /** Parameters for contract_term
   */
  contract_term?: CreateAQuoteForANewSubscriptionItemsBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: CreateAQuoteForANewSubscriptionItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: CreateAQuoteForANewSubscriptionItemsBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateAQuoteForANewSubscriptionItemsBodyItemTiers;
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* year - A period of 1 calendar year. \* week - A period of 7 days. \* month - A period of 1 calendar month.

 */
export type CreateAQuoteForANewSubscriptionItemsBodyDiscountsPeriodUnitItem =
  (typeof CreateAQuoteForANewSubscriptionItemsBodyDiscountsPeriodUnitItem)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type CreateAQuoteForANewSubscriptionItemsBodyDiscountsDurationTypeItem =
  (typeof CreateAQuoteForANewSubscriptionItemsBodyDiscountsDurationTypeItem)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodyDiscountsDurationTypeItem =
  {
    one_time: "one_time",
    forever: "forever",
    limited_period: "limited_period",
  } as const;

/**
 * The amount on the quote to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateAQuoteForANewSubscriptionItemsBodyDiscountsApplyOnItem =
  (typeof CreateAQuoteForANewSubscriptionItemsBodyDiscountsApplyOnItem)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateAQuoteForANewSubscriptionItemsBodyDiscounts = {
  apply_on: CreateAQuoteForANewSubscriptionItemsBodyDiscountsApplyOnItem[];
  duration_type: CreateAQuoteForANewSubscriptionItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: CreateAQuoteForANewSubscriptionItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem =
  (typeof CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_creation - the time of creation of the subscription.

 */
export type CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type CreateAQuoteForANewSubscriptionItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: CreateAQuoteForANewSubscriptionItemsBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type CreateAQuoteForANewSubscriptionItemsBodyContractTermActionAtTermEnd =
  (typeof CreateAQuoteForANewSubscriptionItemsBodyContractTermActionAtTermEnd)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
  } as const;

/**
 * Parameters for contract_term

 */
export type CreateAQuoteForANewSubscriptionItemsBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: CreateAQuoteForANewSubscriptionItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateAQuoteForANewSubscriptionItemsBodyShippingAddressValidationStatus =
  (typeof CreateAQuoteForANewSubscriptionItemsBodyShippingAddressValidationStatus)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateAQuoteForANewSubscriptionItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateAQuoteForANewSubscriptionItemsBodyShippingAddressValidationStatus;
};

/**
 * Parameters for subscription

 */
export type CreateAQuoteForANewSubscriptionItemsBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period.
   */
  trial_end?: number;
  /** The date/time at which the subscription is to start or has started. If not provided, the subscription starts immediately on quote conversion. The quote can be converted on a date/time after this date. This is called backdating the subscription creation and is done when the subscription has already been provisioned but the conversion action has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `subscription[start_date]` cannot be earlier than 14th February.
 */
  start_date?: number;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..

 */
export type CreateAQuoteForANewSubscriptionItemsBodyBillingAlignmentMode =
  (typeof CreateAQuoteForANewSubscriptionItemsBodyBillingAlignmentMode)[keyof typeof CreateAQuoteForANewSubscriptionItemsBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type CreateAQuoteForANewSubscriptionItemsChargebeeEventWebhook =
  (typeof CreateAQuoteForANewSubscriptionItemsChargebeeEventWebhook)[keyof typeof CreateAQuoteForANewSubscriptionItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForANewSubscriptionItemsChargebeeEventEmail =
  (typeof CreateAQuoteForANewSubscriptionItemsChargebeeEventEmail)[keyof typeof CreateAQuoteForANewSubscriptionItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForANewSubscriptionItemsChargebeeEventActions =
  (typeof CreateAQuoteForANewSubscriptionItemsChargebeeEventActions)[keyof typeof CreateAQuoteForANewSubscriptionItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAQuoteForANewSubscriptionItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAQuoteForANewSubscriptionItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAQuoteForANewSubscriptionItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAQuoteForANewSubscriptionItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAQuoteForANewSubscriptionItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AdvanceInvoiceEstimate200 = {
  estimate: Estimate;
};

/**
 * Parameters for specific_dates_schedule

 */
export type AdvanceInvoiceEstimateBodySpecificDatesSchedule = {
  /** The number of billing cycles to charge for, on the date specified. Applicable only when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is specific_dates.
   */
  terms_to_charge?: number[];
  /** The unique id of the member of the advance_invoice_schedule array which corresponds to the specific_dates_schedule that you intend to modify. Only applicable when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is `specific_dates`.
   */
  date?: number[];
};

/**
 * Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.

 */
export type AdvanceInvoiceEstimateBodyFixedIntervalScheduleEndScheduleOn =
  (typeof AdvanceInvoiceEstimateBodyFixedIntervalScheduleEndScheduleOn)[keyof typeof AdvanceInvoiceEstimateBodyFixedIntervalScheduleEndScheduleOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceEstimateBodyFixedIntervalScheduleEndScheduleOn = {
  after_number_of_intervals: "after_number_of_intervals",
  specific_date: "specific_date",
  subscription_end: "subscription_end",
} as const;

/**
 * Parameters for fixed_interval_schedule

 */
export type AdvanceInvoiceEstimateBodyFixedIntervalSchedule = {
  /** The number of advance invoices to generate. The schedule is created such that the total number of billing cycles in the schedule does not exceed the [`remaining_billing_cycles`](subscriptions#subscription_remaining_billing_cycles) of the subscription. This parameter is applicable only when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `after_number_of_intervals`
   */
  number_of_occurrences?: number;
  /** The number of days before each interval that advance invoices are generated.
   */
  days_before_renewal?: number;
  /** Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.
   */
  end_schedule_on?: AdvanceInvoiceEstimateBodyFixedIntervalScheduleEndScheduleOn;
  /** The date when the schedule should end. Advance invoices are not generated beyond this date. It must be at least 1 day before the start of the last billing cycle of the subscription and also within 5 years from the current date. This parameter is only applicable when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `specific_date`.
   */
  end_date?: number;
};

/**
 * The type of advance invoice or advance invoicing schedule. \* immediate - Charge immediately for the number of billing cycles specified by [`terms_to_charge`](subscriptions#charge_future_renewals_terms_to_charge). \* specific_dates - Charge on [specific dates](subscriptions#charge_future_renewals_specific_dates_schedule_date). For each date, specify the [number of billing cycles](subscriptions#charge_future_renewals_specific_dates_schedule_terms_to_charge) to charge for. Up to 5 dates can be configured. \* fixed_intervals - Charge at fixed intervals of time. Specify the [number of billing cycles](subscriptions#charge_future_renewals_terms_to_charge) that constitute an interval and the number of [days before each interval](subscriptions#charge_future_renewals_fixed_interval_schedule_days_before_renewal) that the invoice should be generated. Also specify [when the schedule should end](subscriptions#charge_future_renewals_fixed_interval_schedule_end_schedule_on).

 */
export type AdvanceInvoiceEstimateBodyScheduleType =
  (typeof AdvanceInvoiceEstimateBodyScheduleType)[keyof typeof AdvanceInvoiceEstimateBodyScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceEstimateBodyScheduleType = {
  immediate: "immediate",
  specific_dates: "specific_dates",
  fixed_intervals: "fixed_intervals",
} as const;

export type AdvanceInvoiceEstimateBody = {
  /** * For `schedule_type = immediate`: the number of future billing cycles to be invoiced in advance. The invoicing is done for the [`remaining_billing_cycles`](subscriptions#subscription_remaining_billing_cycles) of the subscription if that is less than `terms_to_charge`.
* For `schedule_type = fixed_intervals`: The number of future billing cycles in one [interval](advance_invoice_schedules#fixed_interval_schedule). The schedule is created such that the total number of billing cycles in the schedule does not exceed the [remaining_billing_cycles](subscriptions#subscription_remaining_billing_cycles) of the subscription.
.
 */
  terms_to_charge?: number;
  /** Whether the charge should be invoiced immediately or added to [`unbilled_charges`](unbilled_charges). Applicable only when [`schedule_type`](subscriptions#charge_future_renewals_schedule_type) is `immediate`.
   */
  invoice_immediately?: boolean;
  /** The type of advance invoice or advance invoicing schedule. \* immediate - Charge immediately for the number of billing cycles specified by [`terms_to_charge`](subscriptions#charge_future_renewals_terms_to_charge). \* specific_dates - Charge on [specific dates](subscriptions#charge_future_renewals_specific_dates_schedule_date). For each date, specify the [number of billing cycles](subscriptions#charge_future_renewals_specific_dates_schedule_terms_to_charge) to charge for. Up to 5 dates can be configured. \* fixed_intervals - Charge at fixed intervals of time. Specify the [number of billing cycles](subscriptions#charge_future_renewals_terms_to_charge) that constitute an interval and the number of [days before each interval](subscriptions#charge_future_renewals_fixed_interval_schedule_days_before_renewal) that the invoice should be generated. Also specify [when the schedule should end](subscriptions#charge_future_renewals_fixed_interval_schedule_end_schedule_on).
   */
  schedule_type?: AdvanceInvoiceEstimateBodyScheduleType;
  /** Parameters for fixed_interval_schedule
   */
  fixed_interval_schedule?: AdvanceInvoiceEstimateBodyFixedIntervalSchedule;
  /** Parameters for specific_dates_schedule
   */
  specific_dates_schedule?: AdvanceInvoiceEstimateBodySpecificDatesSchedule;
};

export type AdvanceInvoiceEstimateChargebeeEventWebhook =
  (typeof AdvanceInvoiceEstimateChargebeeEventWebhook)[keyof typeof AdvanceInvoiceEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AdvanceInvoiceEstimateChargebeeEventEmail =
  (typeof AdvanceInvoiceEstimateChargebeeEventEmail)[keyof typeof AdvanceInvoiceEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AdvanceInvoiceEstimateChargebeeEventActions =
  (typeof AdvanceInvoiceEstimateChargebeeEventActions)[keyof typeof AdvanceInvoiceEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AdvanceInvoiceEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AdvanceInvoiceEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AdvanceInvoiceEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AdvanceInvoiceEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type PauseSubscriptionEstimate200 = {
  estimate: Estimate;
};

/**
 * Parameters for subscription

 */
export type PauseSubscriptionEstimateBodySubscription = {
  /** When a pause has been scheduled, it is the date/time of scheduled pause. When the subscription is in the `paused` state, it is the date/time when the subscription was paused.
   */
  pause_date?: number;
  /** For a paused subscription, it is the date/time when the subscription is scheduled to resume. If the pause is for an indefinite period, this value is not returned.
   */
  resume_date?: number;
  /** Number of billing cycles this subscription should be paused. The subscription resumes after the paused billing cycles end.
   */
  skip_billing_cycles?: number;
};

/**
 * Applicable when unbilled charges are present for the subscription and [pause_option](/docs/api/estimates#pause_subscription_estimate_pause_option) is set as `immediately`. **Note:** On the invoice raised, an automatic charge is attempted on the payment method available, if customer's auto-collection property is set to `on`.
\* invoice -

Invoice charges

If `invoice` is chosen, an automatic charge is attempted on the payment method available if the customer has enabled auto-collection. If a payment collection fails or when auto-collection is not enabled, the invoice is closed as unpaid.
\* no_action -

Retain as unbilled

If `no_action` is chosen, charges are added to the resumption invoice.

 */
export type PauseSubscriptionEstimateBodyUnbilledChargesHandling =
  (typeof PauseSubscriptionEstimateBodyUnbilledChargesHandling)[keyof typeof PauseSubscriptionEstimateBodyUnbilledChargesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseSubscriptionEstimateBodyUnbilledChargesHandling = {
  no_action: "no_action",
  invoice: "invoice",
} as const;

/**
 * List of options to pause the subscription. \* billing_cycles -

Pause at the end of the current term, and resume automatically after the number of billing cycles you specify in [skip_billing_cycles](/docs/api/estimates?prod_cat_ver=2#pause_subscription_estimate_subscription_skip_billing_cycles)
\* immediately - Pause immediately
\* end_of_term - Pause at the end of current term
\* specific_date - Pause on a specific date

 */
export type PauseSubscriptionEstimateBodyPauseOption =
  (typeof PauseSubscriptionEstimateBodyPauseOption)[keyof typeof PauseSubscriptionEstimateBodyPauseOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseSubscriptionEstimateBodyPauseOption = {
  immediately: "immediately",
  end_of_term: "end_of_term",
  specific_date: "specific_date",
  billing_cycles: "billing_cycles",
} as const;

export type PauseSubscriptionEstimateBody = {
  /** List of options to pause the subscription. \* billing_cycles -

Pause at the end of the current term, and resume automatically after the number of billing cycles you specify in [skip_billing_cycles](/docs/api/estimates?prod_cat_ver=2#pause_subscription_estimate_subscription_skip_billing_cycles)
\* immediately - Pause immediately
\* end_of_term - Pause at the end of current term
\* specific_date - Pause on a specific date
 */
  pause_option?: PauseSubscriptionEstimateBodyPauseOption;
  /** Applicable when unbilled charges are present for the subscription and [pause_option](/docs/api/estimates#pause_subscription_estimate_pause_option) is set as `immediately`. **Note:** On the invoice raised, an automatic charge is attempted on the payment method available, if customer's auto-collection property is set to `on`.
\* invoice -

Invoice charges

If `invoice` is chosen, an automatic charge is attempted on the payment method available if the customer has enabled auto-collection. If a payment collection fails or when auto-collection is not enabled, the invoice is closed as unpaid.
\* no_action -

Retain as unbilled

If `no_action` is chosen, charges are added to the resumption invoice.
 */
  unbilled_charges_handling?: PauseSubscriptionEstimateBodyUnbilledChargesHandling;
  /** Parameters for subscription
   */
  subscription?: PauseSubscriptionEstimateBodySubscription;
};

export type PauseSubscriptionEstimateChargebeeEventWebhook =
  (typeof PauseSubscriptionEstimateChargebeeEventWebhook)[keyof typeof PauseSubscriptionEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseSubscriptionEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type PauseSubscriptionEstimateChargebeeEventEmail =
  (typeof PauseSubscriptionEstimateChargebeeEventEmail)[keyof typeof PauseSubscriptionEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseSubscriptionEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type PauseSubscriptionEstimateChargebeeEventActions =
  (typeof PauseSubscriptionEstimateChargebeeEventActions)[keyof typeof PauseSubscriptionEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseSubscriptionEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type PauseSubscriptionEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: PauseSubscriptionEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: PauseSubscriptionEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: PauseSubscriptionEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SubscriptionChangeTermEndEstimate200 = {
  estimate: Estimate;
};

export type SubscriptionChangeTermEndEstimateBody = {
  /** The time at which the current term should end for this subscription.
   */
  term_ends_at: number;
  /** Applicable for *active* / *non_renewing* subscriptions. If specified as *true* prorated charges / credits will be added during this operation.
   */
  prorate?: boolean;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
};

export type SubscriptionChangeTermEndEstimateChargebeeEventWebhook =
  (typeof SubscriptionChangeTermEndEstimateChargebeeEventWebhook)[keyof typeof SubscriptionChangeTermEndEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionChangeTermEndEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SubscriptionChangeTermEndEstimateChargebeeEventEmail =
  (typeof SubscriptionChangeTermEndEstimateChargebeeEventEmail)[keyof typeof SubscriptionChangeTermEndEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionChangeTermEndEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SubscriptionChangeTermEndEstimateChargebeeEventActions =
  (typeof SubscriptionChangeTermEndEstimateChargebeeEventActions)[keyof typeof SubscriptionChangeTermEndEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionChangeTermEndEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SubscriptionChangeTermEndEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SubscriptionChangeTermEndEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SubscriptionChangeTermEndEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SubscriptionChangeTermEndEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type EstimateForCreatingASubscription200 = {
  estimate: Estimate;
};

/**
 * Parameters for item_tiers

 */
export type EstimateForCreatingASubscriptionBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type EstimateForCreatingASubscriptionBody = {
  /** The generated invoice_estimate/next_invoice_estimate will include all the balances - Promotional Credits, Refundable Credits, and Excess Payments - if any. If you don't want these balances to be included you can specify 'false' for the parameter *use_existing_balances*.
   */
  use_existing_balances?: boolean;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** The number of subscription billing cycles (including the first one) to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html).
   */
  terms_to_charge?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..
   */
  billing_alignment_mode?: EstimateForCreatingASubscriptionBodyBillingAlignmentMode;
  /** The document date displayed on the invoice PDF. By default, it is the date of creation of the invoice or, when Metered Billing is enabled, it can be the date of closing the invoice. Provide this value to backdate the invoice (set the invoice date to a value in the past). Backdating an invoice is done for reasons such as booking revenue for a previous date or when the non-recurring charge is effective as of a past date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of this date. The date should not be more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
   */
  invoice_date?: number;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or coupon codes.
   */
  coupon_ids?: string[];
  /** Parameters for subscription
   */
  subscription?: EstimateForCreatingASubscriptionBodySubscription;
  /** Parameters for shipping_address
   */
  shipping_address?: EstimateForCreatingASubscriptionBodyShippingAddress;
  /** Parameters for contract_term
   */
  contract_term?: EstimateForCreatingASubscriptionBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: EstimateForCreatingASubscriptionBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: EstimateForCreatingASubscriptionBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: EstimateForCreatingASubscriptionBodyItemTiers;
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* year - A period of 1 calendar year. \* week - A period of 7 days. \* month - A period of 1 calendar month.

 */
export type EstimateForCreatingASubscriptionBodyDiscountsPeriodUnitItem =
  (typeof EstimateForCreatingASubscriptionBodyDiscountsPeriodUnitItem)[keyof typeof EstimateForCreatingASubscriptionBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type EstimateForCreatingASubscriptionBodyDiscountsDurationTypeItem =
  (typeof EstimateForCreatingASubscriptionBodyDiscountsDurationTypeItem)[keyof typeof EstimateForCreatingASubscriptionBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodyDiscountsDurationTypeItem = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type EstimateForCreatingASubscriptionBodyDiscountsApplyOnItem =
  (typeof EstimateForCreatingASubscriptionBodyDiscountsApplyOnItem)[keyof typeof EstimateForCreatingASubscriptionBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type EstimateForCreatingASubscriptionBodyDiscounts = {
  apply_on: EstimateForCreatingASubscriptionBodyDiscountsApplyOnItem[];
  duration_type: EstimateForCreatingASubscriptionBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: EstimateForCreatingASubscriptionBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnOptionItem =
  (typeof EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnOptionItem)[keyof typeof EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_creation - the time of creation of the subscription.

 */
export type EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnEventItem =
  (typeof EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnEventItem)[keyof typeof EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type EstimateForCreatingASubscriptionBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: EstimateForCreatingASubscriptionBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type EstimateForCreatingASubscriptionBodyContractTermActionAtTermEnd =
  (typeof EstimateForCreatingASubscriptionBodyContractTermActionAtTermEnd)[keyof typeof EstimateForCreatingASubscriptionBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodyContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
} as const;

/**
 * Parameters for contract_term

 */
export type EstimateForCreatingASubscriptionBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: EstimateForCreatingASubscriptionBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type EstimateForCreatingASubscriptionBodyShippingAddressValidationStatus =
  (typeof EstimateForCreatingASubscriptionBodyShippingAddressValidationStatus)[keyof typeof EstimateForCreatingASubscriptionBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type EstimateForCreatingASubscriptionBodyShippingAddress = {
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: EstimateForCreatingASubscriptionBodyShippingAddressValidationStatus;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan.

 */
export type EstimateForCreatingASubscriptionBodySubscriptionTrialEndAction =
  (typeof EstimateForCreatingASubscriptionBodySubscriptionTrialEndAction)[keyof typeof EstimateForCreatingASubscriptionBodySubscriptionTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodySubscriptionTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* year - Charge based on year(s) \* day - Charge based on day(s) \* week - Charge based on week(s) \* month - Charge based on month(s)

 */
export type EstimateForCreatingASubscriptionBodySubscriptionFreePeriodUnit =
  (typeof EstimateForCreatingASubscriptionBodySubscriptionFreePeriodUnit)[keyof typeof EstimateForCreatingASubscriptionBodySubscriptionFreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodySubscriptionFreePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Parameters for subscription

 */
export type EstimateForCreatingASubscriptionBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period.
   */
  trial_end?: number;
  /** The date/time at which the subscription is to start. If not provided, the subscription starts immediately. You can provide a value in the past as well. This is called backdating the subscription creation and is done when the subscription has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past, where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `start_date` cannot be earlier than 14th February.
 */
  start_date?: number;
  /** The period of time by which the first term of the subscription is to be extended free-of-charge. The value must be in multiples of free_period_unit.
   */
  free_period?: number;
  /** The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* year - Charge based on year(s) \* day - Charge based on day(s) \* week - Charge based on week(s) \* month - Charge based on month(s)
   */
  free_period_unit?: EstimateForCreatingASubscriptionBodySubscriptionFreePeriodUnit;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan.
   */
  trial_end_action?: EstimateForCreatingASubscriptionBodySubscriptionTrialEndAction;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..

 */
export type EstimateForCreatingASubscriptionBodyBillingAlignmentMode =
  (typeof EstimateForCreatingASubscriptionBodyBillingAlignmentMode)[keyof typeof EstimateForCreatingASubscriptionBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type EstimateForCreatingASubscriptionChargebeeEventWebhook =
  (typeof EstimateForCreatingASubscriptionChargebeeEventWebhook)[keyof typeof EstimateForCreatingASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForCreatingASubscriptionChargebeeEventEmail =
  (typeof EstimateForCreatingASubscriptionChargebeeEventEmail)[keyof typeof EstimateForCreatingASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForCreatingASubscriptionChargebeeEventActions =
  (typeof EstimateForCreatingASubscriptionChargebeeEventActions)[keyof typeof EstimateForCreatingASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForCreatingASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EstimateForCreatingASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EstimateForCreatingASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EstimateForCreatingASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RegenerateInvoiceEstimate200 = {
  estimate: Estimate;
};

export type RegenerateInvoiceEstimateBody = {
  /** The start date of the period being invoiced. The default value is [current_term_start](https://apidocs.chargebee.com/docs/api/subscriptions#subscription_current_term_start ).
   */
  date_from?: number;
  /** The end date of the period being invoiced. The default value is [current_term_end](https://apidocs.chargebee.com/docs/api/subscriptions#subscription_current_term_end ).
   */
  date_to?: number;
  /** Whether the charges should be prorated according to the term specified by `date_from` and `date_to`. Should not be passed without `date_from` and `date_to`.
   */
  prorate?: boolean;
  /** Only applicable when [Consolidated Invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html ) is enabled for the customer. Set to `false` to leave the current term charge for the subscription as [unbilled](https://www.chargebee.com/docs/unbilled-charges.html ). Once you have done this for all suitable subscriptions of the customer, call [Create an invoice for unbilled charges](https://apidocs.chargebee.com/docs/api/unbilled_charges#create_an_invoice_for_unbilled_charges ) to invoice them.
   */
  invoice_immediately?: boolean;
};

export type RegenerateInvoiceEstimateChargebeeEventWebhook =
  (typeof RegenerateInvoiceEstimateChargebeeEventWebhook)[keyof typeof RegenerateInvoiceEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegenerateInvoiceEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RegenerateInvoiceEstimateChargebeeEventEmail =
  (typeof RegenerateInvoiceEstimateChargebeeEventEmail)[keyof typeof RegenerateInvoiceEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegenerateInvoiceEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RegenerateInvoiceEstimateChargebeeEventActions =
  (typeof RegenerateInvoiceEstimateChargebeeEventActions)[keyof typeof RegenerateInvoiceEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegenerateInvoiceEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RegenerateInvoiceEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RegenerateInvoiceEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RegenerateInvoiceEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RegenerateInvoiceEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpcomingInvoicesEstimate200 = {
  estimate: Estimate;
};

export type UpcomingInvoicesEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type EstimateForUpdatingASubscription200 = {
  estimate: Estimate;
};

/**
 * Parameters for item_tiers

 */
export type EstimateForUpdatingASubscriptionBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type EstimateForUpdatingASubscriptionBody = {
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** If `true` then the existing `subscription_items` list for the subscription is replaced by the one provided. If `false` then the provided `subscription_items` list gets added to the existing list.
   */
  replace_items_list?: boolean;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is set to `true`, and if the site is configured to set invoice dates to date of closing, then upon invoice closure, this date is changed to the invoice closing date. taxes and line_item_taxes are computed based on the tax configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* It is not earlier than `changes_scheduled_at`, `reactivate_from`, or `trial_end`.
* `invoice_immediately` is `true`.
.
 */
  invoice_date?: number;
  /** Billing cycles set for plan-item price is used by default.
   */
  billing_cycles?: number;
  /** The number of subscription billing cycles to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html). If a new term is started for the subscription due to this API call, then `terms_to_charge` is inclusive of this new term. See description for the `force_term_reset` parameter to learn more about when a subscription term is reset.
   */
  terms_to_charge?: number;
  /** If the subscription `status` is `cancelled` and it is being reactivated via this operation, this is the date/time at which the subscription should be reactivated.  
**Note:** It is recommended not to pass this parameter along with `changed_scheduled_at`. `reactivate_from` can be backdated (set to a value in the past). Use backdating when the subscription has been reactivated already but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription reactivation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after the last date/time any of the product catalog items of the subscription were changed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  reactivate_from?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: EstimateForUpdatingASubscriptionBodyBillingAlignmentMode;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or [coupon codes](https://apidocs.chargebee.com/docs/api/coupon_codes).
   */
  coupon_ids?: string[];
  /** If `true` then the existing `coupon_ids` list for the subscription is replaced by the one provided. If `false` then the provided list gets added to the existing `coupon_ids`.
   */
  replace_coupon_list?: boolean;
  /** * When `true`: [Prorated credits or charges](https://www.chargebee.com/docs/2.0/proration.html#proration-mechanism) are created as applicable for this change.
* When `false`: The subscription is changed without creating any credits or charges.
* When not provided, the value configured in the [site settings](https://www.chargebee.com/docs/2.0/proration.html#proration-for-subscription-change) is considered.

**Caveat**

For further changes within the same billing term, when `prorate` is set to `true`, **credits** are **not created** when **all** the conditions below hold true:

An immediate previous change was made

* with `prorate` set to `false` and
* no changes were made to the subscription's billing term and
* a change was made to either the subscription's items or their prices.
 */
  prorate?: boolean;
  /** Set this to true if you want the update to be applied at the end of the current subscription billing cycle.
   */
  end_of_term?: boolean;
  /** Say the subscription has the renewal date as 28th of every month. When the plan-item price of the subscription is set to one that has the same billing period as the current plan-item price, the subscription change does not change the term. In other words, the subscription still renews on the 28th. Passing this parameter as `true` will have the subscription reset its term to the current date (provided `end_of_term` is false).
   **Note**: When the new plan-item price has a billing period different from the current plan-item price of the subscription, the term is always reset, regardless of the value passed for this parameter.
   */
  force_term_reset?: boolean;
  /** Applicable only for `cancelled` subscriptions. When passed as `true`, the canceled subscription is activated; otherwise subscription changes are made without changing its `status`. If not passed, subscription will be activated only if `subscription_items` is passed.
   */
  reactivate?: boolean;
  /** If true, all the unbilled charges will be included for the invoice estimate.
   */
  include_delayed_charges?: boolean;
  /** The generated invoice_estimate/next_invoice_estimate will include all the balances - Promotional Credits, Refundable Credits, and Excess Payments - if any. If you don't want these balances to be included you can specify 'false' for the parameter *use_existing_balances*.
   */
  use_existing_balances?: boolean;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
  /** Parameters for subscription
   */
  subscription?: EstimateForUpdatingASubscriptionBodySubscription;
  /** Parameters for billing_address
   */
  billing_address?: EstimateForUpdatingASubscriptionBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: EstimateForUpdatingASubscriptionBodyShippingAddress;
  /** Parameters for customer
   */
  customer?: EstimateForUpdatingASubscriptionBodyCustomer;
  /** Parameters for subscription_items
   */
  subscription_items?: EstimateForUpdatingASubscriptionBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: EstimateForUpdatingASubscriptionBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: EstimateForUpdatingASubscriptionBodyItemTiers;
};

/**
 * The operation to be carried out for the discount. \* add - The discount is attached to the subscription. \* remove - The discount (given by `discounts[id]`) is removed from the subscription. Subsequent invoices will no longer have the discount applied. **Tip:** If you want to replace a discount, `remove` it and `add` another in the same API call.

 */
export type EstimateForUpdatingASubscriptionBodyDiscountsOperationTypeItem =
  (typeof EstimateForUpdatingASubscriptionBodyDiscountsOperationTypeItem)[keyof typeof EstimateForUpdatingASubscriptionBodyDiscountsOperationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyDiscountsOperationTypeItem = {
  add: "add",
  remove: "remove",
} as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type EstimateForUpdatingASubscriptionBodyDiscountsPeriodUnitItem =
  (typeof EstimateForUpdatingASubscriptionBodyDiscountsPeriodUnitItem)[keyof typeof EstimateForUpdatingASubscriptionBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type EstimateForUpdatingASubscriptionBodyDiscountsDurationTypeItem =
  (typeof EstimateForUpdatingASubscriptionBodyDiscountsDurationTypeItem)[keyof typeof EstimateForUpdatingASubscriptionBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyDiscountsDurationTypeItem = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type EstimateForUpdatingASubscriptionBodyDiscountsApplyOnItem =
  (typeof EstimateForUpdatingASubscriptionBodyDiscountsApplyOnItem)[keyof typeof EstimateForUpdatingASubscriptionBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type EstimateForUpdatingASubscriptionBodyDiscounts = {
  apply_on: EstimateForUpdatingASubscriptionBodyDiscountsApplyOnItem[];
  duration_type: EstimateForUpdatingASubscriptionBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: EstimateForUpdatingASubscriptionBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
  operation_type: EstimateForUpdatingASubscriptionBodyDiscountsOperationTypeItem[];
  /** An immutable unique id for the discount. It is always auto-generated.
   */
  id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnOptionItem =
  (typeof EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnOptionItem)[keyof typeof EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnEventItem =
  (typeof EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnEventItem)[keyof typeof EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](/docs/api#handling_currency_units) is enabled. If `changes_scheduled_at` is in the past and a `unit_price_in_decimal` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: EstimateForUpdatingASubscriptionBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Parameters for customer

 */
export type EstimateForUpdatingASubscriptionBodyCustomer = {
  /** VAT number of this customer. If not provided then taxes are not calculated for the estimate. Applicable only when taxes are configured for the EU or UK region. VAT validation is not done for this.
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type EstimateForUpdatingASubscriptionBodyShippingAddressValidationStatus =
  (typeof EstimateForUpdatingASubscriptionBodyShippingAddressValidationStatus)[keyof typeof EstimateForUpdatingASubscriptionBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type EstimateForUpdatingASubscriptionBodyShippingAddress = {
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: EstimateForUpdatingASubscriptionBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type EstimateForUpdatingASubscriptionBodyBillingAddressValidationStatus =
  (typeof EstimateForUpdatingASubscriptionBodyBillingAddressValidationStatus)[keyof typeof EstimateForUpdatingASubscriptionBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyBillingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for billing_address

 */
export type EstimateForUpdatingASubscriptionBodyBillingAddress = {
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: EstimateForUpdatingASubscriptionBodyBillingAddressValidationStatus;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionTrialEndAction =
  (typeof EstimateForUpdatingASubscriptionBodySubscriptionTrialEndAction)[keyof typeof EstimateForUpdatingASubscriptionBodySubscriptionTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodySubscriptionTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* year - Charge based on year(s) \* day - Charge based on day(s) \* month - Charge based on month(s) \* week - Charge based on week(s)

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionFreePeriodUnit =
  (typeof EstimateForUpdatingASubscriptionBodySubscriptionFreePeriodUnit)[keyof typeof EstimateForUpdatingASubscriptionBodySubscriptionFreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodySubscriptionFreePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionOfflinePaymentMethod =
  (typeof EstimateForUpdatingASubscriptionBodySubscriptionOfflinePaymentMethod)[keyof typeof EstimateForUpdatingASubscriptionBodySubscriptionOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodySubscriptionOfflinePaymentMethod =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type EstimateForUpdatingASubscriptionBodySubscriptionAutoCollection =
  (typeof EstimateForUpdatingASubscriptionBodySubscriptionAutoCollection)[keyof typeof EstimateForUpdatingASubscriptionBodySubscriptionAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodySubscriptionAutoCollection = {
  on: "on",
  off: "off",
} as const;

/**
 * Parameters for subscription

 */
export type EstimateForUpdatingASubscriptionBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id: string;
  /** The new start date of a `future` subscription. Applicable only for `future` subscriptions.
   */
  start_date?: number;
  /** The time at which the trial has ended or will end for the subscription. This is only allowed when the subscription `status` is `future`, `in_trial`, or `cancelled`. Also, the value must not be earlier than `changes_scheduled_at` or `start_date`. **Note** : This parameter can be backdated (set to a value in the past) only when the subscription is in `cancelled` or `in_trial` `status`. Do this to keep a record of when the trial ended in case it ended at some point in the past. When `trial_end` is backdated, the subscription immediately goes into `active` or `non_renewing` status.
   */
  trial_end?: number;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: EstimateForUpdatingASubscriptionBodySubscriptionAutoCollection;
  /** The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check
   */
  offline_payment_method?: EstimateForUpdatingASubscriptionBodySubscriptionOfflinePaymentMethod;
  /** The period of time by which the first term of the subscription is to be extended free-of-charge. The value must be in multiples of free_period_unit.
   */
  free_period?: number;
  /** The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* year - Charge based on year(s) \* day - Charge based on day(s) \* month - Charge based on month(s) \* week - Charge based on week(s)
   */
  free_period_unit?: EstimateForUpdatingASubscriptionBodySubscriptionFreePeriodUnit;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.
   */
  trial_end_action?: EstimateForUpdatingASubscriptionBodySubscriptionTrialEndAction;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type EstimateForUpdatingASubscriptionBodyBillingAlignmentMode =
  (typeof EstimateForUpdatingASubscriptionBodyBillingAlignmentMode)[keyof typeof EstimateForUpdatingASubscriptionBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type EstimateForUpdatingASubscriptionChargebeeEventWebhook =
  (typeof EstimateForUpdatingASubscriptionChargebeeEventWebhook)[keyof typeof EstimateForUpdatingASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForUpdatingASubscriptionChargebeeEventEmail =
  (typeof EstimateForUpdatingASubscriptionChargebeeEventEmail)[keyof typeof EstimateForUpdatingASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForUpdatingASubscriptionChargebeeEventActions =
  (typeof EstimateForUpdatingASubscriptionChargebeeEventActions)[keyof typeof EstimateForUpdatingASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForUpdatingASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForUpdatingASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EstimateForUpdatingASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EstimateForUpdatingASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EstimateForUpdatingASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type GiftSubscriptionEstimateForItems200 = {
  estimate: Estimate;
};

/**
 * Parameters for subscription_items

 */
export type GiftSubscriptionEstimateForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id?: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type GiftSubscriptionEstimateForItemsBodyShippingAddressValidationStatus =
  (typeof GiftSubscriptionEstimateForItemsBodyShippingAddressValidationStatus)[keyof typeof GiftSubscriptionEstimateForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftSubscriptionEstimateForItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type GiftSubscriptionEstimateForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: GiftSubscriptionEstimateForItemsBodyShippingAddressValidationStatus;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type GiftSubscriptionEstimateForItemsBodyPaymentIntentAdditionalInformation =
  { [key: string]: any };

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* google_pay - google_pay \* apple_pay - apple_pay \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* sofort - sofort \* ideal - ideal \* boleto - boleto

 */
export type GiftSubscriptionEstimateForItemsBodyPaymentIntentPaymentMethodType =
  (typeof GiftSubscriptionEstimateForItemsBodyPaymentIntentPaymentMethodType)[keyof typeof GiftSubscriptionEstimateForItemsBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftSubscriptionEstimateForItemsBodyPaymentIntentPaymentMethodType =
  {
    card: "card",
    ideal: "ideal",
    sofort: "sofort",
    bancontact: "bancontact",
    google_pay: "google_pay",
    dotpay: "dotpay",
    giropay: "giropay",
    apple_pay: "apple_pay",
    upi: "upi",
    netbanking_emandates: "netbanking_emandates",
    paypal_express_checkout: "paypal_express_checkout",
    direct_debit: "direct_debit",
    boleto: "boleto",
    venmo: "venmo",
    amazon_payments: "amazon_payments",
    pay_to: "pay_to",
    faster_payments: "faster_payments",
    sepa_instant_transfer: "sepa_instant_transfer",
  } as const;

/**
 * Parameters for payment_intent

 */
export type GiftSubscriptionEstimateForItemsBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* google_pay - google_pay \* apple_pay - apple_pay \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* sofort - sofort \* ideal - ideal \* boleto - boleto
   */
  payment_method_type?: GiftSubscriptionEstimateForItemsBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: GiftSubscriptionEstimateForItemsBodyPaymentIntentAdditionalInformation;
};

/**
 * Parameters for gift_receiver

 */
export type GiftSubscriptionEstimateForItemsBodyGiftReceiver = {
  /** Receiver customer id.
   */
  customer_id: string;
  /** First name of the receiver as given by the gifter.
   */
  first_name: string;
  /** Last name of the receiver as given by the gifter,
   */
  last_name: string;
  /** Email of the receiver. All gift related emails are sent to this email.
   */
  email: string;
};

/**
 * Parameters for gifter

 */
export type GiftSubscriptionEstimateForItemsBodyGifter = {
  /** Gifter customer id.
   */
  customer_id: string;
  /** Gifter sign-off name
   */
  signature: string;
  /** Personalized message for the gift.
   */
  note?: string;
  /** Identifier of the payment source
   */
  payment_src_id?: string;
};

/**
 * Parameters for gift

 */
export type GiftSubscriptionEstimateForItemsBodyGift = {
  /** Indicates the date on which the gift notification is sent to the receiver. If not passed, the receiver is notified immediately.
   */
  scheduled_at?: number;
  /** When `true`, the claim happens automatically. When not passed, the default value in the site settings is used.
   */
  auto_claim?: boolean;
  /** When `true`, indicates that the gift does not expire. Do not pass or pass as `false` when `auto_claim` is set.
   */
  no_expiry?: boolean;
  /** The date until which the gift can be claimed. Must be set to a value after `scheduled_at`. If the gift is not claimed within `claim_expiry_date`, it will expire and the subscription will move to `cancelled` state. When not passed, the value specified in the site settings will be used. Pass as `NULL` or do not pass when `auto_claim` or `no_expiry` are set.
   */
  claim_expiry_date?: number;
};

export type GiftSubscriptionEstimateForItemsBody = {
  /** List of coupons to be applied to this subscription. You can provide coupon ids or coupon codes.
   */
  coupon_ids?: string[];
  /** Parameters for gift
   */
  gift?: GiftSubscriptionEstimateForItemsBodyGift;
  /** Parameters for gifter
   */
  gifter?: GiftSubscriptionEstimateForItemsBodyGifter;
  /** Parameters for gift_receiver
   */
  gift_receiver?: GiftSubscriptionEstimateForItemsBodyGiftReceiver;
  /** Parameters for payment_intent
   */
  payment_intent?: GiftSubscriptionEstimateForItemsBodyPaymentIntent;
  /** Parameters for shipping_address
   */
  shipping_address?: GiftSubscriptionEstimateForItemsBodyShippingAddress;
  /** Parameters for subscription_items
   */
  subscription_items?: GiftSubscriptionEstimateForItemsBodySubscriptionItems;
};

export type GiftSubscriptionEstimateForItemsChargebeeEventWebhook =
  (typeof GiftSubscriptionEstimateForItemsChargebeeEventWebhook)[keyof typeof GiftSubscriptionEstimateForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftSubscriptionEstimateForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type GiftSubscriptionEstimateForItemsChargebeeEventEmail =
  (typeof GiftSubscriptionEstimateForItemsChargebeeEventEmail)[keyof typeof GiftSubscriptionEstimateForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftSubscriptionEstimateForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type GiftSubscriptionEstimateForItemsChargebeeEventActions =
  (typeof GiftSubscriptionEstimateForItemsChargebeeEventActions)[keyof typeof GiftSubscriptionEstimateForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftSubscriptionEstimateForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type GiftSubscriptionEstimateForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: GiftSubscriptionEstimateForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: GiftSubscriptionEstimateForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: GiftSubscriptionEstimateForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateInvoiceForItemsEstimate200 = {
  estimate: Estimate;
};

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateInvoiceForItemsEstimateBodyDiscountsApplyOnItem =
  (typeof CreateInvoiceForItemsEstimateBodyDiscountsApplyOnItem)[keyof typeof CreateInvoiceForItemsEstimateBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateInvoiceForItemsEstimateBodyDiscounts = {
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  apply_on: CreateInvoiceForItemsEstimateBodyDiscountsApplyOnItem[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

export type CreateInvoiceForItemsEstimateBody = {
  /** The currency code (ISO 4217 format) of the invoice amount.
   */
  currency_code?: string;
  /** A note for this particular invoice. This, and [all other notes](/docs/api/invoices#invoice_notes) for the invoice are displayed on the PDF invoice sent to the customer.
   */
  invoice_note?: string;
  /** Set as `true` to remove the **[general note](https://www.chargebee.com/docs/invoice_notes.html#adding-general-notes)** from this invoice.
   */
  remove_general_note?: boolean;
  /** List of Coupons to be added.
   */
  coupon_ids?: string[];
  /** Authorization transaction to be captured.
   */
  authorization_transaction_id?: string;
  /** Payment source to be used for this payment.
   */
  payment_source_id?: string;
  /** The customer level auto collection will be override if specified. \* on - Whenever an invoice is created, an automatic attempt will be made to charge. \* off - Whenever an invoice is created as payment due.
   */
  auto_collection?: CreateInvoiceForItemsEstimateBodyAutoCollection;
  /** The document date displayed on the invoice PDF. By default, it is the date of creation of the invoice or, when Metered Billing is enabled, it can be the date of closing the invoice. Provide this value to backdate the invoice (set the invoice date to a value in the past). Backdating an invoice is done for reasons such as booking revenue for a previous date or when the non-recurring charge is effective as of a past date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of this date. The date should not be more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
   */
  invoice_date?: number;
  /** Parameters for invoice
   */
  invoice?: CreateInvoiceForItemsEstimateBodyInvoice;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateInvoiceForItemsEstimateBodyShippingAddress;
  /** Parameters for item_prices
   */
  item_prices?: CreateInvoiceForItemsEstimateBodyItemPrices;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateInvoiceForItemsEstimateBodyItemTiers;
  /** Parameters for charges
   */
  charges?: CreateInvoiceForItemsEstimateBodyCharges;
  /** Parameters for notes_to_remove
   */
  notes_to_remove?: CreateInvoiceForItemsEstimateBodyNotesToRemove;
  /** Parameters for discounts
   */
  discounts?: CreateInvoiceForItemsEstimateBodyDiscounts;
};

/**
 * Type of entity to which the [note](./invoices#invoice_notes) belongs. To remove the general note, use the `remove_general_note` parameter. \* plan - Entity that represents a plan. \* addon - Entity that represents an addon. \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan_item_price - Indicates that this line item is based on plan Item Price \* customer - Entity that represents a customer. \* subscription - Entity that represents a subscription of customer. \* charge_item_price - Indicates that this line item is based on charge Item Price \* coupon - Entity that represents a coupon.

 */
export type CreateInvoiceForItemsEstimateBodyNotesToRemoveEntityTypeItem =
  (typeof CreateInvoiceForItemsEstimateBodyNotesToRemoveEntityTypeItem)[keyof typeof CreateInvoiceForItemsEstimateBodyNotesToRemoveEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateBodyNotesToRemoveEntityTypeItem = {
  customer: "customer",
  subscription: "subscription",
  coupon: "coupon",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * Parameters for notes_to_remove

 */
export type CreateInvoiceForItemsEstimateBodyNotesToRemove = {
  entity_type?: CreateInvoiceForItemsEstimateBodyNotesToRemoveEntityTypeItem[];
  /** Unique identifier of the [note](https://apidocs.chargebee.com/docs/api/invoices#invoice_notes).
   */
  entity_id?: string[];
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* consumed - Transaction is for an item that is consumed directly \* vendor_use - Transaction is for an item that is subject to vendor use tax \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type CreateInvoiceForItemsEstimateBodyChargesAvalaraSaleTypeItem =
  (typeof CreateInvoiceForItemsEstimateBodyChargesAvalaraSaleTypeItem)[keyof typeof CreateInvoiceForItemsEstimateBodyChargesAvalaraSaleTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateBodyChargesAvalaraSaleTypeItem = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

/**
 * Parameters for charges

 */
export type CreateInvoiceForItemsEstimateBodyCharges = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number[];
  /** The decimal representation of the amount for the [one-time charge](https://www.chargebee.com/docs/charges.html#one-time-charges ). Provide the value in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  /** Description for this charge
   */
  description?: string[];
  /** The amount to be charged is taxable or not.
   */
  taxable?: boolean[];
  /** Tax profile of the charge.
   */
  tax_profile_id?: string[];
  /** The Avalara tax codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html).
   */
  avalara_tax_code?: string[];
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string[];
  /** The TaxJar product codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [TaxJar integration](https://www.chargebee.com/docs/taxjar.html).
   */
  taxjar_product_code?: string[];
  avalara_sale_type?: CreateInvoiceForItemsEstimateBodyChargesAvalaraSaleTypeItem[];
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number[];
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number[];
  /** The time when the service period for the charge starts.
   */
  date_from?: number[];
  /** The time when the service period for the charge ends.
   */
  date_to?: number[];
};

/**
 * Parameters for item_tiers

 */
export type CreateInvoiceForItemsEstimateBodyItemTiers = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_prices

 */
export type CreateInvoiceForItemsEstimateBodyItemPrices = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Item price quantity
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** The time when the service period for the item starts.
   */
  date_from?: number[];
  /** The time when the service period for the item ends.
   */
  date_to?: number[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateInvoiceForItemsEstimateBodyShippingAddressValidationStatus =
  (typeof CreateInvoiceForItemsEstimateBodyShippingAddressValidationStatus)[keyof typeof CreateInvoiceForItemsEstimateBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateInvoiceForItemsEstimateBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateInvoiceForItemsEstimateBodyShippingAddressValidationStatus;
};

/**
 * Parameters for invoice

 */
export type CreateInvoiceForItemsEstimateBodyInvoice = {
  /** Identifier of the customer for which this invoice needs to be created.
   */
  customer_id?: string;
  /** Identifier of the subscription for which this invoice needs to be created. Should be specified if 'customer_id' is not specified.(not applicable for consolidated invoice)
   */
  subscription_id?: string;
  /** Purchase Order Number for this invoice.
   */
  po_number?: string;
};

/**
 * The customer level auto collection will be override if specified. \* on - Whenever an invoice is created, an automatic attempt will be made to charge. \* off - Whenever an invoice is created as payment due.

 */
export type CreateInvoiceForItemsEstimateBodyAutoCollection =
  (typeof CreateInvoiceForItemsEstimateBodyAutoCollection)[keyof typeof CreateInvoiceForItemsEstimateBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type CreateInvoiceForItemsEstimateChargebeeEventWebhook =
  (typeof CreateInvoiceForItemsEstimateChargebeeEventWebhook)[keyof typeof CreateInvoiceForItemsEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateInvoiceForItemsEstimateChargebeeEventEmail =
  (typeof CreateInvoiceForItemsEstimateChargebeeEventEmail)[keyof typeof CreateInvoiceForItemsEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateInvoiceForItemsEstimateChargebeeEventActions =
  (typeof CreateInvoiceForItemsEstimateChargebeeEventActions)[keyof typeof CreateInvoiceForItemsEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateInvoiceForItemsEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateInvoiceForItemsEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateInvoiceForItemsEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateInvoiceForItemsEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ResumeSubscriptionEstimate200 = {
  estimate: Estimate;
};

/**
 * Parameters for subscription

 */
export type ResumeSubscriptionEstimateBodySubscription = {
  /** For a paused subscription, it is the date/time when the subscription is scheduled to resume. If the pause is for an indefinite period, this value is not returned.
   */
  resume_date?: number;
};

/**
 * Applicable when charges get added during this operation and **resume_option** is set as 'immediately'. Allows to raise invoice immediately or add them to unbilled charges. \* add_to_unbilled_charges - Add to unbilled charges \* invoice_immediately - Invoice immediately

 */
export type ResumeSubscriptionEstimateBodyChargesHandling =
  (typeof ResumeSubscriptionEstimateBodyChargesHandling)[keyof typeof ResumeSubscriptionEstimateBodyChargesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeSubscriptionEstimateBodyChargesHandling = {
  invoice_immediately: "invoice_immediately",
  add_to_unbilled_charges: "add_to_unbilled_charges",
} as const;

/**
 * List of options to resume the subscription. \* immediately - Resume immediately \* specific_date - Resume on a specific date

 */
export type ResumeSubscriptionEstimateBodyResumeOption =
  (typeof ResumeSubscriptionEstimateBodyResumeOption)[keyof typeof ResumeSubscriptionEstimateBodyResumeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeSubscriptionEstimateBodyResumeOption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

export type ResumeSubscriptionEstimateBody = {
  /** List of options to resume the subscription. \* immediately - Resume immediately \* specific_date - Resume on a specific date
   */
  resume_option?: ResumeSubscriptionEstimateBodyResumeOption;
  /** Applicable when charges get added during this operation and **resume_option** is set as 'immediately'. Allows to raise invoice immediately or add them to unbilled charges. \* add_to_unbilled_charges - Add to unbilled charges \* invoice_immediately - Invoice immediately
   */
  charges_handling?: ResumeSubscriptionEstimateBodyChargesHandling;
  /** Parameters for subscription
   */
  subscription?: ResumeSubscriptionEstimateBodySubscription;
};

export type ResumeSubscriptionEstimateChargebeeEventWebhook =
  (typeof ResumeSubscriptionEstimateChargebeeEventWebhook)[keyof typeof ResumeSubscriptionEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeSubscriptionEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ResumeSubscriptionEstimateChargebeeEventEmail =
  (typeof ResumeSubscriptionEstimateChargebeeEventEmail)[keyof typeof ResumeSubscriptionEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeSubscriptionEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ResumeSubscriptionEstimateChargebeeEventActions =
  (typeof ResumeSubscriptionEstimateChargebeeEventActions)[keyof typeof ResumeSubscriptionEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeSubscriptionEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ResumeSubscriptionEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ResumeSubscriptionEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ResumeSubscriptionEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ResumeSubscriptionEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CancelSubscriptionForItemsEstimate200 = {
  estimate: Estimate;
};

/**
 * Parameters for subscription_items

 */
export type CancelSubscriptionForItemsEstimateBodySubscriptionItems = {
  /** The unique `id` of the charge item_price that represents the termination fee.
   */
  item_price_id?: string[];
  /** The quantity associated with the termination fee. Applicable only when the item_price for the termination charge is quantity-based.
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The termination fee. In case it is quantity-based, this is the fee per unit.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** The service period of the termination fee---expressed in days---starting from the current date.
   */
  service_period_days?: number[];
};

/**
 * Cancels the current contract term.

* `terminate_immediately` immediately does the following:
  * sets the contract term [`status`](contract_terms#contract_term_status) to `terminated`.
  * Cancels the subscription.
  * Collects any [termination fee](contract_terms#termintation_fee).
* `end_of_contract_term` Sets the [`contract_term[action_at_term_end]`](contract_terms#contract_term_action_at_term_end) to `cancel`. In other words, the contract term is not renewed and the subscription is canceled at the end of the contract term.
. \* terminate_immediately - Terminate immediately \* end_of_contract_term - End of contract term

 */
export type CancelSubscriptionForItemsEstimateBodyContractTermCancelOption =
  (typeof CancelSubscriptionForItemsEstimateBodyContractTermCancelOption)[keyof typeof CancelSubscriptionForItemsEstimateBodyContractTermCancelOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateBodyContractTermCancelOption = {
  terminate_immediately: "terminate_immediately",
  end_of_contract_term: "end_of_contract_term",
} as const;

/**
 * Applicable when the customer has remaining refundable credits(issued against online payments). If specified as schedule_refund, the refund will be initiated for these credits after they are applied against the subscription's past due invoices if any. **Note:** The refunds initiated will be asynchronous. Not applicable when 'end_of_term' is true. \* schedule_refund - Initiates refund of the remaining credits. \* no_action - No action is taken.

 */
export type CancelSubscriptionForItemsEstimateBodyRefundableCreditsHandling =
  (typeof CancelSubscriptionForItemsEstimateBodyRefundableCreditsHandling)[keyof typeof CancelSubscriptionForItemsEstimateBodyRefundableCreditsHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateBodyRefundableCreditsHandling = {
  no_action: "no_action",
  schedule_refund: "schedule_refund",
} as const;

/**
 * Applicable when the subscription has past due invoices. Specify this if you want to close the due invoices of the subscription. If specified as schedule_payment_collection/write_off, the due invoices of the subscription will be qualified for the selected operation after the remaining refundable credits and excess payments are applied. **Note:** The payment collection attempt will be asynchronous. Not applicable when 'end_of_term' is true. \* no_action - No action is taken. \* write_off - The amount due in the invoices will be written-off. Credit notes created due to write-off will not be sent in the response. \* schedule_payment_collection - An automatic charge for the due amount of the past invoices will be attempted on the payment method available, if customer's auto-collection property is 'ON'.

 */
export type CancelSubscriptionForItemsEstimateBodyAccountReceivablesHandling =
  (typeof CancelSubscriptionForItemsEstimateBodyAccountReceivablesHandling)[keyof typeof CancelSubscriptionForItemsEstimateBodyAccountReceivablesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateBodyAccountReceivablesHandling =
  {
    no_action: "no_action",
    schedule_payment_collection: "schedule_payment_collection",
    write_off: "write_off",
  } as const;

/**
 * For immediate cancellation (`end_of_term` = `false`), specify how to handle any unbilled charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* invoice - An invoice is generated immediately with the unbilled charges. \* delete - The unbilled charges are deleted.

 */
export type CancelSubscriptionForItemsEstimateBodyUnbilledChargesOption =
  (typeof CancelSubscriptionForItemsEstimateBodyUnbilledChargesOption)[keyof typeof CancelSubscriptionForItemsEstimateBodyUnbilledChargesOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateBodyUnbilledChargesOption = {
  invoice: "invoice",
  delete: "delete",
} as const;

/**
 * For immediate cancellation (`end_of_term` = `false`), specify how to provide credits for current term charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* none - No credits notes are created. \* full - Credits are issues for the full value of the current term charges. \* prorate - Prorated credits are issued.

 */
export type CancelSubscriptionForItemsEstimateBodyCreditOptionForCurrentTermCharges =
  (typeof CancelSubscriptionForItemsEstimateBodyCreditOptionForCurrentTermCharges)[keyof typeof CancelSubscriptionForItemsEstimateBodyCreditOptionForCurrentTermCharges];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateBodyCreditOptionForCurrentTermCharges =
  {
    none: "none",
    prorate: "prorate",
    full: "full",
  } as const;

export type CancelSubscriptionForItemsEstimateBody = {
  /** Set this to `true` if you want to cancel the subscription at the end of the current subscription billing cycle. The subscription `status` changes to `non_renewing`.
   */
  end_of_term?: boolean;
  /** Specify the date/time at which you want to cancel the subscription. This parameter should not be provided when `end_of_term` is passed as `true`. `cancel_at` can be set to a value in the past. This is called backdating. Use backdating when the subscription has been canceled already but its billing has been delayed. The following prerequisites must be met to allow backdating:

* Backdating must be enabled for subscription cancellation.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription cancellation. This limit is typically the day of the month by which the accounting for the previous month must be closed.
* The date is on or after `current_term_start`.
* The date is on or after the last date/time any of the following changes were made:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the subscription's plan is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  cancel_at?: number;
  /** For immediate cancellation (`end_of_term` = `false`), specify how to provide credits for current term charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* none - No credits notes are created. \* full - Credits are issues for the full value of the current term charges. \* prorate - Prorated credits are issued.
   */
  credit_option_for_current_term_charges?: CancelSubscriptionForItemsEstimateBodyCreditOptionForCurrentTermCharges;
  /** For immediate cancellation (`end_of_term` = `false`), specify how to handle any unbilled charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* invoice - An invoice is generated immediately with the unbilled charges. \* delete - The unbilled charges are deleted.
   */
  unbilled_charges_option?: CancelSubscriptionForItemsEstimateBodyUnbilledChargesOption;
  /** Applicable when the subscription has past due invoices. Specify this if you want to close the due invoices of the subscription. If specified as schedule_payment_collection/write_off, the due invoices of the subscription will be qualified for the selected operation after the remaining refundable credits and excess payments are applied. **Note:** The payment collection attempt will be asynchronous. Not applicable when 'end_of_term' is true. \* no_action - No action is taken. \* write_off - The amount due in the invoices will be written-off. Credit notes created due to write-off will not be sent in the response. \* schedule_payment_collection - An automatic charge for the due amount of the past invoices will be attempted on the payment method available, if customer's auto-collection property is 'ON'.
   */
  account_receivables_handling?: CancelSubscriptionForItemsEstimateBodyAccountReceivablesHandling;
  /** Applicable when the customer has remaining refundable credits(issued against online payments). If specified as schedule_refund, the refund will be initiated for these credits after they are applied against the subscription's past due invoices if any. **Note:** The refunds initiated will be asynchronous. Not applicable when 'end_of_term' is true. \* schedule_refund - Initiates refund of the remaining credits. \* no_action - No action is taken.
   */
  refundable_credits_handling?: CancelSubscriptionForItemsEstimateBodyRefundableCreditsHandling;
  /** Cancels the current contract term.

* `terminate_immediately` immediately does the following:
  * sets the contract term [`status`](contract_terms#contract_term_status) to `terminated`.
  * Cancels the subscription.
  * Collects any [termination fee](contract_terms#termintation_fee).
* `end_of_contract_term` Sets the [`contract_term[action_at_term_end]`](contract_terms#contract_term_action_at_term_end) to `cancel`. In other words, the contract term is not renewed and the subscription is canceled at the end of the contract term.
. \* terminate_immediately - Terminate immediately \* end_of_contract_term - End of contract term
 */
  contract_term_cancel_option?: CancelSubscriptionForItemsEstimateBodyContractTermCancelOption;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is `true`, and if the site is configured to set invoice dates to date of closing, then upon invoice closure, this date is changed to the invoice closing date. `taxes` and `line_item_taxes` are computed based on the `tax` configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* It is not earlier than `cancel_at`.
.
 */
  invoice_date?: number;
  /** Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Subscriptions \> Subscription Cancellation**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  cancel_reason_code?: string;
  /** Parameters for subscription_items
   */
  subscription_items?: CancelSubscriptionForItemsEstimateBodySubscriptionItems;
};

export type CancelSubscriptionForItemsEstimateChargebeeEventWebhook =
  (typeof CancelSubscriptionForItemsEstimateChargebeeEventWebhook)[keyof typeof CancelSubscriptionForItemsEstimateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CancelSubscriptionForItemsEstimateChargebeeEventEmail =
  (typeof CancelSubscriptionForItemsEstimateChargebeeEventEmail)[keyof typeof CancelSubscriptionForItemsEstimateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CancelSubscriptionForItemsEstimateChargebeeEventActions =
  (typeof CancelSubscriptionForItemsEstimateChargebeeEventActions)[keyof typeof CancelSubscriptionForItemsEstimateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsEstimateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CancelSubscriptionForItemsEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CancelSubscriptionForItemsEstimateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CancelSubscriptionForItemsEstimateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CancelSubscriptionForItemsEstimateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type EstimateForCreatingACustomerAndSubscription200 = {
  estimate: Estimate;
};

/**
 * Parameters for item_tiers

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyDiscountsPeriodUnitItem =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyDiscountsPeriodUnitItem)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyDiscountsPeriodUnitItem =
  {
    day: "day",
    week: "week",
    month: "month",
    year: "year",
  } as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyDiscountsDurationTypeItem =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyDiscountsDurationTypeItem)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyDiscountsDurationTypeItem =
  {
    one_time: "one_time",
    forever: "forever",
    limited_period: "limited_period",
  } as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyDiscountsApplyOnItem =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyDiscountsApplyOnItem)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyDiscountsApplyOnItem =
  {
    invoice_amount: "invoice_amount",
    specific_item_price: "specific_item_price",
  } as const;

/**
 * Parameters for discounts

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyDiscounts = {
  apply_on: EstimateForCreatingACustomerAndSubscriptionBodyDiscountsApplyOnItem[];
  duration_type: EstimateForCreatingACustomerAndSubscriptionBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: EstimateForCreatingACustomerAndSubscriptionBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnOptionItem =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnOptionItem)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnEventItem =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnEventItem)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type EstimateForCreatingACustomerAndSubscriptionBodyContractTermActionAtTermEnd =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyContractTermActionAtTermEnd)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
  } as const;

/**
 * Parameters for contract_term

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: EstimateForCreatingACustomerAndSubscriptionBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

export type EstimateForCreatingACustomerAndSubscriptionBody = {
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** The number of subscription billing cycles (including the first one) to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html).
   */
  terms_to_charge?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: EstimateForCreatingACustomerAndSubscriptionBodyBillingAlignmentMode;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or coupon codes.
   */
  coupon_ids?: string[];
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
  /** The document date displayed on the invoice PDF. By default, it is the date of creation of the invoice or, when Metered Billing is enabled, it can be the date of closing the invoice. Provide this value to backdate the invoice (set the invoice date to a value in the past). Backdating an invoice is done for reasons such as booking revenue for a previous date or when the non-recurring charge is effective as of a past date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of this date. The date should not be more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
   */
  invoice_date?: number;
  /** Indicates the Client profile id for the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  client_profile_id?: string;
  /** Parameters for subscription
   */
  subscription?: EstimateForCreatingACustomerAndSubscriptionBodySubscription;
  /** Parameters for billing_address
   */
  billing_address?: EstimateForCreatingACustomerAndSubscriptionBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: EstimateForCreatingACustomerAndSubscriptionBodyShippingAddress;
  /** Parameters for customer
   */
  customer?: EstimateForCreatingACustomerAndSubscriptionBodyCustomer;
  /** Parameters for contract_term
   */
  contract_term?: EstimateForCreatingACustomerAndSubscriptionBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: EstimateForCreatingACustomerAndSubscriptionBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: EstimateForCreatingACustomerAndSubscriptionBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: EstimateForCreatingACustomerAndSubscriptionBodyItemTiers;
};

/**
 * Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use \* industrial - When the purchase is made by an industrial business \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyCustomerCustomerType =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyCustomerCustomerType)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyCustomerCustomerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyCustomerCustomerType =
  {
    residential: "residential",
    business: "business",
    senior_citizen: "senior_citizen",
    industrial: "industrial",
  } as const;

/**
 * The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* b - State government \* c - Tribe/Status Indian/Indian Band \* a - Federal government \* f - Religious organization \* g - Resale \* d - Foreign diplomat \* e - Charitable or benevolent organization \* j - Direct pay permit \* k - Direct mail \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* n - Local government \* l - Other or custom \* m - Educational organization \* r - Non-resident \* p - Commercial aquaculture \* q - Commercial Fishery

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyCustomerEntityCode =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyCustomerEntityCode)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyCustomerEntityCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyCustomerEntityCode =
  {
    a: "a",
    b: "b",
    c: "c",
    d: "d",
    e: "e",
    f: "f",
    g: "g",
    h: "h",
    i: "i",
    j: "j",
    k: "k",
    l: "l",
    m: "m",
    n: "n",
    p: "p",
    q: "q",
    r: "r",
    med1: "med1",
    med2: "med2",
  } as const;

/**
 * Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyCustomerTaxability =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyCustomerTaxability)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyCustomerTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyCustomerTaxability =
  {
    taxable: "taxable",
    exempt: "exempt",
  } as const;

/**
 * Parameters for customer

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyCustomer = {
  /** VAT number of this customer. If not provided then taxes are not calculated for the estimate. Applicable only when taxes are configured for the EU or UK region. VAT validation is not done for this.
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
  /** Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.
 */
  taxability?: EstimateForCreatingACustomerAndSubscriptionBodyCustomerTaxability;
  /** The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* b - State government \* c - Tribe/Status Indian/Indian Band \* a - Federal government \* f - Religious organization \* g - Resale \* d - Foreign diplomat \* e - Charitable or benevolent organization \* j - Direct pay permit \* k - Direct mail \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* n - Local government \* l - Other or custom \* m - Educational organization \* r - Non-resident \* p - Commercial aquaculture \* q - Commercial Fishery
   */
  entity_code?: EstimateForCreatingACustomerAndSubscriptionBodyCustomerEntityCode;
  /** Any string value that will cause the sale to be exempted. Use this if your finance team manually verifies and tracks exemption certificates. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption).
   */
  exempt_number?: string;
  /** Indicates the exemption information. You can customize customer exemption based on specific Location, Tax level (Federal, State, County and Local), Category of Tax or specific Tax Name. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.  
To know more about what values you need to provide, refer to this [Avalara's API document](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/exemption/).
 */
  exemption_details?: unknown[];
  /** Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use \* industrial - When the purchase is made by an industrial business \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks
   */
  customer_type?: EstimateForCreatingACustomerAndSubscriptionBodyCustomerCustomerType;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyShippingAddressValidationStatus =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyShippingAddressValidationStatus)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyShippingAddress = {
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: EstimateForCreatingACustomerAndSubscriptionBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyBillingAddressValidationStatus =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyBillingAddressValidationStatus)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyBillingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for billing_address

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyBillingAddress = {
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: EstimateForCreatingACustomerAndSubscriptionBodyBillingAddressValidationStatus;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodySubscriptionTrialEndAction =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionTrialEndAction)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodySubscriptionTrialEndAction =
  {
    site_default: "site_default",
    plan_default: "plan_default",
    activate_subscription: "activate_subscription",
    cancel_subscription: "cancel_subscription",
  } as const;

/**
 * The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* year - Charge based on year(s) \* day - Charge based on day(s) \* month - Charge based on month(s) \* week - Charge based on week(s)

 */
export type EstimateForCreatingACustomerAndSubscriptionBodySubscriptionFreePeriodUnit =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionFreePeriodUnit)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodySubscriptionFreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodySubscriptionFreePeriodUnit =
  {
    day: "day",
    week: "week",
    month: "month",
    year: "year",
  } as const;

/**
 * Parameters for subscription

 */
export type EstimateForCreatingACustomerAndSubscriptionBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period.
   */
  trial_end?: number;
  /** The date/time at which the subscription is to start. If not provided, the subscription starts immediately. You can provide a value in the past as well. This is called backdating the subscription creation and is done when the subscription has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past, where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `start_date` cannot be earlier than 14th February.
 */
  start_date?: number;
  /** The period of time by which the first term of the subscription is to be extended free-of-charge. The value must be in multiples of free_period_unit.
   */
  free_period?: number;
  /** The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* year - Charge based on year(s) \* day - Charge based on day(s) \* month - Charge based on month(s) \* week - Charge based on week(s)
   */
  free_period_unit?: EstimateForCreatingACustomerAndSubscriptionBodySubscriptionFreePeriodUnit;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.
   */
  trial_end_action?: EstimateForCreatingACustomerAndSubscriptionBodySubscriptionTrialEndAction;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type EstimateForCreatingACustomerAndSubscriptionBodyBillingAlignmentMode =
  (typeof EstimateForCreatingACustomerAndSubscriptionBodyBillingAlignmentMode)[keyof typeof EstimateForCreatingACustomerAndSubscriptionBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionBodyBillingAlignmentMode =
  {
    immediate: "immediate",
    delayed: "delayed",
  } as const;

export type EstimateForCreatingACustomerAndSubscriptionChargebeeEventWebhook =
  (typeof EstimateForCreatingACustomerAndSubscriptionChargebeeEventWebhook)[keyof typeof EstimateForCreatingACustomerAndSubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionChargebeeEventWebhook =
  {
    "all-disabled": "all-disabled",
  } as const;

export type EstimateForCreatingACustomerAndSubscriptionChargebeeEventEmail =
  (typeof EstimateForCreatingACustomerAndSubscriptionChargebeeEventEmail)[keyof typeof EstimateForCreatingACustomerAndSubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EstimateForCreatingACustomerAndSubscriptionChargebeeEventActions =
  (typeof EstimateForCreatingACustomerAndSubscriptionChargebeeEventActions)[keyof typeof EstimateForCreatingACustomerAndSubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateForCreatingACustomerAndSubscriptionChargebeeEventActions =
  {
    "all-disabled": "all-disabled",
  } as const;

export type EstimateForCreatingACustomerAndSubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EstimateForCreatingACustomerAndSubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EstimateForCreatingACustomerAndSubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EstimateForCreatingACustomerAndSubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SubscriptionRenewalEstimate200 = {
  estimate: Estimate;
};

export type SubscriptionRenewalEstimateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SubscriptionRenewalEstimateParams = {
  /**
   * If true, all the unbilled charges will be included for the invoice estimate.
   */
  include_delayed_charges?: boolean;
  /**
   * The generated invoice_estimate/next_invoice_estimate will include all the balances - Promotional Credits, Refundable Credits, and Excess Payments - if any. If you don‚Äôt want these balances to be included you can specify 'false' for the parameter <i>use_existing_balances</i>.
   */
  use_existing_balances?: boolean;
  /**
   * if true, ignores scheduled cancellation for non renewing subscription.
   */
  ignore_scheduled_cancellation?: boolean;
  /**
   * If true, ignores all recurring charges scheduled during renewal.
   */
  ignore_scheduled_changes?: boolean;
};

export type ManagePaymentSources200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for card

 */
export type ManagePaymentSourcesBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
};

/**
 * Parameters for customer

 */
export type ManagePaymentSourcesBodyCustomer = {
  /** Identifier of the customer.
   */
  id: string;
};

export type ManagePaymentSourcesBody = {
  /** URL to redirect after payment method is added.
   */
  redirect_url?: string;
  /** Parameters for customer
   */
  customer?: ManagePaymentSourcesBodyCustomer;
  /** Parameters for card
   */
  card?: ManagePaymentSourcesBodyCard;
};

export type ManagePaymentSourcesChargebeeEventWebhook =
  (typeof ManagePaymentSourcesChargebeeEventWebhook)[keyof typeof ManagePaymentSourcesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagePaymentSourcesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ManagePaymentSourcesChargebeeEventEmail =
  (typeof ManagePaymentSourcesChargebeeEventEmail)[keyof typeof ManagePaymentSourcesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagePaymentSourcesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ManagePaymentSourcesChargebeeEventActions =
  (typeof ManagePaymentSourcesChargebeeEventActions)[keyof typeof ManagePaymentSourcesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManagePaymentSourcesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ManagePaymentSourcesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ManagePaymentSourcesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ManagePaymentSourcesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ManagePaymentSourcesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAHostedPage200 = {
  hosted_page: HostedPage;
};

export type RetrieveAHostedPageHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveDirectDebitAgreementPdf200 = {
  hosted_page: HostedPage;
};

export type RetrieveDirectDebitAgreementPdfBody = {
  /** Payment source to be used for this payment.
   */
  payment_source_id: string;
};

export type RetrieveDirectDebitAgreementPdfChargebeeEventWebhook =
  (typeof RetrieveDirectDebitAgreementPdfChargebeeEventWebhook)[keyof typeof RetrieveDirectDebitAgreementPdfChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveDirectDebitAgreementPdfChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveDirectDebitAgreementPdfChargebeeEventEmail =
  (typeof RetrieveDirectDebitAgreementPdfChargebeeEventEmail)[keyof typeof RetrieveDirectDebitAgreementPdfChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveDirectDebitAgreementPdfChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveDirectDebitAgreementPdfChargebeeEventActions =
  (typeof RetrieveDirectDebitAgreementPdfChargebeeEventActions)[keyof typeof RetrieveDirectDebitAgreementPdfChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveDirectDebitAgreementPdfChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveDirectDebitAgreementPdfHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RetrieveDirectDebitAgreementPdfChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RetrieveDirectDebitAgreementPdfChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RetrieveDirectDebitAgreementPdfChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AcknowledgeAHostedPage200 = {
  hosted_page: HostedPage;
};

export type AcknowledgeAHostedPageChargebeeEventWebhook =
  (typeof AcknowledgeAHostedPageChargebeeEventWebhook)[keyof typeof AcknowledgeAHostedPageChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcknowledgeAHostedPageChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AcknowledgeAHostedPageChargebeeEventEmail =
  (typeof AcknowledgeAHostedPageChargebeeEventEmail)[keyof typeof AcknowledgeAHostedPageChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcknowledgeAHostedPageChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AcknowledgeAHostedPageChargebeeEventActions =
  (typeof AcknowledgeAHostedPageChargebeeEventActions)[keyof typeof AcknowledgeAHostedPageChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcknowledgeAHostedPageChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AcknowledgeAHostedPageHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AcknowledgeAHostedPageChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AcknowledgeAHostedPageChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AcknowledgeAHostedPageChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAPreCancelHostedPage200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for subscription

 */
export type CreateAPreCancelHostedPageBodySubscription = {
  /** The unique ID of the subscription which the customer wants to cancel.
   */
  id: string;
};

export type CreateAPreCancelHostedPageBody = {
  /** Additional data to be passed to Chargebee Retention. Only the value of `pass_thru_content.custom` is sent to Chargebee Retention. It is sent as the value of the [`custom` property](https://help.brightback.com/article/43-installing-brightback). The fields provided in `pass_thru_content.custom` must be preconfigured in Chargebee Retention.

Although only `pass_thru_content.custom` is sent to Chargebee Retention, all of `pass_thru_content` is stored by Chargebee billing and is retrievable as an [attribute](/docs/api/hosted_pages#hosted_page_pass_thru_content) of the `hosted_page`.
.
 */
  pass_thru_content?: string;
  /** The customer is sent to this URL if they finally decide to cancel the subscription, despite the attempt to retain them.
   */
  cancel_url?: string;
  /** The customer is sent to this URL upon successful retention. In other words, this is the page to which the customer is sent when they decide **not** to cancel the subscription.
   */
  redirect_url?: string;
  /** Parameters for subscription
   */
  subscription?: CreateAPreCancelHostedPageBodySubscription;
};

export type CreateAPreCancelHostedPageChargebeeEventWebhook =
  (typeof CreateAPreCancelHostedPageChargebeeEventWebhook)[keyof typeof CreateAPreCancelHostedPageChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPreCancelHostedPageChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPreCancelHostedPageChargebeeEventEmail =
  (typeof CreateAPreCancelHostedPageChargebeeEventEmail)[keyof typeof CreateAPreCancelHostedPageChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPreCancelHostedPageChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPreCancelHostedPageChargebeeEventActions =
  (typeof CreateAPreCancelHostedPageChargebeeEventActions)[keyof typeof CreateAPreCancelHostedPageChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAPreCancelHostedPageChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAPreCancelHostedPageHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAPreCancelHostedPageChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAPreCancelHostedPageChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAPreCancelHostedPageChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateCheckoutToUpdateASubscription200 = {
  hosted_page: HostedPage;
};

/**
 * The operation to be performed for the `entity_identifier`. \* create - Creates a new `entity_identifier` for the customer. \* update - Updates an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case. \* delete - Deletes an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case.

 */
export type CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiersOperationItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiersOperationItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiersOperationItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiersOperationItem =
  {
    create: "create",
    update: "update",
    delete: "delete",
  } as const;

/**
 * Parameters for entity_identifiers

 */
export type CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiers = {
  /** The unique id for the `entity_identifier[i]` in Chargebee. This is required when `entity_identifier[operation][i]` is `update` or `delete`.
   */
  id?: string[];
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  scheme?: string[];
  /** The value of the `entity_identifier`. This identifies the customer entity on the Peppol network. For example: `10101010-STO-10`.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  value?: string[];
  operation?: CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiersOperationItem[];
  /** The standard used for specifying the `entity_identifier` `scheme`. Currently, only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  standard?: string[];
};

/**
 * Parameters for item_tiers

 */
export type CreateCheckoutToUpdateASubscriptionBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * The operation to be carried out for the discount. \* add - The discount is attached to the subscription. \* remove - The discount (given by `discounts[id]`) is removed from the subscription. Subsequent invoices will no longer have the discount applied. **Tip:** If you want to replace a discount, `remove` it and `add` another in the same API call.

 */
export type CreateCheckoutToUpdateASubscriptionBodyDiscountsOperationTypeItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsOperationTypeItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsOperationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyDiscountsOperationTypeItem =
  {
    add: "add",
    remove: "remove",
  } as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type CreateCheckoutToUpdateASubscriptionBodyDiscountsPeriodUnitItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsPeriodUnitItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type CreateCheckoutToUpdateASubscriptionBodyDiscountsDurationTypeItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsDurationTypeItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyDiscountsDurationTypeItem =
  {
    one_time: "one_time",
    forever: "forever",
    limited_period: "limited_period",
  } as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateCheckoutToUpdateASubscriptionBodyDiscountsApplyOnItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsApplyOnItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateCheckoutToUpdateASubscriptionBodyDiscounts = {
  apply_on: CreateCheckoutToUpdateASubscriptionBodyDiscountsApplyOnItem[];
  duration_type: CreateCheckoutToUpdateASubscriptionBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: CreateCheckoutToUpdateASubscriptionBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
  operation_type: CreateCheckoutToUpdateASubscriptionBodyDiscountsOperationTypeItem[];
  /** An immutable unique id for the discount. It is always auto-generated.
   */
  id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnOptionItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnOptionItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnEventItem =
  (typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnEventItem)[keyof typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type CreateCheckoutToUpdateASubscriptionBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](/docs/api#handling_currency_units) is enabled. If `changes_scheduled_at` is in the past and a `unit_price_in_decimal` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. This applies to plan-items.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: CreateCheckoutToUpdateASubscriptionBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type CreateCheckoutToUpdateASubscriptionBodyContractTermActionAtTermEnd =
  (typeof CreateCheckoutToUpdateASubscriptionBodyContractTermActionAtTermEnd)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
  } as const;

/**
 * Parameters for contract_term

 */
export type CreateCheckoutToUpdateASubscriptionBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: CreateCheckoutToUpdateASubscriptionBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * Parameters for card

 */
export type CreateCheckoutToUpdateASubscriptionBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
};

/**
 * Parameters for customer

 */
export type CreateCheckoutToUpdateASubscriptionBodyCustomer = {
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
 */
  is_einvoice_enabled?: boolean;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_scheme?: string;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_standard?: string;
  [key: string]: any;
};

export type CreateCheckoutToUpdateASubscriptionBody = {
  /** Specifies the checkout layout that overrides the default checkout layout configured in the Checkout \& Self-Serve Portal settings. . \* in_app - Indicates in-app checkout version \* full_page - Indicates full page checkout version
   */
  layout?: CreateCheckoutToUpdateASubscriptionBodyLayout;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** If `true` then the existing `subscription_items` list for the subscription is replaced by the one provided. If `false` then the provided `subscription_items` list gets added to the existing list.
   */
  replace_items_list?: boolean;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is set to `true`, and if the site is configured to set invoice dates to date of closing, then upon invoice closure, this date is changed to the invoice closing date. taxes and line_item_taxes are computed based on the tax configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* It is not earlier than `changes_scheduled_at`, `reactivate_from`, or `trial_end`.
* `invoice_immediately` is `true`.
.
 */
  invoice_date?: number;
  /** Billing cycles set for plan-item price is used by default.
   */
  billing_cycles?: number;
  /** The number of subscription billing cycles to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html). If a new term is started for the subscription due to this API call, then `terms_to_charge` is inclusive of this new term. See description for the `force_term_reset` parameter to learn more about when a subscription term is reset.
   */
  terms_to_charge?: number;
  /** If the subscription `status` is `cancelled` and it is being reactivated via this operation, this is the date/time at which the subscription should be reactivated.  
**Note:** It is recommended not to pass this parameter along with `changed_scheduled_at`. `reactivate_from` can be backdated (set to a value in the past). Use backdating when the subscription has been reactivated already but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription reactivation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after the last date/time any of the product catalog items of the subscription were changed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  reactivate_from?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: CreateCheckoutToUpdateASubscriptionBodyBillingAlignmentMode;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or [coupon codes](https://apidocs.chargebee.com/docs/api/coupon_codes).
   */
  coupon_ids?: string[];
  /** Applicable only for `cancelled` subscriptions. When passed as `true`, the canceled subscription is activated; otherwise subscription changes are made without changing its `status`. If not passed, subscription will be activated only if `subscription_items` is passed.
   */
  reactivate?: boolean;
  /** Say the subscription has the renewal date as 28th of every month. When the plan-item price of the subscription is set to one that has the same billing period as the current plan-item price, the subscription change does not change the term. In other words, the subscription still renews on the 28th. Passing this parameter as `true` will have the subscription reset its term to the current date (provided `end_of_term` is false).
   **Note**: When the new plan-item price has a billing period different from the current plan-item price of the subscription, the term is always reset, regardless of the value passed for this parameter.
   */
  force_term_reset?: boolean;
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** The customers will be redirected to this URL upon canceling checkout. The hosted page id and state will be passed as parameters to this URL.   

**Note** :

* Cancel URL configured in Settings \> Hosted Pages Settings would be overriden by this cancel URL.  
  *Eg : http://yoursite.com?id=\<hosted_page_id\>\&state=cancelled*
* This parameter is not applicable for iframe messaging and [in-app](https://www.chargebee.com/docs/2.0/checkout.html) checkout.
 */
  cancel_url?: string;
  /** You can pass through any content specific to the hosted page request and get it back after user had submitted the hosted page.
   */
  pass_thru_content?: string;
  /** Allow the customer to select an offline payment method during checkout. The choice of payment methods can be configured via the Chargebee UI.
   */
  allow_offline_payment_methods?: boolean;
  /** Parameters for subscription
   */
  subscription?: CreateCheckoutToUpdateASubscriptionBodySubscription;
  /** Parameters for customer
   */
  customer?: CreateCheckoutToUpdateASubscriptionBodyCustomer;
  /** Parameters for card
   */
  card?: CreateCheckoutToUpdateASubscriptionBodyCard;
  /** Parameters for contract_term
   */
  contract_term?: CreateCheckoutToUpdateASubscriptionBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: CreateCheckoutToUpdateASubscriptionBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: CreateCheckoutToUpdateASubscriptionBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateCheckoutToUpdateASubscriptionBodyItemTiers;
  /** Parameters for entity_identifiers
   */
  entity_identifiers?: CreateCheckoutToUpdateASubscriptionBodyEntityIdentifiers;
};

/**
 * The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check

 */
export type CreateCheckoutToUpdateASubscriptionBodySubscriptionOfflinePaymentMethod =
  (typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionOfflinePaymentMethod)[keyof typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodySubscriptionOfflinePaymentMethod =
  {
    no_preference: "no_preference",
    cash: "cash",
    check: "check",
    bank_transfer: "bank_transfer",
    ach_credit: "ach_credit",
    sepa_credit: "sepa_credit",
    boleto: "boleto",
  } as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type CreateCheckoutToUpdateASubscriptionBodySubscriptionAutoCollection =
  (typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionAutoCollection)[keyof typeof CreateCheckoutToUpdateASubscriptionBodySubscriptionAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodySubscriptionAutoCollection =
  {
    on: "on",
    off: "off",
  } as const;

/**
 * Parameters for subscription

 */
export type CreateCheckoutToUpdateASubscriptionBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id: string;
  /** The new start date of a `future` subscription. Applicable only for `future` subscriptions.
   */
  start_date?: number;
  /** The time at which the trial has ended or will end for the subscription. This is only allowed when the subscription `status` is `future`, `in_trial`, or `cancelled`. Also, the value must not be earlier than `changes_scheduled_at` or `start_date`. **Note** : This parameter can be backdated (set to a value in the past) only when the subscription is in `cancelled` or `in_trial` `status`. Do this to keep a record of when the trial ended in case it ended at some point in the past. When `trial_end` is backdated, the subscription immediately goes into `active` or `non_renewing` status. This parameter overrides the [`item_price_trial_period`](/docs/api/item_prices#item_price_trial_period) directly.
   */
  trial_end?: number;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: CreateCheckoutToUpdateASubscriptionBodySubscriptionAutoCollection;
  /** The preferred offline payment method for the subscription. \* bank_transfer - Bank Transfer \* boleto - Boleto \* no_preference - No Preference \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* cash - Cash \* check - Check
   */
  offline_payment_method?: CreateCheckoutToUpdateASubscriptionBodySubscriptionOfflinePaymentMethod;
  /** A customer-facing note added to all invoices associated with this subscription. This note is one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  [key: string]: any;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type CreateCheckoutToUpdateASubscriptionBodyBillingAlignmentMode =
  (typeof CreateCheckoutToUpdateASubscriptionBodyBillingAlignmentMode)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

/**
 * Specifies the checkout layout that overrides the default checkout layout configured in the Checkout \& Self-Serve Portal settings. . \* in_app - Indicates in-app checkout version \* full_page - Indicates full page checkout version

 */
export type CreateCheckoutToUpdateASubscriptionBodyLayout =
  (typeof CreateCheckoutToUpdateASubscriptionBodyLayout)[keyof typeof CreateCheckoutToUpdateASubscriptionBodyLayout];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionBodyLayout = {
  in_app: "in_app",
  full_page: "full_page",
} as const;

export type CreateCheckoutToUpdateASubscriptionChargebeeEventWebhook =
  (typeof CreateCheckoutToUpdateASubscriptionChargebeeEventWebhook)[keyof typeof CreateCheckoutToUpdateASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCheckoutToUpdateASubscriptionChargebeeEventEmail =
  (typeof CreateCheckoutToUpdateASubscriptionChargebeeEventEmail)[keyof typeof CreateCheckoutToUpdateASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCheckoutToUpdateASubscriptionChargebeeEventActions =
  (typeof CreateCheckoutToUpdateASubscriptionChargebeeEventActions)[keyof typeof CreateCheckoutToUpdateASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutToUpdateASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCheckoutToUpdateASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateCheckoutToUpdateASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateCheckoutToUpdateASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateCheckoutToUpdateASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ClaimAGiftSubscription200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for customer

 */
export type ClaimAGiftSubscriptionBodyCustomer = {
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
};

/**
 * Parameters for gift

 */
export type ClaimAGiftSubscriptionBodyGift = {
  /** Uniquely identifies a gift
   */
  id: string;
};

export type ClaimAGiftSubscriptionBody = {
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** Parameters for gift
   */
  gift?: ClaimAGiftSubscriptionBodyGift;
  /** Parameters for customer
   */
  customer?: ClaimAGiftSubscriptionBodyCustomer;
};

export type ClaimAGiftSubscriptionChargebeeEventWebhook =
  (typeof ClaimAGiftSubscriptionChargebeeEventWebhook)[keyof typeof ClaimAGiftSubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimAGiftSubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ClaimAGiftSubscriptionChargebeeEventEmail =
  (typeof ClaimAGiftSubscriptionChargebeeEventEmail)[keyof typeof ClaimAGiftSubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimAGiftSubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ClaimAGiftSubscriptionChargebeeEventActions =
  (typeof ClaimAGiftSubscriptionChargebeeEventActions)[keyof typeof ClaimAGiftSubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimAGiftSubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ClaimAGiftSubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ClaimAGiftSubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ClaimAGiftSubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ClaimAGiftSubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateCheckoutForANewSubscription200 = {
  hosted_page: HostedPage;
};

/**
 * The operation to be performed for the `entity_identifier`. \* create - Creates a new `entity_identifier` for the customer. \* update - Updates an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case. \* delete - Deletes an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case.

 */
export type CreateCheckoutForANewSubscriptionBodyEntityIdentifiersOperationItem =
  (typeof CreateCheckoutForANewSubscriptionBodyEntityIdentifiersOperationItem)[keyof typeof CreateCheckoutForANewSubscriptionBodyEntityIdentifiersOperationItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyEntityIdentifiersOperationItem =
  {
    create: "create",
    update: "update",
    delete: "delete",
  } as const;

/**
 * Parameters for entity_identifiers

 */
export type CreateCheckoutForANewSubscriptionBodyEntityIdentifiers = {
  /** The unique id for the `entity_identifier[i]` in Chargebee. This is required when `entity_identifier[operation][i]` is `update` or `delete`.
   */
  id?: string[];
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  scheme?: string[];
  /** The value of the `entity_identifier`. This identifies the customer entity on the Peppol network. For example: `10101010-STO-10`.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  value?: string[];
  operation?: CreateCheckoutForANewSubscriptionBodyEntityIdentifiersOperationItem[];
  /** The standard used for specifying the `entity_identifier` `scheme`. Currently, only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  standard?: string[];
};

/**
 * Parameters for item_tiers

 */
export type CreateCheckoutForANewSubscriptionBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type CreateCheckoutForANewSubscriptionBody = {
  /** Specifies the checkout layout that overrides the default checkout layout configured in the Checkout \& Self-Serve Portal settings. . \* in_app - Indicates in-app checkout version \* full_page - Indicates full page checkout version
   */
  layout?: CreateCheckoutForANewSubscriptionBodyLayout;
  /** Sets the [context]() for this operation to the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) specified. Applicable only when multiple business entities have been created for the site. When this parameter is provided, the operation is able to read/write data associated only to the business entity specified. When not provided, the operation can read/write data for the entire site.  
**Note**

An alternative way of passing this parameter is by means of a [custom HTTP header](/docs/api/advanced-features?prod_cat_ver=2#mbe-header-main).  
**See also**

[Customer resource lookup and creation.](/docs/api/hosted_pages#customer_lookup2)
 */
  business_entity_id?: string;
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** The number of subscription billing cycles (including the first one) to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html).
   */
  terms_to_charge?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: CreateCheckoutForANewSubscriptionBodyBillingAlignmentMode;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or [coupon codes](https://apidocs.chargebee.com/docs/api/coupon_codes).
   */
  coupon_ids?: string[];
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** The customers will be redirected to this URL upon canceling checkout. The hosted page id and state will be passed as parameters to this URL.   

**Note** :

* Cancel URL configured in Settings \> Hosted Pages Settings would be overriden by this cancel URL.  
  *Eg : http://yoursite.com?id=\<hosted_page_id\>\&state=cancelled*
* This parameter is not applicable for iframe messaging and [in-app](https://www.chargebee.com/docs/2.0/checkout.html) checkout.
 */
  cancel_url?: string;
  /** You can pass through any content specific to the hosted page request and get it back after user had submitted the hosted page.
   */
  pass_thru_content?: string;
  /** Allow the customer to select an offline payment method during checkout. The choice of payment methods can be configured via the Chargebee UI.
   */
  allow_offline_payment_methods?: boolean;
  /** Parameters for subscription
   */
  subscription?: CreateCheckoutForANewSubscriptionBodySubscription;
  /** Parameters for customer
   */
  customer?: CreateCheckoutForANewSubscriptionBodyCustomer;
  /** Parameters for card
   */
  card?: CreateCheckoutForANewSubscriptionBodyCard;
  /** Parameters for billing_address
   */
  billing_address?: CreateCheckoutForANewSubscriptionBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateCheckoutForANewSubscriptionBodyShippingAddress;
  /** Parameters for contract_term
   */
  contract_term?: CreateCheckoutForANewSubscriptionBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: CreateCheckoutForANewSubscriptionBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: CreateCheckoutForANewSubscriptionBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateCheckoutForANewSubscriptionBodyItemTiers;
  /** Parameters for entity_identifiers
   */
  entity_identifiers?: CreateCheckoutForANewSubscriptionBodyEntityIdentifiers;
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type CreateCheckoutForANewSubscriptionBodyDiscountsPeriodUnitItem =
  (typeof CreateCheckoutForANewSubscriptionBodyDiscountsPeriodUnitItem)[keyof typeof CreateCheckoutForANewSubscriptionBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type CreateCheckoutForANewSubscriptionBodyDiscountsDurationTypeItem =
  (typeof CreateCheckoutForANewSubscriptionBodyDiscountsDurationTypeItem)[keyof typeof CreateCheckoutForANewSubscriptionBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyDiscountsDurationTypeItem = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateCheckoutForANewSubscriptionBodyDiscountsApplyOnItem =
  (typeof CreateCheckoutForANewSubscriptionBodyDiscountsApplyOnItem)[keyof typeof CreateCheckoutForANewSubscriptionBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateCheckoutForANewSubscriptionBodyDiscounts = {
  apply_on: CreateCheckoutForANewSubscriptionBodyDiscountsApplyOnItem[];
  duration_type: CreateCheckoutForANewSubscriptionBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: CreateCheckoutForANewSubscriptionBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnOptionItem =
  (typeof CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnOptionItem)[keyof typeof CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnEventItem =
  (typeof CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnEventItem)[keyof typeof CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type CreateCheckoutForANewSubscriptionBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. This applies to plan-items.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: CreateCheckoutForANewSubscriptionBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type CreateCheckoutForANewSubscriptionBodyContractTermActionAtTermEnd =
  (typeof CreateCheckoutForANewSubscriptionBodyContractTermActionAtTermEnd)[keyof typeof CreateCheckoutForANewSubscriptionBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyContractTermActionAtTermEnd =
  {
    renew: "renew",
    evergreen: "evergreen",
    cancel: "cancel",
  } as const;

/**
 * Parameters for contract_term

 */
export type CreateCheckoutForANewSubscriptionBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: CreateCheckoutForANewSubscriptionBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateCheckoutForANewSubscriptionBodyShippingAddressValidationStatus =
  (typeof CreateCheckoutForANewSubscriptionBodyShippingAddressValidationStatus)[keyof typeof CreateCheckoutForANewSubscriptionBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateCheckoutForANewSubscriptionBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateCheckoutForANewSubscriptionBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CreateCheckoutForANewSubscriptionBodyBillingAddressValidationStatus =
  (typeof CreateCheckoutForANewSubscriptionBodyBillingAddressValidationStatus)[keyof typeof CreateCheckoutForANewSubscriptionBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyBillingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for billing_address

 */
export type CreateCheckoutForANewSubscriptionBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: CreateCheckoutForANewSubscriptionBodyBillingAddressValidationStatus;
};

/**
 * Parameters for card

 */
export type CreateCheckoutForANewSubscriptionBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
};

/**
 * null

 */
export type CreateCheckoutForANewSubscriptionBodyCustomerEinvoicingMethod =
  (typeof CreateCheckoutForANewSubscriptionBodyCustomerEinvoicingMethod)[keyof typeof CreateCheckoutForANewSubscriptionBodyCustomerEinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyCustomerEinvoicingMethod = {
  automatic: "automatic",
  manual: "manual",
  site_default: "site_default",
} as const;

/**
 * Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.

 */
export type CreateCheckoutForANewSubscriptionBodyCustomerTaxability =
  (typeof CreateCheckoutForANewSubscriptionBodyCustomerTaxability)[keyof typeof CreateCheckoutForANewSubscriptionBodyCustomerTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyCustomerTaxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Parameters for customer

 */
export type CreateCheckoutForANewSubscriptionBodyCustomer = {
  /** The unique identifier for the customer resource for which the subscription should be created.  
**See also**

[Customer resource lookup and creation.](/docs/api/hosted_pages#customer_lookup2)

When not provided, a new customer is created with the ID set to the value provided for `subscription[id]`. If `subscription[id]` is unavailable, then the customer ID is autogenerated.
 */
  id?: string;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: string;
  /** First name of the customer. If not provided it will be got from contact information entered in the hosted page
   */
  first_name?: string;
  /** Last name of the customer. If not provided it will be got from contact information entered in the hosted page
   */
  last_name?: string;
  /** Company name of the customer.
   */
  company?: string;
  /** Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.
 */
  taxability?: CreateCheckoutForANewSubscriptionBodyCustomerTaxability;
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
  /** Phone number of the customer
   */
  phone?: string;
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
 */
  is_einvoice_enabled?: boolean;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_scheme?: string;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_standard?: string;
  /** null
   */
  einvoicing_method?: CreateCheckoutForANewSubscriptionBodyCustomerEinvoicingMethod;
  [key: string]: any;
};

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type CreateCheckoutForANewSubscriptionBodySubscriptionAutoCollection =
  (typeof CreateCheckoutForANewSubscriptionBodySubscriptionAutoCollection)[keyof typeof CreateCheckoutForANewSubscriptionBodySubscriptionAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodySubscriptionAutoCollection = {
  on: "on",
  off: "off",
} as const;

/**
 * Parameters for subscription

 */
export type CreateCheckoutForANewSubscriptionBodySubscription = {
  /** A unique and immutable identifier for a new subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period. This parameter overrides the [`item_price_trial_period`](/docs/api/item_prices#item_price_trial_period) directly.
   */
  trial_end?: number;
  /** The date/time at which the subscription is to start. If not provided, the subscription starts immediately. You can provide a value in the past as well. This is called backdating the subscription creation and is done when the subscription has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past, where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `start_date` cannot be earlier than 14th February.
 */
  start_date?: number;
  /** The id of the coupon. For validating the coupon code provided by the user , use the following codes in combination with the param attribute in the error response.

* **resource_not_found :** Returned if the coupon is not present.
* **resource_limit_exhausted :** Returned if the coupon has expired or the maximum redemption for the coupon has already been reached.
* **invalid_request :** Returned if the coupon is not applicable for the particular plan/addon.
 */
  coupon?: string;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: CreateCheckoutForANewSubscriptionBodySubscriptionAutoCollection;
  /** A customer-facing note added to all invoices associated with this subscription. This note is one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** A unique tracking token
   */
  affiliate_token?: string;
  [key: string]: any;
};

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type CreateCheckoutForANewSubscriptionBodyBillingAlignmentMode =
  (typeof CreateCheckoutForANewSubscriptionBodyBillingAlignmentMode)[keyof typeof CreateCheckoutForANewSubscriptionBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

/**
 * Specifies the checkout layout that overrides the default checkout layout configured in the Checkout \& Self-Serve Portal settings. . \* in_app - Indicates in-app checkout version \* full_page - Indicates full page checkout version

 */
export type CreateCheckoutForANewSubscriptionBodyLayout =
  (typeof CreateCheckoutForANewSubscriptionBodyLayout)[keyof typeof CreateCheckoutForANewSubscriptionBodyLayout];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionBodyLayout = {
  in_app: "in_app",
  full_page: "full_page",
} as const;

export type CreateCheckoutForANewSubscriptionChargebeeEventWebhook =
  (typeof CreateCheckoutForANewSubscriptionChargebeeEventWebhook)[keyof typeof CreateCheckoutForANewSubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCheckoutForANewSubscriptionChargebeeEventEmail =
  (typeof CreateCheckoutForANewSubscriptionChargebeeEventEmail)[keyof typeof CreateCheckoutForANewSubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCheckoutForANewSubscriptionChargebeeEventActions =
  (typeof CreateCheckoutForANewSubscriptionChargebeeEventActions)[keyof typeof CreateCheckoutForANewSubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCheckoutForANewSubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCheckoutForANewSubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateCheckoutForANewSubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateCheckoutForANewSubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateCheckoutForANewSubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AcceptAQuote200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for quote

 */
export type AcceptAQuoteBodyQuote = {
  /** The quote number. Acts as a identifier for quote and typically generated sequentially.
   */
  id: string;
};

export type AcceptAQuoteBody = {
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** Parameters for quote
   */
  quote?: AcceptAQuoteBodyQuote;
};

export type AcceptAQuoteChargebeeEventWebhook =
  (typeof AcceptAQuoteChargebeeEventWebhook)[keyof typeof AcceptAQuoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptAQuoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AcceptAQuoteChargebeeEventEmail =
  (typeof AcceptAQuoteChargebeeEventEmail)[keyof typeof AcceptAQuoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptAQuoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AcceptAQuoteChargebeeEventActions =
  (typeof AcceptAQuoteChargebeeEventActions)[keyof typeof AcceptAQuoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptAQuoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AcceptAQuoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AcceptAQuoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AcceptAQuoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AcceptAQuoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CollectNow200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for card

 */
export type CollectNowBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
};

/**
 * Parameters for customer

 */
export type CollectNowBodyCustomer = {
  /** Identifier of the customer.
   */
  id: string;
};

export type CollectNowBody = {
  /** Used to specify the destination URL to which a user is redirected after invoices are paid. The [transaction ID](/docs/api/transactions#transaction_id) of the transactions made through the Pay Now hosted page will be sent as return variables along with the URL.
   */
  redirect_url?: string;
  /** The currency code (ISO 4217 format) of the specified *credit amount*.
   */
  currency_code?: string;
  /** Parameters for customer
   */
  customer?: CollectNowBodyCustomer;
  /** Parameters for card
   */
  card?: CollectNowBodyCard;
};

export type CollectNowChargebeeEventWebhook =
  (typeof CollectNowChargebeeEventWebhook)[keyof typeof CollectNowChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectNowChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CollectNowChargebeeEventEmail =
  (typeof CollectNowChargebeeEventEmail)[keyof typeof CollectNowChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectNowChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CollectNowChargebeeEventActions =
  (typeof CollectNowChargebeeEventActions)[keyof typeof CollectNowChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectNowChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CollectNowHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CollectNowChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CollectNowChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CollectNowChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAHostedPageToViewBoletoVouchers200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for customer

 */
export type CreateAHostedPageToViewBoletoVouchersBodyCustomer = {
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
};

/**
 * Parameters for payment_voucher

 */
export type CreateAHostedPageToViewBoletoVouchersBodyPaymentVoucher = {
  /** The unique [ID of the voucher](https://apidocs.chargebee.com/docs/api/payment_vouchers#payment_voucher_id) which the customer wants to view.
   */
  id: string;
};

export type CreateAHostedPageToViewBoletoVouchersBody = {
  /** Parameters for payment_voucher
   */
  payment_voucher?: CreateAHostedPageToViewBoletoVouchersBodyPaymentVoucher;
  /** Parameters for customer
   */
  customer?: CreateAHostedPageToViewBoletoVouchersBodyCustomer;
};

export type CreateAHostedPageToViewBoletoVouchersChargebeeEventWebhook =
  (typeof CreateAHostedPageToViewBoletoVouchersChargebeeEventWebhook)[keyof typeof CreateAHostedPageToViewBoletoVouchersChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAHostedPageToViewBoletoVouchersChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAHostedPageToViewBoletoVouchersChargebeeEventEmail =
  (typeof CreateAHostedPageToViewBoletoVouchersChargebeeEventEmail)[keyof typeof CreateAHostedPageToViewBoletoVouchersChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAHostedPageToViewBoletoVouchersChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAHostedPageToViewBoletoVouchersChargebeeEventActions =
  (typeof CreateAHostedPageToViewBoletoVouchersChargebeeEventActions)[keyof typeof CreateAHostedPageToViewBoletoVouchersChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAHostedPageToViewBoletoVouchersChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAHostedPageToViewBoletoVouchersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAHostedPageToViewBoletoVouchersChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAHostedPageToViewBoletoVouchersChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAHostedPageToViewBoletoVouchersChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListHostedPages200ListItem = {
  hosted_page: HostedPage;
};

export type ListHostedPages200 = {
  list: ListHostedPages200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListHostedPagesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`created\` - Indicates the hosted page is just created. \* \`requested\` - Indicates the hosted page is requested by the website \* \`succeeded\` - Indicates the hosted page is successfully submitted by the user and response is sent to the return url. \* \`cancelled\` - Indicates the page is cancelled by the end user after requesting it. \* \`failed\` - \*\*(Deprecated)\*\* Indicates the page submition is failed and response is sent to the return url. \* \`acknowledged\` - Indicates the succeeded hosted page is acknowledged.

 */
export type ListHostedPagesStateIsNot =
  (typeof ListHostedPagesStateIsNot)[keyof typeof ListHostedPagesStateIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListHostedPagesStateIsNot = {
  created: "created",
  requested: "requested",
  succeeded: "succeeded",
  cancelled: "cancelled",
  acknowledged: "acknowledged",
} as const;

/**
 * \* \`created\` - Indicates the hosted page is just created. \* \`requested\` - Indicates the hosted page is requested by the website \* \`succeeded\` - Indicates the hosted page is successfully submitted by the user and response is sent to the return url. \* \`cancelled\` - Indicates the page is cancelled by the end user after requesting it. \* \`failed\` - \*\*(Deprecated)\*\* Indicates the page submition is failed and response is sent to the return url. \* \`acknowledged\` - Indicates the succeeded hosted page is acknowledged.

 */
export type ListHostedPagesStateIs =
  (typeof ListHostedPagesStateIs)[keyof typeof ListHostedPagesStateIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListHostedPagesStateIs = {
  created: "created",
  requested: "requested",
  succeeded: "succeeded",
  cancelled: "cancelled",
  acknowledged: "acknowledged",
} as const;

/**
 * \* \`checkout_new\` - Checkout new Subscription \* \`checkout_existing\` - Checkout existing Subscription \* \`update_card\` - \*\*(Deprecated)\*\* Update Card for a Customer \* \`update_payment_method\` - Update Payment Method for a Customer \* \`manage_payment_sources\` - Manage Payments for a customer \* \`collect_now\` - Collect Unpaid Invoices for a Customer \* \`extend_subscription\` - To extend a Subscription period \* \`checkout_one_time\` - Checkout one time \* \`pre_cancel\` - This hosted page is used to help retain customers when they attempt to cancel their account or subscription. \* \`view_voucher\` - View Details of a voucher

 */
export type ListHostedPagesTypeIsNot =
  (typeof ListHostedPagesTypeIsNot)[keyof typeof ListHostedPagesTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListHostedPagesTypeIsNot = {
  checkout_new: "checkout_new",
  checkout_existing: "checkout_existing",
  update_payment_method: "update_payment_method",
  manage_payment_sources: "manage_payment_sources",
  collect_now: "collect_now",
  extend_subscription: "extend_subscription",
  checkout_one_time: "checkout_one_time",
  pre_cancel: "pre_cancel",
  view_voucher: "view_voucher",
} as const;

/**
 * \* \`checkout_new\` - Checkout new Subscription \* \`checkout_existing\` - Checkout existing Subscription \* \`update_card\` - \*\*(Deprecated)\*\* Update Card for a Customer \* \`update_payment_method\` - Update Payment Method for a Customer \* \`manage_payment_sources\` - Manage Payments for a customer \* \`collect_now\` - Collect Unpaid Invoices for a Customer \* \`extend_subscription\` - To extend a Subscription period \* \`checkout_one_time\` - Checkout one time \* \`pre_cancel\` - This hosted page is used to help retain customers when they attempt to cancel their account or subscription. \* \`view_voucher\` - View Details of a voucher

 */
export type ListHostedPagesTypeIs =
  (typeof ListHostedPagesTypeIs)[keyof typeof ListHostedPagesTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListHostedPagesTypeIs = {
  checkout_new: "checkout_new",
  checkout_existing: "checkout_existing",
  update_payment_method: "update_payment_method",
  manage_payment_sources: "manage_payment_sources",
  collect_now: "collect_now",
  extend_subscription: "extend_subscription",
  checkout_one_time: "checkout_one_time",
  pre_cancel: "pre_cancel",
  view_voucher: "view_voucher",
} as const;

export type ListHostedPagesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Unique identifier generated for each hosted page requested.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "Edi69nxpu6BeGBd9Fjcd0tqCSwb0sRcuKa"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Type of the requested hosted page. Possible values are : <dfn>checkout_new, checkout_existing, update_payment_method, manage_payment_sources, collect_now, extend_subscription, checkout_one_time, pre_cancel.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is_not] = "checkout_new"</i>
   */
  type?: {
    /** \* \`checkout_new\` - Checkout new Subscription \* \`checkout_existing\` - Checkout existing Subscription \* \`update_card\` - \*\*(Deprecated)\*\* Update Card for a Customer \* \`update_payment_method\` - Update Payment Method for a Customer \* \`manage_payment_sources\` - Manage Payments for a customer \* \`collect_now\` - Collect Unpaid Invoices for a Customer \* \`extend_subscription\` - To extend a Subscription period \* \`checkout_one_time\` - Checkout one time \* \`pre_cancel\` - This hosted page is used to help retain customers when they attempt to cancel their account or subscription. \* \`view_voucher\` - View Details of a voucher
     */
    is?: ListHostedPagesTypeIs;
    /** \* \`checkout_new\` - Checkout new Subscription \* \`checkout_existing\` - Checkout existing Subscription \* \`update_card\` - \*\*(Deprecated)\*\* Update Card for a Customer \* \`update_payment_method\` - Update Payment Method for a Customer \* \`manage_payment_sources\` - Manage Payments for a customer \* \`collect_now\` - Collect Unpaid Invoices for a Customer \* \`extend_subscription\` - To extend a Subscription period \* \`checkout_one_time\` - Checkout one time \* \`pre_cancel\` - This hosted page is used to help retain customers when they attempt to cancel their account or subscription. \* \`view_voucher\` - View Details of a voucher
     */
    is_not?: ListHostedPagesTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Indicating the current state of the hosted page resource. Possible values are : <dfn>created, requested, succeeded, cancelled, acknowledged.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>state[is] = "succeeded"</i>
   */
  state?: {
    /** \* \`created\` - Indicates the hosted page is just created. \* \`requested\` - Indicates the hosted page is requested by the website \* \`succeeded\` - Indicates the hosted page is successfully submitted by the user and response is sent to the return url. \* \`cancelled\` - Indicates the page is cancelled by the end user after requesting it. \* \`failed\` - \*\*(Deprecated)\*\* Indicates the page submition is failed and response is sent to the return url. \* \`acknowledged\` - Indicates the succeeded hosted page is acknowledged.
     */
    is?: ListHostedPagesStateIs;
    /** \* \`created\` - Indicates the hosted page is just created. \* \`requested\` - Indicates the hosted page is requested by the website \* \`succeeded\` - Indicates the hosted page is successfully submitted by the user and response is sent to the return url. \* \`cancelled\` - Indicates the page is cancelled by the end user after requesting it. \* \`failed\` - \*\*(Deprecated)\*\* Indicates the page submition is failed and response is sent to the return url. \* \`acknowledged\` - Indicates the succeeded hosted page is acknowledged.
     */
    is_not?: ListHostedPagesStateIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this hosted page was last updated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[on] = "1490784813"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
};

export type CheckoutGiftSubscriptionForItems200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for subscription_items

 */
export type CheckoutGiftSubscriptionForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id?: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
};

/**
 * Parameters for gifter

 */
export type CheckoutGiftSubscriptionForItemsBodyGifter = {
  /** The customer ID of the gifter. If not provided, the gifter customer resource is created with an autogenerated ID on checkout.  
**See also**

[Gifter customer resource lookup and creation](/docs/api/hosted_pages#gifter_lookup)
 */
  customer_id?: string;
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
};

export type CheckoutGiftSubscriptionForItemsBody = {
  /** Sets the [context]() for this operation to the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) specified. Applicable only when multiple business entities have been created for the site. When this parameter is provided, the operation is able to read/write data associated only to the business entity specified. When not provided, the operation can read/write data for the entire site.  
**Note**

An alternative way of passing this parameter is by means of a [custom HTTP header](/docs/api/advanced-features?prod_cat_ver=2#mbe-header-main).  
**See also**

Gifter customer resource lookup and creation.
 */
  business_entity_id?: string;
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or [coupon codes](https://apidocs.chargebee.com/docs/api/coupon_codes).
   */
  coupon_ids?: string[];
  /** Parameters for gifter
   */
  gifter?: CheckoutGiftSubscriptionForItemsBodyGifter;
  /** Parameters for subscription_items
   */
  subscription_items?: CheckoutGiftSubscriptionForItemsBodySubscriptionItems;
};

export type CheckoutGiftSubscriptionForItemsChargebeeEventWebhook =
  (typeof CheckoutGiftSubscriptionForItemsChargebeeEventWebhook)[keyof typeof CheckoutGiftSubscriptionForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutGiftSubscriptionForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CheckoutGiftSubscriptionForItemsChargebeeEventEmail =
  (typeof CheckoutGiftSubscriptionForItemsChargebeeEventEmail)[keyof typeof CheckoutGiftSubscriptionForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutGiftSubscriptionForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CheckoutGiftSubscriptionForItemsChargebeeEventActions =
  (typeof CheckoutGiftSubscriptionForItemsChargebeeEventActions)[keyof typeof CheckoutGiftSubscriptionForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutGiftSubscriptionForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CheckoutGiftSubscriptionForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CheckoutGiftSubscriptionForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CheckoutGiftSubscriptionForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CheckoutGiftSubscriptionForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type NotifyAnEvent200 = {
  success: boolean;
};

/**
 * The meta data description of the event in key-value pair. The value is a JSON object with the following keys and their values. \* \`subscription_id\`: A unique and immutable identifier for the subscription. .

 */
export type NotifyAnEventBodyEventData = { [key: string]: any };

/**
 * The event that need to passed to a different system. \* cancellation_page_loaded - Indicates native cancellation flow provided by the merchant is loaded rather than the retention flow.

 */
export type NotifyAnEventBodyEventName =
  (typeof NotifyAnEventBodyEventName)[keyof typeof NotifyAnEventBodyEventName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotifyAnEventBodyEventName = {
  cancellation_page_loaded: "cancellation_page_loaded",
} as const;

export type NotifyAnEventBody = {
  /** The event that need to passed to a different system. \* cancellation_page_loaded - Indicates native cancellation flow provided by the merchant is loaded rather than the retention flow.
   */
  event_name: NotifyAnEventBodyEventName;
  /** Timestamp indicating when this event had occurred. .
   */
  occurred_at?: number;
  /** The meta data description of the event in key-value pair. The value is a JSON object with the following keys and their values. \* \`subscription_id\`: A unique and immutable identifier for the subscription. .
   */
  event_data: NotifyAnEventBodyEventData;
};

export type NotifyAnEventChargebeeEventWebhook =
  (typeof NotifyAnEventChargebeeEventWebhook)[keyof typeof NotifyAnEventChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotifyAnEventChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type NotifyAnEventChargebeeEventEmail =
  (typeof NotifyAnEventChargebeeEventEmail)[keyof typeof NotifyAnEventChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotifyAnEventChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type NotifyAnEventChargebeeEventActions =
  (typeof NotifyAnEventChargebeeEventActions)[keyof typeof NotifyAnEventChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotifyAnEventChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type NotifyAnEventHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: NotifyAnEventChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: NotifyAnEventChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: NotifyAnEventChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExtendSubscription200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for subscription

 */
export type ExtendSubscriptionBodySubscription = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id: string;
};

export type ExtendSubscriptionBody = {
  /** Expiry (in days) for the link generated. No expiry will be set if this is not specified.
   */
  expiry?: number;
  /** Number of billing cycles to extend. If not specified, plan's billing cycle will be used.
   */
  billing_cycle?: number;
  /** Parameters for subscription
   */
  subscription?: ExtendSubscriptionBodySubscription;
};

export type ExtendSubscriptionChargebeeEventWebhook =
  (typeof ExtendSubscriptionChargebeeEventWebhook)[keyof typeof ExtendSubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExtendSubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExtendSubscriptionChargebeeEventEmail =
  (typeof ExtendSubscriptionChargebeeEventEmail)[keyof typeof ExtendSubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExtendSubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExtendSubscriptionChargebeeEventActions =
  (typeof ExtendSubscriptionChargebeeEventActions)[keyof typeof ExtendSubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExtendSubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExtendSubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExtendSubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExtendSubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExtendSubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdatePaymentMethod200 = {
  hosted_page: HostedPage;
};

/**
 * Parameters for card

 */
export type UpdatePaymentMethodBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
};

/**
 * Parameters for customer

 */
export type UpdatePaymentMethodBodyCustomer = {
  /** Identifier of the customer.
   */
  id: string;
};

export type UpdatePaymentMethodBody = {
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** The customers will be redirected to this URL upon canceling checkout. The hosted page id and state will be passed as parameters to this URL.   

**Note** :

* Cancel URL configured in Settings \> Hosted Pages Settings would be overriden by this cancel URL.  
  *Eg : http://yoursite.com?id=\<hosted_page_id\>\&state=cancelled*
* This parameter is not applicable for iframe messaging and [in-app](https://www.chargebee.com/docs/2.0/checkout.html) checkout.
 */
  cancel_url?: string;
  /** You can pass through any content specific to the hosted page request and get it back after user had submitted the hosted page.
   */
  pass_thru_content?: string;
  /** If true then iframe will communicate with the parent window. Applicable only for embedded(iframe) hosted pages. If you're using iframe_messaging you need to implement onSuccess \& onCancel callbacks.  

**Note** : This parameter is not applicable for [in-app](https://www.chargebee.com/docs/checkout-v3.html) checkout.
 */
  iframe_messaging?: boolean;
  /** Parameters for customer
   */
  customer?: UpdatePaymentMethodBodyCustomer;
  /** Parameters for card
   */
  card?: UpdatePaymentMethodBodyCard;
};

export type UpdatePaymentMethodChargebeeEventWebhook =
  (typeof UpdatePaymentMethodChargebeeEventWebhook)[keyof typeof UpdatePaymentMethodChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdatePaymentMethodChargebeeEventEmail =
  (typeof UpdatePaymentMethodChargebeeEventEmail)[keyof typeof UpdatePaymentMethodChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdatePaymentMethodChargebeeEventActions =
  (typeof UpdatePaymentMethodChargebeeEventActions)[keyof typeof UpdatePaymentMethodChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdatePaymentMethodHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdatePaymentMethodChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdatePaymentMethodChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdatePaymentMethodChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CheckoutChargeItemsAndOneTimeCharges200 = {
  hosted_page: HostedPage;
};

/**
 * The operation to be performed for the `entity_identifier`. \* create - Creates a new `entity_identifier` for the customer. \* update - Updates an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case. \* delete - Deletes an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case.

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiersOperationItem =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiersOperationItem)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiersOperationItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiersOperationItem =
  {
    create: "create",
    update: "update",
    delete: "delete",
  } as const;

/**
 * Parameters for entity_identifiers

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiers = {
  /** The unique id for the `entity_identifier[i]` in Chargebee. This is required when `entity_identifier[operation][i]` is `update` or `delete`.
   */
  id?: string[];
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  scheme?: string[];
  /** The value of the `entity_identifier`. This identifies the customer entity on the Peppol network. For example: `10101010-STO-10`.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  value?: string[];
  operation?: CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiersOperationItem[];
  /** The standard used for specifying the `entity_identifier` `scheme`. Currently, only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  standard?: string[];
};

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyDiscountsApplyOnItem =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyDiscountsApplyOnItem)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyDiscounts = {
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  apply_on: CheckoutChargeItemsAndOneTimeChargesBodyDiscountsApplyOnItem[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem =
  {
    wholesale: "wholesale",
    retail: "retail",
    consumed: "consumed",
    vendor_use: "vendor_use",
  } as const;

/**
 * Parameters for charges

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyCharges = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number[];
  /** The decimal representation of the amount for the [one-time charge](https://www.chargebee.com/docs/charges.html#one-time-charges ). Provide the value in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  /** Description for this charge
   */
  description?: string[];
  /** The amount to be charged is taxable or not.
   */
  taxable?: boolean[];
  /** Tax profile of the charge.
   */
  tax_profile_id?: string[];
  /** The Avalara tax codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html).
   */
  avalara_tax_code?: string[];
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string[];
  /** The TaxJar product codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [TaxJar integration](https://www.chargebee.com/docs/taxjar.html).
   */
  taxjar_product_code?: string[];
  avalara_sale_type?: CheckoutChargeItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem[];
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number[];
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number[];
  /** The time when the service period for the charge starts.
   */
  date_from?: number[];
  /** The time when the service period for the charge ends.
   */
  date_to?: number[];
};

/**
 * Parameters for item_tiers

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyItemTiers = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_prices

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyItemPrices = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Item price quantity
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** The time when the service period for the item starts.
   */
  date_from?: number[];
  /** The time when the service period for the item ends.
   */
  date_to?: number[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyShippingAddressValidationStatus =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyShippingAddressValidationStatus)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CheckoutChargeItemsAndOneTimeChargesBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyBillingAddressValidationStatus =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyBillingAddressValidationStatus)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyBillingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for billing_address

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: CheckoutChargeItemsAndOneTimeChargesBodyBillingAddressValidationStatus;
};

/**
 * Parameters for card

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
};

/**
 * Parameters for invoice

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyInvoice = {
  /** Purchase Order Number for this invoice.
   */
  po_number?: string;
};

export type CheckoutChargeItemsAndOneTimeChargesBody = {
  /** Sets the [context]() for this operation to the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) specified. Applicable only when multiple business entities have been created for the site. When this parameter is provided, the operation is able to read/write data associated only to the business entity specified. When not provided, the operation can read/write data for the entire site.  
**Note**

An alternative way of passing this parameter is by means of a [custom HTTP header](/docs/api/advanced-features?prod_cat_ver=2#mbe-header-main).  
**See also**

[Customer resource lookup and creation.](/docs/api/hosted_pages#customer_lookup1)
 */
  business_entity_id?: string;
  /** Specifies the checkout layout that overrides the default checkout layout configured in the Checkout \& Self-Serve Portal settings. . \* in_app - Indicates in-app checkout version \* full_page - Indicates full page checkout version
   */
  layout?: CheckoutChargeItemsAndOneTimeChargesBodyLayout;
  /** A note for this particular invoice. This, and [all other notes](/docs/api/invoices#invoice_notes) for the invoice are displayed on the PDF invoice sent to the customer.
   */
  invoice_note?: string;
  /** List of Coupons to be added.
   */
  coupon_ids?: string[];
  /** The currency code (ISO 4217 format) of the invoice amount.
   */
  currency_code?: string;
  /** The customers will be redirected to this URL upon successful checkout. The hosted page id and state will be passed as parameters to this URL.  

**Note** :

* Although the customer will be redirected to the `redirect_url` after successful checkout, we do not recommend relying on it for completing critical post-checkout actions. This is because redirection may not happen due to unforeseen reasons such as user closing the tab, or exiting the browser, and so on. If there is any synchronization that you are doing after the redirection, you will have to have a backup. Chargebee recommends listening to appropriate webhooks such as [`subscription_created`](https://apidocs.chargebee.com/docs/api/events#subscription_created) or [`invoice_generated`](https://apidocs.chargebee.com/docs/api/events#invoice_generated)to verify a successful checkout.
* Redirect URL configured in Settings \> Hosted Pages Settings would be overriden by this redirect URL.
* *Eg :* *http://yoursite.com?id=* *\<hosted_page_id\>\&state=succeeded*
* This parameter is not applicable for iframe messaging.
 */
  redirect_url?: string;
  /** The customers will be redirected to this URL upon canceling checkout. The hosted page id and state will be passed as parameters to this URL.   

**Note** :

* Cancel URL configured in Settings \> Hosted Pages Settings would be overriden by this cancel URL.  
  *Eg : http://yoursite.com?id=\<hosted_page_id\>\&state=cancelled*
* This parameter is not applicable for iframe messaging and [in-app](https://www.chargebee.com/docs/2.0/checkout.html) checkout.
 */
  cancel_url?: string;
  /** You can pass through any content specific to the hosted page request and get it back after user had submitted the hosted page.
   */
  pass_thru_content?: string;
  /** Parameters for customer
   */
  customer?: CheckoutChargeItemsAndOneTimeChargesBodyCustomer;
  /** Parameters for invoice
   */
  invoice?: CheckoutChargeItemsAndOneTimeChargesBodyInvoice;
  /** Parameters for card
   */
  card?: CheckoutChargeItemsAndOneTimeChargesBodyCard;
  /** Parameters for billing_address
   */
  billing_address?: CheckoutChargeItemsAndOneTimeChargesBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: CheckoutChargeItemsAndOneTimeChargesBodyShippingAddress;
  /** Parameters for item_prices
   */
  item_prices?: CheckoutChargeItemsAndOneTimeChargesBodyItemPrices;
  /** Parameters for item_tiers
   */
  item_tiers?: CheckoutChargeItemsAndOneTimeChargesBodyItemTiers;
  /** Parameters for charges
   */
  charges?: CheckoutChargeItemsAndOneTimeChargesBodyCharges;
  /** Parameters for discounts
   */
  discounts?: CheckoutChargeItemsAndOneTimeChargesBodyDiscounts;
  /** Parameters for entity_identifiers
   */
  entity_identifiers?: CheckoutChargeItemsAndOneTimeChargesBodyEntityIdentifiers;
};

/**
 * null

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyCustomerEinvoicingMethod =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyCustomerEinvoicingMethod)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyCustomerEinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyCustomerEinvoicingMethod =
  {
    automatic: "automatic",
    manual: "manual",
    site_default: "site_default",
  } as const;

/**
 * Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyCustomerTaxability =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyCustomerTaxability)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyCustomerTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyCustomerTaxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Parameters for customer

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyCustomer = {
  /** The unique ID of the customer for which this `hosted_page` should be created. If not provided, the ID of the newly created customer resource is autogenerated.  
**See also**

[Customer resource lookup and creation.](/docs/api/hosted_pages#customer_lookup1)
 */
  id?: string;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: string;
  /** First name of the customer. If not provided it will be got from contact information entered in the hosted page
   */
  first_name?: string;
  /** Last name of the customer. If not provided it will be got from contact information entered in the hosted page
   */
  last_name?: string;
  /** Company name of the customer.
   */
  company?: string;
  /** Specifies if the customer is liable for tax \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

\* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero.
 */
  taxability?: CheckoutChargeItemsAndOneTimeChargesBodyCustomerTaxability;
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
  /** Phone number of the customer
   */
  phone?: string;
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** null
   */
  einvoicing_method?: CheckoutChargeItemsAndOneTimeChargesBodyCustomerEinvoicingMethod;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
 */
  is_einvoice_enabled?: boolean;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_scheme?: string;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_standard?: string;
  /** Indicates whether invoices raised on the same day for the `customer` are consolidated. When provided, this overrides the default configuration at the [site-level](https://www.chargebee.com/docs/consolidated-invoicing.html#configuring-consolidated-invoicing). This parameter can be provided only when [Consolidated Invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled.  
**Note:**

Any invoices raised when a subscription activates from `in_trial` or `future` `status`, are not consolidated by default. [Contact Support](https://support.chargebee.com/support/home) to enable consolidation for such invoices.
 */
  consolidated_invoicing?: boolean;
  [key: string]: any;
};

/**
 * Specifies the checkout layout that overrides the default checkout layout configured in the Checkout \& Self-Serve Portal settings. . \* in_app - Indicates in-app checkout version \* full_page - Indicates full page checkout version

 */
export type CheckoutChargeItemsAndOneTimeChargesBodyLayout =
  (typeof CheckoutChargeItemsAndOneTimeChargesBodyLayout)[keyof typeof CheckoutChargeItemsAndOneTimeChargesBodyLayout];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesBodyLayout = {
  in_app: "in_app",
  full_page: "full_page",
} as const;

export type CheckoutChargeItemsAndOneTimeChargesChargebeeEventWebhook =
  (typeof CheckoutChargeItemsAndOneTimeChargesChargebeeEventWebhook)[keyof typeof CheckoutChargeItemsAndOneTimeChargesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CheckoutChargeItemsAndOneTimeChargesChargebeeEventEmail =
  (typeof CheckoutChargeItemsAndOneTimeChargesChargebeeEventEmail)[keyof typeof CheckoutChargeItemsAndOneTimeChargesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CheckoutChargeItemsAndOneTimeChargesChargebeeEventActions =
  (typeof CheckoutChargeItemsAndOneTimeChargesChargebeeEventActions)[keyof typeof CheckoutChargeItemsAndOneTimeChargesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CheckoutChargeItemsAndOneTimeChargesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CheckoutChargeItemsAndOneTimeChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CheckoutChargeItemsAndOneTimeChargesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CheckoutChargeItemsAndOneTimeChargesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CheckoutChargeItemsAndOneTimeChargesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RefundAPayment200 = {
  transaction: Transaction;
};

export type RefundAPaymentBody = {
  /** The amount to be refunded. Must not exceed [amount_unused](transactions#transaction_amount_unused). If not passed then all of [amount_unused](transactions#transaction_amount_unused) is refunded.
   */
  amount?: number;
  /** Remarks, if any, on the refund.
   */
  comment?: string;
};

export type RefundAPaymentChargebeeEventWebhook =
  (typeof RefundAPaymentChargebeeEventWebhook)[keyof typeof RefundAPaymentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAPaymentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RefundAPaymentChargebeeEventEmail =
  (typeof RefundAPaymentChargebeeEventEmail)[keyof typeof RefundAPaymentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAPaymentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RefundAPaymentChargebeeEventActions =
  (typeof RefundAPaymentChargebeeEventActions)[keyof typeof RefundAPaymentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAPaymentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RefundAPaymentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RefundAPaymentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RefundAPaymentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RefundAPaymentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAnOfflineTransaction200 = {
  transaction: Transaction;
};

export type DeleteAnOfflineTransactionBody = {
  /** Reason for deleting this transaction. This comment will be added to the associated entity.
   */
  comment?: string;
};

export type DeleteAnOfflineTransactionChargebeeEventWebhook =
  (typeof DeleteAnOfflineTransactionChargebeeEventWebhook)[keyof typeof DeleteAnOfflineTransactionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnOfflineTransactionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnOfflineTransactionChargebeeEventEmail =
  (typeof DeleteAnOfflineTransactionChargebeeEventEmail)[keyof typeof DeleteAnOfflineTransactionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnOfflineTransactionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnOfflineTransactionChargebeeEventActions =
  (typeof DeleteAnOfflineTransactionChargebeeEventActions)[keyof typeof DeleteAnOfflineTransactionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnOfflineTransactionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnOfflineTransactionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnOfflineTransactionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnOfflineTransactionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnOfflineTransactionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListPaymentsForAnInvoice200ListItem = {
  transaction: Transaction;
};

export type ListPaymentsForAnInvoice200 = {
  list: ListPaymentsForAnInvoice200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListPaymentsForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListPaymentsForAnInvoiceParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type RetrieveATransaction200 = {
  transaction: Transaction;
};

export type RetrieveATransactionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAnAuthorizationPayment200 = {
  transaction: Transaction;
};

export type CreateAnAuthorizationPaymentBody = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Payment source to be used for authorizing the transaction.
   */
  payment_source_id?: string;
  /** The currency code (ISO 4217 format) of the transaction amount.
   */
  currency_code?: string;
  /** The amount to be blocked.
   */
  amount: number;
};

export type CreateAnAuthorizationPaymentChargebeeEventWebhook =
  (typeof CreateAnAuthorizationPaymentChargebeeEventWebhook)[keyof typeof CreateAnAuthorizationPaymentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAuthorizationPaymentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnAuthorizationPaymentChargebeeEventEmail =
  (typeof CreateAnAuthorizationPaymentChargebeeEventEmail)[keyof typeof CreateAnAuthorizationPaymentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAuthorizationPaymentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnAuthorizationPaymentChargebeeEventActions =
  (typeof CreateAnAuthorizationPaymentChargebeeEventActions)[keyof typeof CreateAnAuthorizationPaymentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnAuthorizationPaymentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnAuthorizationPaymentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnAuthorizationPaymentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnAuthorizationPaymentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnAuthorizationPaymentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type VoidAnAuthorizationTransaction200 = {
  transaction: Transaction;
};

export type VoidAnAuthorizationTransactionChargebeeEventWebhook =
  (typeof VoidAnAuthorizationTransactionChargebeeEventWebhook)[keyof typeof VoidAnAuthorizationTransactionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidAnAuthorizationTransactionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type VoidAnAuthorizationTransactionChargebeeEventEmail =
  (typeof VoidAnAuthorizationTransactionChargebeeEventEmail)[keyof typeof VoidAnAuthorizationTransactionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidAnAuthorizationTransactionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type VoidAnAuthorizationTransactionChargebeeEventActions =
  (typeof VoidAnAuthorizationTransactionChargebeeEventActions)[keyof typeof VoidAnAuthorizationTransactionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidAnAuthorizationTransactionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type VoidAnAuthorizationTransactionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: VoidAnAuthorizationTransactionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: VoidAnAuthorizationTransactionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: VoidAnAuthorizationTransactionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListTransactions200ListItem = {
  transaction: Transaction;
};

export type ListTransactions200 = {
  list: ListTransactions200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListTransactionsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListTransactionsSortByDesc =
  (typeof ListTransactionsSortByDesc)[keyof typeof ListTransactionsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsSortByDesc = {
  date: "date",
  updated_at: "updated_at",
} as const;

export type ListTransactionsSortByAsc =
  (typeof ListTransactionsSortByAsc)[keyof typeof ListTransactionsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsSortByAsc = {
  date: "date",
  updated_at: "updated_at",
} as const;

/**
 * \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually

 */
export type ListTransactionsStatusIsNot =
  (typeof ListTransactionsStatusIsNot)[keyof typeof ListTransactionsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsStatusIsNot = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

/**
 * \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually

 */
export type ListTransactionsStatusIs =
  (typeof ListTransactionsStatusIs)[keyof typeof ListTransactionsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsStatusIs = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

/**
 * \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.

 */
export type ListTransactionsTypeIsNot =
  (typeof ListTransactionsTypeIsNot)[keyof typeof ListTransactionsTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsTypeIsNot = {
  authorization: "authorization",
  payment: "payment",
  refund: "refund",
  payment_reversal: "payment_reversal",
} as const;

/**
 * \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.

 */
export type ListTransactionsTypeIs =
  (typeof ListTransactionsTypeIs)[keyof typeof ListTransactionsTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsTypeIs = {
  authorization: "authorization",
  payment: "payment",
  refund: "refund",
  payment_reversal: "payment_reversal",
} as const;

export type ListTransactionsReferenceNumberIsPresent =
  (typeof ListTransactionsReferenceNumberIsPresent)[keyof typeof ListTransactionsReferenceNumberIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsReferenceNumberIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.

 */
export type ListTransactionsGatewayIsNot =
  (typeof ListTransactionsGatewayIsNot)[keyof typeof ListTransactionsGatewayIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsGatewayIsNot = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.

 */
export type ListTransactionsGatewayIs =
  (typeof ListTransactionsGatewayIs)[keyof typeof ListTransactionsGatewayIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsGatewayIs = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -

 */
export type ListTransactionsPaymentMethodIsNot =
  (typeof ListTransactionsPaymentMethodIsNot)[keyof typeof ListTransactionsPaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsPaymentMethodIsNot = {
  card: "card",
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  other: "other",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  custom: "custom",
  boleto: "boleto",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -

 */
export type ListTransactionsPaymentMethodIs =
  (typeof ListTransactionsPaymentMethodIs)[keyof typeof ListTransactionsPaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsPaymentMethodIs = {
  card: "card",
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  other: "other",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  custom: "custom",
  boleto: "boleto",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type ListTransactionsPaymentSourceIdIsPresent =
  (typeof ListTransactionsPaymentSourceIdIsPresent)[keyof typeof ListTransactionsPaymentSourceIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsPaymentSourceIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListTransactionsSubscriptionIdIsPresent =
  (typeof ListTransactionsSubscriptionIdIsPresent)[keyof typeof ListTransactionsSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListTransactionsCustomerIdIsPresent =
  (typeof ListTransactionsCustomerIdIsPresent)[keyof typeof ListTransactionsCustomerIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListTransactionsCustomerIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListTransactionsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Uniquely identifies the transaction.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "txn_88ybdbsnvf2"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Identifier of the customer for which this transaction is made.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "5hjdk8nOpd"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListTransactionsCustomerIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Identifier of the subscription for which this transaction is made.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is] = "5hjdk8nOpd"</i>
   */
  subscription_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListTransactionsSubscriptionIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>To filter based on Transaction payment source id.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>payment_source_id[is] = "pm_3Nl8XXUQUXDVFa2"</i>
   */
  payment_source_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListTransactionsPaymentSourceIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The payment method of this transaction. Possible values are : <dfn>card, cash, check, chargeback, bank_transfer, amazon_payments, paypal_express_checkout, direct_debit, alipay, unionpay, apple_pay, wechat_pay, ach_credit, sepa_credit, ideal, google_pay, sofort, bancontact, giropay, dotpay, other, upi, netbanking_emandates.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>payment_method[is_not] = "card"</i>
   */
  payment_method?: {
    /** \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -
     */
    is?: ListTransactionsPaymentMethodIs;
    /** \* \`card\` - Card \* \`cash\` - Cash \* \`check\` - Check \* \`chargeback\` - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* \`bank_transfer\` - Bank Transfer \* \`amazon_payments\` - Amazon Payments \* \`paypal_express_checkout\` - Paypal Express Checkout \* \`direct_debit\` - Direct Debit \* \`alipay\` - Alipay \* \`unionpay\` - Unionpay \* \`apple_pay\` - Apple Pay \* \`wechat_pay\` - WeChat Pay \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`ideal\` - IDEAL \* \`google_pay\` - Google Pay \* \`sofort\` - Sofort \* \`bancontact\` - Bancontact \* \`giropay\` - giropay \* \`dotpay\` - Dotpay \* \`other\` - Payment Methods other than the above types \* \`app_store\` - \*\*(Deprecated)\*\* App Store \* \`upi\` - upi \* \`netbanking_emandates\` - netbanking_emandates \* \`play_store\` - \*\*(Deprecated)\*\* Play Store \* \`custom\` - Custom \* \`boleto\` - boleto \* \`venmo\` - \* \`pay_to\` - \* \`faster_payments\` - \* \`sepa_instant_transfer\` -
     */
    is_not?: ListTransactionsPaymentMethodIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Gateway through which this transaction was done. Applicable only for 'Card' Payment Method. Possible values are : <dfn>chargebee, chargebee_payments, stripe, wepay, braintree, authorize_net, paypal_pro, pin, eway, eway_rapid, worldpay, balanced_payments, beanstream, bluepay, elavon, first_data_global, hdfc, migs, nmi, ogone, paymill, paypal_payflow_pro, sage_pay, tco, wirecard, amazon_payments, paypal_express_checkout, gocardless, adyen, orbital, moneris_us, moneris, bluesnap, cybersource, vantiv, checkout_com, paypal, ingenico_direct, exact, mollie, quickbooks, razorpay, not_applicable.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>gateway[is] = "stripe"</i>
   */
  gateway?: {
    /** \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.
     */
    is?: ListTransactionsGatewayIs;
    /** \* \`chargebee\` - Chargebee test gateway. \* \`chargebee_payments\` - Chargebee Payments gateway \* \`stripe\` - Stripe is a payment gateway. \* \`wepay\` - WePay is a payment gateway. \* \`braintree\` - Braintree is a payment gateway. \* \`authorize_net\` - Authorize.net is a payment gateway \* \`paypal_pro\` - PayPal Pro Account is a payment gateway. \* \`pin\` - Pin is a payment gateway \* \`eway\` - eWAY Account is a payment gateway. \* \`eway_rapid\` - eWAY Rapid is a payment gateway. \* \`worldpay\` - WorldPay is a payment gateway \* \`balanced_payments\` - Balanced is a payment gateway \* \`beanstream\` - Bambora(formerly known as Beanstream) is a payment gateway. \* \`bluepay\` - BluePay is a payment gateway. \* \`elavon\` - Elavon Virtual Merchant is a payment solution. \* \`first_data_global\` - First Data Global Gateway Virtual Terminal Account \* \`hdfc\` - HDFC Account is a payment gateway. \* \`migs\` - MasterCard Internet Gateway Service payment gateway. \* \`nmi\` - NMI is a payment gateway. \* \`ogone\` - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* \`paymill\` - PAYMILL is a payment gateway. \* \`paypal_payflow_pro\` - PayPal Payflow Pro is a payment gateway. \* \`sage_pay\` - Sage Pay is a payment gateway. \* \`tco\` - 2Checkout is a payment gateway. \* \`wirecard\` - WireCard Account is a payment service provider. \* \`amazon_payments\` - Amazon Payments is a payment service provider. \* \`paypal_express_checkout\` - PayPal Express Checkout is a payment gateway. \* \`gocardless\` - GoCardless is a payment service provider. \* \`adyen\` - Adyen is a payment gateway. \* \`orbital\` - Chase Paymentech(Orbital) is a payment gateway. \* \`moneris_us\` - Moneris USA is a payment gateway. \* \`moneris\` - Moneris is a payment gateway. \* \`bluesnap\` - BlueSnap is a payment gateway. \* \`cybersource\` - CyberSource is a payment gateway. \* \`vantiv\` - Vantiv is a payment gateway. \* \`checkout_com\` - Checkout.com is a payment gateway. \* \`paypal\` - PayPal Commerce is a payment gateway. \* \`ingenico_direct\` - Worldline Online Payments is a payment gateway. \* \`exact\` - Exact Payments is a payment gateway. \* \`mollie\` - Mollie is a payment gateway. \* \`quickbooks\` - Intuit QuickBooks Payments gateway \* \`razorpay\` - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* \`global_payments\` - Global Payments is a payment service provider. \* \`bank_of_america\` - Bank of America Gateway \* \`ecentric\` - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* \`metrics_global\` - Metrics global is a leading payment service provider providing unified payment services in the US. \* \`windcave\` - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* \`not_applicable\` - Indicates that payment gateway is not applicable for this resource.
     */
    is_not?: ListTransactionsGatewayIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The gateway account used for this transaction.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>gateway_account_id[is] = "gw_3Nl9BNeQ7438Ks1"</i>
   */
  gateway_account_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The id with which this transaction is referred in gateway.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id_at_gateway[is_not] = "txn_5678HJS89900"</i>
   */
  id_at_gateway?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The reference number for this transaction. For example, the check number when <code><a href="transactions#transaction_payment_method">payment_method</a></code> = <code>check</code>.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>reference_number[is] = "cus_u239732"</i>
   */
  reference_number?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListTransactionsReferenceNumberIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Type of the transaction. Possible values are : <dfn>authorization, payment, refund, payment_reversal.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is_not] = "payment"</i>
   */
  type?: {
    /** \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.
     */
    is?: ListTransactionsTypeIs;
    /** \* \`authorization\` - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`payment\` - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* \`refund\` - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* \`payment_reversal\` - Indicates a reversal transaction.
     */
    is_not?: ListTransactionsTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Indicates when this transaction occurred.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>date[before] = "1435054328"</i>
   */
  date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>Amount for this transaction.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount[gt] = "1200"</i>
   */
  amount?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>To filter based on transaction‚Äôs unused authorized/blocked amount.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_capturable[lt] = "1200"</i>
   */
  amount_capturable?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The status of this transaction. Possible values are : <dfn>in_progress, success, voided, failure, timeout, needs_attention.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "success"</i>
   */
  status?: {
    /** \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually
     */
    is?: ListTransactionsStatusIs;
    /** \* \`in_progress\` - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* \`success\` - The transaction is successful. \* \`voided\` - The transaction got voided or authorization expired at gateway. \* \`failure\` - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* \`timeout\` - Transaction failed because of Gateway not accepting the connection. \* \`needs_attention\` - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually
     */
    is_not?: ListTransactionsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on <code>updated_at</code>. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the <code>sort_by</code> input parameter as <code>updated_at</code> for a faster response.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>date, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "date"</i><br>This will sort the result based on the 'date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListTransactionsSortByAsc;
    desc?: ListTransactionsSortByDesc;
  };
};

export type RecordAnOfflineRefund200 = {
  transaction: Transaction;
};

/**
 * The payment method used to make the refund. \* card - Card \* alipay - Alipay \* sofort - Sofort \* play_store - Play Store \* custom - Custom \* upi - upi \* ach_credit - ACH Credit \* amazon_payments - Amazon Payments \* apple_pay - Apple Pay \* ideal - IDEAL \* giropay - giropay \* boleto - boleto \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* wechat_pay - WeChat Pay \* sepa_credit - SEPA Credit \* google_pay - Google Pay \* cash - Cash \* netbanking_emandates - netbanking_emandates \* unionpay - Unionpay \* bancontact - Bancontact \* bank_transfer - Bank Transfer \* paypal_express_checkout - Paypal Express Checkout \* app_store - App Store \* check - Check \* direct_debit - Direct Debit \* dotpay - Dotpay \* other - Payment Methods other than the above types

 */
export type RecordAnOfflineRefundBodyPaymentMethod =
  (typeof RecordAnOfflineRefundBodyPaymentMethod)[keyof typeof RecordAnOfflineRefundBodyPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnOfflineRefundBodyPaymentMethod = {
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

export type RecordAnOfflineRefundBody = {
  /** The amount to be recorded as refunded. Must not exceed [amount_unused](transactions#transaction_amount_unused). If not passed then all of [amount_unused](transactions#transaction_amount_unused) is recorded as refunded.
   */
  amount?: number;
  /** The payment method used to make the refund. \* card - Card \* alipay - Alipay \* sofort - Sofort \* play_store - Play Store \* custom - Custom \* upi - upi \* ach_credit - ACH Credit \* amazon_payments - Amazon Payments \* apple_pay - Apple Pay \* ideal - IDEAL \* giropay - giropay \* boleto - boleto \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* wechat_pay - WeChat Pay \* sepa_credit - SEPA Credit \* google_pay - Google Pay \* cash - Cash \* netbanking_emandates - netbanking_emandates \* unionpay - Unionpay \* bancontact - Bancontact \* bank_transfer - Bank Transfer \* paypal_express_checkout - Paypal Express Checkout \* app_store - App Store \* check - Check \* direct_debit - Direct Debit \* dotpay - Dotpay \* other - Payment Methods other than the above types
   */
  payment_method: RecordAnOfflineRefundBodyPaymentMethod;
  /** The date when the refund was made.
   */
  date: number;
  /** The reference number for this transaction. For example, the check number when `payment_method` = `check`.
   */
  reference_number?: string;
  /** Remarks, if any, on the refund.
   */
  comment?: string;
};

export type RecordAnOfflineRefundChargebeeEventWebhook =
  (typeof RecordAnOfflineRefundChargebeeEventWebhook)[keyof typeof RecordAnOfflineRefundChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnOfflineRefundChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnOfflineRefundChargebeeEventEmail =
  (typeof RecordAnOfflineRefundChargebeeEventEmail)[keyof typeof RecordAnOfflineRefundChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnOfflineRefundChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnOfflineRefundChargebeeEventActions =
  (typeof RecordAnOfflineRefundChargebeeEventActions)[keyof typeof RecordAnOfflineRefundChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnOfflineRefundChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnOfflineRefundHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RecordAnOfflineRefundChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RecordAnOfflineRefundChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RecordAnOfflineRefundChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ClaimAGift200 = {
  gift: Gift;
  subscription: Subscription;
};

export type ClaimAGiftChargebeeEventWebhook =
  (typeof ClaimAGiftChargebeeEventWebhook)[keyof typeof ClaimAGiftChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimAGiftChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ClaimAGiftChargebeeEventEmail =
  (typeof ClaimAGiftChargebeeEventEmail)[keyof typeof ClaimAGiftChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimAGiftChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ClaimAGiftChargebeeEventActions =
  (typeof ClaimAGiftChargebeeEventActions)[keyof typeof ClaimAGiftChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimAGiftChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ClaimAGiftHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ClaimAGiftChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ClaimAGiftChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ClaimAGiftChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAGift200 = {
  gift: Gift;
  subscription: Subscription;
};

export type RetrieveAGiftHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListGifts200ListItem = {
  gift: Gift;
  subscription: Subscription;
};

export type ListGifts200 = {
  list: ListGifts200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListGiftsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * Gifter customer id.

 */
export type ListGiftsGifterCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Receiver customer id.

 */
export type ListGiftsGiftReceiverCustomerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Email of the receiver. All gift related emails are sent to this email.

 */
export type ListGiftsGiftReceiverEmail = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * \* \`scheduled\` - Gift has been scheduled. \* \`unclaimed\` - Gift is not yet claimed and is ready to be claimed. \* \`claimed\` - Gift is claimed. \* \`cancelled\` - Gift is cancelled. \* \`expired\` - Gift is expired.

 */
export type ListGiftsStatusIsNot =
  (typeof ListGiftsStatusIsNot)[keyof typeof ListGiftsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListGiftsStatusIsNot = {
  scheduled: "scheduled",
  unclaimed: "unclaimed",
  claimed: "claimed",
  cancelled: "cancelled",
  expired: "expired",
} as const;

/**
 * \* \`scheduled\` - Gift has been scheduled. \* \`unclaimed\` - Gift is not yet claimed and is ready to be claimed. \* \`claimed\` - Gift is claimed. \* \`cancelled\` - Gift is cancelled. \* \`expired\` - Gift is expired.

 */
export type ListGiftsStatusIs =
  (typeof ListGiftsStatusIs)[keyof typeof ListGiftsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListGiftsStatusIs = {
  scheduled: "scheduled",
  unclaimed: "unclaimed",
  claimed: "claimed",
  cancelled: "cancelled",
  expired: "expired",
} as const;

export type ListGiftsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Status of the gift. Possible values are : <dfn>scheduled, unclaimed, claimed, cancelled, expired.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "claimed"</i>
   */
  status?: {
    /** \* \`scheduled\` - Gift has been scheduled. \* \`unclaimed\` - Gift is not yet claimed and is ready to be claimed. \* \`claimed\` - Gift is claimed. \* \`cancelled\` - Gift is cancelled. \* \`expired\` - Gift is expired.
     */
    is?: ListGiftsStatusIs;
    /** \* \`scheduled\` - Gift has been scheduled. \* \`unclaimed\` - Gift is not yet claimed and is ready to be claimed. \* \`claimed\` - Gift is claimed. \* \`cancelled\` - Gift is cancelled. \* \`expired\` - Gift is expired.
     */
    is_not?: ListGiftsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * Parameters for gift_receiver
   */
  gift_receiver?: {
    /** Email of the receiver. All gift related emails are sent to this email.
     */
    email?: ListGiftsGiftReceiverEmail;
    /** Receiver customer id.
     */
    customer_id?: ListGiftsGiftReceiverCustomerId;
  };
  /**
   * Parameters for gifter
   */
  gifter?: {
    /** Gifter customer id.
     */
    customer_id?: ListGiftsGifterCustomerId;
  };
};

export type UpdateAGift200 = {
  gift: Gift;
  subscription: Subscription;
};

export type UpdateAGiftBody = {
  /** The new date/time at which the gift notification email is to be sent. The value must be greater than current time. If [no_expiry](https://apidocs.chargebee.com/docs/api/gifts#gift_no_expiry) is false then the value must also be less than [claim_expiry_date](https://apidocs.chargebee.com/docs/api/gifts#gift_claim_expiry_date).
   */
  scheduled_at: number;
  /** An internal comment for this action. The comments are not retrievable via API and are only available on request via [Chargebee Support](https://chargebee.freshdesk.com/support/home).
   */
  comment?: string;
};

export type UpdateAGiftChargebeeEventWebhook =
  (typeof UpdateAGiftChargebeeEventWebhook)[keyof typeof UpdateAGiftChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAGiftChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAGiftChargebeeEventEmail =
  (typeof UpdateAGiftChargebeeEventEmail)[keyof typeof UpdateAGiftChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAGiftChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAGiftChargebeeEventActions =
  (typeof UpdateAGiftChargebeeEventActions)[keyof typeof UpdateAGiftChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAGiftChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAGiftHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAGiftChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAGiftChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAGiftChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CancelAGift200 = {
  gift: Gift;
  subscription: Subscription;
};

export type CancelAGiftChargebeeEventWebhook =
  (typeof CancelAGiftChargebeeEventWebhook)[keyof typeof CancelAGiftChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAGiftChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CancelAGiftChargebeeEventEmail =
  (typeof CancelAGiftChargebeeEventEmail)[keyof typeof CancelAGiftChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAGiftChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CancelAGiftChargebeeEventActions =
  (typeof CancelAGiftChargebeeEventActions)[keyof typeof CancelAGiftChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAGiftChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CancelAGiftHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CancelAGiftChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CancelAGiftChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CancelAGiftChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAGiftSubscriptionForItems200 = {
  gift: Gift;
  subscription: Subscription;
  invoice?: Invoice;
};

/**
 * Parameters for subscription_items

 */
export type CreateAGiftSubscriptionForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id?: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateAGiftSubscriptionForItemsBodyShippingAddressValidationStatus =
  (typeof CreateAGiftSubscriptionForItemsBodyShippingAddressValidationStatus)[keyof typeof CreateAGiftSubscriptionForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAGiftSubscriptionForItemsBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateAGiftSubscriptionForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateAGiftSubscriptionForItemsBodyShippingAddressValidationStatus;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateAGiftSubscriptionForItemsBodyPaymentIntentAdditionalInformation =
  { [key: string]: any };

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* google_pay - google_pay \* apple_pay - apple_pay \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* sofort - sofort \* ideal - ideal \* boleto - boleto

 */
export type CreateAGiftSubscriptionForItemsBodyPaymentIntentPaymentMethodType =
  (typeof CreateAGiftSubscriptionForItemsBodyPaymentIntentPaymentMethodType)[keyof typeof CreateAGiftSubscriptionForItemsBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAGiftSubscriptionForItemsBodyPaymentIntentPaymentMethodType =
  {
    card: "card",
    ideal: "ideal",
    sofort: "sofort",
    bancontact: "bancontact",
    google_pay: "google_pay",
    dotpay: "dotpay",
    giropay: "giropay",
    apple_pay: "apple_pay",
    upi: "upi",
    netbanking_emandates: "netbanking_emandates",
    paypal_express_checkout: "paypal_express_checkout",
    direct_debit: "direct_debit",
    boleto: "boleto",
    venmo: "venmo",
    amazon_payments: "amazon_payments",
    pay_to: "pay_to",
    faster_payments: "faster_payments",
    sepa_instant_transfer: "sepa_instant_transfer",
  } as const;

/**
 * Parameters for payment_intent

 */
export type CreateAGiftSubscriptionForItemsBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* google_pay - google_pay \* apple_pay - apple_pay \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* sofort - sofort \* ideal - ideal \* boleto - boleto
   */
  payment_method_type?: CreateAGiftSubscriptionForItemsBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateAGiftSubscriptionForItemsBodyPaymentIntentAdditionalInformation;
};

/**
 * Parameters for gift_receiver

 */
export type CreateAGiftSubscriptionForItemsBodyGiftReceiver = {
  /** Receiver customer id.
   */
  customer_id: string;
  /** First name of the receiver as given by the gifter.
   */
  first_name: string;
  /** Last name of the receiver as given by the gifter,
   */
  last_name: string;
  /** Email of the receiver. All gift related emails are sent to this email.
   */
  email: string;
};

/**
 * Parameters for gifter

 */
export type CreateAGiftSubscriptionForItemsBodyGifter = {
  /** Gifter customer id.
   */
  customer_id: string;
  /** Gifter sign-off name
   */
  signature: string;
  /** Personalized message for the gift.
   */
  note?: string;
  /** Identifier of the payment source
   */
  payment_src_id?: string;
};

export type CreateAGiftSubscriptionForItemsBody = {
  /** Indicates the date on which the gift notification is sent to the receiver. If not passed, the receiver is notified immediately.
   */
  scheduled_at?: number;
  /** When `true`, the claim happens automatically. When not passed, the default value in the site settings is used.
   */
  auto_claim?: boolean;
  /** When `true`, indicates that the gift does not expire. Do not pass or pass as `false` when `auto_claim` is set. .
   */
  no_expiry?: boolean;
  /** The date until which the gift can be claimed. Must be set to a value after `scheduled_at`. If the gift is not claimed within `claim_expiry_date`, it will expire and the subscription will move to `cancelled` state. When not passed, the value specified in the site settings will be used. Pass as `NULL` or do not pass when `auto_claim` or `no_expiry` are set.
   */
  claim_expiry_date?: number;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or coupon codes.
   */
  coupon_ids?: string[];
  /** Parameters for gifter
   */
  gifter?: CreateAGiftSubscriptionForItemsBodyGifter;
  /** Parameters for gift_receiver
   */
  gift_receiver?: CreateAGiftSubscriptionForItemsBodyGiftReceiver;
  /** Parameters for payment_intent
   */
  payment_intent?: CreateAGiftSubscriptionForItemsBodyPaymentIntent;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateAGiftSubscriptionForItemsBodyShippingAddress;
  /** Parameters for subscription_items
   */
  subscription_items?: CreateAGiftSubscriptionForItemsBodySubscriptionItems;
};

export type CreateAGiftSubscriptionForItemsChargebeeEventWebhook =
  (typeof CreateAGiftSubscriptionForItemsChargebeeEventWebhook)[keyof typeof CreateAGiftSubscriptionForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAGiftSubscriptionForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAGiftSubscriptionForItemsChargebeeEventEmail =
  (typeof CreateAGiftSubscriptionForItemsChargebeeEventEmail)[keyof typeof CreateAGiftSubscriptionForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAGiftSubscriptionForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAGiftSubscriptionForItemsChargebeeEventActions =
  (typeof CreateAGiftSubscriptionForItemsChargebeeEventActions)[keyof typeof CreateAGiftSubscriptionForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAGiftSubscriptionForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAGiftSubscriptionForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAGiftSubscriptionForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAGiftSubscriptionForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAGiftSubscriptionForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateARefundableCreditNote200 = {
  order: Order;
};

/**
 * The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* product_unsatisfactory - Product Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* service_unsatisfactory - Service Unsatisfactory \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* fraudulent - FRAUDULENT \* other - Can be set when none of the above reason codes are applicable \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* order_cancellation - Order Cancellation \* order_change - Order Change \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation

 */
export type CreateARefundableCreditNoteBodyCreditNoteReasonCode =
  (typeof CreateARefundableCreditNoteBodyCreditNoteReasonCode)[keyof typeof CreateARefundableCreditNoteBodyCreditNoteReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateARefundableCreditNoteBodyCreditNoteReasonCode = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

/**
 * Parameters for credit_note

 */
export type CreateARefundableCreditNoteBodyCreditNote = {
  /** The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* product_unsatisfactory - Product Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* service_unsatisfactory - Service Unsatisfactory \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* fraudulent - FRAUDULENT \* other - Can be set when none of the above reason codes are applicable \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* order_cancellation - Order Cancellation \* order_change - Order Change \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation
   */
  reason_code: CreateARefundableCreditNoteBodyCreditNoteReasonCode;
  /** Credit Note amount in cents.
   */
  total: number;
};

export type CreateARefundableCreditNoteBody = {
  /** The Customer Notes to be filled in the Credit Notes created to capture this refund detail.
   */
  customer_notes?: string;
  /** Comment, if any, on the refund.
   */
  comment?: string;
  /** Parameters for credit_note
   */
  credit_note?: CreateARefundableCreditNoteBodyCreditNote;
};

export type CreateARefundableCreditNoteChargebeeEventWebhook =
  (typeof CreateARefundableCreditNoteChargebeeEventWebhook)[keyof typeof CreateARefundableCreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateARefundableCreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateARefundableCreditNoteChargebeeEventEmail =
  (typeof CreateARefundableCreditNoteChargebeeEventEmail)[keyof typeof CreateARefundableCreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateARefundableCreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateARefundableCreditNoteChargebeeEventActions =
  (typeof CreateARefundableCreditNoteChargebeeEventActions)[keyof typeof CreateARefundableCreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateARefundableCreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateARefundableCreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateARefundableCreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateARefundableCreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateARefundableCreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAnImportedOrder200 = {
  order: Order;
};

export type DeleteAnImportedOrderChargebeeEventWebhook =
  (typeof DeleteAnImportedOrderChargebeeEventWebhook)[keyof typeof DeleteAnImportedOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnImportedOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnImportedOrderChargebeeEventEmail =
  (typeof DeleteAnImportedOrderChargebeeEventEmail)[keyof typeof DeleteAnImportedOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnImportedOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnImportedOrderChargebeeEventActions =
  (typeof DeleteAnImportedOrderChargebeeEventActions)[keyof typeof DeleteAnImportedOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnImportedOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnImportedOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnImportedOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnImportedOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnImportedOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateAnOrder200 = {
  order: Order;
};

/**
 * The order line item's delivery status \* shipped - The order line item has been shipped. \* returned - The order has been returned after delivery. \* queued - Not processed for shipping yet. \* awaiting_shipment - Moved to shipping platform. \* on_hold - The delivery has been moved to "On hold" status. \* partially_delivered - The order has been partially delivered to the customer. \* cancelled - The order has been returned after delivery. \* delivered - The order line item has been delivered.

 */
export type UpdateAnOrderBodyOrderLineItemsStatusItem =
  (typeof UpdateAnOrderBodyOrderLineItemsStatusItem)[keyof typeof UpdateAnOrderBodyOrderLineItemsStatusItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderBodyOrderLineItemsStatusItem = {
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
  cancelled: "cancelled",
} as const;

/**
 * Parameters for order_line_items

 */
export type UpdateAnOrderBodyOrderLineItems = {
  /** The identifier for the order line item.
   */
  id?: string[];
  status?: UpdateAnOrderBodyOrderLineItemsStatusItem[];
  /** The SKU code for the order line item product
   */
  sku?: string[];
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type UpdateAnOrderBodyShippingAddressValidationStatus =
  (typeof UpdateAnOrderBodyShippingAddressValidationStatus)[keyof typeof UpdateAnOrderBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type UpdateAnOrderBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: UpdateAnOrderBodyShippingAddressValidationStatus;
};

/**
 * The order status. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* shipped - The order has moved from order management system to a shipping system. \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* on_hold - The order is paused from being processed. \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* returned - The order has been returned after delivery. \* delivered - The order has been delivered to the customer. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* partially_delivered - The order has been partially delivered to the customer.

 */
export type UpdateAnOrderBodyStatus =
  (typeof UpdateAnOrderBodyStatus)[keyof typeof UpdateAnOrderBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderBodyStatus = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

/**
 * Cancellation reason. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* invoice_voided - The invoice for which the order was createed has been voided. \* alternative_found - Alternative found. \* others - Other reason \* order_resent - Order resent \* product_unsatisfactory - Product unsatisfactory. \* delivery_date_missed - Delivery date missed. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* fraudulent_transaction - Fraudulent transaction. \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state. \* product_not_required - Product not required. \* payment_declined - Payment declined. \* product_not_available - Product not available. \* third_party_cancellation - Third party cancellation.

 */
export type UpdateAnOrderBodyCancellationReason =
  (typeof UpdateAnOrderBodyCancellationReason)[keyof typeof UpdateAnOrderBodyCancellationReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderBodyCancellationReason = {
  shipping_cut_off_passed: "shipping_cut_off_passed",
  product_unsatisfactory: "product_unsatisfactory",
  third_party_cancellation: "third_party_cancellation",
  product_not_required: "product_not_required",
  delivery_date_missed: "delivery_date_missed",
  alternative_found: "alternative_found",
  invoice_written_off: "invoice_written_off",
  invoice_voided: "invoice_voided",
  fraudulent_transaction: "fraudulent_transaction",
  payment_declined: "payment_declined",
  subscription_cancelled: "subscription_cancelled",
  product_not_available: "product_not_available",
  others: "others",
  order_resent: "order_resent",
} as const;

export type UpdateAnOrderBody = {
  /** Reference id is the unique identifier of the order in the shipping/order management application.
   */
  reference_id?: string;
  /** Unique id to identify a group of orders.
   */
  batch_id?: string;
  /** The custom note for the order.
   */
  note?: string;
  /** The date on which the order should be shipped to the customer.
   */
  shipping_date?: number;
  /** The order date.
   */
  order_date?: number;
  /** The time at which the order was cancelled.
   */
  cancelled_at?: number;
  /** Cancellation reason. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* invoice_voided - The invoice for which the order was createed has been voided. \* alternative_found - Alternative found. \* others - Other reason \* order_resent - Order resent \* product_unsatisfactory - Product unsatisfactory. \* delivery_date_missed - Delivery date missed. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* fraudulent_transaction - Fraudulent transaction. \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state. \* product_not_required - Product not required. \* payment_declined - Payment declined. \* product_not_available - Product not available. \* third_party_cancellation - Third party cancellation.
   */
  cancellation_reason?: UpdateAnOrderBodyCancellationReason;
  /** The time at which the order was shipped.
   */
  shipped_at?: number;
  /** The time at which the order was delivered.
   */
  delivered_at?: number;
  /** The tracking url of the order.
   */
  tracking_url?: string;
  /** The tracking id of the order.
   */
  tracking_id?: string;
  /** The carrier used to ship the goods to the customer. Ex:- FedEx.
   */
  shipment_carrier?: string;
  /** The fulfillment status of an order as reflected in the shipping/order management application. Typical statuses include Shipped,Awaiting Shipment,Not fulfilled etc;.
   */
  fulfillment_status?: string;
  /** The order status. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* shipped - The order has moved from order management system to a shipping system. \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* on_hold - The order is paused from being processed. \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* returned - The order has been returned after delivery. \* delivered - The order has been delivered to the customer. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* partially_delivered - The order has been partially delivered to the customer.
   */
  status?: UpdateAnOrderBodyStatus;
  /** Parameters for shipping_address
   */
  shipping_address?: UpdateAnOrderBodyShippingAddress;
  /** Parameters for order_line_items
   */
  order_line_items?: UpdateAnOrderBodyOrderLineItems;
};

export type UpdateAnOrderChargebeeEventWebhook =
  (typeof UpdateAnOrderChargebeeEventWebhook)[keyof typeof UpdateAnOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnOrderChargebeeEventEmail =
  (typeof UpdateAnOrderChargebeeEventEmail)[keyof typeof UpdateAnOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnOrderChargebeeEventActions =
  (typeof UpdateAnOrderChargebeeEventActions)[keyof typeof UpdateAnOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateAnOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateAnOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateAnOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateAnOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateAnOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnOrder200 = {
  order: Order;
};

export type RetrieveAnOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CancelAnOrder200 = {
  order: Order;
};

/**
 * Parameters for credit_note

 */
export type CancelAnOrderBodyCreditNote = {
  /** Credit Note amount in cents.
   */
  total?: number;
};

/**
 * Cancellation reason. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* alternative_found - Alternative found. \* others - Other reason \* product_unsatisfactory - Product unsatisfactory. \* product_not_required - Product not required. \* delivery_date_missed - Delivery date missed. \* invoice_voided - The invoice for which the order was createed has been voided. \* payment_declined - Payment declined. \* product_not_available - Product not available. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* third_party_cancellation - Third party cancellation. \* fraudulent_transaction - Fraudulent transaction. \* order_resent - Order resent \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state.

 */
export type CancelAnOrderBodyCancellationReason =
  (typeof CancelAnOrderBodyCancellationReason)[keyof typeof CancelAnOrderBodyCancellationReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAnOrderBodyCancellationReason = {
  shipping_cut_off_passed: "shipping_cut_off_passed",
  product_unsatisfactory: "product_unsatisfactory",
  third_party_cancellation: "third_party_cancellation",
  product_not_required: "product_not_required",
  delivery_date_missed: "delivery_date_missed",
  alternative_found: "alternative_found",
  invoice_written_off: "invoice_written_off",
  invoice_voided: "invoice_voided",
  fraudulent_transaction: "fraudulent_transaction",
  payment_declined: "payment_declined",
  subscription_cancelled: "subscription_cancelled",
  product_not_available: "product_not_available",
  others: "others",
  order_resent: "order_resent",
} as const;

export type CancelAnOrderBody = {
  /** Cancellation reason. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* alternative_found - Alternative found. \* others - Other reason \* product_unsatisfactory - Product unsatisfactory. \* product_not_required - Product not required. \* delivery_date_missed - Delivery date missed. \* invoice_voided - The invoice for which the order was createed has been voided. \* payment_declined - Payment declined. \* product_not_available - Product not available. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* third_party_cancellation - Third party cancellation. \* fraudulent_transaction - Fraudulent transaction. \* order_resent - Order resent \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state.
   */
  cancellation_reason: CancelAnOrderBodyCancellationReason;
  /** The Customer Notes to be filled in the Credit Notes created to capture this refund detail.
   */
  customer_notes?: string;
  /** Comment, if any, on the refund.
   */
  comment?: string;
  /** The time at which the order was cancelled.
   */
  cancelled_at?: number;
  /** Parameters for credit_note
   */
  credit_note?: CancelAnOrderBodyCreditNote;
};

export type CancelAnOrderChargebeeEventWebhook =
  (typeof CancelAnOrderChargebeeEventWebhook)[keyof typeof CancelAnOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAnOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CancelAnOrderChargebeeEventEmail =
  (typeof CancelAnOrderChargebeeEventEmail)[keyof typeof CancelAnOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAnOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CancelAnOrderChargebeeEventActions =
  (typeof CancelAnOrderChargebeeEventActions)[keyof typeof CancelAnOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelAnOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CancelAnOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CancelAnOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CancelAnOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CancelAnOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ReopenACancelledOrder200 = {
  order: Order;
};

export type ReopenACancelledOrderBody = {
  /** Flag to void credit notes created for cancellation if they are unused.
   */
  void_cancellation_credit_notes?: boolean;
};

export type ReopenACancelledOrderChargebeeEventWebhook =
  (typeof ReopenACancelledOrderChargebeeEventWebhook)[keyof typeof ReopenACancelledOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReopenACancelledOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ReopenACancelledOrderChargebeeEventEmail =
  (typeof ReopenACancelledOrderChargebeeEventEmail)[keyof typeof ReopenACancelledOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReopenACancelledOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ReopenACancelledOrderChargebeeEventActions =
  (typeof ReopenACancelledOrderChargebeeEventActions)[keyof typeof ReopenACancelledOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReopenACancelledOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ReopenACancelledOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ReopenACancelledOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ReopenACancelledOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ReopenACancelledOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ResendAnOrder200 = {
  order: Order;
};

/**
 * Parameters for order_line_items

 */
export type ResendAnOrderBodyOrderLineItems = {
  /** The identifier for the order line item.
   */
  id?: string[];
  /** The quantity that is going to get fulfilled for this order
   */
  fulfillment_quantity?: number[];
};

export type ResendAnOrderBody = {
  /** The date on which the order should be shipped to the customer.
   */
  shipping_date?: number;
  /** Reason code for resending the order. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Orders \> Order Resend**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  resend_reason?: string;
  /** Parameters for order_line_items
   */
  order_line_items?: ResendAnOrderBodyOrderLineItems;
};

export type ResendAnOrderChargebeeEventWebhook =
  (typeof ResendAnOrderChargebeeEventWebhook)[keyof typeof ResendAnOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendAnOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ResendAnOrderChargebeeEventEmail =
  (typeof ResendAnOrderChargebeeEventEmail)[keyof typeof ResendAnOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendAnOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ResendAnOrderChargebeeEventActions =
  (typeof ResendAnOrderChargebeeEventActions)[keyof typeof ResendAnOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendAnOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ResendAnOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ResendAnOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ResendAnOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ResendAnOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AssignOrderNumber200 = {
  order: Order;
};

export type AssignOrderNumberChargebeeEventWebhook =
  (typeof AssignOrderNumberChargebeeEventWebhook)[keyof typeof AssignOrderNumberChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignOrderNumberChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AssignOrderNumberChargebeeEventEmail =
  (typeof AssignOrderNumberChargebeeEventEmail)[keyof typeof AssignOrderNumberChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignOrderNumberChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AssignOrderNumberChargebeeEventActions =
  (typeof AssignOrderNumberChargebeeEventActions)[keyof typeof AssignOrderNumberChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignOrderNumberChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AssignOrderNumberHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AssignOrderNumberChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AssignOrderNumberChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AssignOrderNumberChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportAnOrder200 = {
  order: Order;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type ImportAnOrderBodyBillingAddressValidationStatus =
  (typeof ImportAnOrderBodyBillingAddressValidationStatus)[keyof typeof ImportAnOrderBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type ImportAnOrderBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: ImportAnOrderBodyBillingAddressValidationStatus;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type ImportAnOrderBodyShippingAddressValidationStatus =
  (typeof ImportAnOrderBodyShippingAddressValidationStatus)[keyof typeof ImportAnOrderBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type ImportAnOrderBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: ImportAnOrderBodyShippingAddressValidationStatus;
};

/**
 * Cancellation reason. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* invoice_voided - The invoice for which the order was createed has been voided. \* alternative_found - Alternative found. \* others - Other reason \* order_resent - Order resent \* product_unsatisfactory - Product unsatisfactory. \* delivery_date_missed - Delivery date missed. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* fraudulent_transaction - Fraudulent transaction. \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state. \* product_not_required - Product not required. \* payment_declined - Payment declined. \* product_not_available - Product not available. \* third_party_cancellation - Third party cancellation.

 */
export type ImportAnOrderBodyCancellationReason =
  (typeof ImportAnOrderBodyCancellationReason)[keyof typeof ImportAnOrderBodyCancellationReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderBodyCancellationReason = {
  shipping_cut_off_passed: "shipping_cut_off_passed",
  product_unsatisfactory: "product_unsatisfactory",
  third_party_cancellation: "third_party_cancellation",
  product_not_required: "product_not_required",
  delivery_date_missed: "delivery_date_missed",
  alternative_found: "alternative_found",
  invoice_written_off: "invoice_written_off",
  invoice_voided: "invoice_voided",
  fraudulent_transaction: "fraudulent_transaction",
  payment_declined: "payment_declined",
  subscription_cancelled: "subscription_cancelled",
  product_not_available: "product_not_available",
  others: "others",
  order_resent: "order_resent",
} as const;

/**
 * The status of this order. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* shipped - The order has moved from order management system to a shipping system. \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* on_hold - The order is paused from being processed. \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* returned - The order has been returned after delivery. \* delivered - The order has been delivered to the customer. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* partially_delivered - The order has been partially delivered to the customer.

 */
export type ImportAnOrderBodyStatus =
  (typeof ImportAnOrderBodyStatus)[keyof typeof ImportAnOrderBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderBodyStatus = {
  cancelled: "cancelled",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

export type ImportAnOrderBody = {
  /** Uniquely identifies the order. It is the api identifier for the order.   

*Order id will always be assigned incrementally from the last generated Order ID.


If Orders imported has an Order ID which is a string, Chargebee will just validate if the Order ID is unique

Recommendation: For orders being imported, set the same prefix and the serial number that is used for the Document number, which will make this into a string. This will ensure that imported orders don't conflict with orders created by Chargebee. Chargebee will ensure there aren't orders with duplicate Order IDs.*.
 */
  id?: string;
  /** The order's serial number.   

*Document number passed cannot be greater than the series mentioned in the configuration. For instance, if you have set Document number series in Order Configurations with a Prefix as 'ORDER' and Starting number as '1000', orders up to the sequence number 'ORDER999' can be imported into Chargebee*   

*Recommendation: Set a different prefix at the Order Configuration, than the ones that are imported. If your Order Configuration has a Prefix of 'NEW', with Starting number as '1', i.e. 'NEW1', then, set Prefix for imported orders to be as 'OLD', with Starting number as '1', i.e, 'OLD1'*.
 */
  document_number?: string;
  /** The invoice number which acts as an identifier for invoice and is generated sequentially.
   */
  invoice_id: string;
  /** The status of this order. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* shipped - The order has moved from order management system to a shipping system. \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* on_hold - The order is paused from being processed. \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* returned - The order has been returned after delivery. \* delivered - The order has been delivered to the customer. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* partially_delivered - The order has been partially delivered to the customer.
   */
  status: ImportAnOrderBodyStatus;
  /** The subscription for which the order is created.
   */
  subscription_id?: string;
  /** The customer for which the order is created.
   */
  customer_id?: string;
  /** The time at which the order was created.
   */
  created_at: number;
  /** The date on which the order will start getting processed.
   */
  order_date: number;
  /** This is the date on which the order has to be shipped to the customer.
   */
  shipping_date: number;
  /** Reference id can be used to map the orders in the shipping/order management application to the orders in ChargeBee. The reference_id generally is the same as the order id in the third party application.  

*Recommendation:

If this order is in any of these statuses, awaiting_shipment, on_hold, delivered, shipped, partially_delivered, returned, and has already been processed, through a 3rd party system, and you have a reference id of the entity in the 3rd party tool, pass in the entity id to this field. If not, set the same prefix and the serial number that is used for the Document number, which will make this into a string.*   

*If this order hasn't been processed and is in 'queued' status, do not pass any value to this field. Chargebee, when it syncs your Orders through the fulfilment integrations such as Shipstation or Shopify, would auto assign the reference id from the connected system.*.
 */
  reference_id?: string;
  /** The fulfillment status of an order as reflected in the shipping/order management application. Typical statuses include Shipped,Awaiting Shipment,Not fulfilled etc;.   

*If this order is in any of these statuses, awaiting_shipment, on_hold, delivered, shipped, partially_delivered, returned, and has already been processed, through a 3rd party system, and you have a corresponding status from the 3rd party tool, pass in the status to this field.

If this order hasn't been processed and is in 'queued' status, do not pass any value to this field. Chargebee, when it syncs your Orders through the fulfilment integrations such as Shipstation or Shopify, would auto assign the fulfilment status from the connected system.*.
 */
  fulfillment_status?: string;
  /** The custom note for the order.
   */
  note?: string;
  /** The tracking id of the order.
   */
  tracking_id?: string;
  /** The tracking url of the order.
   */
  tracking_url?: string;
  /** Unique id to identify a group of orders.
   */
  batch_id?: string;
  /** Shipment carrier.
   */
  shipment_carrier?: string;
  /** The time after which an order becomes unservicable.
   */
  shipping_cut_off_date?: number;
  /** The time at which the order was delivered.
   */
  delivered_at?: number;
  /** The time at which the order was shipped.
   */
  shipped_at?: number;
  /** The time at which the order was cancelled.
   */
  cancelled_at?: number;
  /** Cancellation reason. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* invoice_voided - The invoice for which the order was createed has been voided. \* alternative_found - Alternative found. \* others - Other reason \* order_resent - Order resent \* product_unsatisfactory - Product unsatisfactory. \* delivery_date_missed - Delivery date missed. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* fraudulent_transaction - Fraudulent transaction. \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state. \* product_not_required - Product not required. \* payment_declined - Payment declined. \* product_not_available - Product not available. \* third_party_cancellation - Third party cancellation.
   */
  cancellation_reason?: ImportAnOrderBodyCancellationReason;
  /** If there are any credits that were issued at the order level, you can make use of the field, refundable_credits_issued. This will lead to Chargebee creating a Refundable Credit note against the order. When the next invoice is raised against the customer, this credit note will be utilised.
   */
  refundable_credits_issued?: number;
  /** Parameters for shipping_address
   */
  shipping_address?: ImportAnOrderBodyShippingAddress;
  /** Parameters for billing_address
   */
  billing_address?: ImportAnOrderBodyBillingAddress;
};

export type ImportAnOrderChargebeeEventWebhook =
  (typeof ImportAnOrderChargebeeEventWebhook)[keyof typeof ImportAnOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportAnOrderChargebeeEventEmail =
  (typeof ImportAnOrderChargebeeEventEmail)[keyof typeof ImportAnOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportAnOrderChargebeeEventActions =
  (typeof ImportAnOrderChargebeeEventActions)[keyof typeof ImportAnOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportAnOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportAnOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportAnOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportAnOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportAnOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAnOrder200 = {
  order: Order;
};

/**
 * The order status. \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system

 */
export type CreateAnOrderBodyStatus =
  (typeof CreateAnOrderBodyStatus)[keyof typeof CreateAnOrderBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnOrderBodyStatus = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
} as const;

export type CreateAnOrderBody = {
  /** Uniquely identifies the order. If not given, this will be auto-generated.
   */
  id?: string;
  /** The invoice number which acts as an identifier for invoice and is generated sequentially.
   */
  invoice_id: string;
  /** The order status. \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system
   */
  status?: CreateAnOrderBodyStatus;
  /** Reference id can be used to map the orders in the shipping/order management application to the orders in ChargeBee. The reference_id generally is same as the order id in the third party application.
   */
  reference_id?: string;
  /** The fulfillment status of an order as reflected in the shipping/order management application. Typical statuses include Shipped,Awaiting Shipment,Not fulfilled etc;.
   */
  fulfillment_status?: string;
  /** The custom note for the order.
   */
  note?: string;
  /** The tracking id of the order.
   */
  tracking_id?: string;
  /** The tracking url of the order.
   */
  tracking_url?: string;
  /** Unique id to identify a group of orders.
   */
  batch_id?: string;
};

export type CreateAnOrderChargebeeEventWebhook =
  (typeof CreateAnOrderChargebeeEventWebhook)[keyof typeof CreateAnOrderChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnOrderChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnOrderChargebeeEventEmail =
  (typeof CreateAnOrderChargebeeEventEmail)[keyof typeof CreateAnOrderChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnOrderChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnOrderChargebeeEventActions =
  (typeof CreateAnOrderChargebeeEventActions)[keyof typeof CreateAnOrderChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnOrderChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnOrderHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnOrderChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnOrderChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnOrderChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListOrders200ListItem = {
  order: Order;
};

export type ListOrders200 = {
  list: ListOrders200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListOrdersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListOrdersSortByDesc =
  (typeof ListOrdersSortByDesc)[keyof typeof ListOrdersSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersSortByDesc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListOrdersSortByAsc =
  (typeof ListOrdersSortByAsc)[keyof typeof ListOrdersSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersSortByAsc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListOrdersIsResentIs =
  (typeof ListOrdersIsResentIs)[keyof typeof ListOrdersIsResentIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersIsResentIs = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent

 */
export type ListOrdersResentStatusIsNot =
  (typeof ListOrdersResentStatusIsNot)[keyof typeof ListOrdersResentStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersResentStatusIsNot = {
  fully_resent: "fully_resent",
  partially_resent: "partially_resent",
} as const;

/**
 * \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent

 */
export type ListOrdersResentStatusIs =
  (typeof ListOrdersResentStatusIs)[keyof typeof ListOrdersResentStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersResentStatusIs = {
  fully_resent: "fully_resent",
  partially_resent: "partially_resent",
} as const;

/**
 * \* \`manual\` - The order has been created by the the user using Chargebee's legacy order management system. \* \`system_generated\` - The order has been created by Chargebee automatically based on the preferences set by the user.

 */
export type ListOrdersOrderTypeIsNot =
  (typeof ListOrdersOrderTypeIsNot)[keyof typeof ListOrdersOrderTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersOrderTypeIsNot = {
  manual: "manual",
  system_generated: "system_generated",
} as const;

/**
 * \* \`manual\` - The order has been created by the the user using Chargebee's legacy order management system. \* \`system_generated\` - The order has been created by Chargebee automatically based on the preferences set by the user.

 */
export type ListOrdersOrderTypeIs =
  (typeof ListOrdersOrderTypeIs)[keyof typeof ListOrdersOrderTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersOrderTypeIs = {
  manual: "manual",
  system_generated: "system_generated",
} as const;

/**
 * \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.

 */
export type ListOrdersStatusIsNot =
  (typeof ListOrdersStatusIsNot)[keyof typeof ListOrdersStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersStatusIsNot = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

/**
 * \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.

 */
export type ListOrdersStatusIs =
  (typeof ListOrdersStatusIs)[keyof typeof ListOrdersStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListOrdersStatusIs = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

export type ListOrdersParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * Flag to indicate whether deleted credit notes should be passed or not.
   */
  exclude_deleted_credit_notes?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Uniquely identifies the order. It is the api identifier for the order.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "890"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The invoice number which acts as an identifier for invoice and is generated sequentially.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>invoice_id[is] = "INVOICE_982"</i>
   */
  invoice_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The subscription for which the order is created.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is_not] = "null"</i>
   */
  subscription_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The status of this order. Possible values are : <dfn>new, processing, complete, cancelled, voided, queued, awaiting_shipment, on_hold, delivered, shipped, partially_delivered, returned.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "queued"</i>
   */
  status?: {
    /** \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.
     */
    is?: ListOrdersStatusIs;
    /** \* \`new\` - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* \`processing\` - Order is being processed. Applicable only if you are using Chargebee's legacy order management system \* \`complete\` - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* \`cancelled\` - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* \`voided\` - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* \`queued\` - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* \`awaiting_shipment\` - The order has been picked up by an integration system, and synced to a shipping management platform \* \`on_hold\` - The order is paused from being processed. \* \`delivered\` - The order has been delivered to the customer. \* \`shipped\` - The order has moved from order management system to a shipping system. \* \`partially_delivered\` - The order has been partially delivered to the customer. \* \`returned\` - The order has been returned after delivery.
     */
    is_not?: ListOrdersStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>This is the date on which the order will be delivered to the customer.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>shipping_date[after] = "1435054328"</i>
   */
  shipping_date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The time at which the order was shipped.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>shipped_at[before] = "1435054328"</i>
   */
  shipped_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Order type. Possible values are : <dfn>manual, system_generated.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>order_type[is_not] = "system_generated"</i>
   */
  order_type?: {
    /** \* \`manual\` - The order has been created by the the user using Chargebee's legacy order management system. \* \`system_generated\` - The order has been created by Chargebee automatically based on the preferences set by the user.
     */
    is?: ListOrdersOrderTypeIs;
    /** \* \`manual\` - The order has been created by the the user using Chargebee's legacy order management system. \* \`system_generated\` - The order has been created by Chargebee automatically based on the preferences set by the user.
     */
    is_not?: ListOrdersOrderTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The date on which the order will start getting processed.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>order_date[before] = "1435054328"</i>
   */
  order_date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The timestamp indicating the date & time the order's invoice got paid.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>paid_on[on] = "1435054328"</i>
   */
  paid_on?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on updated at .<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[on] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The time at which the order was created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[after] = "1435054328"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Resent order status. Possible values are : <dfn>fully_resent, partially_resent.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>resent_status[is] = "fully_resent"</i>
   */
  resent_status?: {
    /** \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent
     */
    is?: ListOrdersResentStatusIs;
    /** \* \`fully_resent\` - Order is Fully resent \* \`partially_resent\` - Order is Partially resent
     */
    is_not?: ListOrdersResentStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Order is resent order or not. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>is_resent[is] = "false"</i>
   */
  is_resent?: {
    is?: ListOrdersIsResentIs;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>If resent order what is the parent order id.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>original_order_id[is] = "1xRt6ifdr"</i>
   */
  original_order_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>created_at, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "created_at"</i><br>This will sort the result based on the 'created_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListOrdersSortByAsc;
    desc?: ListOrdersSortByDesc;
  };
};

export type CreateUnbilledChargesForItemSubscription200 = {
  unbilled_charges: UnbilledCharge[];
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user \* consumed - Transaction is for an item that is consumed directly \* vendor_use - Transaction is for an item that is subject to vendor use tax

 */
export type CreateUnbilledChargesForItemSubscriptionBodyChargesAvalaraSaleTypeItem =
  (typeof CreateUnbilledChargesForItemSubscriptionBodyChargesAvalaraSaleTypeItem)[keyof typeof CreateUnbilledChargesForItemSubscriptionBodyChargesAvalaraSaleTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUnbilledChargesForItemSubscriptionBodyChargesAvalaraSaleTypeItem =
  {
    wholesale: "wholesale",
    retail: "retail",
    consumed: "consumed",
    vendor_use: "vendor_use",
  } as const;

/**
 * Parameters for charges

 */
export type CreateUnbilledChargesForItemSubscriptionBodyCharges = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number[];
  /** The decimal representation of the amount for the [one-time charge](https://www.chargebee.com/docs/charges.html#one-time-charges ). Provide the value in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  /** Description for this charge
   */
  description?: string[];
  /** The amount to be charged is taxable or not.
   */
  taxable?: boolean[];
  /** Tax profile of the charge.
   */
  tax_profile_id?: string[];
  /** The Avalara tax codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html).
   */
  avalara_tax_code?: string[];
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string[];
  /** The TaxJar product codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [TaxJar integration](https://www.chargebee.com/docs/taxjar.html).
   */
  taxjar_product_code?: string[];
  avalara_sale_type?: CreateUnbilledChargesForItemSubscriptionBodyChargesAvalaraSaleTypeItem[];
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number[];
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number[];
  /** The time when the service period for the charge starts.
   */
  date_from?: number[];
  /** The time when the service period for the charge ends.
   */
  date_to?: number[];
};

/**
 * Parameters for item_tiers

 */
export type CreateUnbilledChargesForItemSubscriptionBodyItemTiers = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_prices

 */
export type CreateUnbilledChargesForItemSubscriptionBodyItemPrices = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Item price quantity
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** The time when the service period for the item starts.
   */
  date_from?: number[];
  /** The time when the service period for the item ends.
   */
  date_to?: number[];
};

export type CreateUnbilledChargesForItemSubscriptionBody = {
  /** Identifier of the subscription for which this unbilled charges needs to be created.
   */
  subscription_id: string;
  /** The currency code (ISO 4217 format) of the unbilled_charge.
   */
  currency_code?: string;
  /** Parameters for item_prices
   */
  item_prices?: CreateUnbilledChargesForItemSubscriptionBodyItemPrices;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateUnbilledChargesForItemSubscriptionBodyItemTiers;
  /** Parameters for charges
   */
  charges?: CreateUnbilledChargesForItemSubscriptionBodyCharges;
};

export type CreateUnbilledChargesForItemSubscriptionChargebeeEventWebhook =
  (typeof CreateUnbilledChargesForItemSubscriptionChargebeeEventWebhook)[keyof typeof CreateUnbilledChargesForItemSubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUnbilledChargesForItemSubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUnbilledChargesForItemSubscriptionChargebeeEventEmail =
  (typeof CreateUnbilledChargesForItemSubscriptionChargebeeEventEmail)[keyof typeof CreateUnbilledChargesForItemSubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUnbilledChargesForItemSubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUnbilledChargesForItemSubscriptionChargebeeEventActions =
  (typeof CreateUnbilledChargesForItemSubscriptionChargebeeEventActions)[keyof typeof CreateUnbilledChargesForItemSubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUnbilledChargesForItemSubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUnbilledChargesForItemSubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateUnbilledChargesForItemSubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateUnbilledChargesForItemSubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateUnbilledChargesForItemSubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListUnbilledCharges200ListItem = {
  unbilled_charge: UnbilledCharge;
};

export type ListUnbilledCharges200 = {
  list: ListUnbilledCharges200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListUnbilledChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListUnbilledChargesCustomerIdIsPresent =
  (typeof ListUnbilledChargesCustomerIdIsPresent)[keyof typeof ListUnbilledChargesCustomerIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUnbilledChargesCustomerIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListUnbilledChargesSubscriptionIdIsPresent =
  (typeof ListUnbilledChargesSubscriptionIdIsPresent)[keyof typeof ListUnbilledChargesSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUnbilledChargesSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListUnbilledChargesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * Will be true if the charge has been voided. Usually the unbilled charge will be voided and revised to different charges(s) during proration.
   */
  is_voided?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique identifier for the subscription this charge belongs to.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is] = "5hjdk8nOpd0b12"</i>
   */
  subscription_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListUnbilledChargesSubscriptionIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique identifier for the customer being charged.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "5hjdk8nOpd0b12"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListUnbilledChargesCustomerIdIsPresent;
    in?: string;
    not_in?: string;
  };
};

export type CreateAnInvoiceForUnbilledCharges200 = {
  invoices: Invoice[];
};

export type CreateAnInvoiceForUnbilledChargesBody = {
  /** Identifier of the subscription for which this invoice needs to be created. Should be specified if 'customer_id' is not specified.
   */
  subscription_id?: string;
  /** Identifier of the customer for whom this invoice needs to be created. Should be specified if 'subscription_id' is not specified. Applicable only if the consolidated invoicing is enabled. .
   */
  customer_id?: string;
};

export type CreateAnInvoiceForUnbilledChargesChargebeeEventWebhook =
  (typeof CreateAnInvoiceForUnbilledChargesChargebeeEventWebhook)[keyof typeof CreateAnInvoiceForUnbilledChargesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnInvoiceForUnbilledChargesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnInvoiceForUnbilledChargesChargebeeEventEmail =
  (typeof CreateAnInvoiceForUnbilledChargesChargebeeEventEmail)[keyof typeof CreateAnInvoiceForUnbilledChargesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnInvoiceForUnbilledChargesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnInvoiceForUnbilledChargesChargebeeEventActions =
  (typeof CreateAnInvoiceForUnbilledChargesChargebeeEventActions)[keyof typeof CreateAnInvoiceForUnbilledChargesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnInvoiceForUnbilledChargesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnInvoiceForUnbilledChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnInvoiceForUnbilledChargesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnInvoiceForUnbilledChargesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnInvoiceForUnbilledChargesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAnEstimateForUnbilledCharges200 = {
  estimate: Estimate;
};

export type CreateAnEstimateForUnbilledChargesBody = {
  /** Identifier of the subscription for which this estimate needs to be created. Should be given if 'customer_id' is not specified.
   */
  subscription_id?: string;
  /** Identifier of the customer for whom this estimate is created. Is given if 'subscription_id' is not specified. Applicable only if the 'Consolidated Invoicing' is enabled. If 'Consolidated Invoicing' is not enabled, an invoice will be generated for every subscription.
   */
  customer_id?: string;
};

export type CreateAnEstimateForUnbilledChargesChargebeeEventWebhook =
  (typeof CreateAnEstimateForUnbilledChargesChargebeeEventWebhook)[keyof typeof CreateAnEstimateForUnbilledChargesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnEstimateForUnbilledChargesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnEstimateForUnbilledChargesChargebeeEventEmail =
  (typeof CreateAnEstimateForUnbilledChargesChargebeeEventEmail)[keyof typeof CreateAnEstimateForUnbilledChargesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnEstimateForUnbilledChargesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnEstimateForUnbilledChargesChargebeeEventActions =
  (typeof CreateAnEstimateForUnbilledChargesChargebeeEventActions)[keyof typeof CreateAnEstimateForUnbilledChargesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAnEstimateForUnbilledChargesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAnEstimateForUnbilledChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAnEstimateForUnbilledChargesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAnEstimateForUnbilledChargesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAnEstimateForUnbilledChargesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAnUnbilledCharge200 = {
  unbilled_charge: UnbilledCharge;
};

export type DeleteAnUnbilledChargeChargebeeEventWebhook =
  (typeof DeleteAnUnbilledChargeChargebeeEventWebhook)[keyof typeof DeleteAnUnbilledChargeChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnUnbilledChargeChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnUnbilledChargeChargebeeEventEmail =
  (typeof DeleteAnUnbilledChargeChargebeeEventEmail)[keyof typeof DeleteAnUnbilledChargeChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnUnbilledChargeChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnUnbilledChargeChargebeeEventActions =
  (typeof DeleteAnUnbilledChargeChargebeeEventActions)[keyof typeof DeleteAnUnbilledChargeChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnUnbilledChargeChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnUnbilledChargeHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnUnbilledChargeChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnUnbilledChargeChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnUnbilledChargeChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SendAnEinvoiceForCreditNotes200 = {
  credit_note: CreditNote;
};

export type SendAnEinvoiceForCreditNotesChargebeeEventWebhook =
  (typeof SendAnEinvoiceForCreditNotesChargebeeEventWebhook)[keyof typeof SendAnEinvoiceForCreditNotesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendAnEinvoiceForCreditNotesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SendAnEinvoiceForCreditNotesChargebeeEventEmail =
  (typeof SendAnEinvoiceForCreditNotesChargebeeEventEmail)[keyof typeof SendAnEinvoiceForCreditNotesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendAnEinvoiceForCreditNotesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SendAnEinvoiceForCreditNotesChargebeeEventActions =
  (typeof SendAnEinvoiceForCreditNotesChargebeeEventActions)[keyof typeof SendAnEinvoiceForCreditNotesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendAnEinvoiceForCreditNotesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SendAnEinvoiceForCreditNotesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SendAnEinvoiceForCreditNotesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SendAnEinvoiceForCreditNotesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SendAnEinvoiceForCreditNotesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveACreditNote200 = {
  credit_note: CreditNote;
};

export type RetrieveACreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveTaxWithheldRefundsFromACreditNote200 = {
  credit_note: CreditNote;
};

/**
 * Parameters for tax_withheld

 */
export type RemoveTaxWithheldRefundsFromACreditNoteBodyTaxWithheld = {
  /** An auto-generated unique identifier for the tax withheld. The value starts with the prefix `tax_wh_`. For example, `tax_wh_16BdDXSlbu4uV1Ee6`.
   */
  id: string;
};

export type RemoveTaxWithheldRefundsFromACreditNoteBody = {
  /** Parameters for tax_withheld
   */
  tax_withheld?: RemoveTaxWithheldRefundsFromACreditNoteBodyTaxWithheld;
};

export type RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventWebhook =
  (typeof RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventWebhook)[keyof typeof RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventEmail =
  (typeof RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventEmail)[keyof typeof RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventActions =
  (typeof RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventActions)[keyof typeof RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveTaxWithheldRefundsFromACreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveTaxWithheldRefundsFromACreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ResendFailedEinvoiceInCreditNotes200 = {
  credit_note: CreditNote;
};

export type ResendFailedEinvoiceInCreditNotesChargebeeEventWebhook =
  (typeof ResendFailedEinvoiceInCreditNotesChargebeeEventWebhook)[keyof typeof ResendFailedEinvoiceInCreditNotesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendFailedEinvoiceInCreditNotesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ResendFailedEinvoiceInCreditNotesChargebeeEventEmail =
  (typeof ResendFailedEinvoiceInCreditNotesChargebeeEventEmail)[keyof typeof ResendFailedEinvoiceInCreditNotesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendFailedEinvoiceInCreditNotesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ResendFailedEinvoiceInCreditNotesChargebeeEventActions =
  (typeof ResendFailedEinvoiceInCreditNotesChargebeeEventActions)[keyof typeof ResendFailedEinvoiceInCreditNotesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendFailedEinvoiceInCreditNotesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ResendFailedEinvoiceInCreditNotesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ResendFailedEinvoiceInCreditNotesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ResendFailedEinvoiceInCreditNotesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ResendFailedEinvoiceInCreditNotesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveCreditNoteAsPdf200 = {
  download: Download;
};

/**
 * Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser

 */
export type RetrieveCreditNoteAsPdfBodyDispositionType =
  (typeof RetrieveCreditNoteAsPdfBodyDispositionType)[keyof typeof RetrieveCreditNoteAsPdfBodyDispositionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveCreditNoteAsPdfBodyDispositionType = {
  attachment: "attachment",
  inline: "inline",
} as const;

export type RetrieveCreditNoteAsPdfBody = {
  /** Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser
   */
  disposition_type?: RetrieveCreditNoteAsPdfBodyDispositionType;
};

export type RetrieveCreditNoteAsPdfChargebeeEventWebhook =
  (typeof RetrieveCreditNoteAsPdfChargebeeEventWebhook)[keyof typeof RetrieveCreditNoteAsPdfChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveCreditNoteAsPdfChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveCreditNoteAsPdfChargebeeEventEmail =
  (typeof RetrieveCreditNoteAsPdfChargebeeEventEmail)[keyof typeof RetrieveCreditNoteAsPdfChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveCreditNoteAsPdfChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveCreditNoteAsPdfChargebeeEventActions =
  (typeof RetrieveCreditNoteAsPdfChargebeeEventActions)[keyof typeof RetrieveCreditNoteAsPdfChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveCreditNoteAsPdfChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveCreditNoteAsPdfHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RetrieveCreditNoteAsPdfChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RetrieveCreditNoteAsPdfChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RetrieveCreditNoteAsPdfChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DownloadEInvoiceForCreditNote200 = {
  downloads: Download[];
};

export type DownloadEInvoiceForCreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteACreditNote200 = {
  credit_note: CreditNote;
};

export type DeleteACreditNoteBody = {
  /** Reason for deleting this credit note. This comment will be added to the associated invoice entity.
   */
  comment?: string;
};

export type DeleteACreditNoteChargebeeEventWebhook =
  (typeof DeleteACreditNoteChargebeeEventWebhook)[keyof typeof DeleteACreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACreditNoteChargebeeEventEmail =
  (typeof DeleteACreditNoteChargebeeEventEmail)[keyof typeof DeleteACreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACreditNoteChargebeeEventActions =
  (typeof DeleteACreditNoteChargebeeEventActions)[keyof typeof DeleteACreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteACreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteACreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteACreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportCreditNote200 = {
  credit_note: CreditNote;
};

/**
 * Mode of refund. \* amazon_payments - Amazon Payments \* sepa_credit - SEPA Credit \* sofort - Sofort \* alipay - Alipay \* direct_debit - Direct Debit \* giropay - giropay \* dotpay - Dotpay \* bancontact - Bancontact \* other - Payment Methods other than the above types \* upi - upi \* wechat_pay - WeChat Pay \* netbanking_emandates - netbanking_emandates \* unionpay - Unionpay \* ideal - IDEAL \* cash - Cash \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* boleto - boleto \* custom - Custom \* google_pay - Google Pay \* paypal_express_checkout - Paypal Express Checkout \* card - Card \* bank_transfer - Bank Transfer \* apple_pay - Apple Pay \* check - Check \* ach_credit - ACH Credit

 */
export type ImportCreditNoteBodyLinkedRefundsPaymentMethodItem =
  (typeof ImportCreditNoteBodyLinkedRefundsPaymentMethodItem)[keyof typeof ImportCreditNoteBodyLinkedRefundsPaymentMethodItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteBodyLinkedRefundsPaymentMethodItem = {
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for linked_refunds

 */
export type ImportCreditNoteBodyLinkedRefunds = {
  /** Amount of this refund transaction.
   */
  amount: number[];
  payment_method: ImportCreditNoteBodyLinkedRefundsPaymentMethodItem[];
  /** The date of refund.
   */
  date: number[];
  /** Reference number for this refund.
   */
  reference_number?: string[];
};

/**
 * Parameters for allocations

 */
export type ImportCreditNoteBodyAllocations = {
  /** The unique invoice ID for the allocation
   */
  invoice_id: string[];
  /** The allocated amount for the credit note
   */
  allocated_amount: number[];
  /** Time when the allocation was occurred
   */
  allocated_at: number[];
};

/**
 * The type of tax jurisdiction \* country - The tax jurisdiction is a country \* special - Special tax jurisdiction. \* county - The tax jurisdiction is a county \* state - The tax jurisdiction is a state \* city - The tax jurisdiction is a city \* other - Jurisdictions other than the ones listed above. \* unincorporated - Combined tax of state and county. \* federal - The tax jurisdiction is a federal

 */
export type ImportCreditNoteBodyTaxesJurisTypeItem =
  (typeof ImportCreditNoteBodyTaxesJurisTypeItem)[keyof typeof ImportCreditNoteBodyTaxesJurisTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteBodyTaxesJurisTypeItem = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

/**
 * Parameters for taxes

 */
export type ImportCreditNoteBodyTaxes = {
  /** The name of the tax applied
   */
  name: string[];
  /** The rate of tax used to calculate tax amount
   */
  rate: number[];
  /** Total tax amount charged for this invoice
   */
  amount?: number[];
  /** Description of tax
   */
  description?: string[];
  juris_type?: ImportCreditNoteBodyTaxesJurisTypeItem[];
  /** The name of the tax jurisdiction
   */
  juris_name?: string[];
  /** The tax jurisdiction code
   */
  juris_code?: string[];
};

/**
 * The type of deduction and the amount to which it is applied. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type ImportCreditNoteBodyDiscountsEntityTypeItem =
  (typeof ImportCreditNoteBodyDiscountsEntityTypeItem)[keyof typeof ImportCreditNoteBodyDiscountsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteBodyDiscountsEntityTypeItem = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

/**
 * Parameters for discounts

 */
export type ImportCreditNoteBodyDiscounts = {
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string[];
  entity_type: ImportCreditNoteBodyDiscountsEntityTypeItem[];
  /** When the deduction is due to a `coupon`, then this is the `id` of the coupon. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  entity_id?: string[];
  /** Description for this deduction.
   */
  description?: string[];
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number[];
};

/**
 * Parameters for line_item_tiers

 */
export type ImportCreditNoteBodyLineItemTiers = {
  /** Uniquely identifies a line_item
   */
  line_item_id: string[];
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The number of units purchased in a range.
   */
  quantity_used?: number[];
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
};

/**
 * Parameters for line_items

 */
export type ImportCreditNoteBodyLineItems = {
  /** Uniquely identifies a line_item of invoice for which this reversal represents.
   */
  reference_line_item_id?: string[];
  /** Uniquely identifies a line_item
   */
  id?: string[];
  /** Start date of this line item.
   */
  date_from?: number[];
  /** End date of this line item.
   */
  date_to?: number[];
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string[];
  /** Description for this line item
   */
  description: string[];
  /** Unit amount of the line item.
   */
  unit_amount?: number[];
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).  
[Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=1#invoice_line_items_quantity) which is represented by this line item.
 */
  quantity?: number[];
  /** Total amount of this lineitem. Not required if the line_items\[unit_amount\] param is passed
   */
  amount?: number[];
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  entity_type?: ImportCreditNoteBodyLineItemsEntityTypeItem[];
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string[];
  /** First item level discount entity id
   */
  item_level_discount1_entity_id?: string[];
  /** First item level discount amount
   */
  item_level_discount1_amount?: number[];
  /** Second item level discount entity id
   */
  item_level_discount2_entity_id?: string[];
  /** Second item level discount amount
   */
  item_level_discount2_amount?: number[];
  /** First tax name
   */
  tax1_name?: string[];
  /** First tax amount
   */
  tax1_amount?: number[];
  /** Second tax name
   */
  tax2_name?: string[];
  /** Second tax amount
   */
  tax2_amount?: number[];
  /** Third tax name
   */
  tax3_name?: string[];
  /** Third tax amount
   */
  tax3_amount?: number[];
  /** Fourth tax name
   */
  tax4_name?: string[];
  /** Fourth tax amount
   */
  tax4_amount?: number[];
  /** Fifth tax name
   */
  tax5_name?: string[];
  /** Fifth tax amount
   */
  tax5_amount?: number[];
  /** Sixth tax name
   */
  tax6_name?: string[];
  /** Sixth tax amount
   */
  tax6_amount?: number[];
  /** Seventh tax name
   */
  tax7_name?: string[];
  /** Seventh tax amount
   */
  tax7_amount?: number[];
  /** Eighth tax name
   */
  tax8_name?: string[];
  /** Eighth tax amount
   */
  tax8_amount?: number[];
  /** Ninth tax name
   */
  tax9_name?: string[];
  /** Ninth tax amount
   */
  tax9_amount?: number[];
  /** Tenth tax name
   */
  tax10_name?: string[];
  /** Tenth tax amount
   */
  tax10_amount?: number[];
};

export type ImportCreditNoteBody = {
  /** Credit Note Number.
   */
  id: string;
  /** This identifies the customer for whom the credit note needs to be created.
   */
  customer_id?: string;
  /** The identifier of the subscription for which this credit note needs to be created.
   */
  subscription_id?: string;
  /** The identifier of the invoice against which this Credit Note is issued.
   */
  reference_invoice_id: string;
  /** The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note
   */
  type: ImportCreditNoteBodyType;
  /** The currency code (ISO 4217 format) for the credit note.
   */
  currency_code?: string;
  /** Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Create Credit Note**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  create_reason_code: string;
  /** The date the Credit Note is issued.
   */
  date: number;
  /** The credit note status. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* voided - When the Credit Note has been cancelled. \* adjusted - When the Credit Note has been adjusted against an invoice.
   */
  status?: ImportCreditNoteBodyStatus;
  /** Credit Note amount in cents.
   */
  total?: number;
  /** The time this Credit Note gets fully used. Please note that this field is not present when partial refunds are issued.
   */
  refunded_at?: number;
  /** Timestamp indicating the date and time this Credit Note gets voided.
   */
  voided_at?: number;
  /** The Credit Note sub-total.
   */
  sub_total?: number;
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** Indicates the fractional correction amount.
   */
  fractional_correction?: number;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Parameters for line_items
   */
  line_items?: ImportCreditNoteBodyLineItems;
  /** Parameters for line_item_tiers
   */
  line_item_tiers?: ImportCreditNoteBodyLineItemTiers;
  /** Parameters for discounts
   */
  discounts?: ImportCreditNoteBodyDiscounts;
  /** Parameters for taxes
   */
  taxes?: ImportCreditNoteBodyTaxes;
  /** Parameters for allocations
   */
  allocations?: ImportCreditNoteBodyAllocations;
  /** Parameters for linked_refunds
   */
  linked_refunds?: ImportCreditNoteBodyLinkedRefunds;
};

/**
 * Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id

 */
export type ImportCreditNoteBodyLineItemsEntityTypeItem =
  (typeof ImportCreditNoteBodyLineItemsEntityTypeItem)[keyof typeof ImportCreditNoteBodyLineItemsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteBodyLineItemsEntityTypeItem = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The credit note status. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* voided - When the Credit Note has been cancelled. \* adjusted - When the Credit Note has been adjusted against an invoice.

 */
export type ImportCreditNoteBodyStatus =
  (typeof ImportCreditNoteBodyStatus)[keyof typeof ImportCreditNoteBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteBodyStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note

 */
export type ImportCreditNoteBodyType =
  (typeof ImportCreditNoteBodyType)[keyof typeof ImportCreditNoteBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteBodyType = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

export type ImportCreditNoteChargebeeEventWebhook =
  (typeof ImportCreditNoteChargebeeEventWebhook)[keyof typeof ImportCreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportCreditNoteChargebeeEventEmail =
  (typeof ImportCreditNoteChargebeeEventEmail)[keyof typeof ImportCreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportCreditNoteChargebeeEventActions =
  (typeof ImportCreditNoteChargebeeEventActions)[keyof typeof ImportCreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportCreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportCreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportCreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportCreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportCreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RecordRefundForACreditNote200 = {
  credit_note: CreditNote;
  transaction?: Transaction;
};

/**
 * The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay

 */
export type RecordRefundForACreditNoteBodyTransactionPaymentMethod =
  (typeof RecordRefundForACreditNoteBodyTransactionPaymentMethod)[keyof typeof RecordRefundForACreditNoteBodyTransactionPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForACreditNoteBodyTransactionPaymentMethod = {
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for transaction

 */
export type RecordRefundForACreditNoteBodyTransaction = {
  /** The amount to be refunded (for online payments) or recorded as refunded (for offline payments). If not specified, the entire [refundable amount](/docs/api/credit_notes#credit_note_amount_available) for this `credit_note` is refunded. Note: Any [linked_tax_withheld_refunds](/docs/api/credit_notes#credit_note_linked_tax_withheld_refunds) associated with the `credit_note` can also be recorded as refunded via this operation.
   */
  amount?: number;
  /** The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay
   */
  payment_method: RecordRefundForACreditNoteBodyTransactionPaymentMethod;
  /** The reference number for this transaction. For example, the check number when [payment_method](transactions#transaction_payment_method) = `check`.
   */
  reference_number?: string;
  /** Indicates when this transaction occurred.
   */
  date: number;
};

export type RecordRefundForACreditNoteBody = {
  /** Reason code for the refund. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Refund Credit Note**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  refund_reason_code?: string;
  /** Remarks, if any, on the refund.
   */
  comment?: string;
  /** Parameters for transaction
   */
  transaction?: RecordRefundForACreditNoteBodyTransaction;
};

export type RecordRefundForACreditNoteChargebeeEventWebhook =
  (typeof RecordRefundForACreditNoteChargebeeEventWebhook)[keyof typeof RecordRefundForACreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForACreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RecordRefundForACreditNoteChargebeeEventEmail =
  (typeof RecordRefundForACreditNoteChargebeeEventEmail)[keyof typeof RecordRefundForACreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForACreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RecordRefundForACreditNoteChargebeeEventActions =
  (typeof RecordRefundForACreditNoteChargebeeEventActions)[keyof typeof RecordRefundForACreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForACreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RecordRefundForACreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RecordRefundForACreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RecordRefundForACreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RecordRefundForACreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateCreditNote200 = {
  credit_note: CreditNote;
  invoice: Invoice;
};

/**
 * Parameters for line_items

 */
export type CreateCreditNoteBodyLineItems = {
  /** Uniquely identifies a line_item
   */
  reference_line_item_id: string[];
  /** Unit amount of the line item. Required for FLAT_FEE, PER_UNIT and VOLUME pricing model.
   */
  unit_amount?: number[];
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Applicable for the line_item when the `pricing_model` is `flat_fee`, `per_unit` or `volume`. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
  /** Quantity of the line item. Required for PER_UNIT and VOLUME pricing model.
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the `line_item`. Applicable for the `line_item` when the `pricing_model` is `per_unit` and `volume`. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string[];
  /** Amount of the line item. Applicable only for STAIRSTEP, TIERED pricing_model.
   */
  amount?: number[];
  /** Start date of this line item.
   */
  date_from?: number[];
  /** End date of this line item.
   */
  date_to?: number[];
  /** Description for the line item.
   */
  description?: string[];
};

/**
 * The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\]. \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* waiver - Waiver \* order_cancellation - Order Cancellation \* order_change - Order Change \* product_unsatisfactory - Product Unsatisfactory \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* service_unsatisfactory - Service Unsatisfactory \* other - Can be set when none of the above reason codes are applicable \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* fraudulent - FRAUDULENT

 */
export type CreateCreditNoteBodyReasonCode =
  (typeof CreateCreditNoteBodyReasonCode)[keyof typeof CreateCreditNoteBodyReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCreditNoteBodyReasonCode = {
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
} as const;

/**
 * The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note

 */
export type CreateCreditNoteBodyType =
  (typeof CreateCreditNoteBodyType)[keyof typeof CreateCreditNoteBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCreditNoteBodyType = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

export type CreateCreditNoteBody = {
  /** The identifier of the invoice against which this Credit Note is issued.
   */
  reference_invoice_id: string;
  /** Credit Note amount in cents. You can either pass the total parameter or the line_items parameter. Passing both will result in an error.
   */
  total?: number;
  /** The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note
   */
  type: CreateCreditNoteBodyType;
  /** The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\]. \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* waiver - Waiver \* order_cancellation - Order Cancellation \* order_change - Order Change \* product_unsatisfactory - Product Unsatisfactory \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* service_unsatisfactory - Service Unsatisfactory \* other - Can be set when none of the above reason codes are applicable \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* fraudulent - FRAUDULENT
   */
  reason_code?: CreateCreditNoteBodyReasonCode;
  /** Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Create Credit Note**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  create_reason_code?: string;
  /** The date the Credit Note is issued.
   */
  date?: number;
  /** A note to be added for this operation, to the credit note. This note is displayed on customer-facing documents such as the [Credit Note PDF](./credit_notes#retrieve_credit_note_as_pdf).
   */
  customer_notes?: string;
  /** An internal [comment](./comments) to be added for this operation, to the credit note. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Credit Note PDF](./credit_notes#retrieve_credit_note_as_pdf).
   */
  comment?: string;
  /** Parameters for line_items
   */
  line_items?: CreateCreditNoteBodyLineItems;
};

export type CreateCreditNoteChargebeeEventWebhook =
  (typeof CreateCreditNoteChargebeeEventWebhook)[keyof typeof CreateCreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCreditNoteChargebeeEventEmail =
  (typeof CreateCreditNoteChargebeeEventEmail)[keyof typeof CreateCreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCreditNoteChargebeeEventActions =
  (typeof CreateCreditNoteChargebeeEventActions)[keyof typeof CreateCreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateCreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateCreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateCreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateCreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCreditNotes200ListItem = {
  credit_note: CreditNote;
};

export type ListCreditNotes200 = {
  list: ListCreditNotes200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCreditNotesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.

 */
export type ListCreditNotesEinvoiceStatusIsNot =
  (typeof ListCreditNotesEinvoiceStatusIsNot)[keyof typeof ListCreditNotesEinvoiceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesEinvoiceStatusIsNot = {
  scheduled: "scheduled",
  skipped: "skipped",
  in_progress: "in_progress",
  success: "success",
  failed: "failed",
  registered: "registered",
} as const;

/**
 * \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.

 */
export type ListCreditNotesEinvoiceStatusIs =
  (typeof ListCreditNotesEinvoiceStatusIs)[keyof typeof ListCreditNotesEinvoiceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesEinvoiceStatusIs = {
  scheduled: "scheduled",
  skipped: "skipped",
  in_progress: "in_progress",
  success: "success",
  failed: "failed",
  registered: "registered",
} as const;

/**
 * The status of processing the e-invoice. To obtain detailed information about the current \`status\`, see \`message\`.

 */
export type ListCreditNotesEinvoiceStatus = {
  /** \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.
   */
  is?: ListCreditNotesEinvoiceStatusIs;
  /** \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.
   */
  is_not?: ListCreditNotesEinvoiceStatusIsNot;
  in?: string;
  not_in?: string;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListCreditNotesChannelIsNot =
  (typeof ListCreditNotesChannelIsNot)[keyof typeof ListCreditNotesChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListCreditNotesChannelIs =
  (typeof ListCreditNotesChannelIs)[keyof typeof ListCreditNotesChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

export type ListCreditNotesSortByDesc =
  (typeof ListCreditNotesSortByDesc)[keyof typeof ListCreditNotesSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesSortByDesc = {
  date: "date",
} as const;

export type ListCreditNotesSortByAsc =
  (typeof ListCreditNotesSortByAsc)[keyof typeof ListCreditNotesSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesSortByAsc = {
  date: "date",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ListCreditNotesPriceTypeIsNot =
  (typeof ListCreditNotesPriceTypeIsNot)[keyof typeof ListCreditNotesPriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesPriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ListCreditNotesPriceTypeIs =
  (typeof ListCreditNotesPriceTypeIs)[keyof typeof ListCreditNotesPriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesPriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.

 */
export type ListCreditNotesStatusIsNot =
  (typeof ListCreditNotesStatusIsNot)[keyof typeof ListCreditNotesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesStatusIsNot = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.

 */
export type ListCreditNotesStatusIs =
  (typeof ListCreditNotesStatusIs)[keyof typeof ListCreditNotesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesStatusIs = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT

 */
export type ListCreditNotesReasonCodeIsNot =
  (typeof ListCreditNotesReasonCodeIsNot)[keyof typeof ListCreditNotesReasonCodeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesReasonCodeIsNot = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

/**
 * \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT

 */
export type ListCreditNotesReasonCodeIs =
  (typeof ListCreditNotesReasonCodeIs)[keyof typeof ListCreditNotesReasonCodeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesReasonCodeIs = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

/**
 * \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note

 */
export type ListCreditNotesTypeIsNot =
  (typeof ListCreditNotesTypeIsNot)[keyof typeof ListCreditNotesTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesTypeIsNot = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

/**
 * \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note

 */
export type ListCreditNotesTypeIs =
  (typeof ListCreditNotesTypeIs)[keyof typeof ListCreditNotesTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesTypeIs = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

export type ListCreditNotesSubscriptionIdIsPresent =
  (typeof ListCreditNotesSubscriptionIdIsPresent)[keyof typeof ListCreditNotesSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreditNotesSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListCreditNotesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Credit-note id.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "CN_123"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The identifier of the customer this Credit Note belongs to.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "4gmiXbsjdm"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>To filter based on subscription_id. </br> NOTE: Not to be used if <i>consolidated invoicing</i> feature is enabled.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is] = "4gmiXbsjdm"</i>
   */
  subscription_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListCreditNotesSubscriptionIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The identifier of the invoice against which this Credit Note is issued.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>reference_invoice_id[is] = "INVOICE_876"</i>
   */
  reference_invoice_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The credit note type. Possible values are : <dfn>adjustment, refundable.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is_not] = "adjustment"</i>
   */
  type?: {
    /** \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note
     */
    is?: ListCreditNotesTypeIs;
    /** \* \`adjustment\` - Adjustment Credit Note \* \`refundable\` - Refundable Credit Note
     */
    is_not?: ListCreditNotesTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The reason for issuing this Credit Note. The following reason codes are supported now[Deprecated; use the <a href="/docs/api/credit_notes#credit_note_create_reason_code">create_reason_code</a> parameter instead]. Possible values are : <dfn>write_off, subscription_change, subscription_cancellation, subscription_pause, chargeback, product_unsatisfactory, service_unsatisfactory, order_change, order_cancellation, waiver, other, fraudulent.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>reason_code[is] = "waiver"</i>
   */
  reason_code?: {
    /** \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT
     */
    is?: ListCreditNotesReasonCodeIs;
    /** \* \`write_off\` - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* \`subscription_change\` - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* \`subscription_cancellation\` - This reason will be set automatically for Credit Notes created during cancel subscription operation \* \`subscription_pause\` - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* \`chargeback\` - Can be set when you are recording your customer Chargebacks \* \`product_unsatisfactory\` - Product Unsatisfactory \* \`service_unsatisfactory\` - Service Unsatisfactory \* \`order_change\` - Order Change \* \`order_cancellation\` - Order Cancellation \* \`waiver\` - Waiver \* \`other\` - Can be set when none of the above reason codes are applicable \* \`fraudulent\` - FRAUDULENT
     */
    is_not?: ListCreditNotesReasonCodeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in <strong>Settings > Configure Chargebee > Reason Codes > Credit Notes > Create Credit Note</strong>. Must be passed if set as mandatory in the app. The codes are case-sensitive.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>create_reason_code[is] = "Other"</i>
   */
  create_reason_code?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The credit note status. Possible values are : <dfn>adjusted, refunded, refund_due, voided.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "adjusted"</i>
   */
  status?: {
    /** \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.
     */
    is?: ListCreditNotesStatusIs;
    /** \* \`adjusted\` - When the Credit Note has been adjusted against an invoice. \* \`refunded\` - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* \`refund_due\` - When the credits are yet to be used, or have been partially used. \* \`voided\` - When the Credit Note has been cancelled.
     */
    is_not?: ListCreditNotesStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The date the Credit Note is issued.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>date[on] = "1435054328"</i>
   */
  date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>Credit Note amount in cents.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>total[is] = "1200"</i>
   */
  total?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The price type of the Credit Note. Possible values are : <dfn>tax_exclusive, tax_inclusive.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>price_type[is_not] = "tax_exclusive"</i>
   */
  price_type?: {
    /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
     */
    is?: ListCreditNotesPriceTypeIs;
    /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
     */
    is_not?: ListCreditNotesPriceTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>The amount allocated to the invoices.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_allocated[is] = "1200"</i>
   */
  amount_allocated?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>The refunds issued from this Credit Note.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_refunded[lte] = "130"</i>
   */
  amount_refunded?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>The yet to be used credits of this Credit Note.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_available[gt] = "1400"</i>
   */
  amount_available?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating the date and time this Credit Note gets voided.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>voided_at[before] = "1435054328"</i>
   */
  voided_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on updated at. This attribute will be present only if the resource has been updated after 2016-09-28.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[on] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>date</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "date"</i><br>This will sort the result based on the 'date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListCreditNotesSortByAsc;
    desc?: ListCreditNotesSortByDesc;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The subscription channel this object originated from and is maintained in. Possible values are : <dfn>web, app_store, play_store.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>channel[is] = "APP STORE"</i>
   */
  channel?: {
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is?: ListCreditNotesChannelIs;
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is_not?: ListCreditNotesChannelIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * Parameters for einvoice
   */
  einvoice?: {
    /** The status of processing the e-invoice. To obtain detailed information about the current \`status\`, see \`message\`.
     */
    status?: ListCreditNotesEinvoiceStatus;
  };
};

export type RefundACreditNote200 = {
  credit_note: CreditNote;
  transaction: Transaction;
};

export type RefundACreditNoteBody = {
  /** The amount to be refunded. If not specified, the entire [refundable amount](/docs/api/credit_notes#credit_note_amount_available) for this `credit_note` is refunded. **Note:** Any [linked_tax_withheld_refunds](/docs/api/credit_notes#credit_note_linked_tax_withheld_refunds) associated with the `credit_note` cannot be refunded via this operation.
   */
  refund_amount?: number;
  /** A note to be added for this operation, to the credit note. This note is displayed on customer-facing documents such as the [Credit Note PDF](./credit_notes#retrieve_credit_note_as_pdf).
   */
  customer_notes?: string;
  /** Reason code for the refund. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Refund Credit Note**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  refund_reason_code?: string;
};

export type RefundACreditNoteChargebeeEventWebhook =
  (typeof RefundACreditNoteChargebeeEventWebhook)[keyof typeof RefundACreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundACreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RefundACreditNoteChargebeeEventEmail =
  (typeof RefundACreditNoteChargebeeEventEmail)[keyof typeof RefundACreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundACreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RefundACreditNoteChargebeeEventActions =
  (typeof RefundACreditNoteChargebeeEventActions)[keyof typeof RefundACreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundACreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RefundACreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RefundACreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RefundACreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RefundACreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type VoidACreditNote200 = {
  credit_note: CreditNote;
};

export type VoidACreditNoteBody = {
  /** Reason for voiding credit note. This comment will be added to the credit note.
   */
  comment?: string;
};

export type VoidACreditNoteChargebeeEventWebhook =
  (typeof VoidACreditNoteChargebeeEventWebhook)[keyof typeof VoidACreditNoteChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidACreditNoteChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type VoidACreditNoteChargebeeEventEmail =
  (typeof VoidACreditNoteChargebeeEventEmail)[keyof typeof VoidACreditNoteChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidACreditNoteChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type VoidACreditNoteChargebeeEventActions =
  (typeof VoidACreditNoteChargebeeEventActions)[keyof typeof VoidACreditNoteChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidACreditNoteChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type VoidACreditNoteHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: VoidACreditNoteChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: VoidACreditNoteChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: VoidACreditNoteChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DownloadEInvoice200 = {
  downloads: Download[];
};

export type DownloadEInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveInvoiceAsPdf200 = {
  download: Download;
};

/**
 * Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser

 */
export type RetrieveInvoiceAsPdfBodyDispositionType =
  (typeof RetrieveInvoiceAsPdfBodyDispositionType)[keyof typeof RetrieveInvoiceAsPdfBodyDispositionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveInvoiceAsPdfBodyDispositionType = {
  attachment: "attachment",
  inline: "inline",
} as const;

export type RetrieveInvoiceAsPdfBody = {
  /** Determines the pdf should be rendered as inline or attachment in the browser. \* attachment - PDF is rendered as attachment in the browser \* inline - PDF is rendered as inline in the browser
   */
  disposition_type?: RetrieveInvoiceAsPdfBodyDispositionType;
};

export type RetrieveInvoiceAsPdfChargebeeEventWebhook =
  (typeof RetrieveInvoiceAsPdfChargebeeEventWebhook)[keyof typeof RetrieveInvoiceAsPdfChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveInvoiceAsPdfChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveInvoiceAsPdfChargebeeEventEmail =
  (typeof RetrieveInvoiceAsPdfChargebeeEventEmail)[keyof typeof RetrieveInvoiceAsPdfChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveInvoiceAsPdfChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveInvoiceAsPdfChargebeeEventActions =
  (typeof RetrieveInvoiceAsPdfChargebeeEventActions)[keyof typeof RetrieveInvoiceAsPdfChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RetrieveInvoiceAsPdfChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RetrieveInvoiceAsPdfHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RetrieveInvoiceAsPdfChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RetrieveInvoiceAsPdfChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RetrieveInvoiceAsPdfChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RecordRefundForAnInvoice200 = {
  invoice: Invoice;
  transaction?: Transaction;
  credit_note?: CreditNote;
};

/**
 * The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* service_unsatisfactory - Service Unsatisfactory \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* order_cancellation - Order Cancellation \* order_change - Order Change \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* product_unsatisfactory - Product Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* fraudulent - FRAUDULENT \* other - Can be set when none of the above reason codes are applicable \* waiver - Waiver

 */
export type RecordRefundForAnInvoiceBodyCreditNoteReasonCode =
  (typeof RecordRefundForAnInvoiceBodyCreditNoteReasonCode)[keyof typeof RecordRefundForAnInvoiceBodyCreditNoteReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForAnInvoiceBodyCreditNoteReasonCode = {
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
} as const;

/**
 * Parameters for credit_note

 */
export type RecordRefundForAnInvoiceBodyCreditNote = {
  /** The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* service_unsatisfactory - Service Unsatisfactory \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* order_cancellation - Order Cancellation \* order_change - Order Change \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* product_unsatisfactory - Product Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* fraudulent - FRAUDULENT \* other - Can be set when none of the above reason codes are applicable \* waiver - Waiver
   */
  reason_code?: RecordRefundForAnInvoiceBodyCreditNoteReasonCode;
  /** Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Create Credit Note. The codes are case-sensitive
   */
  create_reason_code?: string;
};

/**
 * The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay

 */
export type RecordRefundForAnInvoiceBodyTransactionPaymentMethod =
  (typeof RecordRefundForAnInvoiceBodyTransactionPaymentMethod)[keyof typeof RecordRefundForAnInvoiceBodyTransactionPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForAnInvoiceBodyTransactionPaymentMethod = {
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for transaction

 */
export type RecordRefundForAnInvoiceBodyTransaction = {
  /** The amount to be refunded (for online payments) or recorded as refunded (for offline payments). If not specified, the entire refundable amount for this invoice is refunded. The refundable amount is the total amount paid (and not already refunded) for the invoice. **Note:** Any [linked_taxes_withheld](/docs/api/invoices#invoice_linked_taxes_withheld) associated with the invoice can also be recorded as refunded via this operation.
   */
  amount?: number;
  /** The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay
   */
  payment_method: RecordRefundForAnInvoiceBodyTransactionPaymentMethod;
  /** The reference number for this transaction. For example, the check number when [payment_method](transactions#transaction_payment_method) = `check`.
   */
  reference_number?: string;
  /** Indicates when this transaction occurred.
   */
  date: number;
};

export type RecordRefundForAnInvoiceBody = {
  /** Remarks, if any, on the refund.
   */
  comment?: string;
  /** The Customer Notes to be filled in the Credit Notes created to capture this refund detail.
   */
  customer_notes?: string;
  /** Parameters for transaction
   */
  transaction?: RecordRefundForAnInvoiceBodyTransaction;
  /** Parameters for credit_note
   */
  credit_note?: RecordRefundForAnInvoiceBodyCreditNote;
};

export type RecordRefundForAnInvoiceChargebeeEventWebhook =
  (typeof RecordRefundForAnInvoiceChargebeeEventWebhook)[keyof typeof RecordRefundForAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RecordRefundForAnInvoiceChargebeeEventEmail =
  (typeof RecordRefundForAnInvoiceChargebeeEventEmail)[keyof typeof RecordRefundForAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RecordRefundForAnInvoiceChargebeeEventActions =
  (typeof RecordRefundForAnInvoiceChargebeeEventActions)[keyof typeof RecordRefundForAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordRefundForAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RecordRefundForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RecordRefundForAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RecordRefundForAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RecordRefundForAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RefundAnInvoice200 = {
  invoice: Invoice;
  transaction: Transaction;
  credit_note?: CreditNote;
};

/**
 * The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* product_unsatisfactory - Product Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* service_unsatisfactory - Service Unsatisfactory \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* fraudulent - FRAUDULENT \* other - Can be set when none of the above reason codes are applicable \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* order_cancellation - Order Cancellation \* order_change - Order Change \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation

 */
export type RefundAnInvoiceBodyCreditNoteReasonCode =
  (typeof RefundAnInvoiceBodyCreditNoteReasonCode)[keyof typeof RefundAnInvoiceBodyCreditNoteReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAnInvoiceBodyCreditNoteReasonCode = {
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
} as const;

/**
 * Parameters for credit_note

 */
export type RefundAnInvoiceBodyCreditNote = {
  /** The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* product_unsatisfactory - Product Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* service_unsatisfactory - Service Unsatisfactory \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* fraudulent - FRAUDULENT \* other - Can be set when none of the above reason codes are applicable \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* order_cancellation - Order Cancellation \* order_change - Order Change \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation
   */
  reason_code?: RefundAnInvoiceBodyCreditNoteReasonCode;
  /** Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Create Credit Note. The codes are case-sensitive
   */
  create_reason_code?: string;
};

export type RefundAnInvoiceBody = {
  /** The amount to be refunded. If not specified, the entire refundable amount for this invoice is refunded. The refundable amount is the total amount paid via online `transaction`s, and not already refunded. **Note:** Any [linked_taxes_withheld](/docs/api/invoices#invoice_linked_taxes_withheld) associated with the invoice cannot be refunded via this operation.
   */
  refund_amount?: number;
  /** Comment, if any, on the refund.
   */
  comment?: string;
  /** The Customer Notes to be filled in the Credit Notes created to capture this refund detail.
   */
  customer_notes?: string;
  /** Parameters for credit_note
   */
  credit_note?: RefundAnInvoiceBodyCreditNote;
};

export type RefundAnInvoiceChargebeeEventWebhook =
  (typeof RefundAnInvoiceChargebeeEventWebhook)[keyof typeof RefundAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RefundAnInvoiceChargebeeEventEmail =
  (typeof RefundAnInvoiceChargebeeEventEmail)[keyof typeof RefundAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RefundAnInvoiceChargebeeEventActions =
  (typeof RefundAnInvoiceChargebeeEventActions)[keyof typeof RefundAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RefundAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RefundAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RefundAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RefundAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SyncUsages200 = {
  invoice: Invoice;
};

export type SyncUsagesChargebeeEventWebhook =
  (typeof SyncUsagesChargebeeEventWebhook)[keyof typeof SyncUsagesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SyncUsagesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SyncUsagesChargebeeEventEmail =
  (typeof SyncUsagesChargebeeEventEmail)[keyof typeof SyncUsagesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SyncUsagesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SyncUsagesChargebeeEventActions =
  (typeof SyncUsagesChargebeeEventActions)[keyof typeof SyncUsagesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SyncUsagesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SyncUsagesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SyncUsagesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SyncUsagesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SyncUsagesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CollectPaymentForAnInvoice200 = {
  invoice: Invoice;
  transaction: Transaction;
};

/**
 * The type of initiator to be used for the payment request triggered by this operation. \* merchant - Pass this value to indicate that the request is initiated by the merchant \* customer - Pass this value to indicate that the request is initiated by the customer

 */
export type CollectPaymentForAnInvoiceBodyPaymentInitiator =
  (typeof CollectPaymentForAnInvoiceBodyPaymentInitiator)[keyof typeof CollectPaymentForAnInvoiceBodyPaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForAnInvoiceBodyPaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

export type CollectPaymentForAnInvoiceBody = {
  /** Amount to be collected. If this parameter is not passed then the entire amount due will be collected.
   */
  amount?: number;
  /** Authorization transaction to be captured.
   */
  authorization_transaction_id?: string;
  /** Payment source to be used for this payment.
   */
  payment_source_id?: string;
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** The type of initiator to be used for the payment request triggered by this operation. \* merchant - Pass this value to indicate that the request is initiated by the merchant \* customer - Pass this value to indicate that the request is initiated by the customer
   */
  payment_initiator?: CollectPaymentForAnInvoiceBodyPaymentInitiator;
};

export type CollectPaymentForAnInvoiceChargebeeEventWebhook =
  (typeof CollectPaymentForAnInvoiceChargebeeEventWebhook)[keyof typeof CollectPaymentForAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CollectPaymentForAnInvoiceChargebeeEventEmail =
  (typeof CollectPaymentForAnInvoiceChargebeeEventEmail)[keyof typeof CollectPaymentForAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CollectPaymentForAnInvoiceChargebeeEventActions =
  (typeof CollectPaymentForAnInvoiceChargebeeEventActions)[keyof typeof CollectPaymentForAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CollectPaymentForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CollectPaymentForAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CollectPaymentForAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CollectPaymentForAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListPaymentReferenceNumbers200ListItem = {
  payment_reference_number: PaymentReferenceNumber;
};

export type ListPaymentReferenceNumbers200 = {
  list: ListPaymentReferenceNumbers200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListPaymentReferenceNumbersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * This parameter is used to identify the PRN in the system and retrieve its corresponding payment information. \*\*Note\*\*: To retrieve the PRN, the API requires either the invoice ID or the payment reference number to be provided by the user. If both values are missing, an error will be returned by the API.

 */
export type ListPaymentReferenceNumbersPaymentReferenceNumberNumber = {
  in?: string;
  is?: string;
};

export type ListPaymentReferenceNumbersParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>An unique identifier for the invoice serves that links the invoice to the corresponding payment reference number (PRN).<br/><b>Note</b>: To retrieve the PRN, the API requires either the invoice ID or the payment reference number to be provided by the user. If both values are missing, an error will be returned by the API.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "old_inv_001"</i>
   */
  id?: {
    in?: string;
    is?: string;
  };
  /**
   * Parameters for payment_reference_number
   */
  payment_reference_number?: {
    /** This parameter is used to identify the PRN in the system and retrieve its corresponding payment information. \*\*Note\*\*: To retrieve the PRN, the API requires either the invoice ID or the payment reference number to be provided by the user. If both values are missing, an error will be returned by the API.
     */
    number?: ListPaymentReferenceNumbersPaymentReferenceNumberNumber;
  };
};

export type RemoveTaxWithheldForAnInvoice200 = {
  invoice: Invoice;
};

/**
 * Parameters for tax_withheld

 */
export type RemoveTaxWithheldForAnInvoiceBodyTaxWithheld = {
  /** An auto-generated unique identifier for the tax withheld. The value starts with the prefix `tax_wh_`. For example, `tax_wh_16BdDXSlbu4uV1Ee6`.
   */
  id: string;
};

export type RemoveTaxWithheldForAnInvoiceBody = {
  /** Parameters for tax_withheld
   */
  tax_withheld?: RemoveTaxWithheldForAnInvoiceBodyTaxWithheld;
};

export type RemoveTaxWithheldForAnInvoiceChargebeeEventWebhook =
  (typeof RemoveTaxWithheldForAnInvoiceChargebeeEventWebhook)[keyof typeof RemoveTaxWithheldForAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveTaxWithheldForAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveTaxWithheldForAnInvoiceChargebeeEventEmail =
  (typeof RemoveTaxWithheldForAnInvoiceChargebeeEventEmail)[keyof typeof RemoveTaxWithheldForAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveTaxWithheldForAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveTaxWithheldForAnInvoiceChargebeeEventActions =
  (typeof RemoveTaxWithheldForAnInvoiceChargebeeEventActions)[keyof typeof RemoveTaxWithheldForAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveTaxWithheldForAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveTaxWithheldForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveTaxWithheldForAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveTaxWithheldForAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveTaxWithheldForAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ResendFailedEinvoiceInInvoices200 = {
  invoice: Invoice;
};

export type ResendFailedEinvoiceInInvoicesChargebeeEventWebhook =
  (typeof ResendFailedEinvoiceInInvoicesChargebeeEventWebhook)[keyof typeof ResendFailedEinvoiceInInvoicesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendFailedEinvoiceInInvoicesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ResendFailedEinvoiceInInvoicesChargebeeEventEmail =
  (typeof ResendFailedEinvoiceInInvoicesChargebeeEventEmail)[keyof typeof ResendFailedEinvoiceInInvoicesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendFailedEinvoiceInInvoicesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ResendFailedEinvoiceInInvoicesChargebeeEventActions =
  (typeof ResendFailedEinvoiceInInvoicesChargebeeEventActions)[keyof typeof ResendFailedEinvoiceInInvoicesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResendFailedEinvoiceInInvoicesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ResendFailedEinvoiceInInvoicesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ResendFailedEinvoiceInInvoicesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ResendFailedEinvoiceInInvoicesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ResendFailedEinvoiceInInvoicesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RecordTaxWithheldForAnInvoice200 = {
  invoice: Invoice;
};

/**
 * Parameters for tax_withheld

 */
export type RecordTaxWithheldForAnInvoiceBodyTaxWithheld = {
  /** The amount withheld by the customer as tax from the invoice. This must not exceed [invoice.amount_due](/docs/api/invoices#invoice_amount_due). The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  amount: number;
  /** A unique external reference number for the tax withheld. Typically, this is the reference number used by the system you are integrating the API with. Depending on your integration, this could be the reference number issued by the taxation authority to identify the customer or the specific tax transaction.
   */
  reference_number?: string;
  /** Date or time associated with this tax amount withheld. The default value is the time of invoking this operation.
   */
  date?: number;
  /** The description for this tax withheld.
   */
  description?: string;
};

export type RecordTaxWithheldForAnInvoiceBody = {
  /** Parameters for tax_withheld
   */
  tax_withheld?: RecordTaxWithheldForAnInvoiceBodyTaxWithheld;
};

export type RecordTaxWithheldForAnInvoiceChargebeeEventWebhook =
  (typeof RecordTaxWithheldForAnInvoiceChargebeeEventWebhook)[keyof typeof RecordTaxWithheldForAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordTaxWithheldForAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RecordTaxWithheldForAnInvoiceChargebeeEventEmail =
  (typeof RecordTaxWithheldForAnInvoiceChargebeeEventEmail)[keyof typeof RecordTaxWithheldForAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordTaxWithheldForAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RecordTaxWithheldForAnInvoiceChargebeeEventActions =
  (typeof RecordTaxWithheldForAnInvoiceChargebeeEventActions)[keyof typeof RecordTaxWithheldForAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordTaxWithheldForAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RecordTaxWithheldForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RecordTaxWithheldForAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RecordTaxWithheldForAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RecordTaxWithheldForAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportInvoice200 = {
  invoice: Invoice;
  credit_note?: CreditNote;
};

/**
 * Parameters for notes

 */
export type ImportInvoiceBodyNotes = {
  entity_type?: ImportInvoiceBodyNotesEntityTypeItem[];
  /** Id of the mentioned entity type
   */
  entity_id?: string[];
  /** Actual note.
   */
  note?: string[];
};

export type ImportInvoiceBody = {
  /** Invoice Number.
   */
  id: string;
  /** The currency code (ISO 4217 format) for the invoice.
   */
  currency_code?: string;
  /** Identifier of the customer for which this invoice needs to be created.
   */
  customer_id?: string;
  /** If recurring items are present in line items then subscription id is required.
   */
  subscription_id?: string;
  /** Purchase Order Number for this invoice.
   */
  po_number?: string;
  /** The price type of the invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type?: ImportInvoiceBodyPriceType;
  /** The reason for exempting the invoice from tax. (Applicable only for exempted invoices.). \* export - The customer is from a non-taxable region or the billing address and shipping address are unavailable. \* customer_exempt - The customer is [exempted](customers#customer_taxability) from tax. \* id_exempt - The customer is from a different country than your business and they have a valid VAT number or, the customer is a business entity. (This reason is only applicable when [EU VAT](https://www.chargebee.com/docs/eu-vat.html) or [UK VAT](https://www.chargebee.com/docs/uk-vat.html) is enabled.)
   */
  tax_override_reason?: ImportInvoiceBodyTaxOverrideReason;
  /** Vat Number. Required if this invoice is VAT exempted.
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Date when invoice raised.
   */
  date: number;
  /** Invoice total amount.
   */
  total: number;
  /** Round off amount.
   */
  round_off?: number;
  /** Current status of this invoice. \* not_paid - Indicates the payment is not made and all attempts to collect is failed. \* voided - Indicates a voided invoice. \* paid - Indicates a paid invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings.
 */
  status?: ImportInvoiceBodyStatus;
  /** Timestamp indicating the date \& time this invoice got voided.
   */
  voided_at?: number;
  /** Reason code for voiding the invoice. Select from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Invoices \> Void invoice**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  void_reason_code?: string;
  /** If is_written_off is true then the invoice is written off.
   */
  is_written_off?: boolean;
  /** Amount written off against this invoice. If this value is not present then the due amount of the invoice will be written off.
   */
  write_off_amount?: number;
  /** The date on which the write_off invoice has occurred. This is a mandatory field if is_written_off is true. The same date reflects on the created credit note.
   */
  write_off_date?: number;
  /** Invoice Due Date.
   */
  due_date?: number;
  /** Invoice net term days.
   */
  net_term_days?: number;
  /** Boolean indicating any advance charge is present in this invoice.
   */
  has_advance_charges?: boolean;
  /** If the invoice falls within the subscription current term will be used for proration.
   */
  use_for_proration?: boolean;
  /** Parameters for credit_note
   */
  credit_note?: ImportInvoiceBodyCreditNote;
  /** Parameters for billing_address
   */
  billing_address?: ImportInvoiceBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: ImportInvoiceBodyShippingAddress;
  /** Parameters for line_items
   */
  line_items?: ImportInvoiceBodyLineItems;
  /** Parameters for payment_reference_numbers
   */
  payment_reference_numbers?: ImportInvoiceBodyPaymentReferenceNumbers;
  /** Parameters for line_item_tiers
   */
  line_item_tiers?: ImportInvoiceBodyLineItemTiers;
  /** Parameters for discounts
   */
  discounts?: ImportInvoiceBodyDiscounts;
  /** Parameters for taxes
   */
  taxes?: ImportInvoiceBodyTaxes;
  /** Parameters for payments
   */
  payments?: ImportInvoiceBodyPayments;
  /** Parameters for notes
   */
  notes?: ImportInvoiceBodyNotes;
};

/**
 * Type of entity to which the note belongs. \* subscription - Entity that represents a subscription of customer. \* plan_item_price - Indicates that this line item is based on plan Item Price \* customer - Entity that represents a customer. \* plan - Entity that represents a plan. \* coupon - Entity that represents a coupon. \* tax - The note is configured as part of the [tax configuration](https://www.chargebee.com/docs/tax.html) in Chargebee Billing. \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Entity that represents an addon.

 */
export type ImportInvoiceBodyNotesEntityTypeItem =
  (typeof ImportInvoiceBodyNotesEntityTypeItem)[keyof typeof ImportInvoiceBodyNotesEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyNotesEntityTypeItem = {
  coupon: "coupon",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * Mode of payment \* sepa_credit - SEPA Credit \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* google_pay - Google Pay \* check - Check \* giropay - giropay \* wechat_pay - WeChat Pay \* alipay - Alipay \* sofort - Sofort \* dotpay - Dotpay \* bank_transfer - Bank Transfer \* ach_credit - ACH Credit \* ideal - IDEAL \* custom - Custom \* upi - upi \* boleto - boleto \* apple_pay - Apple Pay \* amazon_payments - Amazon Payments \* direct_debit - Direct Debit \* bancontact - Bancontact \* other - Payment Methods other than the above types \* cash - Cash \* unionpay - Unionpay \* paypal_express_checkout - Paypal Express Checkout \* netbanking_emandates - netbanking_emandates \* card - Card

 */
export type ImportInvoiceBodyPaymentsPaymentMethodItem =
  (typeof ImportInvoiceBodyPaymentsPaymentMethodItem)[keyof typeof ImportInvoiceBodyPaymentsPaymentMethodItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyPaymentsPaymentMethodItem = {
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for payments

 */
export type ImportInvoiceBodyPayments = {
  /** Payment made for this invoice
   */
  amount: number[];
  payment_method: ImportInvoiceBodyPaymentsPaymentMethodItem[];
  /** Payment date
   */
  date?: number[];
  /** Reference number for this payment
   */
  reference_number?: string[];
};

/**
 * The type of tax jurisdiction \* country - The tax jurisdiction is a country \* special - Special tax jurisdiction. \* state - The tax jurisdiction is a state \* city - The tax jurisdiction is a city \* other - Jurisdictions other than the ones listed above. \* unincorporated - Combined tax of state and county. \* federal - The tax jurisdiction is a federal \* county - The tax jurisdiction is a county

 */
export type ImportInvoiceBodyTaxesJurisTypeItem =
  (typeof ImportInvoiceBodyTaxesJurisTypeItem)[keyof typeof ImportInvoiceBodyTaxesJurisTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyTaxesJurisTypeItem = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

/**
 * Parameters for taxes

 */
export type ImportInvoiceBodyTaxes = {
  /** The name of the tax applied
   */
  name: string[];
  /** The rate of tax used to calculate tax amount
   */
  rate: number[];
  /** Total tax amount charged for this invoice
   */
  amount?: number[];
  /** Description of tax
   */
  description?: string[];
  juris_type?: ImportInvoiceBodyTaxesJurisTypeItem[];
  /** The name of the tax jurisdiction
   */
  juris_name?: string[];
  /** The tax jurisdiction code
   */
  juris_code?: string[];
};

/**
 * The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type ImportInvoiceBodyDiscountsEntityTypeItem =
  (typeof ImportInvoiceBodyDiscountsEntityTypeItem)[keyof typeof ImportInvoiceBodyDiscountsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyDiscountsEntityTypeItem = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

/**
 * Parameters for discounts

 */
export type ImportInvoiceBodyDiscounts = {
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string[];
  entity_type: ImportInvoiceBodyDiscountsEntityTypeItem[];
  /** When the deduction is due to a `coupon`, then this is the `id` of the coupon. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  entity_id?: string[];
  /** Description for this deduction.
   */
  description?: string[];
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number[];
};

/**
 * Parameters for line_item_tiers

 */
export type ImportInvoiceBodyLineItemTiers = {
  /** Uniquely identifies a line_item
   */
  line_item_id: string[];
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The number of units purchased in a range.
   */
  quantity_used?: number[];
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
};

/**
 * This attribute helps `type` field in the API, specifies how to reconcile offline payments, and generate `payment_reference_number` on invoices based on country-specific rules. Setting the `type` field generates `payment_reference_number` for the respective country and includes them on the invoice for correct reconciliation. \* kid - The KID number (kundeidentifikasjon) in Norway is an abbreviation for "Customer identification". It is used to associate payments with the customer and invoice. \* fik - Denmark based number calculated using recursive MOD 10 algorithm. \* frn - The reference number printed on invoices in Finland is utilized by buyers for payment via bank transfer, facilitating the association of payments with invoices. \* ocr - A OCR-based payment, contains an OCR reference, which is used to identify the vendor and the purchase document in connection with a payment. Swedish reference number can contain customer ID and/or invoice number to identify customer and invoice.

 */
export type ImportInvoiceBodyPaymentReferenceNumbersTypeItem =
  (typeof ImportInvoiceBodyPaymentReferenceNumbersTypeItem)[keyof typeof ImportInvoiceBodyPaymentReferenceNumbersTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyPaymentReferenceNumbersTypeItem = {
  kid: "kid",
  ocr: "ocr",
  frn: "frn",
  fik: "fik",
} as const;

/**
 * Parameters for payment_reference_numbers

 */
export type ImportInvoiceBodyPaymentReferenceNumbers = {
  /** If `id` is not provided then our system will automatically generate a unique id.
   */
  id?: string[];
  type: ImportInvoiceBodyPaymentReferenceNumbersTypeItem[];
  /** If you have already generated a `payment_reference_number` in another system, you can provide it in this field. This number will then be made available to you both in PDF format and via the `/api/v2/invoices/payment_reference_numbers` API.
   */
  number: string[];
};

/**
 * Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id

 */
export type ImportInvoiceBodyLineItemsEntityTypeItem =
  (typeof ImportInvoiceBodyLineItemsEntityTypeItem)[keyof typeof ImportInvoiceBodyLineItemsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyLineItemsEntityTypeItem = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * Parameters for line_items

 */
export type ImportInvoiceBodyLineItems = {
  /** Uniquely identifies a line_item
   */
  id?: string[];
  /** Start date of this line item.
   */
  date_from?: number[];
  /** End date of this line item.
   */
  date_to?: number[];
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string[];
  /** Description for this line item
   */
  description: string[];
  /** Unit amount of the line item.
   */
  unit_amount?: number[];
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).  
[Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=1#invoice_line_items_quantity) which is represented by this line item.
 */
  quantity?: number[];
  /** Total amount of this lineitem. Not required if the line_items\[unit_amount\] param is passed
   */
  amount?: number[];
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  entity_type?: ImportInvoiceBodyLineItemsEntityTypeItem[];
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string[];
  /** First item level discount entity id
   */
  item_level_discount1_entity_id?: string[];
  /** First item level discount amount
   */
  item_level_discount1_amount?: number[];
  /** Second item level discount entity id
   */
  item_level_discount2_entity_id?: string[];
  /** Second item level discount amount
   */
  item_level_discount2_amount?: number[];
  /** First tax name
   */
  tax1_name?: string[];
  /** First tax amount
   */
  tax1_amount?: number[];
  /** Second tax name
   */
  tax2_name?: string[];
  /** Second tax amount
   */
  tax2_amount?: number[];
  /** Third tax name
   */
  tax3_name?: string[];
  /** Third tax amount
   */
  tax3_amount?: number[];
  /** Fourth tax name
   */
  tax4_name?: string[];
  /** Fourth tax amount
   */
  tax4_amount?: number[];
  /** Fifth tax name
   */
  tax5_name?: string[];
  /** Fifth tax amount
   */
  tax5_amount?: number[];
  /** Sixth tax name
   */
  tax6_name?: string[];
  /** Sixth tax amount
   */
  tax6_amount?: number[];
  /** Seventh tax name
   */
  tax7_name?: string[];
  /** Seventh tax amount
   */
  tax7_amount?: number[];
  /** Eighth tax name
   */
  tax8_name?: string[];
  /** Eighth tax amount
   */
  tax8_amount?: number[];
  /** Ninth tax name
   */
  tax9_name?: string[];
  /** Ninth tax amount
   */
  tax9_amount?: number[];
  /** Tenth tax name
   */
  tax10_name?: string[];
  /** Tenth tax amount
   */
  tax10_amount?: number[];
};

/**
 * The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.

 */
export type ImportInvoiceBodyShippingAddressValidationStatus =
  (typeof ImportInvoiceBodyShippingAddressValidationStatus)[keyof typeof ImportInvoiceBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type ImportInvoiceBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.
   */
  validation_status?: ImportInvoiceBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type ImportInvoiceBodyBillingAddressValidationStatus =
  (typeof ImportInvoiceBodyBillingAddressValidationStatus)[keyof typeof ImportInvoiceBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type ImportInvoiceBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: ImportInvoiceBodyBillingAddressValidationStatus;
};

/**
 * Parameters for credit_note

 */
export type ImportInvoiceBodyCreditNote = {
  /** A unique identifier for the credit note. This is a mandatory field if is_written_off is true.
   */
  id?: string;
};

/**
 * Current status of this invoice. \* not_paid - Indicates the payment is not made and all attempts to collect is failed. \* voided - Indicates a voided invoice. \* paid - Indicates a paid invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings.

 */
export type ImportInvoiceBodyStatus =
  (typeof ImportInvoiceBodyStatus)[keyof typeof ImportInvoiceBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyStatus = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * The reason for exempting the invoice from tax. (Applicable only for exempted invoices.). \* export - The customer is from a non-taxable region or the billing address and shipping address are unavailable. \* customer_exempt - The customer is [exempted](customers#customer_taxability) from tax. \* id_exempt - The customer is from a different country than your business and they have a valid VAT number or, the customer is a business entity. (This reason is only applicable when [EU VAT](https://www.chargebee.com/docs/eu-vat.html) or [UK VAT](https://www.chargebee.com/docs/uk-vat.html) is enabled.)

 */
export type ImportInvoiceBodyTaxOverrideReason =
  (typeof ImportInvoiceBodyTaxOverrideReason)[keyof typeof ImportInvoiceBodyTaxOverrideReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyTaxOverrideReason = {
  id_exempt: "id_exempt",
  customer_exempt: "customer_exempt",
  export: "export",
} as const;

/**
 * The price type of the invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type ImportInvoiceBodyPriceType =
  (typeof ImportInvoiceBodyPriceType)[keyof typeof ImportInvoiceBodyPriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceBodyPriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

export type ImportInvoiceChargebeeEventWebhook =
  (typeof ImportInvoiceChargebeeEventWebhook)[keyof typeof ImportInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportInvoiceChargebeeEventEmail =
  (typeof ImportInvoiceChargebeeEventEmail)[keyof typeof ImportInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportInvoiceChargebeeEventActions =
  (typeof ImportInvoiceChargebeeEventActions)[keyof typeof ImportInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAnInvoice200 = {
  invoice: Invoice;
};

export type DeleteAnInvoiceBody = {
  /** Reason for deleting the invoice. This comment will be added to the subscription entity if the invoice belongs to a subscription. It is added to the customer entity if the invoice is associated only with a customer.
   */
  comment?: string;
  /** Indicates whether to put prorated credits back to the subscription or ignore while deleting the invoice.
   */
  claim_credits?: boolean;
};

export type DeleteAnInvoiceChargebeeEventWebhook =
  (typeof DeleteAnInvoiceChargebeeEventWebhook)[keyof typeof DeleteAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnInvoiceChargebeeEventEmail =
  (typeof DeleteAnInvoiceChargebeeEventEmail)[keyof typeof DeleteAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnInvoiceChargebeeEventActions =
  (typeof DeleteAnInvoiceChargebeeEventActions)[keyof typeof DeleteAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RecordAnInvoicePayment200 = {
  invoice: Invoice;
  transaction: Transaction;
};

export type RecordAnInvoicePaymentBody = {
  /** Remarks, if any, on the payment.
   */
  comment?: string;
  /** Parameters for transaction
   */
  transaction?: RecordAnInvoicePaymentBodyTransaction;
};

/**
 * The status of this transaction. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* success - The transaction is successful. \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* timeout - Transaction failed because of Gateway not accepting the connection. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* voided - The transaction got voided or authorization expired at gateway.

 */
export type RecordAnInvoicePaymentBodyTransactionStatus =
  (typeof RecordAnInvoicePaymentBodyTransactionStatus)[keyof typeof RecordAnInvoicePaymentBodyTransactionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnInvoicePaymentBodyTransactionStatus = {
  success: "success",
  failure: "failure",
} as const;

/**
 * The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay

 */
export type RecordAnInvoicePaymentBodyTransactionPaymentMethod =
  (typeof RecordAnInvoicePaymentBodyTransactionPaymentMethod)[keyof typeof RecordAnInvoicePaymentBodyTransactionPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnInvoicePaymentBodyTransactionPaymentMethod = {
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for transaction

 */
export type RecordAnInvoicePaymentBodyTransaction = {
  /** The payment transaction amount. If not specified, this value will be the invoice's due amount.
   */
  amount?: number;
  /** The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay
   */
  payment_method: RecordAnInvoicePaymentBodyTransactionPaymentMethod;
  /** The reference number for this transaction. e.g check number in case of 'check' payments.
   */
  reference_number?: string;
  /** The id with which this transaction is referred in gateway.
   */
  id_at_gateway?: string;
  /** The status of this transaction. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* success - The transaction is successful. \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* timeout - Transaction failed because of Gateway not accepting the connection. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* voided - The transaction got voided or authorization expired at gateway.
   */
  status?: RecordAnInvoicePaymentBodyTransactionStatus;
  /** Indicates when this transaction occurred.
   */
  date?: number;
  /** Error code received from the payment gateway on failure.
   */
  error_code?: string;
  /** Error message received from the payment gateway on failure.
   */
  error_text?: string;
};

export type RecordAnInvoicePaymentChargebeeEventWebhook =
  (typeof RecordAnInvoicePaymentChargebeeEventWebhook)[keyof typeof RecordAnInvoicePaymentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnInvoicePaymentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnInvoicePaymentChargebeeEventEmail =
  (typeof RecordAnInvoicePaymentChargebeeEventEmail)[keyof typeof RecordAnInvoicePaymentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnInvoicePaymentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnInvoicePaymentChargebeeEventActions =
  (typeof RecordAnInvoicePaymentChargebeeEventActions)[keyof typeof RecordAnInvoicePaymentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnInvoicePaymentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnInvoicePaymentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RecordAnInvoicePaymentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RecordAnInvoicePaymentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RecordAnInvoicePaymentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateInvoiceDetails200 = {
  invoice: Invoice;
};

/**
 * The address verification status. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping.

 */
export type UpdateInvoiceDetailsBodyShippingAddressValidationStatus =
  (typeof UpdateInvoiceDetailsBodyShippingAddressValidationStatus)[keyof typeof UpdateInvoiceDetailsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvoiceDetailsBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type UpdateInvoiceDetailsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping.
   */
  validation_status?: UpdateInvoiceDetailsBodyShippingAddressValidationStatus;
};

export type UpdateInvoiceDetailsBody = {
  /** VAT/ Tax registration number of the customer. [Learn more](https://www.chargebee.com/docs/tax.html#capture-tax-registration-number).
   */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Purchase Order Number for this invoice.
   */
  po_number?: string;
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** Parameters for billing_address
   */
  billing_address?: UpdateInvoiceDetailsBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: UpdateInvoiceDetailsBodyShippingAddress;
};

/**
 * The address verification status. \* invalid - Address is invalid. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated.

 */
export type UpdateInvoiceDetailsBodyBillingAddressValidationStatus =
  (typeof UpdateInvoiceDetailsBodyBillingAddressValidationStatus)[keyof typeof UpdateInvoiceDetailsBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvoiceDetailsBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type UpdateInvoiceDetailsBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* invalid - Address is invalid. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated.
   */
  validation_status?: UpdateInvoiceDetailsBodyBillingAddressValidationStatus;
};

export type UpdateInvoiceDetailsChargebeeEventWebhook =
  (typeof UpdateInvoiceDetailsChargebeeEventWebhook)[keyof typeof UpdateInvoiceDetailsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvoiceDetailsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateInvoiceDetailsChargebeeEventEmail =
  (typeof UpdateInvoiceDetailsChargebeeEventEmail)[keyof typeof UpdateInvoiceDetailsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvoiceDetailsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateInvoiceDetailsChargebeeEventActions =
  (typeof UpdateInvoiceDetailsChargebeeEventActions)[keyof typeof UpdateInvoiceDetailsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvoiceDetailsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateInvoiceDetailsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateInvoiceDetailsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateInvoiceDetailsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateInvoiceDetailsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateInvoiceForItemsAndOneTimeCharges200 = {
  invoice: Invoice;
};

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyDiscountsApplyOnItem =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyDiscountsApplyOnItem)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyDiscounts = {
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  apply_on: CreateInvoiceForItemsAndOneTimeChargesBodyDiscountsApplyOnItem[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Type of entity to which the [note](./invoices#invoice_notes) belongs. To remove the general note, use the `remove_general_note` parameter. \* addon - Entity that represents an addon. \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* plan - Entity that represents a plan. \* plan_item_price - Indicates that this line item is based on plan Item Price \* customer - Entity that represents a customer. \* subscription - Entity that represents a subscription of customer. \* coupon - Entity that represents a coupon.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemoveEntityTypeItem =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemoveEntityTypeItem)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemoveEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemoveEntityTypeItem =
  {
    customer: "customer",
    subscription: "subscription",
    coupon: "coupon",
    plan_item_price: "plan_item_price",
    addon_item_price: "addon_item_price",
    charge_item_price: "charge_item_price",
  } as const;

/**
 * Parameters for notes_to_remove

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemove = {
  entity_type?: CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemoveEntityTypeItem[];
  /** Unique identifier of the [note](https://apidocs.chargebee.com/docs/api/invoices#invoice_notes).
   */
  entity_id?: string[];
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem =
  {
    wholesale: "wholesale",
    retail: "retail",
    consumed: "consumed",
    vendor_use: "vendor_use",
  } as const;

/**
 * Parameters for charges

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyCharges = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number[];
  /** The decimal representation of the amount for the [one-time charge](https://www.chargebee.com/docs/charges.html#one-time-charges ). Provide the value in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  /** Description for this charge
   */
  description?: string[];
  /** The amount to be charged is taxable or not.
   */
  taxable?: boolean[];
  /** Tax profile of the charge.
   */
  tax_profile_id?: string[];
  /** The Avalara tax codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html).
   */
  avalara_tax_code?: string[];
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string[];
  /** The TaxJar product codes to which items are mapped to should be provided here. Applicable only if you use Chargebee's [TaxJar integration](https://www.chargebee.com/docs/taxjar.html).
   */
  taxjar_product_code?: string[];
  avalara_sale_type?: CreateInvoiceForItemsAndOneTimeChargesBodyChargesAvalaraSaleTypeItem[];
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number[];
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number[];
  /** The time when the service period for the charge starts.
   */
  date_from?: number[];
  /** The time when the service period for the charge ends.
   */
  date_to?: number[];
};

/**
 * Parameters for item_tiers

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyItemTiers = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_prices

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyItemPrices = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Item price quantity
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number[];
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** The time when the service period for the item starts.
   */
  date_from?: number[];
  /** The time when the service period for the item ends.
   */
  date_to?: number[];
};

export type CreateInvoiceForItemsAndOneTimeChargesBody = {
  /** Unique ID of the customer this invoice should be created for. Either this or `subscription_id` must be provided.  
**Note**

The invoice is [linked](/docs/api?prod_cat_ver=2#mbe-linked-be) to the same [business entity](/docs/api?prod_cat_ver=2#mbe) as this customer.
.
 */
  customer_id?: string;
  /** Unique ID of the subscription this invoice should be created for. Either this or `customer_id` must be provided.  
**Note**

The invoice is [linked](/docs/api?prod_cat_ver=2#mbe-linked-be) to the same [business entity](/docs/api?prod_cat_ver=2#mbe) as this subscription.
.
 */
  subscription_id?: string;
  /** The currency code (ISO 4217 format) of the invoice amount.
   */
  currency_code?: string;
  /** A note for this particular invoice. This, and [all other notes](/docs/api/invoices#invoice_notes) for the invoice are displayed on the PDF invoice sent to the customer.
   */
  invoice_note?: string;
  /** Set as `true` to remove the **[general note](https://www.chargebee.com/docs/invoice_notes.html#adding-general-notes)** from this invoice.
   */
  remove_general_note?: boolean;
  /** Purchase Order Number for this invoice.
   */
  po_number?: string;
  /** List of Coupons to be added.
   */
  coupon_ids?: string[];
  /** Authorization transaction to be captured.
   */
  authorization_transaction_id?: string;
  /** Payment source to be used for this payment.
   */
  payment_source_id?: string;
  /** The customer level auto collection will be override if specified. \* on - Whenever an invoice is created, an automatic attempt will be made to charge. \* off - Whenever an invoice is created as payment due.
   */
  auto_collection?: CreateInvoiceForItemsAndOneTimeChargesBodyAutoCollection;
  /** The document date displayed on the invoice PDF. By default, it is the date of creation of the invoice or, when Metered Billing is enabled, it can be the date of closing the invoice. Provide this value to backdate the invoice (set the invoice date to a value in the past). Backdating an invoice is done for reasons such as booking revenue for a previous date or when the non-recurring charge is effective as of a past date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of this date. The date should not be more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
   */
  invoice_date?: number;
  /** Token generated by Chargebee JS representing payment method details.
   */
  token_id?: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** Indicates whether the payment source should be retained for the customer.
   */
  retain_payment_source?: boolean;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddress;
  /** Parameters for card
   */
  card?: CreateInvoiceForItemsAndOneTimeChargesBodyCard;
  /** Parameters for bank_account
   */
  bank_account?: CreateInvoiceForItemsAndOneTimeChargesBodyBankAccount;
  /** Parameters for payment_method
   */
  payment_method?: CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethod;
  /** Parameters for payment_intent
   */
  payment_intent?: CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntent;
  /** Parameters for item_prices
   */
  item_prices?: CreateInvoiceForItemsAndOneTimeChargesBodyItemPrices;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateInvoiceForItemsAndOneTimeChargesBodyItemTiers;
  /** Parameters for charges
   */
  charges?: CreateInvoiceForItemsAndOneTimeChargesBodyCharges;
  /** Parameters for notes_to_remove
   */
  notes_to_remove?: CreateInvoiceForItemsAndOneTimeChargesBodyNotesToRemove;
  /** Parameters for discounts
   */
  discounts?: CreateInvoiceForItemsAndOneTimeChargesBodyDiscounts;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentAdditionalInformation =
  { [key: string]: any };

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* bancontact - bancontact \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentPaymentMethodType =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentPaymentMethodType)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentPaymentMethodType =
  {
    card: "card",
    ideal: "ideal",
    sofort: "sofort",
    bancontact: "bancontact",
    google_pay: "google_pay",
    dotpay: "dotpay",
    giropay: "giropay",
    apple_pay: "apple_pay",
    upi: "upi",
    netbanking_emandates: "netbanking_emandates",
    paypal_express_checkout: "paypal_express_checkout",
    direct_debit: "direct_debit",
    boleto: "boleto",
    venmo: "venmo",
    amazon_payments: "amazon_payments",
    pay_to: "pay_to",
    faster_payments: "faster_payments",
    sepa_instant_transfer: "sepa_instant_transfer",
  } as const;

/**
 * Parameters for payment_intent

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* bancontact - bancontact \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort
   */
  payment_method_type?: CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateInvoiceForItemsAndOneTimeChargesBodyPaymentIntentAdditionalInformation;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodAdditionalInformation =
  { [key: string]: any };

/**
 * The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* dotpay - Payments made via Dotpay. \* google_pay - Payments made via Google Pay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodType =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodType)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_method

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethod = {
  /** The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* dotpay - Payments made via Dotpay. \* google_pay - Payments made via Google Pay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay.
   */
  type?: CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodType;
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** The reference id. In the case of Amazon and PayPal this will be the *billing agreement id* . For GoCardless direct debit this will be 'mandate id'. In the case of card this will be the identifier provided by the gateway/card vault for the specific payment method resource. **Note:** This is not the one-time temporary token provided by gateways like Stripe.   
For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource.
 */
  reference_id?: string;
  /** Single-use tokens created by payment gateways. In Stripe, a single-use token is created for Apple Pay Wallet, card details or direct debit. In Braintree, a nonce is created for Apple Pay Wallet, PayPal, or card details. In Authorize.Net, a nonce is created for card details. In Adyen, an encrypted data is created from the card details.
   */
  tmp_token?: string;
  /** [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern
Ireland**) is available as an option.
 */
  issuing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateInvoiceForItemsAndOneTimeChargesBodyPaymentMethodAdditionalInformation;
};

/**
 * The billing address associated with the bank account. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`company_name\`:(string, max chars=250) The company name for the address. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country\`:(string) The name of the country for the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state\`:(string, max chars=50) The name of the state or province for the address. When not provided, this is set automatically for US, Canada, and India. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix. This is supported for USA, Canada, and India. For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountBillingAddress =
  { [key: string]: any };

/**
 * For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountEcheckType =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountEcheckType)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountEcheckType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountEcheckType = {
  web: "web",
  ppd: "ppd",
  ccd: "ccd",
} as const;

/**
 * For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountHolderType =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountHolderType)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountHolderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountHolderType =
  {
    individual: "individual",
    company: "company",
  } as const;

/**
 * Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* checking - Checking Account \* business_checking - Business Checking Account \* savings - Savings Account \* current - Current Account

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountType =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountType)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountType =
  {
    checking: "checking",
    savings: "savings",
    business_checking: "business_checking",
    current: "current",
  } as const;

/**
 * Parameters for bank_account

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyBankAccount = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Account holder's International Bank Account Number. For the [GoCardless](https://www.chargebee.com/docs/gocardless.html) platform, this can be the [local bank details](https://developer.gocardless.com/api-reference/#appendix-local-bank-details)
   */
  iban?: string;
  /** Account holder's first name as per bank account. If not passed, details from customer details will be considered.
   */
  first_name?: string;
  /** Account holder's last name as per bank account. If not passed, details from customer details will be considered.
   */
  last_name?: string;
  /** Account holder's company name as per bank account. If not passed, details from customer details will be considered.
   */
  company?: string;
  /** Account holder's email address. If not passed, details from customer details will be considered. All Direct Debit compliant emails will be sent to this email address.
   */
  email?: string;
  /** Phone number of the account holder that is linked to the bank account.
   */
  phone?: string;
  /** Name of account holder's bank.
   */
  bank_name?: string;
  /** Account holder's bank account number.
   */
  account_number?: string;
  /** Bank account routing number.
   */
  routing_number?: string;
  /** Indicates the bank code.
   */
  bank_code?: string;
  /** Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* checking - Checking Account \* business_checking - Business Checking Account \* savings - Savings Account \* current - Current Account
   */
  account_type?: CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountType;
  /** For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.
   */
  account_holder_type?: CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountAccountHolderType;
  /** For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.
   */
  echeck_type?: CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountEcheckType;
  /** [two-letter(alpha2)](https://www.iso.org/iso-3166-country-codes.html) ISO country code. Required when local bank details are provided, and not IBAN.
   */
  issuing_country?: string;
  /** For GoCardless Autogiro users only. The civic/company number (personnummer, samordningsnummer, or organisationsnummer) of the customer. Must be supplied if the customer's bank account is denominated in Swedish krona (SEK). This field cannot be changed once it has been set.
   */
  swedish_identity_number?: string;
  /** The billing address associated with the bank account. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`company_name\`:(string, max chars=250) The company name for the address. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country\`:(string) The name of the country for the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state\`:(string, max chars=50) The name of the state or province for the address. When not provided, this is set automatically for US, Canada, and India. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix. This is supported for USA, Canada, and India. For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.
   */
  billing_address?: CreateInvoiceForItemsAndOneTimeChargesBodyBankAccountBillingAddress;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyCardAdditionalInformation =
  { [key: string]: any };

/**
 * Parameters for card

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number?: string;
  /** Card expiry month.
   */
  expiry_month?: number;
  /** Card expiry year.
   */
  expiry_year?: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateInvoiceForItemsAndOneTimeChargesBodyCardAdditionalInformation;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddressValidationStatus =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddressValidationStatus)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Parameters for shipping_address

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateInvoiceForItemsAndOneTimeChargesBodyShippingAddressValidationStatus;
};

/**
 * The customer level auto collection will be override if specified. \* on - Whenever an invoice is created, an automatic attempt will be made to charge. \* off - Whenever an invoice is created as payment due.

 */
export type CreateInvoiceForItemsAndOneTimeChargesBodyAutoCollection =
  (typeof CreateInvoiceForItemsAndOneTimeChargesBodyAutoCollection)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type CreateInvoiceForItemsAndOneTimeChargesChargebeeEventWebhook =
  (typeof CreateInvoiceForItemsAndOneTimeChargesChargebeeEventWebhook)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateInvoiceForItemsAndOneTimeChargesChargebeeEventEmail =
  (typeof CreateInvoiceForItemsAndOneTimeChargesChargebeeEventEmail)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateInvoiceForItemsAndOneTimeChargesChargebeeEventActions =
  (typeof CreateInvoiceForItemsAndOneTimeChargesChargebeeEventActions)[keyof typeof CreateInvoiceForItemsAndOneTimeChargesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvoiceForItemsAndOneTimeChargesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateInvoiceForItemsAndOneTimeChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateInvoiceForItemsAndOneTimeChargesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateInvoiceForItemsAndOneTimeChargesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateInvoiceForItemsAndOneTimeChargesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAnInvoice200 = {
  invoice: Invoice;
};

export type RetrieveAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ApplyCreditsForAnInvoice200 = {
  invoice: Invoice;
};

/**
 * Parameters for credit_notes

 */
export type ApplyCreditsForAnInvoiceBodyCreditNotes = {
  /** The Credit Note number acts as an identifier for Credit Notes and is typically generated sequentially. Available refundable credits with the customer will be applied against this invoice if this paramenter is not passed.
   */
  id?: string[];
};

export type ApplyCreditsForAnInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** Parameters for credit_notes
   */
  credit_notes?: ApplyCreditsForAnInvoiceBodyCreditNotes;
};

export type ApplyCreditsForAnInvoiceChargebeeEventWebhook =
  (typeof ApplyCreditsForAnInvoiceChargebeeEventWebhook)[keyof typeof ApplyCreditsForAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyCreditsForAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ApplyCreditsForAnInvoiceChargebeeEventEmail =
  (typeof ApplyCreditsForAnInvoiceChargebeeEventEmail)[keyof typeof ApplyCreditsForAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyCreditsForAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ApplyCreditsForAnInvoiceChargebeeEventActions =
  (typeof ApplyCreditsForAnInvoiceChargebeeEventActions)[keyof typeof ApplyCreditsForAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyCreditsForAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ApplyCreditsForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ApplyCreditsForAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ApplyCreditsForAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ApplyCreditsForAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CloseAPendingInvoice200 = {
  invoice: Invoice;
};

/**
 * Type of entity to which the [note](./invoices#invoice_notes) belongs. To remove the general note, use the `remove_general_note` parameter. \* customer - Entity that represents a customer. \* plan - Entity that represents a plan. \* charge_item_price - Indicates that this line item is based on charge Item Price \* coupon - Entity that represents a coupon. \* addon - Entity that represents an addon. \* addon_item_price - Indicates that this line item is based on addon Item Price \* subscription - Entity that represents a subscription of customer. \* plan_item_price - Indicates that this line item is based on plan Item Price

 */
export type CloseAPendingInvoiceBodyNotesToRemoveEntityTypeItem =
  (typeof CloseAPendingInvoiceBodyNotesToRemoveEntityTypeItem)[keyof typeof CloseAPendingInvoiceBodyNotesToRemoveEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloseAPendingInvoiceBodyNotesToRemoveEntityTypeItem = {
  customer: "customer",
  subscription: "subscription",
  coupon: "coupon",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * Parameters for notes_to_remove

 */
export type CloseAPendingInvoiceBodyNotesToRemove = {
  entity_type?: CloseAPendingInvoiceBodyNotesToRemoveEntityTypeItem[];
  /** Unique identifier of the [note](https://apidocs.chargebee.com/docs/api/invoices#invoice_notes).
   */
  entity_id?: string[];
};

export type CloseAPendingInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** A note for this particular invoice. This, and [all other notes](/docs/api/invoices#invoice_notes) for the invoice are displayed on the PDF invoice sent to the customer.
   */
  invoice_note?: string;
  /** Set as `true` to remove the **[general note](https://www.chargebee.com/docs/invoice_notes.html#adding-general-notes)** from this invoice.
   */
  remove_general_note?: boolean;
  /** Set the [invoice date](https://apidocs.chargebee.com/docs/api/invoices#invoice_date). Must lie between the date when the invoice was generated and current date. Can only be passed when the site setting to allow overriding is enabled. If not passed, then the default value [set at the site level](https://www.chargebee.com/docs/metered_billing.html#overview) is used.
   */
  invoice_date?: number;
  /** Parameters for notes_to_remove
   */
  notes_to_remove?: CloseAPendingInvoiceBodyNotesToRemove;
};

export type CloseAPendingInvoiceChargebeeEventWebhook =
  (typeof CloseAPendingInvoiceChargebeeEventWebhook)[keyof typeof CloseAPendingInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloseAPendingInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CloseAPendingInvoiceChargebeeEventEmail =
  (typeof CloseAPendingInvoiceChargebeeEventEmail)[keyof typeof CloseAPendingInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloseAPendingInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CloseAPendingInvoiceChargebeeEventActions =
  (typeof CloseAPendingInvoiceChargebeeEventActions)[keyof typeof CloseAPendingInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CloseAPendingInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CloseAPendingInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CloseAPendingInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CloseAPendingInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CloseAPendingInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListInvoices200ListItem = {
  invoice: Invoice;
};

export type ListInvoices200 = {
  list: ListInvoices200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListInvoicesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.

 */
export type ListInvoicesEinvoiceStatusIsNot =
  (typeof ListInvoicesEinvoiceStatusIsNot)[keyof typeof ListInvoicesEinvoiceStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesEinvoiceStatusIsNot = {
  scheduled: "scheduled",
  skipped: "skipped",
  in_progress: "in_progress",
  success: "success",
  failed: "failed",
  registered: "registered",
} as const;

/**
 * \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.

 */
export type ListInvoicesEinvoiceStatusIs =
  (typeof ListInvoicesEinvoiceStatusIs)[keyof typeof ListInvoicesEinvoiceStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesEinvoiceStatusIs = {
  scheduled: "scheduled",
  skipped: "skipped",
  in_progress: "in_progress",
  success: "success",
  failed: "failed",
  registered: "registered",
} as const;

/**
 * The status of processing the e-invoice. To obtain detailed information about the current \`status\`, see \`message\`.

 */
export type ListInvoicesEinvoiceStatus = {
  /** \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.
   */
  is?: ListInvoicesEinvoiceStatusIs;
  /** \* \`scheduled\` - Sending the e-invoice to the customer has been scheduled. \* \`skipped\` - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* \`in_progress\` - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* \`success\` - The e-invoice has been successfully delivered to the customer. \* \`failed\` - The e-invoice was sent and there was an error due to which it was not delivered. \* \`registered\` - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.
   */
  is_not?: ListInvoicesEinvoiceStatusIsNot;
  in?: string;
  not_in?: string;
};

export type ListInvoicesSortByDesc =
  (typeof ListInvoicesSortByDesc)[keyof typeof ListInvoicesSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesSortByDesc = {
  date: "date",
  updated_at: "updated_at",
} as const;

export type ListInvoicesSortByAsc =
  (typeof ListInvoicesSortByAsc)[keyof typeof ListInvoicesSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesSortByAsc = {
  date: "date",
  updated_at: "updated_at",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListInvoicesChannelIsNot =
  (typeof ListInvoicesChannelIsNot)[keyof typeof ListInvoicesChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListInvoicesChannelIs =
  (typeof ListInvoicesChannelIs)[keyof typeof ListInvoicesChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

export type ListInvoicesDunningStatusIsPresent =
  (typeof ListInvoicesDunningStatusIsPresent)[keyof typeof ListInvoicesDunningStatusIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesDunningStatusIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ListInvoicesDunningStatusIsNot =
  (typeof ListInvoicesDunningStatusIsNot)[keyof typeof ListInvoicesDunningStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesDunningStatusIsNot = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.

 */
export type ListInvoicesDunningStatusIs =
  (typeof ListInvoicesDunningStatusIs)[keyof typeof ListInvoicesDunningStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesDunningStatusIs = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ListInvoicesPriceTypeIsNot =
  (typeof ListInvoicesPriceTypeIsNot)[keyof typeof ListInvoicesPriceTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesPriceTypeIsNot = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.

 */
export type ListInvoicesPriceTypeIs =
  (typeof ListInvoicesPriceTypeIs)[keyof typeof ListInvoicesPriceTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesPriceTypeIs = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ListInvoicesStatusIsNot =
  (typeof ListInvoicesStatusIsNot)[keyof typeof ListInvoicesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesStatusIsNot = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.

 */
export type ListInvoicesStatusIs =
  (typeof ListInvoicesStatusIs)[keyof typeof ListInvoicesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesStatusIs = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

export type ListInvoicesRecurringIs =
  (typeof ListInvoicesRecurringIs)[keyof typeof ListInvoicesRecurringIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesRecurringIs = {
  true: "true",
  false: "false",
} as const;

export type ListInvoicesSubscriptionIdIsPresent =
  (typeof ListInvoicesSubscriptionIdIsPresent)[keyof typeof ListInvoicesSubscriptionIdIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListInvoicesSubscriptionIdIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListInvoicesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The invoice number. Acts as a identifier for invoice and typically generated sequentially.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "INVOICE_654"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>To filter based on subscription_id. </br> NOTE: Not to be used if <i>consolidated invoicing</i> is enabled.<br><b>Supported operators : </b>is, is_not, starts_with, is_present, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>subscription_id[is] = "3bdjnDnsdQn"</i>
   */
  subscription_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListInvoicesSubscriptionIdIsPresent;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The identifier of the customer this invoice belongs to.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "3bdjnDnsdQn"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Boolean indicating whether this invoice belongs to a subscription. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>recurring[is] = "true"</i>
   */
  recurring?: {
    is?: ListInvoicesRecurringIs;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current status of this invoice. Possible values are : <dfn>paid, posted, payment_due, not_paid, voided, pending.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "paid"</i>
   */
  status?: {
    /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
    is?: ListInvoicesStatusIs;
    /** \* \`paid\` - Indicates a paid invoice. \* \`posted\` - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* \`payment_due\` - Indicates the payment is not yet collected and is being retried as per retry settings. \* \`not_paid\` - Indicates the payment is not made and all attempts to collect is failed. \* \`voided\` - Indicates a voided invoice. \* \`pending\` -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site.
 */
    is_not?: ListInvoicesStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The price type of the invoice. Possible values are : <dfn>tax_exclusive, tax_inclusive.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>price_type[is] = "tax_exclusive"</i>
   */
  price_type?: {
    /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
     */
    is?: ListInvoicesPriceTypeIs;
    /** \* \`tax_exclusive\` - All amounts in the document are exclusive of tax. \* \`tax_inclusive\` - All amounts in the document are inclusive of tax.
     */
    is_not?: ListInvoicesPriceTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The document date displayed on the invoice PDF.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>date[on] = "1394532759"</i>
   */
  date?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating the date & time this invoice got paid.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>paid_at[before] = "1394532759"</i>
   */
  paid_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>total[gt] = "1000"</i>
   */
  total?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>Payments collected successfully for the invoice. This is the sum of <code><a href="invoices#invoice_linked_payments">linked_payments[]</a>.txn_amount</code> for all <code>linked_payments[]</code> that have <code>txn_status</code> as <code>success</code>.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_paid[lt] = "800"</i>
   */
  amount_paid?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>Total adjustments made against this invoice.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_adjusted[gte] = "100"</i>
   */
  amount_adjusted?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>Total credits applied against this invoice.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>credits_applied[lte] = "100"</i>
   */
  credits_applied?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, in cents filter</dfn><br>The unpaid amount that is due on the invoice. This is calculated as: <code><a href="invoices#invoice_total">total</a></code> - <code><a href="invoices#invoice_amount_paid">amount_paid</a></code> - sum of <code><a href="invoices#invoice_applied_credits">applied_credits</a>.applied_amount</code> - sum of <code><a href="invoices#invoice_adjustment_credit_notes">adjustment_credit_notes</a>.cn_total</code> - sum of <code><a href="invoices#invoice_linked_taxes_withheld">linked_taxes_withheld</a>.amount</code>.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>amount_due[lt] = "200"</i>
   */
  amount_due?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current dunning status of the invoice. Possible values are : <dfn>in_progress, exhausted, stopped, success.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>dunning_status[is] = "in_progress"</i>
   */
  dunning_status?: {
    /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
     */
    is?: ListInvoicesDunningStatusIs;
    /** \* \`in_progress\` - Dunning is still in progress. \* \`exhausted\` - Maximum number of attempts have been made. \* \`stopped\` - Dunning has stopped for this invoice. \* \`success\` - Payment successfully collected during dunning process.
     */
    is_not?: ListInvoicesDunningStatusIsNot;
    in?: string;
    not_in?: string;
    is_present?: ListInvoicesDunningStatusIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Payment owner of an invoice.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>payment_owner[is] = "payment_customer"</i>
   */
  payment_owner?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on <code>updated_at</code>. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the <code>sort_by</code> input parameter as <code>updated_at</code> for a faster response.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The subscription channel this object originated from and is maintained in. Possible values are : <dfn>web, app_store, play_store.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>channel[is] = "APP STORE"</i>
   */
  channel?: {
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is?: ListInvoicesChannelIs;
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is_not?: ListInvoicesChannelIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating the date & time this invoice got voided.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>voided_at[on] = "1394532759"</i>
   */
  voided_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Reason code for voiding the invoice. Select from a list of reason codes set in the Chargebee app in <b>Settings > Configure Chargebee > Reason Codes > Invoices > Void invoice</b>. Must be passed if set as mandatory in the app. The codes are case-sensitive.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>void_reason_code[is_not] = "Other"</i>
   */
  void_reason_code?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>date, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "date"</i><br>This will sort the result based on the 'date' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListInvoicesSortByAsc;
    desc?: ListInvoicesSortByDesc;
  };
  /**
   * Parameters for einvoice
   */
  einvoice?: {
    /** The status of processing the e-invoice. To obtain detailed information about the current \`status\`, see \`message\`.
     */
    status?: ListInvoicesEinvoiceStatus;
  };
};

export type AddAChargeItemToAPendingInvoice200 = {
  invoice: Invoice;
};

/**
 * Parameters for item_tiers

 */
export type AddAChargeItemToAPendingInvoiceBodyItemTiers = {
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for item_price

 */
export type AddAChargeItemToAPendingInvoiceBodyItemPrice = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id: string;
  /** Item price quantity
   */
  quantity?: number;
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number;
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string;
  /** The time when the service period for the item starts.
   */
  date_from?: number;
  /** The time when the service period for the item ends.
   */
  date_to?: number;
};

export type AddAChargeItemToAPendingInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** Identifier of the subscription for which this addon needs to be created. Applicable for consolidated invoice.
   */
  subscription_id?: string;
  /** Parameters for item_price
   */
  item_price?: AddAChargeItemToAPendingInvoiceBodyItemPrice;
  /** Parameters for item_tiers
   */
  item_tiers?: AddAChargeItemToAPendingInvoiceBodyItemTiers;
};

export type AddAChargeItemToAPendingInvoiceChargebeeEventWebhook =
  (typeof AddAChargeItemToAPendingInvoiceChargebeeEventWebhook)[keyof typeof AddAChargeItemToAPendingInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddAChargeItemToAPendingInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddAChargeItemToAPendingInvoiceChargebeeEventEmail =
  (typeof AddAChargeItemToAPendingInvoiceChargebeeEventEmail)[keyof typeof AddAChargeItemToAPendingInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddAChargeItemToAPendingInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddAChargeItemToAPendingInvoiceChargebeeEventActions =
  (typeof AddAChargeItemToAPendingInvoiceChargebeeEventActions)[keyof typeof AddAChargeItemToAPendingInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddAChargeItemToAPendingInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddAChargeItemToAPendingInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddAChargeItemToAPendingInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddAChargeItemToAPendingInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddAChargeItemToAPendingInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type WriteOffAnInvoice200 = {
  invoice: Invoice;
  credit_note: CreditNote;
};

export type WriteOffAnInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
};

export type WriteOffAnInvoiceChargebeeEventWebhook =
  (typeof WriteOffAnInvoiceChargebeeEventWebhook)[keyof typeof WriteOffAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WriteOffAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type WriteOffAnInvoiceChargebeeEventEmail =
  (typeof WriteOffAnInvoiceChargebeeEventEmail)[keyof typeof WriteOffAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WriteOffAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type WriteOffAnInvoiceChargebeeEventActions =
  (typeof WriteOffAnInvoiceChargebeeEventActions)[keyof typeof WriteOffAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WriteOffAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type WriteOffAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: WriteOffAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: WriteOffAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: WriteOffAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SendAnEinvoiceForInvoices200 = {
  invoice: Invoice;
};

export type SendAnEinvoiceForInvoicesChargebeeEventWebhook =
  (typeof SendAnEinvoiceForInvoicesChargebeeEventWebhook)[keyof typeof SendAnEinvoiceForInvoicesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendAnEinvoiceForInvoicesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SendAnEinvoiceForInvoicesChargebeeEventEmail =
  (typeof SendAnEinvoiceForInvoicesChargebeeEventEmail)[keyof typeof SendAnEinvoiceForInvoicesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendAnEinvoiceForInvoicesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SendAnEinvoiceForInvoicesChargebeeEventActions =
  (typeof SendAnEinvoiceForInvoicesChargebeeEventActions)[keyof typeof SendAnEinvoiceForInvoicesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SendAnEinvoiceForInvoicesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SendAnEinvoiceForInvoicesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SendAnEinvoiceForInvoicesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SendAnEinvoiceForInvoicesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SendAnEinvoiceForInvoicesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AddOneTimeChargeToAPendingInvoice200 = {
  invoice: Invoice;
};

/**
 * Parameters for line_item

 */
export type AddOneTimeChargeToAPendingInvoiceBodyLineItem = {
  /** The time when the service period for the charge starts.
   */
  date_from?: number;
  /** The time when the service period for the charge ends.
   */
  date_to?: number;
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* retail - Transaction is a sale to an end user \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly

 */
export type AddOneTimeChargeToAPendingInvoiceBodyAvalaraSaleType =
  (typeof AddOneTimeChargeToAPendingInvoiceBodyAvalaraSaleType)[keyof typeof AddOneTimeChargeToAPendingInvoiceBodyAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddOneTimeChargeToAPendingInvoiceBodyAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

export type AddOneTimeChargeToAPendingInvoiceBody = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  amount: number;
  /** Detailed description about this lineitem.
   */
  description: string;
  /** Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* retail - Transaction is a sale to an end user \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly
   */
  avalara_sale_type?: AddOneTimeChargeToAPendingInvoiceBodyAvalaraSaleType;
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number;
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number;
  /** This represents the Avalara tax code to which the one-time charge is mapped. Applicable only if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avatax-for-sales.html).
   */
  avalara_tax_code?: string;
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the one-time charge is mapped for calculating the customer's tax in India. Applicable when both the conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
.
 */
  hsn_code?: string;
  /** This represents the TaxJar product code to which the one-time charge is mapped. Applicable only if you use Chargebee's [TaxJar integration](https://www.chargebee.com/docs/taxjar.html).
   */
  taxjar_product_code?: string;
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** Identifier of the subscription for which this charge needs to be created. Applicable for consolidated invoice.
   */
  subscription_id?: string;
  /** Parameters for line_item
   */
  line_item?: AddOneTimeChargeToAPendingInvoiceBodyLineItem;
};

export type AddOneTimeChargeToAPendingInvoiceChargebeeEventWebhook =
  (typeof AddOneTimeChargeToAPendingInvoiceChargebeeEventWebhook)[keyof typeof AddOneTimeChargeToAPendingInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddOneTimeChargeToAPendingInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddOneTimeChargeToAPendingInvoiceChargebeeEventEmail =
  (typeof AddOneTimeChargeToAPendingInvoiceChargebeeEventEmail)[keyof typeof AddOneTimeChargeToAPendingInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddOneTimeChargeToAPendingInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddOneTimeChargeToAPendingInvoiceChargebeeEventActions =
  (typeof AddOneTimeChargeToAPendingInvoiceChargebeeEventActions)[keyof typeof AddOneTimeChargeToAPendingInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddOneTimeChargeToAPendingInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddOneTimeChargeToAPendingInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddOneTimeChargeToAPendingInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddOneTimeChargeToAPendingInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddOneTimeChargeToAPendingInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type VoidAnInvoice200 = {
  invoice: Invoice;
  credit_note?: CreditNote;
};

export type VoidAnInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** Reason code for voiding the invoice. Select from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Invoices \> Void invoice**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  void_reason_code?: string;
};

export type VoidAnInvoiceChargebeeEventWebhook =
  (typeof VoidAnInvoiceChargebeeEventWebhook)[keyof typeof VoidAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type VoidAnInvoiceChargebeeEventEmail =
  (typeof VoidAnInvoiceChargebeeEventEmail)[keyof typeof VoidAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type VoidAnInvoiceChargebeeEventActions =
  (typeof VoidAnInvoiceChargebeeEventActions)[keyof typeof VoidAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoidAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type VoidAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: VoidAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: VoidAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: VoidAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ApplyPaymentsForAnInvoice200 = {
  invoice: Invoice;
};

/**
 * Parameters for transactions

 */
export type ApplyPaymentsForAnInvoiceBodyTransactions = {
  /** Uniquely identifies the transaction. Excess payments available with the customer will be applied against this invoice if this parameter is not passed.
   */
  id?: string[];
};

export type ApplyPaymentsForAnInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
  /** Parameters for transactions
   */
  transactions?: ApplyPaymentsForAnInvoiceBodyTransactions;
};

export type ApplyPaymentsForAnInvoiceChargebeeEventWebhook =
  (typeof ApplyPaymentsForAnInvoiceChargebeeEventWebhook)[keyof typeof ApplyPaymentsForAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyPaymentsForAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ApplyPaymentsForAnInvoiceChargebeeEventEmail =
  (typeof ApplyPaymentsForAnInvoiceChargebeeEventEmail)[keyof typeof ApplyPaymentsForAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyPaymentsForAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ApplyPaymentsForAnInvoiceChargebeeEventActions =
  (typeof ApplyPaymentsForAnInvoiceChargebeeEventActions)[keyof typeof ApplyPaymentsForAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyPaymentsForAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ApplyPaymentsForAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ApplyPaymentsForAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ApplyPaymentsForAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ApplyPaymentsForAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type StopDunningForInvoice200 = {
  invoice: Invoice;
};

export type StopDunningForInvoiceBody = {
  /** An internal [comment](./comments) to be added for this operation, to the invoice. This comment is displayed on the Chargebee UI. It is not displayed on any customer-facing [Hosted Page](./hosted_pages) or any document such as the [Invoice PDF](./invoices#retrieve_invoice_as_pdf).
   */
  comment?: string;
};

export type StopDunningForInvoiceChargebeeEventWebhook =
  (typeof StopDunningForInvoiceChargebeeEventWebhook)[keyof typeof StopDunningForInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StopDunningForInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type StopDunningForInvoiceChargebeeEventEmail =
  (typeof StopDunningForInvoiceChargebeeEventEmail)[keyof typeof StopDunningForInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StopDunningForInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type StopDunningForInvoiceChargebeeEventActions =
  (typeof StopDunningForInvoiceChargebeeEventActions)[keyof typeof StopDunningForInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StopDunningForInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type StopDunningForInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: StopDunningForInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: StopDunningForInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: StopDunningForInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemovePaymentFromAnInvoice200 = {
  invoice: Invoice;
  transaction: Transaction;
};

/**
 * Parameters for transaction

 */
export type RemovePaymentFromAnInvoiceBodyTransaction = {
  /** Uniquely identifies the transaction.
   */
  id: string;
};

export type RemovePaymentFromAnInvoiceBody = {
  /** Parameters for transaction
   */
  transaction?: RemovePaymentFromAnInvoiceBodyTransaction;
};

export type RemovePaymentFromAnInvoiceChargebeeEventWebhook =
  (typeof RemovePaymentFromAnInvoiceChargebeeEventWebhook)[keyof typeof RemovePaymentFromAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemovePaymentFromAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemovePaymentFromAnInvoiceChargebeeEventEmail =
  (typeof RemovePaymentFromAnInvoiceChargebeeEventEmail)[keyof typeof RemovePaymentFromAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemovePaymentFromAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemovePaymentFromAnInvoiceChargebeeEventActions =
  (typeof RemovePaymentFromAnInvoiceChargebeeEventActions)[keyof typeof RemovePaymentFromAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemovePaymentFromAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemovePaymentFromAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemovePaymentFromAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemovePaymentFromAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemovePaymentFromAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveCreditNoteFromAnInvoice200 = {
  invoice: Invoice;
  credit_note: CreditNote;
};

/**
 * Parameters for credit_note

 */
export type RemoveCreditNoteFromAnInvoiceBodyCreditNote = {
  /** Credit-note id.
   */
  id: string;
};

export type RemoveCreditNoteFromAnInvoiceBody = {
  /** Parameters for credit_note
   */
  credit_note?: RemoveCreditNoteFromAnInvoiceBodyCreditNote;
};

export type RemoveCreditNoteFromAnInvoiceChargebeeEventWebhook =
  (typeof RemoveCreditNoteFromAnInvoiceChargebeeEventWebhook)[keyof typeof RemoveCreditNoteFromAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveCreditNoteFromAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveCreditNoteFromAnInvoiceChargebeeEventEmail =
  (typeof RemoveCreditNoteFromAnInvoiceChargebeeEventEmail)[keyof typeof RemoveCreditNoteFromAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveCreditNoteFromAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveCreditNoteFromAnInvoiceChargebeeEventActions =
  (typeof RemoveCreditNoteFromAnInvoiceChargebeeEventActions)[keyof typeof RemoveCreditNoteFromAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveCreditNoteFromAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveCreditNoteFromAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveCreditNoteFromAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveCreditNoteFromAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveCreditNoteFromAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteLineItems200 = {
  invoice: Invoice;
};

/**
 * The list of line items which have to be deleted.

 */
export type DeleteLineItemsBodyLineItems = {
  /** Uniquely identifies a line_item
   */
  id?: string[];
};

export type DeleteLineItemsBody = {
  /** The list of line items which have to be deleted.
   */
  line_items?: DeleteLineItemsBodyLineItems;
};

export type DeleteLineItemsChargebeeEventWebhook =
  (typeof DeleteLineItemsChargebeeEventWebhook)[keyof typeof DeleteLineItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteLineItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteLineItemsChargebeeEventEmail =
  (typeof DeleteLineItemsChargebeeEventEmail)[keyof typeof DeleteLineItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteLineItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteLineItemsChargebeeEventActions =
  (typeof DeleteLineItemsChargebeeEventActions)[keyof typeof DeleteLineItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteLineItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteLineItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteLineItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteLineItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteLineItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AddPromotionalCredits200 = {
  customer: Customer;
  promotional_credit: PromotionalCredit;
};

/**
 * Type of promotional credits provided to customer. \* general - General \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits

 */
export type AddPromotionalCreditsBodyCreditType =
  (typeof AddPromotionalCreditsBodyCreditType)[keyof typeof AddPromotionalCreditsBodyCreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddPromotionalCreditsBodyCreditType = {
  loyalty_credits: "loyalty_credits",
  referral_rewards: "referral_rewards",
  general: "general",
} as const;

export type AddPromotionalCreditsBody = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Promotional credits amount.
   */
  amount?: number;
  /** Amount in decimal.
   */
  amount_in_decimal?: string;
  /** The currency code (ISO 4217 format) for promotional credit.
   */
  currency_code?: string;
  /** Detailed description of this promotional credits.
   */
  description: string;
  /** Type of promotional credits provided to customer. \* general - General \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits
   */
  credit_type?: AddPromotionalCreditsBodyCreditType;
  /** Describes why promotional credits were provided.
   */
  reference?: string;
};

export type AddPromotionalCreditsChargebeeEventWebhook =
  (typeof AddPromotionalCreditsChargebeeEventWebhook)[keyof typeof AddPromotionalCreditsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddPromotionalCreditsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddPromotionalCreditsChargebeeEventEmail =
  (typeof AddPromotionalCreditsChargebeeEventEmail)[keyof typeof AddPromotionalCreditsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddPromotionalCreditsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddPromotionalCreditsChargebeeEventActions =
  (typeof AddPromotionalCreditsChargebeeEventActions)[keyof typeof AddPromotionalCreditsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddPromotionalCreditsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddPromotionalCreditsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddPromotionalCreditsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddPromotionalCreditsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddPromotionalCreditsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SetPromotionalCredits200 = {
  customer: Customer;
  promotional_credit: PromotionalCredit;
};

/**
 * Type of promotional credits provided to customer. \* general - General \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits

 */
export type SetPromotionalCreditsBodyCreditType =
  (typeof SetPromotionalCreditsBodyCreditType)[keyof typeof SetPromotionalCreditsBodyCreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SetPromotionalCreditsBodyCreditType = {
  loyalty_credits: "loyalty_credits",
  referral_rewards: "referral_rewards",
  general: "general",
} as const;

export type SetPromotionalCreditsBody = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Promotional credits amount.
   */
  amount?: number;
  /** Amount in decimal.
   */
  amount_in_decimal?: string;
  /** The currency code (ISO 4217 format) for promotional credit.
   */
  currency_code?: string;
  /** Detailed description of this promotional credits.
   */
  description: string;
  /** Type of promotional credits provided to customer. \* general - General \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits
   */
  credit_type?: SetPromotionalCreditsBodyCreditType;
  /** Describes why promotional credits were provided.
   */
  reference?: string;
};

export type SetPromotionalCreditsChargebeeEventWebhook =
  (typeof SetPromotionalCreditsChargebeeEventWebhook)[keyof typeof SetPromotionalCreditsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SetPromotionalCreditsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SetPromotionalCreditsChargebeeEventEmail =
  (typeof SetPromotionalCreditsChargebeeEventEmail)[keyof typeof SetPromotionalCreditsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SetPromotionalCreditsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SetPromotionalCreditsChargebeeEventActions =
  (typeof SetPromotionalCreditsChargebeeEventActions)[keyof typeof SetPromotionalCreditsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SetPromotionalCreditsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SetPromotionalCreditsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SetPromotionalCreditsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SetPromotionalCreditsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SetPromotionalCreditsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeductPromotionalCredits200 = {
  customer: Customer;
  promotional_credit: PromotionalCredit;
};

/**
 * Type of promotional credits provided to customer. \* general - General \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits

 */
export type DeductPromotionalCreditsBodyCreditType =
  (typeof DeductPromotionalCreditsBodyCreditType)[keyof typeof DeductPromotionalCreditsBodyCreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeductPromotionalCreditsBodyCreditType = {
  loyalty_credits: "loyalty_credits",
  referral_rewards: "referral_rewards",
  general: "general",
} as const;

export type DeductPromotionalCreditsBody = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Promotional credits amount.
   */
  amount?: number;
  /** Amount in decimal.
   */
  amount_in_decimal?: string;
  /** The currency code (ISO 4217 format) for promotional credit.
   */
  currency_code?: string;
  /** Detailed description of this promotional credits.
   */
  description: string;
  /** Type of promotional credits provided to customer. \* general - General \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits
   */
  credit_type?: DeductPromotionalCreditsBodyCreditType;
  /** Describes why promotional credits were provided.
   */
  reference?: string;
};

export type DeductPromotionalCreditsChargebeeEventWebhook =
  (typeof DeductPromotionalCreditsChargebeeEventWebhook)[keyof typeof DeductPromotionalCreditsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeductPromotionalCreditsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeductPromotionalCreditsChargebeeEventEmail =
  (typeof DeductPromotionalCreditsChargebeeEventEmail)[keyof typeof DeductPromotionalCreditsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeductPromotionalCreditsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeductPromotionalCreditsChargebeeEventActions =
  (typeof DeductPromotionalCreditsChargebeeEventActions)[keyof typeof DeductPromotionalCreditsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeductPromotionalCreditsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeductPromotionalCreditsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeductPromotionalCreditsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeductPromotionalCreditsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeductPromotionalCreditsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListPromotionalCredits200ListItem = {
  promotional_credit: PromotionalCredit;
};

export type ListPromotionalCredits200 = {
  list: ListPromotionalCredits200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListPromotionalCreditsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`increment\` - Increment \* \`decrement\` - Decrement

 */
export type ListPromotionalCreditsTypeIsNot =
  (typeof ListPromotionalCreditsTypeIsNot)[keyof typeof ListPromotionalCreditsTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPromotionalCreditsTypeIsNot = {
  increment: "increment",
  decrement: "decrement",
} as const;

/**
 * \* \`increment\` - Increment \* \`decrement\` - Decrement

 */
export type ListPromotionalCreditsTypeIs =
  (typeof ListPromotionalCreditsTypeIs)[keyof typeof ListPromotionalCreditsTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPromotionalCreditsTypeIs = {
  increment: "increment",
  decrement: "decrement",
} as const;

export type ListPromotionalCreditsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Unique reference ID provided for promotional credits.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "1bkfc8dw2o"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this promotional credit resource is created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[on] = "1435054328"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Type of promotional credits. Possible values are : <dfn>increment, decrement.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is] = "increment"</i>
   */
  type?: {
    /** \* \`increment\` - Increment \* \`decrement\` - Decrement
     */
    is?: ListPromotionalCreditsTypeIs;
    /** \* \`increment\` - Increment \* \`decrement\` - Decrement
     */
    is_not?: ListPromotionalCreditsTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Identifier of the customer.<br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "4gkYnd21ouvW"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
};

export type RetrieveAPromotionalCredit200 = {
  promotional_credit: PromotionalCredit;
};

export type RetrieveAPromotionalCreditHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateCardForACustomer200 = {
  customer: Customer;
  card: Card;
};

export type UpdateCardForACustomerBody = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** The single-use card token returned by vaults like Stripe/Braintree which act as a substitute for your card details. Before calling this API, you should have submitted your card details to the gateway and gotten this token in return.
   **Note:** Supported only for Stripe, Braintree and Authorize.Net. If this value is specified, there is no need to specify other card details (like number, cvv, etc).
   */
  tmp_token?: string;
  /** Cardholder's first name.
   */
  first_name?: string;
  /** Cardholder's last name.
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number: string;
  /** Card expiry month.
   */
  expiry_month: number;
  /** Card expiry year.
   */
  expiry_year: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
.
 */
  billing_country?: string;
};

export type UpdateCardForACustomerChargebeeEventWebhook =
  (typeof UpdateCardForACustomerChargebeeEventWebhook)[keyof typeof UpdateCardForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCardForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateCardForACustomerChargebeeEventEmail =
  (typeof UpdateCardForACustomerChargebeeEventEmail)[keyof typeof UpdateCardForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCardForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateCardForACustomerChargebeeEventActions =
  (typeof UpdateCardForACustomerChargebeeEventActions)[keyof typeof UpdateCardForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateCardForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateCardForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateCardForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateCardForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateCardForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteCardForACustomer200 = {
  customer: Customer;
};

export type DeleteCardForACustomerChargebeeEventWebhook =
  (typeof DeleteCardForACustomerChargebeeEventWebhook)[keyof typeof DeleteCardForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteCardForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteCardForACustomerChargebeeEventEmail =
  (typeof DeleteCardForACustomerChargebeeEventEmail)[keyof typeof DeleteCardForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteCardForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteCardForACustomerChargebeeEventActions =
  (typeof DeleteCardForACustomerChargebeeEventActions)[keyof typeof DeleteCardForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteCardForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteCardForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteCardForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteCardForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteCardForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SwitchGateway200 = {
  customer: Customer;
  card: Card;
};

export type SwitchGatewayBody = {
  /** The gateway account you want to switch to.
   */
  gateway_account_id: string;
};

export type SwitchGatewayChargebeeEventWebhook =
  (typeof SwitchGatewayChargebeeEventWebhook)[keyof typeof SwitchGatewayChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwitchGatewayChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SwitchGatewayChargebeeEventEmail =
  (typeof SwitchGatewayChargebeeEventEmail)[keyof typeof SwitchGatewayChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwitchGatewayChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SwitchGatewayChargebeeEventActions =
  (typeof SwitchGatewayChargebeeEventActions)[keyof typeof SwitchGatewayChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwitchGatewayChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SwitchGatewayHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SwitchGatewayChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SwitchGatewayChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SwitchGatewayChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveCardForACustomer200 = {
  card: Card;
};

export type RetrieveCardForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CopyCard200 = {
  third_party_payment_method: ThirdPartyPaymentMethod;
};

export type CopyCardBody = {
  /** The gateway account you want to copy the card.
   */
  gateway_account_id: string;
};

export type CopyCardChargebeeEventWebhook =
  (typeof CopyCardChargebeeEventWebhook)[keyof typeof CopyCardChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CopyCardChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CopyCardChargebeeEventEmail =
  (typeof CopyCardChargebeeEventEmail)[keyof typeof CopyCardChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CopyCardChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CopyCardChargebeeEventActions =
  (typeof CopyCardChargebeeEventActions)[keyof typeof CopyCardChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CopyCardChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CopyCardHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CopyCardChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CopyCardChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CopyCardChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAVirtualBankAccountUsingPermanentToken200 = {
  virtual_bank_account: VirtualBankAccount;
  customer?: Customer;
};

/**
 * type of the credit transfer. \* sepa_credit - SEPA Credit Transfer \* ach_credit - ACH Credit Transfer

 */
export type CreateAVirtualBankAccountUsingPermanentTokenBodyScheme =
  (typeof CreateAVirtualBankAccountUsingPermanentTokenBodyScheme)[keyof typeof CreateAVirtualBankAccountUsingPermanentTokenBodyScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountUsingPermanentTokenBodyScheme = {
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
} as const;

export type CreateAVirtualBankAccountUsingPermanentTokenBody = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Identifier provided by the gateway for the virtual bank account source. In case of Stripe, the reference_id consists of a combination of Stripe Customer ID and Stripe Source ID separated by a forward slash (e.g. cus_63MnDn0t6kfDW7/src_6WjCF20vT9WN1G).
   */
  reference_id: string;
  /** type of the credit transfer. \* sepa_credit - SEPA Credit Transfer \* ach_credit - ACH Credit Transfer
   */
  scheme?: CreateAVirtualBankAccountUsingPermanentTokenBodyScheme;
};

export type CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventWebhook =
  (typeof CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventWebhook)[keyof typeof CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventWebhook =
  {
    "all-disabled": "all-disabled",
  } as const;

export type CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventEmail =
  (typeof CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventEmail)[keyof typeof CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventActions =
  (typeof CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventActions)[keyof typeof CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventActions =
  {
    "all-disabled": "all-disabled",
  } as const;

export type CreateAVirtualBankAccountUsingPermanentTokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAVirtualBankAccountUsingPermanentTokenChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAVirtualBankAccount200 = {
  virtual_bank_account: VirtualBankAccount;
};

export type RetrieveAVirtualBankAccountHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAVirtualBankAccount200 = {
  virtual_bank_account: VirtualBankAccount;
  customer?: Customer;
};

/**
 * type of the credit transfer. \* sepa_credit - SEPA Credit Transfer \* ach_credit - ACH Credit Transfer

 */
export type CreateAVirtualBankAccountBodyScheme =
  (typeof CreateAVirtualBankAccountBodyScheme)[keyof typeof CreateAVirtualBankAccountBodyScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountBodyScheme = {
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
} as const;

export type CreateAVirtualBankAccountBody = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Email address associated with the virtual bank account.
   */
  email?: string;
  /** type of the credit transfer. \* sepa_credit - SEPA Credit Transfer \* ach_credit - ACH Credit Transfer
   */
  scheme?: CreateAVirtualBankAccountBodyScheme;
};

export type CreateAVirtualBankAccountChargebeeEventWebhook =
  (typeof CreateAVirtualBankAccountChargebeeEventWebhook)[keyof typeof CreateAVirtualBankAccountChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVirtualBankAccountChargebeeEventEmail =
  (typeof CreateAVirtualBankAccountChargebeeEventEmail)[keyof typeof CreateAVirtualBankAccountChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVirtualBankAccountChargebeeEventActions =
  (typeof CreateAVirtualBankAccountChargebeeEventActions)[keyof typeof CreateAVirtualBankAccountChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVirtualBankAccountChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVirtualBankAccountHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAVirtualBankAccountChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAVirtualBankAccountChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAVirtualBankAccountChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListVirtualBankAccounts200ListItem = {
  virtual_bank_account: VirtualBankAccount;
};

export type ListVirtualBankAccounts200 = {
  list: ListVirtualBankAccounts200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListVirtualBankAccountsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListVirtualBankAccountsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Identifier of the customer.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "3bdjnDnsdQn"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this virtual bank account resource was last updated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1435054328"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this virtual bank account resource is created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[after] = "1435054328"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
};

export type DeleteAVirtualBankAccount200 = {
  virtual_bank_account: VirtualBankAccount;
};

export type DeleteAVirtualBankAccountChargebeeEventWebhook =
  (typeof DeleteAVirtualBankAccountChargebeeEventWebhook)[keyof typeof DeleteAVirtualBankAccountChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAVirtualBankAccountChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAVirtualBankAccountChargebeeEventEmail =
  (typeof DeleteAVirtualBankAccountChargebeeEventEmail)[keyof typeof DeleteAVirtualBankAccountChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAVirtualBankAccountChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAVirtualBankAccountChargebeeEventActions =
  (typeof DeleteAVirtualBankAccountChargebeeEventActions)[keyof typeof DeleteAVirtualBankAccountChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAVirtualBankAccountChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAVirtualBankAccountHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAVirtualBankAccountChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAVirtualBankAccountChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAVirtualBankAccountChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type LocalDeleteAVirtualBankAccount200 = {
  virtual_bank_account: VirtualBankAccount;
};

export type LocalDeleteAVirtualBankAccountChargebeeEventWebhook =
  (typeof LocalDeleteAVirtualBankAccountChargebeeEventWebhook)[keyof typeof LocalDeleteAVirtualBankAccountChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalDeleteAVirtualBankAccountChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type LocalDeleteAVirtualBankAccountChargebeeEventEmail =
  (typeof LocalDeleteAVirtualBankAccountChargebeeEventEmail)[keyof typeof LocalDeleteAVirtualBankAccountChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalDeleteAVirtualBankAccountChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type LocalDeleteAVirtualBankAccountChargebeeEventActions =
  (typeof LocalDeleteAVirtualBankAccountChargebeeEventActions)[keyof typeof LocalDeleteAVirtualBankAccountChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalDeleteAVirtualBankAccountChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type LocalDeleteAVirtualBankAccountHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: LocalDeleteAVirtualBankAccountChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: LocalDeleteAVirtualBankAccountChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: LocalDeleteAVirtualBankAccountChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateABankAccountPaymentSource200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * Parameters for bank_account

 */
export type UpdateABankAccountPaymentSourceBodyBankAccount = {
  /** Account holder's first name as per bank account.
   */
  first_name?: string;
  /** Account holder's last name as per bank account.
   */
  last_name?: string;
  /** Account holder's email address. All Direct Debit compliant emails will be sent to this email address.
   */
  email?: string;
};

export type UpdateABankAccountPaymentSourceBody = {
  /** Parameters for bank_account
   */
  bank_account?: UpdateABankAccountPaymentSourceBodyBankAccount;
};

export type UpdateABankAccountPaymentSourceChargebeeEventWebhook =
  (typeof UpdateABankAccountPaymentSourceChargebeeEventWebhook)[keyof typeof UpdateABankAccountPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateABankAccountPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateABankAccountPaymentSourceChargebeeEventEmail =
  (typeof UpdateABankAccountPaymentSourceChargebeeEventEmail)[keyof typeof UpdateABankAccountPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateABankAccountPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateABankAccountPaymentSourceChargebeeEventActions =
  (typeof UpdateABankAccountPaymentSourceChargebeeEventActions)[keyof typeof UpdateABankAccountPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateABankAccountPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateABankAccountPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateABankAccountPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateABankAccountPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateABankAccountPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateABankAccountPaymentSource200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

export type CreateABankAccountPaymentSourceBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** 2-letter(alpha2) ISO country code. Required when local bank details are provided, and not IBAN.
   */
  issuing_country?: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** Parameters for bank_account
   */
  bank_account?: CreateABankAccountPaymentSourceBodyBankAccount;
};

/**
 * The billing address associated with the bank account. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`company_name\`:(string, max chars=250) The company name for the address. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country\`:(string) The name of the country for the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state\`:(string, max chars=50) The name of the state or province for the address. When not provided, this is set automatically for US, Canada, and India. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix. This is supported for USA, Canada, and India. For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.

 */
export type CreateABankAccountPaymentSourceBodyBankAccountBillingAddress = {
  [key: string]: any;
};

/**
 * For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.

 */
export type CreateABankAccountPaymentSourceBodyBankAccountEcheckType =
  (typeof CreateABankAccountPaymentSourceBodyBankAccountEcheckType)[keyof typeof CreateABankAccountPaymentSourceBodyBankAccountEcheckType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateABankAccountPaymentSourceBodyBankAccountEcheckType = {
  web: "web",
  ppd: "ppd",
  ccd: "ccd",
} as const;

/**
 * For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.

 */
export type CreateABankAccountPaymentSourceBodyBankAccountAccountHolderType =
  (typeof CreateABankAccountPaymentSourceBodyBankAccountAccountHolderType)[keyof typeof CreateABankAccountPaymentSourceBodyBankAccountAccountHolderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateABankAccountPaymentSourceBodyBankAccountAccountHolderType = {
  individual: "individual",
  company: "company",
} as const;

/**
 * Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* current - Current Account \* savings - Savings Account \* checking - Checking Account \* business_checking - Business Checking Account

 */
export type CreateABankAccountPaymentSourceBodyBankAccountAccountType =
  (typeof CreateABankAccountPaymentSourceBodyBankAccountAccountType)[keyof typeof CreateABankAccountPaymentSourceBodyBankAccountAccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateABankAccountPaymentSourceBodyBankAccountAccountType = {
  checking: "checking",
  savings: "savings",
  business_checking: "business_checking",
  current: "current",
} as const;

/**
 * Parameters for bank_account

 */
export type CreateABankAccountPaymentSourceBodyBankAccount = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Account holder's International Bank Account Number. For the [GoCardless](https://www.chargebee.com/docs/gocardless.html) platform, this can be the [local bank details](https://developer.gocardless.com/api-reference/#appendix-local-bank-details)
   */
  iban?: string;
  /** Account holder's first name as per bank account. If not passed, details from customer details will be considered.
   */
  first_name?: string;
  /** Account holder's last name as per bank account. If not passed, details from customer details will be considered.
   */
  last_name?: string;
  /** Account holder's company name as per bank account. If not passed, details from customer details will be considered.
   */
  company?: string;
  /** Account holder's email address. If not passed, details from customer details will be considered. All Direct Debit compliant emails will be sent to this email address.
   */
  email?: string;
  /** Phone number of the account holder that is linked to the bank account.
   */
  phone?: string;
  /** Name of account holder's bank.
   */
  bank_name?: string;
  /** Account holder's bank account number.
   */
  account_number?: string;
  /** Bank account routing number.
   */
  routing_number?: string;
  /** Indicates the bank code.
   */
  bank_code?: string;
  /** Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* current - Current Account \* savings - Savings Account \* checking - Checking Account \* business_checking - Business Checking Account
   */
  account_type?: CreateABankAccountPaymentSourceBodyBankAccountAccountType;
  /** For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.
   */
  account_holder_type?: CreateABankAccountPaymentSourceBodyBankAccountAccountHolderType;
  /** For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.
   */
  echeck_type?: CreateABankAccountPaymentSourceBodyBankAccountEcheckType;
  /** For GoCardless Autogiro users only. The civic/company number (personnummer, samordningsnummer, or organisationsnummer) of the customer. Must be supplied if the customer's bank account is denominated in Swedish krona (SEK). This field cannot be changed once it has been set.
   */
  swedish_identity_number?: string;
  /** The billing address associated with the bank account. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`company_name\`:(string, max chars=250) The company name for the address. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country\`:(string) The name of the country for the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state\`:(string, max chars=50) The name of the state or province for the address. When not provided, this is set automatically for US, Canada, and India. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix. This is supported for USA, Canada, and India. For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.
   */
  billing_address?: CreateABankAccountPaymentSourceBodyBankAccountBillingAddress;
};

export type CreateABankAccountPaymentSourceChargebeeEventWebhook =
  (typeof CreateABankAccountPaymentSourceChargebeeEventWebhook)[keyof typeof CreateABankAccountPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateABankAccountPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateABankAccountPaymentSourceChargebeeEventEmail =
  (typeof CreateABankAccountPaymentSourceChargebeeEventEmail)[keyof typeof CreateABankAccountPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateABankAccountPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateABankAccountPaymentSourceChargebeeEventActions =
  (typeof CreateABankAccountPaymentSourceChargebeeEventActions)[keyof typeof CreateABankAccountPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateABankAccountPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateABankAccountPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateABankAccountPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateABankAccountPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateABankAccountPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type LocalDeleteAPaymentSource200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

export type LocalDeleteAPaymentSourceChargebeeEventWebhook =
  (typeof LocalDeleteAPaymentSourceChargebeeEventWebhook)[keyof typeof LocalDeleteAPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalDeleteAPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type LocalDeleteAPaymentSourceChargebeeEventEmail =
  (typeof LocalDeleteAPaymentSourceChargebeeEventEmail)[keyof typeof LocalDeleteAPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalDeleteAPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type LocalDeleteAPaymentSourceChargebeeEventActions =
  (typeof LocalDeleteAPaymentSourceChargebeeEventActions)[keyof typeof LocalDeleteAPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalDeleteAPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type LocalDeleteAPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: LocalDeleteAPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: LocalDeleteAPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: LocalDeleteAPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateUsingChargebeeToken200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

export type CreateUsingChargebeeTokenBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** Token generated by Chargebee JS representing payment method details.
   */
  token_id: string;
};

export type CreateUsingChargebeeTokenChargebeeEventWebhook =
  (typeof CreateUsingChargebeeTokenChargebeeEventWebhook)[keyof typeof CreateUsingChargebeeTokenChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingChargebeeTokenChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingChargebeeTokenChargebeeEventEmail =
  (typeof CreateUsingChargebeeTokenChargebeeEventEmail)[keyof typeof CreateUsingChargebeeTokenChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingChargebeeTokenChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingChargebeeTokenChargebeeEventActions =
  (typeof CreateUsingChargebeeTokenChargebeeEventActions)[keyof typeof CreateUsingChargebeeTokenChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingChargebeeTokenChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingChargebeeTokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateUsingChargebeeTokenChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateUsingChargebeeTokenChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateUsingChargebeeTokenChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type SwitchGatewayAccount200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

export type SwitchGatewayAccountBody = {
  /** The gateway account you want to switch to.
   */
  gateway_account_id: string;
};

export type SwitchGatewayAccountChargebeeEventWebhook =
  (typeof SwitchGatewayAccountChargebeeEventWebhook)[keyof typeof SwitchGatewayAccountChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwitchGatewayAccountChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type SwitchGatewayAccountChargebeeEventEmail =
  (typeof SwitchGatewayAccountChargebeeEventEmail)[keyof typeof SwitchGatewayAccountChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwitchGatewayAccountChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type SwitchGatewayAccountChargebeeEventActions =
  (typeof SwitchGatewayAccountChargebeeEventActions)[keyof typeof SwitchGatewayAccountChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwitchGatewayAccountChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type SwitchGatewayAccountHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: SwitchGatewayAccountChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: SwitchGatewayAccountChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: SwitchGatewayAccountChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateACardPaymentSource200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * Parameters for card

 */
export type UpdateACardPaymentSourceBodyCard = {
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** Card expiry month.
   */
  expiry_month?: number;
  /** Card expiry year.
   */
  expiry_year?: number;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name.
   */
  billing_state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
};

/**
 * Additional data about this resource can be passed to \*\*Stripe\*\* gateway here in the JSON Format. This will be stored along with payment source at the gateway account.

 */
export type UpdateACardPaymentSourceBodyGatewayMetaData = {
  [key: string]: any;
};

export type UpdateACardPaymentSourceBody = {
  /** Additional data about this resource can be passed to \*\*Stripe\*\* gateway here in the JSON Format. This will be stored along with payment source at the gateway account.
   */
  gateway_meta_data?: UpdateACardPaymentSourceBodyGatewayMetaData;
  /** Reference transaction is used for future purchases. This is only applicable for Vantiv.
   */
  reference_transaction?: string;
  /** Parameters for card
   */
  card?: UpdateACardPaymentSourceBodyCard;
};

export type UpdateACardPaymentSourceChargebeeEventWebhook =
  (typeof UpdateACardPaymentSourceChargebeeEventWebhook)[keyof typeof UpdateACardPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACardPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACardPaymentSourceChargebeeEventEmail =
  (typeof UpdateACardPaymentSourceChargebeeEventEmail)[keyof typeof UpdateACardPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACardPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACardPaymentSourceChargebeeEventActions =
  (typeof UpdateACardPaymentSourceChargebeeEventActions)[keyof typeof UpdateACardPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACardPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACardPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateACardPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateACardPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateACardPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateUsingGatewayTemporaryToken200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://www.checkout.com/docs/previous/payments/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your merchant ID for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation. .

 */
export type CreateUsingGatewayTemporaryTokenBodyAdditionalInformation = {
  [key: string]: any;
};

/**
 * Type of payment source. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* dotpay - Payments made via Dotpay. \* bancontact - Payments made via Bancontact Card. \* unionpay - Payments made via UnionPay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* alipay - Payments made via Alipay. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* google_pay - Payments made via Google Pay. \* giropay - Payments made via giropay. \* wechat_pay - Payments made via WeChat Pay. \* ideal - Payments made via iDEAL. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* upi - UPI Payments.

 */
export type CreateUsingGatewayTemporaryTokenBodyType =
  (typeof CreateUsingGatewayTemporaryTokenBodyType)[keyof typeof CreateUsingGatewayTemporaryTokenBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingGatewayTemporaryTokenBodyType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type CreateUsingGatewayTemporaryTokenBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** The gateway account to which the payment source is associated.
   */
  gateway_account_id?: string;
  /** Type of payment source. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* dotpay - Payments made via Dotpay. \* bancontact - Payments made via Bancontact Card. \* unionpay - Payments made via UnionPay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* alipay - Payments made via Alipay. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* google_pay - Payments made via Google Pay. \* giropay - Payments made via giropay. \* wechat_pay - Payments made via WeChat Pay. \* ideal - Payments made via iDEAL. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* upi - UPI Payments.
   */
  type: CreateUsingGatewayTemporaryTokenBodyType;
  /** Single-use token created by payment gateways. In Stripe, a single-use token is created for Apple Pay Wallet, card details or direct debit. In Braintree, a nonce is created for Apple Pay Wallet, PayPal, or card details. In Authorize.net, a nonce is created for card details. In Adyen, an encrypted data is created from the card details.
   */
  tmp_token: string;
  /** 2-letter (alpha2) ISO country code. Indicates your customer's payment method country of issuance. Applicable for PayPal via Braintree.
   */
  issuing_country?: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://www.checkout.com/docs/previous/payments/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your merchant ID for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation. .
   */
  additional_information?: CreateUsingGatewayTemporaryTokenBodyAdditionalInformation;
};

export type CreateUsingGatewayTemporaryTokenChargebeeEventWebhook =
  (typeof CreateUsingGatewayTemporaryTokenChargebeeEventWebhook)[keyof typeof CreateUsingGatewayTemporaryTokenChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingGatewayTemporaryTokenChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingGatewayTemporaryTokenChargebeeEventEmail =
  (typeof CreateUsingGatewayTemporaryTokenChargebeeEventEmail)[keyof typeof CreateUsingGatewayTemporaryTokenChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingGatewayTemporaryTokenChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingGatewayTemporaryTokenChargebeeEventActions =
  (typeof CreateUsingGatewayTemporaryTokenChargebeeEventActions)[keyof typeof CreateUsingGatewayTemporaryTokenChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingGatewayTemporaryTokenChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingGatewayTemporaryTokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateUsingGatewayTemporaryTokenChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateUsingGatewayTemporaryTokenChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateUsingGatewayTemporaryTokenChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateAVoucherPaymentMethod200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * The billing address of the customer. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix.For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.

 */
export type CreateAVoucherPaymentMethodBodyVoucherPaymentSourceBillingAddress =
  { [key: string]: any };

/**
 * Voucher based payment methods \* boleto - Boleto

 */
export type CreateAVoucherPaymentMethodBodyVoucherPaymentSourceVoucherType =
  (typeof CreateAVoucherPaymentMethodBodyVoucherPaymentSourceVoucherType)[keyof typeof CreateAVoucherPaymentMethodBodyVoucherPaymentSourceVoucherType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherPaymentMethodBodyVoucherPaymentSourceVoucherType = {
  boleto: "boleto",
} as const;

/**
 * Parameters for voucher_payment_source

 */
export type CreateAVoucherPaymentMethodBodyVoucherPaymentSource = {
  /** Voucher based payment methods \* boleto - Boleto
   */
  voucher_type: CreateAVoucherPaymentMethodBodyVoucherPaymentSourceVoucherType;
  /** The gateway account to which the payment method is associated.
   */
  gateway_account_id?: string;
  /** Customer Tax id
   */
  tax_id?: string;
  /** The billing address of the customer. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix.For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.
   */
  billing_address?: CreateAVoucherPaymentMethodBodyVoucherPaymentSourceBillingAddress;
};

export type CreateAVoucherPaymentMethodBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** Parameters for voucher_payment_source
   */
  voucher_payment_source?: CreateAVoucherPaymentMethodBodyVoucherPaymentSource;
};

export type CreateAVoucherPaymentMethodChargebeeEventWebhook =
  (typeof CreateAVoucherPaymentMethodChargebeeEventWebhook)[keyof typeof CreateAVoucherPaymentMethodChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherPaymentMethodChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVoucherPaymentMethodChargebeeEventEmail =
  (typeof CreateAVoucherPaymentMethodChargebeeEventEmail)[keyof typeof CreateAVoucherPaymentMethodChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherPaymentMethodChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVoucherPaymentMethodChargebeeEventActions =
  (typeof CreateAVoucherPaymentMethodChargebeeEventActions)[keyof typeof CreateAVoucherPaymentMethodChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAVoucherPaymentMethodChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateAVoucherPaymentMethodHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateAVoucherPaymentMethodChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateAVoucherPaymentMethodChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateAVoucherPaymentMethodChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAPaymentSource200 = {
  payment_source: PaymentSource;
};

export type RetrieveAPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateUsingPaymentIntent200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

export type CreateUsingPaymentIntentBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** Parameters for payment_intent
   */
  payment_intent?: CreateUsingPaymentIntentBodyPaymentIntent;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateUsingPaymentIntentBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * Applicable only for Braintree gateway. Can be used only for Braintree's \[Premium Fraud Management Tools\](https://developer.paypal.com/braintree/articles/guides/fraud-tools/premium/overview). Pass a stringified JSON containing the \`device_session_id\` and \`fraud_merchant_id\` as an input to \`fingerprint\`. Here's a \[sample\](/docs/api/payment_parameters#payment_intent_additonal_info_sample) to it.

 */
export type CreateUsingPaymentIntentBodyPaymentIntentAdditionalInfo = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* dotpay - dotpay \* ideal - ideal \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* card - card \* boleto - boleto \* sofort - sofort \* google_pay - google_pay \* apple_pay - apple_pay \* netbanking_emandates - netbanking_emandates

 */
export type CreateUsingPaymentIntentBodyPaymentIntentPaymentMethodType =
  (typeof CreateUsingPaymentIntentBodyPaymentIntentPaymentMethodType)[keyof typeof CreateUsingPaymentIntentBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPaymentIntentBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type CreateUsingPaymentIntentBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* dotpay - dotpay \* ideal - ideal \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* card - card \* boleto - boleto \* sofort - sofort \* google_pay - google_pay \* apple_pay - apple_pay \* netbanking_emandates - netbanking_emandates
   */
  payment_method_type?: CreateUsingPaymentIntentBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** Applicable only for Braintree gateway. Can be used only for Braintree's \[Premium Fraud Management Tools\](https://developer.paypal.com/braintree/articles/guides/fraud-tools/premium/overview). Pass a stringified JSON containing the \`device_session_id\` and \`fraud_merchant_id\` as an input to \`fingerprint\`. Here's a \[sample\](/docs/api/payment_parameters#payment_intent_additonal_info_sample) to it.
   */
  additional_info?: CreateUsingPaymentIntentBodyPaymentIntentAdditionalInfo;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateUsingPaymentIntentBodyPaymentIntentAdditionalInformation;
};

export type CreateUsingPaymentIntentChargebeeEventWebhook =
  (typeof CreateUsingPaymentIntentChargebeeEventWebhook)[keyof typeof CreateUsingPaymentIntentChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPaymentIntentChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingPaymentIntentChargebeeEventEmail =
  (typeof CreateUsingPaymentIntentChargebeeEventEmail)[keyof typeof CreateUsingPaymentIntentChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPaymentIntentChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingPaymentIntentChargebeeEventActions =
  (typeof CreateUsingPaymentIntentChargebeeEventActions)[keyof typeof CreateUsingPaymentIntentChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPaymentIntentChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingPaymentIntentHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateUsingPaymentIntentChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateUsingPaymentIntentChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateUsingPaymentIntentChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ExportPaymentSource200 = {
  third_party_payment_method: ThirdPartyPaymentMethod;
};

export type ExportPaymentSourceBody = {
  /** The gateway account you want to copy the card.
   */
  gateway_account_id: string;
};

export type ExportPaymentSourceChargebeeEventWebhook =
  (typeof ExportPaymentSourceChargebeeEventWebhook)[keyof typeof ExportPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ExportPaymentSourceChargebeeEventEmail =
  (typeof ExportPaymentSourceChargebeeEventEmail)[keyof typeof ExportPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ExportPaymentSourceChargebeeEventActions =
  (typeof ExportPaymentSourceChargebeeEventActions)[keyof typeof ExportPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ExportPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ExportPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ExportPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ExportPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListPaymentSources200ListItem = {
  payment_source: PaymentSource;
};

export type ListPaymentSources200 = {
  list: ListPaymentSources200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListPaymentSourcesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListPaymentSourcesSortByDesc =
  (typeof ListPaymentSourcesSortByDesc)[keyof typeof ListPaymentSourcesSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPaymentSourcesSortByDesc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListPaymentSourcesSortByAsc =
  (typeof ListPaymentSourcesSortByAsc)[keyof typeof ListPaymentSourcesSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPaymentSourcesSortByAsc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

/**
 * \* \`valid\` - A payment source that is valid and active. \* \`expiring\` - A payment source that is expiring (like card's status based on its expiry date). \* \`expired\` - A payment source that has expired \* \`invalid\` - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* \`pending_verification\` - The payment source needs to be verified

 */
export type ListPaymentSourcesStatusIsNot =
  (typeof ListPaymentSourcesStatusIsNot)[keyof typeof ListPaymentSourcesStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPaymentSourcesStatusIsNot = {
  valid: "valid",
  expiring: "expiring",
  expired: "expired",
  invalid: "invalid",
  pending_verification: "pending_verification",
} as const;

/**
 * \* \`valid\` - A payment source that is valid and active. \* \`expiring\` - A payment source that is expiring (like card's status based on its expiry date). \* \`expired\` - A payment source that has expired \* \`invalid\` - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* \`pending_verification\` - The payment source needs to be verified

 */
export type ListPaymentSourcesStatusIs =
  (typeof ListPaymentSourcesStatusIs)[keyof typeof ListPaymentSourcesStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPaymentSourcesStatusIs = {
  valid: "valid",
  expiring: "expiring",
  expired: "expired",
  invalid: "invalid",
  pending_verification: "pending_verification",
} as const;

/**
 * \* \`card\` - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* \`paypal_express_checkout\` - Payments made via PayPal Express Checkout. \* \`amazon_payments\` - Payments made via Amazon Payments. \* \`direct_debit\` - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* \`generic\` - Payments made via Generic Payment Method. \* \`alipay\` - Payments made via Alipay. \* \`unionpay\` - Payments made via UnionPay. \* \`apple_pay\` - Payments made via Apple Pay. \* \`wechat_pay\` - Payments made via WeChat Pay. \* \`ideal\` - Payments made via iDEAL. \* \`google_pay\` - Payments made via Google Pay. \* \`sofort\` - Payments made via Sofort. \* \`bancontact\` - Payments made via Bancontact Card. \* \`giropay\` - Payments made via giropay. \* \`dotpay\` - Payments made via Dotpay. \* \`upi\` - UPI Payments. \* \`netbanking_emandates\` - Netbanking (eMandates) Payments. \* \`venmo\` - Payments made via Venmo \* \`pay_to\` - Payments made via PayTo \* \`faster_payments\` - Payments made via Faster Payments \* \`sepa_instant_transfer\` - Payments made via Sepa Instant Transfer

 */
export type ListPaymentSourcesTypeIsNot =
  (typeof ListPaymentSourcesTypeIsNot)[keyof typeof ListPaymentSourcesTypeIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPaymentSourcesTypeIsNot = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * \* \`card\` - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* \`paypal_express_checkout\` - Payments made via PayPal Express Checkout. \* \`amazon_payments\` - Payments made via Amazon Payments. \* \`direct_debit\` - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* \`generic\` - Payments made via Generic Payment Method. \* \`alipay\` - Payments made via Alipay. \* \`unionpay\` - Payments made via UnionPay. \* \`apple_pay\` - Payments made via Apple Pay. \* \`wechat_pay\` - Payments made via WeChat Pay. \* \`ideal\` - Payments made via iDEAL. \* \`google_pay\` - Payments made via Google Pay. \* \`sofort\` - Payments made via Sofort. \* \`bancontact\` - Payments made via Bancontact Card. \* \`giropay\` - Payments made via giropay. \* \`dotpay\` - Payments made via Dotpay. \* \`upi\` - UPI Payments. \* \`netbanking_emandates\` - Netbanking (eMandates) Payments. \* \`venmo\` - Payments made via Venmo \* \`pay_to\` - Payments made via PayTo \* \`faster_payments\` - Payments made via Faster Payments \* \`sepa_instant_transfer\` - Payments made via Sepa Instant Transfer

 */
export type ListPaymentSourcesTypeIs =
  (typeof ListPaymentSourcesTypeIs)[keyof typeof ListPaymentSourcesTypeIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListPaymentSourcesTypeIs = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type ListPaymentSourcesParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * Unique subscription identifier that helps to retrieve the payment source of a subscription which has <code>mandate</code> associated to it.
   */
  subscription_id?: string;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>To filter based on  Customer Id.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "3bdjnDnsdQn"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Type of payment source. Possible values are : <dfn>card, paypal_express_checkout, amazon_payments, direct_debit, generic, alipay, unionpay, apple_pay, wechat_pay, ideal, google_pay, sofort, bancontact, giropay, dotpay, upi, netbanking_emandates.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>type[is] = "card"</i>
   */
  type?: {
    /** \* \`card\` - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* \`paypal_express_checkout\` - Payments made via PayPal Express Checkout. \* \`amazon_payments\` - Payments made via Amazon Payments. \* \`direct_debit\` - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* \`generic\` - Payments made via Generic Payment Method. \* \`alipay\` - Payments made via Alipay. \* \`unionpay\` - Payments made via UnionPay. \* \`apple_pay\` - Payments made via Apple Pay. \* \`wechat_pay\` - Payments made via WeChat Pay. \* \`ideal\` - Payments made via iDEAL. \* \`google_pay\` - Payments made via Google Pay. \* \`sofort\` - Payments made via Sofort. \* \`bancontact\` - Payments made via Bancontact Card. \* \`giropay\` - Payments made via giropay. \* \`dotpay\` - Payments made via Dotpay. \* \`upi\` - UPI Payments. \* \`netbanking_emandates\` - Netbanking (eMandates) Payments. \* \`venmo\` - Payments made via Venmo \* \`pay_to\` - Payments made via PayTo \* \`faster_payments\` - Payments made via Faster Payments \* \`sepa_instant_transfer\` - Payments made via Sepa Instant Transfer
     */
    is?: ListPaymentSourcesTypeIs;
    /** \* \`card\` - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* \`paypal_express_checkout\` - Payments made via PayPal Express Checkout. \* \`amazon_payments\` - Payments made via Amazon Payments. \* \`direct_debit\` - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* \`generic\` - Payments made via Generic Payment Method. \* \`alipay\` - Payments made via Alipay. \* \`unionpay\` - Payments made via UnionPay. \* \`apple_pay\` - Payments made via Apple Pay. \* \`wechat_pay\` - Payments made via WeChat Pay. \* \`ideal\` - Payments made via iDEAL. \* \`google_pay\` - Payments made via Google Pay. \* \`sofort\` - Payments made via Sofort. \* \`bancontact\` - Payments made via Bancontact Card. \* \`giropay\` - Payments made via giropay. \* \`dotpay\` - Payments made via Dotpay. \* \`upi\` - UPI Payments. \* \`netbanking_emandates\` - Netbanking (eMandates) Payments. \* \`venmo\` - Payments made via Venmo \* \`pay_to\` - Payments made via PayTo \* \`faster_payments\` - Payments made via Faster Payments \* \`sepa_instant_transfer\` - Payments made via Sepa Instant Transfer
     */
    is_not?: ListPaymentSourcesTypeIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current status of the payment source. Possible values are : <dfn>valid, expiring, expired, invalid, pending_verification.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is] = "valid"</i>
   */
  status?: {
    /** \* \`valid\` - A payment source that is valid and active. \* \`expiring\` - A payment source that is expiring (like card's status based on its expiry date). \* \`expired\` - A payment source that has expired \* \`invalid\` - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* \`pending_verification\` - The payment source needs to be verified
     */
    is?: ListPaymentSourcesStatusIs;
    /** \* \`valid\` - A payment source that is valid and active. \* \`expiring\` - A payment source that is expiring (like card's status based on its expiry date). \* \`expired\` - A payment source that has expired \* \`invalid\` - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* \`pending_verification\` - The payment source needs to be verified
     */
    is_not?: ListPaymentSourcesStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this payment source resource was last updated.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[on] = "1435054328"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this payment source resource is created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[on] = "1435054328"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>created_at, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "created_at"</i><br>This will sort the result based on the 'created_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListPaymentSourcesSortByAsc;
    desc?: ListPaymentSourcesSortByDesc;
  };
};

export type VerifyBankAccountPaymentSource200 = {
  payment_source: PaymentSource;
};

export type VerifyBankAccountPaymentSourceBody = {
  /** Value of the micro-deposits sent to the bank account.
   */
  amount1: number;
  /** Value of the micro-deposits sent to the bank account.
   */
  amount2: number;
};

export type VerifyBankAccountPaymentSourceChargebeeEventWebhook =
  (typeof VerifyBankAccountPaymentSourceChargebeeEventWebhook)[keyof typeof VerifyBankAccountPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VerifyBankAccountPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type VerifyBankAccountPaymentSourceChargebeeEventEmail =
  (typeof VerifyBankAccountPaymentSourceChargebeeEventEmail)[keyof typeof VerifyBankAccountPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VerifyBankAccountPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type VerifyBankAccountPaymentSourceChargebeeEventActions =
  (typeof VerifyBankAccountPaymentSourceChargebeeEventActions)[keyof typeof VerifyBankAccountPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VerifyBankAccountPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type VerifyBankAccountPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: VerifyBankAccountPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: VerifyBankAccountPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: VerifyBankAccountPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateACardPaymentSource200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateACardPaymentSourceBodyCardAdditionalInformation = {
  [key: string]: any;
};

/**
 * Parameters for card

 */
export type CreateACardPaymentSourceBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number: string;
  /** Card expiry month.
   */
  expiry_month: number;
  /** Card expiry year.
   */
  expiry_year: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateACardPaymentSourceBodyCardAdditionalInformation;
};

export type CreateACardPaymentSourceBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** Parameters for card
   */
  card?: CreateACardPaymentSourceBodyCard;
};

export type CreateACardPaymentSourceChargebeeEventWebhook =
  (typeof CreateACardPaymentSourceChargebeeEventWebhook)[keyof typeof CreateACardPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACardPaymentSourceChargebeeEventEmail =
  (typeof CreateACardPaymentSourceChargebeeEventEmail)[keyof typeof CreateACardPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACardPaymentSourceChargebeeEventActions =
  (typeof CreateACardPaymentSourceChargebeeEventActions)[keyof typeof CreateACardPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACardPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateACardPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateACardPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateACardPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteAPaymentSource200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

export type DeleteAPaymentSourceChargebeeEventWebhook =
  (typeof DeleteAPaymentSourceChargebeeEventWebhook)[keyof typeof DeleteAPaymentSourceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAPaymentSourceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAPaymentSourceChargebeeEventEmail =
  (typeof DeleteAPaymentSourceChargebeeEventEmail)[keyof typeof DeleteAPaymentSourceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAPaymentSourceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAPaymentSourceChargebeeEventActions =
  (typeof DeleteAPaymentSourceChargebeeEventActions)[keyof typeof DeleteAPaymentSourceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteAPaymentSourceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteAPaymentSourceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteAPaymentSourceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteAPaymentSourceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteAPaymentSourceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateUsingPermanentToken200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://www.checkout.com/docs/previous/payments/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your merchant ID for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation. .

 */
export type CreateUsingPermanentTokenBodyAdditionalInformation = {
  [key: string]: any;
};

/**
 * The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* dotpay - Payments made via Dotpay. \* bancontact - Payments made via Bancontact Card. \* unionpay - Payments made via UnionPay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* alipay - Payments made via Alipay. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* google_pay - Payments made via Google Pay. \* giropay - Payments made via giropay. \* wechat_pay - Payments made via WeChat Pay. \* ideal - Payments made via iDEAL. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* upi - UPI Payments.

 */
export type CreateUsingPermanentTokenBodyType =
  (typeof CreateUsingPermanentTokenBodyType)[keyof typeof CreateUsingPermanentTokenBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPermanentTokenBodyType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type CreateUsingPermanentTokenBody = {
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* dotpay - Payments made via Dotpay. \* bancontact - Payments made via Bancontact Card. \* unionpay - Payments made via UnionPay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* alipay - Payments made via Alipay. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* google_pay - Payments made via Google Pay. \* giropay - Payments made via giropay. \* wechat_pay - Payments made via WeChat Pay. \* ideal - Payments made via iDEAL. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* upi - UPI Payments.
   */
  type: CreateUsingPermanentTokenBodyType;
  /** The gateway account to which the payment source is associated.
   */
  gateway_account_id?: string;
  /** The reference id. In the case of Amazon and PayPal this will be the *billing agreement id* . For GoCardless direct debit this will be 'mandate id'. In the case of card this will be the identifier provided by the gateway/card vault for the specific payment method resource. **Note:** This is not the one-time temporary token provided by gateways like Stripe.
   */
  reference_id: string;
  /** 2-letter (alpha2) ISO country code. Indicates your customer's payment method country of issuance. Applicable for PayPal via Braintree.
   */
  issuing_country?: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://www.checkout.com/docs/previous/payments/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your merchant ID for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation. .
   */
  additional_information?: CreateUsingPermanentTokenBodyAdditionalInformation;
};

export type CreateUsingPermanentTokenChargebeeEventWebhook =
  (typeof CreateUsingPermanentTokenChargebeeEventWebhook)[keyof typeof CreateUsingPermanentTokenChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPermanentTokenChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingPermanentTokenChargebeeEventEmail =
  (typeof CreateUsingPermanentTokenChargebeeEventEmail)[keyof typeof CreateUsingPermanentTokenChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPermanentTokenChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingPermanentTokenChargebeeEventActions =
  (typeof CreateUsingPermanentTokenChargebeeEventActions)[keyof typeof CreateUsingPermanentTokenChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingPermanentTokenChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingPermanentTokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateUsingPermanentTokenChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateUsingPermanentTokenChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateUsingPermanentTokenChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAToken200 = {
  token: Token;
};

export type RetrieveATokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateACardPaymentMethodToken200 = {
  token: Token;
};

/**
 * Type of the card \* not_applicable - Used for offline entries in transactions. Not applicable for cards \* visa - A Visa card. \* jcb - A JCB card. \* diners_club - A Diner's Club card. \* other - Card belonging to types other than those listed above. \* discover - A Discover card. \* american_express - An American Express card. \* bancontact - A Bancontact card. \* mastercard - A MasterCard.

 */
export type CreateACardPaymentMethodTokenBodyCardCardType =
  (typeof CreateACardPaymentMethodTokenBodyCardCardType)[keyof typeof CreateACardPaymentMethodTokenBodyCardCardType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentMethodTokenBodyCardCardType = {
  visa: "visa",
  mastercard: "mastercard",
  american_express: "american_express",
  discover: "discover",
  jcb: "jcb",
  diners_club: "diners_club",
  bancontact: "bancontact",
  other: "other",
  not_applicable: "not_applicable",
} as const;

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateACardPaymentMethodTokenBodyCardAdditionalInformation = {
  [key: string]: any;
};

/**
 * Parameters for card

 */
export type CreateACardPaymentMethodTokenBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number: string;
  /** Card expiry month.
   */
  expiry_month: number;
  /** Card expiry year.
   */
  expiry_year: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateACardPaymentMethodTokenBodyCardAdditionalInformation;
  /** Type of the card \* not_applicable - Used for offline entries in transactions. Not applicable for cards \* visa - A Visa card. \* jcb - A JCB card. \* diners_club - A Diner's Club card. \* other - Card belonging to types other than those listed above. \* discover - A Discover card. \* american_express - An American Express card. \* bancontact - A Bancontact card. \* mastercard - A MasterCard.
   */
  card_type?: CreateACardPaymentMethodTokenBodyCardCardType;
};

export type CreateACardPaymentMethodTokenBody = {
  /** Parameters for card
   */
  card?: CreateACardPaymentMethodTokenBodyCard;
};

export type CreateACardPaymentMethodTokenChargebeeEventWebhook =
  (typeof CreateACardPaymentMethodTokenChargebeeEventWebhook)[keyof typeof CreateACardPaymentMethodTokenChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentMethodTokenChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACardPaymentMethodTokenChargebeeEventEmail =
  (typeof CreateACardPaymentMethodTokenChargebeeEventEmail)[keyof typeof CreateACardPaymentMethodTokenChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentMethodTokenChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACardPaymentMethodTokenChargebeeEventActions =
  (typeof CreateACardPaymentMethodTokenChargebeeEventActions)[keyof typeof CreateACardPaymentMethodTokenChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACardPaymentMethodTokenChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACardPaymentMethodTokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateACardPaymentMethodTokenChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateACardPaymentMethodTokenChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateACardPaymentMethodTokenChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateUsingVaultTempToken200 = {
  token: Token;
};

/**
 * Parameters for token_billing_address

 */
export type CreateUsingVaultTempTokenBodyTokenBillingAddress = {
  /** Address line 1, as available in card billing address.
   */
  line1?: string;
  /** Address line 2, as available in card billing address.
   */
  line2?: string;
  /** City, as available in card billing address.
   */
  city?: string;
  /** The state/province name.
   */
  state?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country_code?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  zip?: string;
};

/**
 * Parameters for token_additional_detail

 */
export type CreateUsingVaultTempTokenBodyTokenAdditionalDetail = {
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** Card expiry month.
   */
  expiry_month?: number;
  /** Card expiry year.
   */
  expiry_year?: number;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation. .

 */
export type CreateUsingVaultTempTokenBodyAdditionalInformation = {
  [key: string]: any;
};

/**
 * Type of payment method of the token. \* google_pay - Payments made via Google Pay. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* ideal - Payments made via iDEAL. \* amazon_payments - Payments made via Amazon Payments. \* bancontact - Payments made via Bancontact Card. \* netbanking_emandates - Netbanking (eMandates) Payments. \* alipay - Payments made via Alipay. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* dotpay - Payments made via Dotpay. \* giropay - Payments made via giropay. \* upi - UPI Payments. \* sofort - Payments made via Sofort. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* generic - Payments made via Generic Payment Method. \* wechat_pay - Payments made via WeChat Pay. \* paypal_express_checkout - Payments made via PayPal Express Checkout.

 */
export type CreateUsingVaultTempTokenBodyPaymentMethodType =
  (typeof CreateUsingVaultTempTokenBodyPaymentMethodType)[keyof typeof CreateUsingVaultTempTokenBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingVaultTempTokenBodyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type CreateUsingVaultTempTokenBody = {
  /** The gateway account to which the token is associated.
   */
  gateway_account_id?: string;
  /** Type of payment method of the token. \* google_pay - Payments made via Google Pay. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* ideal - Payments made via iDEAL. \* amazon_payments - Payments made via Amazon Payments. \* bancontact - Payments made via Bancontact Card. \* netbanking_emandates - Netbanking (eMandates) Payments. \* alipay - Payments made via Alipay. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* dotpay - Payments made via Dotpay. \* giropay - Payments made via giropay. \* upi - UPI Payments. \* sofort - Payments made via Sofort. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* generic - Payments made via Generic Payment Method. \* wechat_pay - Payments made via WeChat Pay. \* paypal_express_checkout - Payments made via PayPal Express Checkout.
   */
  payment_method_type: CreateUsingVaultTempTokenBodyPaymentMethodType;
  /** Single-use token created by payment gateways. In Stripe, a single-use token is created for Apple Pay Wallet, card details or direct debit. In Braintree, a nonce is created for Apple Pay Wallet, PayPal, or card details. In Authorize.net, a nonce is created for card details. In Adyen, an encrypted data is created from the card details.
   */
  id_at_vault: string;
  /** Represents what type of object at gateway eg. "token" in case Stripe token and "source" in case of Stripe Source.
   */
  gw_obj_type?: string;
  /** Used to derieve Bank Account Scheme by default will take site default currency.
   */
  currency_code?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation. .
   */
  additional_information?: CreateUsingVaultTempTokenBodyAdditionalInformation;
  /** Parameters for token_additional_detail
   */
  token_additional_detail?: CreateUsingVaultTempTokenBodyTokenAdditionalDetail;
  /** Parameters for token_billing_address
   */
  token_billing_address?: CreateUsingVaultTempTokenBodyTokenBillingAddress;
};

export type CreateUsingVaultTempTokenChargebeeEventWebhook =
  (typeof CreateUsingVaultTempTokenChargebeeEventWebhook)[keyof typeof CreateUsingVaultTempTokenChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingVaultTempTokenChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingVaultTempTokenChargebeeEventEmail =
  (typeof CreateUsingVaultTempTokenChargebeeEventEmail)[keyof typeof CreateUsingVaultTempTokenChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingVaultTempTokenChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingVaultTempTokenChargebeeEventActions =
  (typeof CreateUsingVaultTempTokenChargebeeEventActions)[keyof typeof CreateUsingVaultTempTokenChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUsingVaultTempTokenChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateUsingVaultTempTokenHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateUsingVaultTempTokenChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateUsingVaultTempTokenChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateUsingVaultTempTokenChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateBillingInfoForACustomer200 = {
  customer: Customer;
  card?: Card;
};

/**
 * The operation to be performed for the `entity_identifier`. \* update - Updates an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case. \* delete - Deletes an existing `entity_identifier` for the customer. `entity_identifier[id]` must be provided in this case. \* create - Creates a new `entity_identifier` for the customer.

 */
export type UpdateBillingInfoForACustomerBodyEntityIdentifiersOperationItem =
  (typeof UpdateBillingInfoForACustomerBodyEntityIdentifiersOperationItem)[keyof typeof UpdateBillingInfoForACustomerBodyEntityIdentifiersOperationItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateBillingInfoForACustomerBodyEntityIdentifiersOperationItem = {
  create: "create",
  update: "update",
  delete: "delete",
} as const;

/**
 * Parameters for entity_identifiers

 */
export type UpdateBillingInfoForACustomerBodyEntityIdentifiers = {
  /** The unique id for the `entity_identifier[i]` in Chargebee. This is required when `entity_identifier[operation][i]` is `update` or `delete`.
   */
  id?: string[];
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  scheme?: string[];
  /** The value of the `entity_identifier`. This identifies the customer entity on the Peppol network. For example: `10101010-STO-10`.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  value?: string[];
  operation?: UpdateBillingInfoForACustomerBodyEntityIdentifiersOperationItem[];
  /** The standard used for specifying the `entity_identifier` `scheme`. Currently, only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  standard?: string[];
};

export type UpdateBillingInfoForACustomerBody = {
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
.
 */
  entity_identifier_scheme?: string;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
.
 */
  entity_identifier_standard?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
  /** Confirms that a customer is a valid business without an EU/UK VAT number.
   */
  business_customer_without_vat_number?: boolean;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
.
 */
  is_einvoice_enabled?: boolean;
  /** Determines whether to send einvoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.
   */
  einvoicing_method?: UpdateBillingInfoForACustomerBodyEinvoicingMethod;
  /** Parameters for billing_address
   */
  billing_address?: UpdateBillingInfoForACustomerBodyBillingAddress;
  /** Parameters for entity_identifiers
   */
  entity_identifiers?: UpdateBillingInfoForACustomerBodyEntityIdentifiers;
};

/**
 * The address verification status. \* invalid - Address is invalid. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated.

 */
export type UpdateBillingInfoForACustomerBodyBillingAddressValidationStatus =
  (typeof UpdateBillingInfoForACustomerBodyBillingAddressValidationStatus)[keyof typeof UpdateBillingInfoForACustomerBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateBillingInfoForACustomerBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type UpdateBillingInfoForACustomerBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).  
**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.  
**E-Invoicing**


If `country` is provided as different from the existing value and if `entity_identifier_scheme`, `entity_identifier_standard`, and `entity_identifier` already exist and are not provided for this operation, they're cleared.
 */
  country?: string;
  /** The address verification status. \* invalid - Address is invalid. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated.
   */
  validation_status?: UpdateBillingInfoForACustomerBodyBillingAddressValidationStatus;
};

/**
 * Determines whether to send einvoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.

 */
export type UpdateBillingInfoForACustomerBodyEinvoicingMethod =
  (typeof UpdateBillingInfoForACustomerBodyEinvoicingMethod)[keyof typeof UpdateBillingInfoForACustomerBodyEinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateBillingInfoForACustomerBodyEinvoicingMethod = {
  automatic: "automatic",
  manual: "manual",
  site_default: "site_default",
} as const;

export type UpdateBillingInfoForACustomerChargebeeEventWebhook =
  (typeof UpdateBillingInfoForACustomerChargebeeEventWebhook)[keyof typeof UpdateBillingInfoForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateBillingInfoForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateBillingInfoForACustomerChargebeeEventEmail =
  (typeof UpdateBillingInfoForACustomerChargebeeEventEmail)[keyof typeof UpdateBillingInfoForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateBillingInfoForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateBillingInfoForACustomerChargebeeEventActions =
  (typeof UpdateBillingInfoForACustomerChargebeeEventActions)[keyof typeof UpdateBillingInfoForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateBillingInfoForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateBillingInfoForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateBillingInfoForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateBillingInfoForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateBillingInfoForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateHierarchyAccessSettingsForACustomer200 = {
  customer: Customer;
};

/**
 * Sets the child's level of access to its own invoices on the Self-Serve Portal. \* view_only - The child account can only view its invoices and not download them. \* no - The child account can neither view nor download its own invoices. \* yes - The child account can view and download its own invoices.

 */
export type UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalDownloadInvoices =
  (typeof UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalDownloadInvoices)[keyof typeof UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalDownloadInvoices];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalDownloadInvoices =
  {
    yes: "yes",
    view_only: "view_only",
    no: "no",
  } as const;

/**
 * Sets the child's level of access to its own subscriptions on the Self-Serve Portal. \* view_only - The child account can only view its own subscriptions. \* yes - The child account can view and edit its own subscriptions.

 */
export type UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalEditSubscriptions =
  (typeof UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalEditSubscriptions)[keyof typeof UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalEditSubscriptions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalEditSubscriptions =
  {
    yes: "yes",
    view_only: "view_only",
  } as const;

/**
 * Parameters for child_account_access

 */
export type UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccess = {
  /** Sets the child's level of access to its own subscriptions on the Self-Serve Portal. \* view_only - The child account can only view its own subscriptions. \* yes - The child account can view and edit its own subscriptions.
   */
  portal_edit_subscriptions?: UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalEditSubscriptions;
  /** Sets the child's level of access to its own invoices on the Self-Serve Portal. \* view_only - The child account can only view its invoices and not download them. \* no - The child account can neither view nor download its own invoices. \* yes - The child account can view and download its own invoices.
   */
  portal_download_invoices?: UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccessPortalDownloadInvoices;
  /** If `true`, the child account will receive subscription-related emails for its own subscriptions.
   */
  send_subscription_emails?: boolean;
  /** If `true`, the child account will receive payment-related emails for its own invoices.
   */
  send_payment_emails?: boolean;
  /** If `true`, the child account will receive invoice-related emails for its own invoices.
   */
  send_invoice_emails?: boolean;
};

/**
 * Sets parent's level of access to child invoices on the Self-Serve Portal. \* yes - The parent account can view and download the invoices of the child account. \* no - The parent account can neither view nor download the invoices of the child account. \* view_only - The parent account can only view the invoices of the child account.

 */
export type UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalDownloadChildInvoices =
  (typeof UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalDownloadChildInvoices)[keyof typeof UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalDownloadChildInvoices];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalDownloadChildInvoices =
  {
    yes: "yes",
    view_only: "view_only",
    no: "no",
  } as const;

/**
 * Sets parent's level of access to child subscriptions on the Self-Serve Portal. \* yes - The parent account can view and edit the subscriptions of the child account. \* no - The parent account cannot view or edit the subscriptions of the child account. \* view_only - The parent account can only view the subscriptions of the child account.

 */
export type UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalEditChildSubscriptions =
  (typeof UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalEditChildSubscriptions)[keyof typeof UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalEditChildSubscriptions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalEditChildSubscriptions =
  {
    yes: "yes",
    view_only: "view_only",
    no: "no",
  } as const;

/**
 * Parameters for parent_account_access

 */
export type UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccess = {
  /** Sets parent's level of access to child subscriptions on the Self-Serve Portal. \* yes - The parent account can view and edit the subscriptions of the child account. \* no - The parent account cannot view or edit the subscriptions of the child account. \* view_only - The parent account can only view the subscriptions of the child account.
   */
  portal_edit_child_subscriptions?: UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalEditChildSubscriptions;
  /** Sets parent's level of access to child invoices on the Self-Serve Portal. \* yes - The parent account can view and download the invoices of the child account. \* no - The parent account can neither view nor download the invoices of the child account. \* view_only - The parent account can only view the invoices of the child account.
   */
  portal_download_child_invoices?: UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccessPortalDownloadChildInvoices;
  /** If `true`, the parent account will receive subscription-related emails sent to the child account.
   */
  send_subscription_emails?: boolean;
  /** If `true`, the parent account will receive payment-related emails sent to the child account.
   */
  send_payment_emails?: boolean;
  /** If `true`, the parent account will receive invoice-related emails sent to the child account.
   */
  send_invoice_emails?: boolean;
};

export type UpdateHierarchyAccessSettingsForACustomerBody = {
  /** Determines whether the site default settings are applied for the access levels.

* Value set to `true`: Removes any customized access levels for the customer. The global settings configured in the admin console now apply.
* Value set to `false`: Changes the access levels for this customer. Pass the `parent_account_access` and `child_account_access` parameters to specify the new settings. If you skip passing any parameters, they will remain unchanged.
.
 */
  use_default_hierarchy_settings?: boolean;
  /** Parameters for parent_account_access
   */
  parent_account_access?: UpdateHierarchyAccessSettingsForACustomerBodyParentAccountAccess;
  /** Parameters for child_account_access
   */
  child_account_access?: UpdateHierarchyAccessSettingsForACustomerBodyChildAccountAccess;
};

export type UpdateHierarchyAccessSettingsForACustomerChargebeeEventWebhook =
  (typeof UpdateHierarchyAccessSettingsForACustomerChargebeeEventWebhook)[keyof typeof UpdateHierarchyAccessSettingsForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateHierarchyAccessSettingsForACustomerChargebeeEventEmail =
  (typeof UpdateHierarchyAccessSettingsForACustomerChargebeeEventEmail)[keyof typeof UpdateHierarchyAccessSettingsForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateHierarchyAccessSettingsForACustomerChargebeeEventActions =
  (typeof UpdateHierarchyAccessSettingsForACustomerChargebeeEventActions)[keyof typeof UpdateHierarchyAccessSettingsForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateHierarchyAccessSettingsForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateHierarchyAccessSettingsForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateHierarchyAccessSettingsForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateHierarchyAccessSettingsForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateHierarchyAccessSettingsForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateContactsForACustomer200 = {
  customer: Customer;
  card?: Card;
};

/**
 * Parameters for contact

 */
export type UpdateContactsForACustomerBodyContact = {
  /** Unique reference ID provided for the contact.
   */
  id: string;
  /** First name of the contact.
   */
  first_name?: string;
  /** Last name of the contact.
   */
  last_name?: string;
  /** Email of the contact.
   */
  email?: string;
  /** Phone number of the contact.
   */
  phone?: string;
  /** Label/Tag provided for contact.
   */
  label?: string;
  /** Contact enabled / disabled
   */
  enabled?: boolean;
  /** Whether Billing Emails option is enabled for the contact.
   */
  send_billing_email?: boolean;
  /** Whether Account Emails option is enabled for the contact.
   */
  send_account_email?: boolean;
};

export type UpdateContactsForACustomerBody = {
  /** Parameters for contact
   */
  contact?: UpdateContactsForACustomerBodyContact;
};

export type UpdateContactsForACustomerChargebeeEventWebhook =
  (typeof UpdateContactsForACustomerChargebeeEventWebhook)[keyof typeof UpdateContactsForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateContactsForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateContactsForACustomerChargebeeEventEmail =
  (typeof UpdateContactsForACustomerChargebeeEventEmail)[keyof typeof UpdateContactsForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateContactsForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateContactsForACustomerChargebeeEventActions =
  (typeof UpdateContactsForACustomerChargebeeEventActions)[keyof typeof UpdateContactsForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateContactsForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateContactsForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateContactsForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateContactsForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateContactsForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RecordAnExcessPaymentForACustomer200 = {
  customer: Customer;
  transaction: Transaction;
};

/**
 * The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay

 */
export type RecordAnExcessPaymentForACustomerBodyTransactionPaymentMethod =
  (typeof RecordAnExcessPaymentForACustomerBodyTransactionPaymentMethod)[keyof typeof RecordAnExcessPaymentForACustomerBodyTransactionPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnExcessPaymentForACustomerBodyTransactionPaymentMethod = {
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for transaction

 */
export type RecordAnExcessPaymentForACustomerBodyTransaction = {
  /** The payment transaction amount
   */
  amount: number;
  /** The currency code (ISO 4217 format) for the transaction.
   */
  currency_code?: string;
  /** Indicates when this transaction occurred.
   */
  date: number;
  /** The payment method of this transaction \* cash - Cash \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* ideal - IDEAL \* check - Check \* upi - upi \* alipay - Alipay \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* sofort - Sofort \* direct_debit - Direct Debit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* unionpay - Unionpay \* apple_pay - Apple Pay \* dotpay - Dotpay \* netbanking_emandates - netbanking_emandates \* amazon_payments - Amazon Payments \* wechat_pay - WeChat Pay \* google_pay - Google Pay \* card - Card \* other - Payment Methods other than the above types \* boleto - boleto \* giropay - giropay
   */
  payment_method: RecordAnExcessPaymentForACustomerBodyTransactionPaymentMethod;
  /** The reference number for this transaction. e.g check number in case of 'check' payments.
   */
  reference_number?: string;
};

export type RecordAnExcessPaymentForACustomerBody = {
  /** Remarks, if any, on the payment.
   */
  comment?: string;
  /** Parameters for transaction
   */
  transaction?: RecordAnExcessPaymentForACustomerBodyTransaction;
};

export type RecordAnExcessPaymentForACustomerChargebeeEventWebhook =
  (typeof RecordAnExcessPaymentForACustomerChargebeeEventWebhook)[keyof typeof RecordAnExcessPaymentForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnExcessPaymentForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnExcessPaymentForACustomerChargebeeEventEmail =
  (typeof RecordAnExcessPaymentForACustomerChargebeeEventEmail)[keyof typeof RecordAnExcessPaymentForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnExcessPaymentForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnExcessPaymentForACustomerChargebeeEventActions =
  (typeof RecordAnExcessPaymentForACustomerChargebeeEventActions)[keyof typeof RecordAnExcessPaymentForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordAnExcessPaymentForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RecordAnExcessPaymentForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RecordAnExcessPaymentForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RecordAnExcessPaymentForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RecordAnExcessPaymentForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CollectPaymentForCustomer200 = {
  customer: Customer;
  transaction: Transaction;
};

/**
 * Parameters for invoice_allocations

 */
export type CollectPaymentForCustomerBodyInvoiceAllocations = {
  /** Identifier for the invoice. Multiple invoices can be passed.
   */
  invoice_id: string[];
  /** Amount that will override the Invoice amount to be collected. If not specified Invoice amount to collect will be taken as default. The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  allocation_amount?: number[];
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CollectPaymentForCustomerBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* google_pay - google_pay \* apple_pay - apple_pay \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* sofort - sofort \* ideal - ideal \* boleto - boleto

 */
export type CollectPaymentForCustomerBodyPaymentIntentPaymentMethodType =
  (typeof CollectPaymentForCustomerBodyPaymentIntentPaymentMethodType)[keyof typeof CollectPaymentForCustomerBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForCustomerBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type CollectPaymentForCustomerBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* google_pay - google_pay \* apple_pay - apple_pay \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* sofort - sofort \* ideal - ideal \* boleto - boleto
   */
  payment_method_type?: CollectPaymentForCustomerBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CollectPaymentForCustomerBodyPaymentIntentAdditionalInformation;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CollectPaymentForCustomerBodyCardAdditionalInformation = {
  [key: string]: any;
};

/**
 * Parameters for card

 */
export type CollectPaymentForCustomerBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number?: string;
  /** Card expiry month.
   */
  expiry_month?: number;
  /** Card expiry year.
   */
  expiry_year?: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CollectPaymentForCustomerBodyCardAdditionalInformation;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CollectPaymentForCustomerBodyPaymentMethodAdditionalInformation = {
  [key: string]: any;
};

/**
 * The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* dotpay - Payments made via Dotpay. \* upi - UPI Payments. \* google_pay - Payments made via Google Pay. \* amazon_payments - Payments made via Amazon Payments. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* ideal - Payments made via iDEAL. \* sofort - Payments made via Sofort. \* alipay - Payments made via Alipay. \* generic - Payments made via Generic Payment Method. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* wechat_pay - Payments made via WeChat Pay.

 */
export type CollectPaymentForCustomerBodyPaymentMethodType =
  (typeof CollectPaymentForCustomerBodyPaymentMethodType)[keyof typeof CollectPaymentForCustomerBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForCustomerBodyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_method

 */
export type CollectPaymentForCustomerBodyPaymentMethod = {
  /** The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* dotpay - Payments made via Dotpay. \* upi - UPI Payments. \* google_pay - Payments made via Google Pay. \* amazon_payments - Payments made via Amazon Payments. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* ideal - Payments made via iDEAL. \* sofort - Payments made via Sofort. \* alipay - Payments made via Alipay. \* generic - Payments made via Generic Payment Method. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* wechat_pay - Payments made via WeChat Pay.
   */
  type?: CollectPaymentForCustomerBodyPaymentMethodType;
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** The reference id. In the case of Amazon and PayPal this will be the *billing agreement id* . For GoCardless direct debit this will be 'mandate id'. In the case of card this will be the identifier provided by the gateway/card vault for the specific payment method resource. **Note:** This is not the one-time temporary token provided by gateways like Stripe.   
For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource.
 */
  reference_id?: string;
  /** Single-use token created by payment gateways. In Stripe, a single-use token is created for Apple Pay Wallet or card details. In Braintree, a nonce is created for Apple Pay Wallet, PayPal, or card details. In Authorize.Net, a nonce is created for card details. In Adyen, an encrypted data is created from the card details.
   */
  tmp_token?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CollectPaymentForCustomerBodyPaymentMethodAdditionalInformation;
};

/**
 * The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant

 */
export type CollectPaymentForCustomerBodyPaymentInitiator =
  (typeof CollectPaymentForCustomerBodyPaymentInitiator)[keyof typeof CollectPaymentForCustomerBodyPaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForCustomerBodyPaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

export type CollectPaymentForCustomerBody = {
  /** Amount to be collected. If this parameter is not passed then the invoice(s) amount to collect will be collected.
   */
  amount?: number;
  /** Payment source used for the payment.
   */
  payment_source_id?: string;
  /** Token generated by Chargebee JS representing payment method details.
   */
  token_id?: string;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** Indicates whether the payment source should be retained for the customer.
   */
  retain_payment_source?: boolean;
  /** The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant
   */
  payment_initiator?: CollectPaymentForCustomerBodyPaymentInitiator;
  /** Parameters for payment_method
   */
  payment_method?: CollectPaymentForCustomerBodyPaymentMethod;
  /** Parameters for card
   */
  card?: CollectPaymentForCustomerBodyCard;
  /** Parameters for payment_intent
   */
  payment_intent?: CollectPaymentForCustomerBodyPaymentIntent;
  /** Parameters for invoice_allocations
   */
  invoice_allocations?: CollectPaymentForCustomerBodyInvoiceAllocations;
};

export type CollectPaymentForCustomerChargebeeEventWebhook =
  (typeof CollectPaymentForCustomerChargebeeEventWebhook)[keyof typeof CollectPaymentForCustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForCustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CollectPaymentForCustomerChargebeeEventEmail =
  (typeof CollectPaymentForCustomerChargebeeEventEmail)[keyof typeof CollectPaymentForCustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForCustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CollectPaymentForCustomerChargebeeEventActions =
  (typeof CollectPaymentForCustomerChargebeeEventActions)[keyof typeof CollectPaymentForCustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CollectPaymentForCustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CollectPaymentForCustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CollectPaymentForCustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CollectPaymentForCustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CollectPaymentForCustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type MergeCustomers200 = {
  customer: Customer;
};

export type MergeCustomersBody = {
  /** From customer id.
   */
  from_customer_id: string;
  /** To customer id.
   */
  to_customer_id: string;
};

export type MergeCustomersChargebeeEventWebhook =
  (typeof MergeCustomersChargebeeEventWebhook)[keyof typeof MergeCustomersChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MergeCustomersChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type MergeCustomersChargebeeEventEmail =
  (typeof MergeCustomersChargebeeEventEmail)[keyof typeof MergeCustomersChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MergeCustomersChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type MergeCustomersChargebeeEventActions =
  (typeof MergeCustomersChargebeeEventActions)[keyof typeof MergeCustomersChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MergeCustomersChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type MergeCustomersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: MergeCustomersChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: MergeCustomersChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: MergeCustomersChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ClearPersonalDataOfACustomer200 = {
  customer: Customer;
};

export type ClearPersonalDataOfACustomerChargebeeEventWebhook =
  (typeof ClearPersonalDataOfACustomerChargebeeEventWebhook)[keyof typeof ClearPersonalDataOfACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClearPersonalDataOfACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ClearPersonalDataOfACustomerChargebeeEventEmail =
  (typeof ClearPersonalDataOfACustomerChargebeeEventEmail)[keyof typeof ClearPersonalDataOfACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClearPersonalDataOfACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ClearPersonalDataOfACustomerChargebeeEventActions =
  (typeof ClearPersonalDataOfACustomerChargebeeEventActions)[keyof typeof ClearPersonalDataOfACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClearPersonalDataOfACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ClearPersonalDataOfACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ClearPersonalDataOfACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ClearPersonalDataOfACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ClearPersonalDataOfACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListOfContactsForACustomer200ListItem = {
  contact: Contact;
};

export type ListOfContactsForACustomer200 = {
  list: ListOfContactsForACustomer200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListOfContactsForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListOfContactsForACustomerParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type AddContactsToACustomer200 = {
  customer: Customer;
  card?: Card;
};

/**
 * Parameters for contact

 */
export type AddContactsToACustomerBodyContact = {
  /** Unique reference ID provided for the contact.
   */
  id?: string;
  /** First name of the contact.
   */
  first_name?: string;
  /** Last name of the contact.
   */
  last_name?: string;
  /** Email of the contact.
   */
  email: string;
  /** Phone number of the contact.
   */
  phone?: string;
  /** Label/Tag provided for contact.
   */
  label?: string;
  /** Contact enabled / disabled
   */
  enabled?: boolean;
  /** Whether Billing Emails option is enabled for the contact.
   */
  send_billing_email?: boolean;
  /** Whether Account Emails option is enabled for the contact.
   */
  send_account_email?: boolean;
};

export type AddContactsToACustomerBody = {
  /** Parameters for contact
   */
  contact?: AddContactsToACustomerBodyContact;
};

export type AddContactsToACustomerChargebeeEventWebhook =
  (typeof AddContactsToACustomerChargebeeEventWebhook)[keyof typeof AddContactsToACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddContactsToACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddContactsToACustomerChargebeeEventEmail =
  (typeof AddContactsToACustomerChargebeeEventEmail)[keyof typeof AddContactsToACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddContactsToACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddContactsToACustomerChargebeeEventActions =
  (typeof AddContactsToACustomerChargebeeEventActions)[keyof typeof AddContactsToACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddContactsToACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddContactsToACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddContactsToACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddContactsToACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddContactsToACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateACustomer200 = {
  customer: Customer;
  card?: Card;
};

/**
 * Parameters for entity_identifiers

 */
export type CreateACustomerBodyEntityIdentifiers = {
  /** The unique id for the `entity_identifier` in Chargebee. When not provided, it is autogenerated.
   */
  id?: string[];
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  scheme?: string[];
  /** The value of the `entity_identifier`. This identifies the customer entity on the Peppol network. For example: `10101010-STO-10`.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  value?: string[];
  /** The standard used for specifying the `entity_identifier` `scheme`. Currently, only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  standard?: string[];
};

export type CreateACustomerBody = {
  /** Id for the new customer. If not given, this will be auto-generated.
   */
  id?: string;
  /** First name of the customer.
   */
  first_name?: string;
  /** Last name of the customer.
   */
  last_name?: string;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: string;
  /** The currency code (ISO 4217 format) of the customer. Applicable if Multicurrency is enabled.
   */
  preferred_currency_code?: string;
  /** Phone number of the customer.
   */
  phone?: string;
  /** Company name of the customer.
   */
  company?: string;
  /** Whether payments needs to be collected automatically for this customer. \* on - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* off - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  auto_collection?: CreateACustomerBodyAutoCollection;
  /** The number of days within which the customer has to make payment for the invoice. .
   */
  net_term_days?: number;
  /** Whether the customer can pay via Direct Debit.
   */
  allow_direct_debit?: boolean;
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
.
 */
  entity_identifier_scheme?: string;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
.
 */
  entity_identifier_standard?: string;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
.
 */
  is_einvoice_enabled?: boolean;
  /** Determines whether to send an e-invoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.
   */
  einvoicing_method?: CreateACustomerBodyEinvoicingMethod;
  /** Specifies if the customer is liable for tax. \* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  taxability?: CreateACustomerBodyTaxability;
  /** Indicates the exemption information. You can customize customer exemption based on specific Location, Tax level (Federal, State, County and Local), Category of Tax or specific Tax Name. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.  
To know more about what values you need to provide, refer to this [Avalara's API document](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/exemption/).
 */
  exemption_details?: unknown[];
  /** Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* industrial - When the purchase is made by an industrial business \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use
   */
  customer_type?: CreateACustomerBodyCustomerType;
  /** Indicates the Client profile id for the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  client_profile_id?: string;
  /** Indicates the exemption type of the customer. This is applicable only if you use Chargebee's TaxJar integration. \* other - Other \* government - Government \* wholesale - Whole-sale
   */
  taxjar_exemption_category?: CreateACustomerBodyTaxjarExemptionCategory;
  /** Confirms that a customer is a valid business without an EU/UK VAT number.
   */
  business_customer_without_vat_number?: boolean;
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
  /** The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* l - Other or custom \* m - Educational organization \* n - Local government \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* j - Direct pay permit \* k - Direct mail \* p - Commercial aquaculture \* q - Commercial Fishery \* r - Non-resident \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* d - Foreign diplomat \* e - Charitable or benevolent organization \* f - Religious organization \* g - Resale \* a - Federal government \* b - State government \* c - Tribe/Status Indian/Indian Band
   */
  entity_code?: CreateACustomerBodyEntityCode;
  /** Any string value that will cause the sale to be exempted. Use this if your finance team manually verifies and tracks exemption certificates. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption).
   */
  exempt_number?: string;
  /** A set of key-value pairs stored as additional information for the customer. \[Learn more\](./#meta_data).
   */
  meta_data?: CreateACustomerBodyMetaData;
  /** The preferred offline payment method for the customer. \* sepa_credit - SEPA Credit \* cash - Cash \* no_preference - No Preference \* bank_transfer - Bank Transfer \* boleto - Boleto \* check - Check \* ach_credit - ACH Credit
   */
  offline_payment_method?: CreateACustomerBodyOfflinePaymentMethod;
  /** Override for this customer, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the [subscription level](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.
   */
  auto_close_invoices?: boolean;
  /** Indicates whether invoices raised on the same day for the `customer` are consolidated. When provided, this overrides the default configuration at the [site-level](https://www.chargebee.com/docs/consolidated-invoicing.html#configuring-consolidated-invoicing). This parameter can be provided only when [Consolidated Invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled.  
**Note:**

Any invoices raised when a subscription activates from `in_trial` or `future` `status`, are not consolidated by default. [Contact Support](https://chargebee.freshdesk.com/support/home) to enable consolidation for such invoices.
.
 */
  consolidated_invoicing?: boolean;
  /** The Chargebee payment token generated by Chargebee JS.
   */
  token_id?: string;
  /** The unique ID of the [business entity](https://apidocs.chargebee.com/docs/api/advanced-features?prod_cat_ver=2#mbe) this customer should be [linked](https://apidocs.chargebee.com/docs/api/advanced-features?prod_cat_ver=2#mbe-linked-be) to. Applicable only when multiple business entities have been created for the site. When not provided, the customer is linked to the [default business entity](https://apidocs.chargebee.com/docs/api/advanced-features?prod_cat_ver=2#mbe-default-be) defined for the site.  
**Note**

An alternative way of passing this parameter is by means of a [custom HTTP header](https://apidocs.chargebee.com/docs/api/advanced-features?prod_cat_ver=2#mbe-header-main).
.
 */
  business_entity_id?: string;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** Parameters for card
   */
  card?: CreateACustomerBodyCard;
  /** Parameters for bank_account
   */
  bank_account?: CreateACustomerBodyBankAccount;
  /** Parameters for payment_method
   */
  payment_method?: CreateACustomerBodyPaymentMethod;
  /** Parameters for payment_intent
   */
  payment_intent?: CreateACustomerBodyPaymentIntent;
  /** Parameters for billing_address
   */
  billing_address?: CreateACustomerBodyBillingAddress;
  /** Parameters for entity_identifiers
   */
  entity_identifiers?: CreateACustomerBodyEntityIdentifiers;
  [key: string]: any;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CreateACustomerBodyBillingAddressValidationStatus =
  (typeof CreateACustomerBodyBillingAddressValidationStatus)[keyof typeof CreateACustomerBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type CreateACustomerBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).  
**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: CreateACustomerBodyBillingAddressValidationStatus;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateACustomerBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* bancontact - bancontact \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort

 */
export type CreateACustomerBodyPaymentIntentPaymentMethodType =
  (typeof CreateACustomerBodyPaymentIntentPaymentMethodType)[keyof typeof CreateACustomerBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type CreateACustomerBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* bancontact - bancontact \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort
   */
  payment_method_type?: CreateACustomerBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateACustomerBodyPaymentIntentAdditionalInformation;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateACustomerBodyPaymentMethodAdditionalInformation = {
  [key: string]: any;
};

/**
 * The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* dotpay - Payments made via Dotpay. \* google_pay - Payments made via Google Pay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay.

 */
export type CreateACustomerBodyPaymentMethodType =
  (typeof CreateACustomerBodyPaymentMethodType)[keyof typeof CreateACustomerBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_method

 */
export type CreateACustomerBodyPaymentMethod = {
  /** The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* dotpay - Payments made via Dotpay. \* google_pay - Payments made via Google Pay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* sofort - Payments made via Sofort. \* generic - Payments made via Generic Payment Method. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay.
   */
  type?: CreateACustomerBodyPaymentMethodType;
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** The reference id. In the case of Amazon and PayPal this will be the *billing agreement id* . For GoCardless direct debit this will be 'mandate id'. In the case of card this will be the identifier provided by the gateway/card vault for the specific payment method resource. **Note:** This is not the one-time temporary token provided by gateways like Stripe.   
For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource.
 */
  reference_id?: string;
  /** Single-use tokens created by payment gateways. In Stripe, a single-use token is created for Apple Pay Wallet, card details or direct debit. In Braintree, a nonce is created for Apple Pay Wallet, PayPal, or card details. In Authorize.Net, a nonce is created for card details. In Adyen, an encrypted data is created from the card details.
   */
  tmp_token?: string;
  /** [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern
Ireland**) is available as an option.
 */
  issuing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateACustomerBodyPaymentMethodAdditionalInformation;
};

/**
 * The billing address associated with the bank account. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`company_name\`:(string, max chars=250) The company name for the address. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country\`:(string) The name of the country for the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state\`:(string, max chars=50) The name of the state or province for the address. When not provided, this is set automatically for US, Canada, and India. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix. This is supported for USA, Canada, and India. For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.

 */
export type CreateACustomerBodyBankAccountBillingAddress = {
  [key: string]: any;
};

/**
 * For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.

 */
export type CreateACustomerBodyBankAccountEcheckType =
  (typeof CreateACustomerBodyBankAccountEcheckType)[keyof typeof CreateACustomerBodyBankAccountEcheckType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyBankAccountEcheckType = {
  web: "web",
  ppd: "ppd",
  ccd: "ccd",
} as const;

/**
 * For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.

 */
export type CreateACustomerBodyBankAccountAccountHolderType =
  (typeof CreateACustomerBodyBankAccountAccountHolderType)[keyof typeof CreateACustomerBodyBankAccountAccountHolderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyBankAccountAccountHolderType = {
  individual: "individual",
  company: "company",
} as const;

/**
 * Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* checking - Checking Account \* business_checking - Business Checking Account \* savings - Savings Account \* current - Current Account

 */
export type CreateACustomerBodyBankAccountAccountType =
  (typeof CreateACustomerBodyBankAccountAccountType)[keyof typeof CreateACustomerBodyBankAccountAccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyBankAccountAccountType = {
  checking: "checking",
  savings: "savings",
  business_checking: "business_checking",
  current: "current",
} as const;

/**
 * Parameters for bank_account

 */
export type CreateACustomerBodyBankAccount = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Account holder's International Bank Account Number. For the [GoCardless](https://www.chargebee.com/docs/gocardless.html) platform, this can be the [local bank details](https://developer.gocardless.com/api-reference/#appendix-local-bank-details)
   */
  iban?: string;
  /** Account holder's first name as per bank account. If not passed, details from customer details will be considered.
   */
  first_name?: string;
  /** Account holder's last name as per bank account. If not passed, details from customer details will be considered.
   */
  last_name?: string;
  /** Account holder's company name as per bank account. If not passed, details from customer details will be considered.
   */
  company?: string;
  /** Account holder's email address. If not passed, details from customer details will be considered. All Direct Debit compliant emails will be sent to this email address.
   */
  email?: string;
  /** Phone number of the account holder that is linked to the bank account.
   */
  phone?: string;
  /** Name of account holder's bank.
   */
  bank_name?: string;
  /** Account holder's bank account number.
   */
  account_number?: string;
  /** Bank account routing number.
   */
  routing_number?: string;
  /** Indicates the bank code.
   */
  bank_code?: string;
  /** Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* checking - Checking Account \* business_checking - Business Checking Account \* savings - Savings Account \* current - Current Account
   */
  account_type?: CreateACustomerBodyBankAccountAccountType;
  /** For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.
   */
  account_holder_type?: CreateACustomerBodyBankAccountAccountHolderType;
  /** For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.
   */
  echeck_type?: CreateACustomerBodyBankAccountEcheckType;
  /** [two-letter(alpha2)](https://www.iso.org/iso-3166-country-codes.html) ISO country code. Required when local bank details are provided, and not IBAN.
   */
  issuing_country?: string;
  /** For GoCardless Autogiro users only. The civic/company number (personnummer, samordningsnummer, or organisationsnummer) of the customer. Must be supplied if the customer's bank account is denominated in Swedish krona (SEK). This field cannot be changed once it has been set.
   */
  swedish_identity_number?: string;
  /** The billing address associated with the bank account. The value is a JSON object with the following keys and their values: \* \`first_name\`:(string, max chars=150) The first name of the contact. \* \`last_name\`:(string, max chars=150) The last name of the contact. \* \`company_name\`:(string, max chars=250) The company name for the address. \* \`line1\`:(string, max chars=180) The first line of the address. \* \`line2\`:(string, max chars=180) The second line of the address. \* \`country\`:(string) The name of the country for the address. \* \`country_code\`:(string, max chars=50) The two-letter, \[ISO 3166 alpha-2\](https://www.iso.org/iso-3166-country-codes.html) country code for the address. \* \`state\`:(string, max chars=50) The name of the state or province for the address. When not provided, this is set automatically for US, Canada, and India. \* \`state_code\`:(string, max chars=50) The \[ISO 3166-2 state/province code\](https://www.iso.org/obp/ui/#search/code/) without the country prefix. This is supported for USA, Canada, and India. For instance, for Arizona (USA), set state_code as \`AZ\` (not \`US-AZ\`). For Tamil Nadu (India), set as \`TN\` (not \`IN-TN\`). For British Columbia (Canada), set as \`BC\` (not \`CA-BC)\`. \* \`city\`:(string, max chars=50) The city name for the address. \* \`postal_code\`:(string, max chars=20) The postal or ZIP code for the address. \* \`phone\`:(string, max chars=50) The contact phone number for the address. \* \`email\`:(string, max chars=70) The contact email address for the address.
   */
  billing_address?: CreateACustomerBodyBankAccountBillingAddress;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateACustomerBodyCardAdditionalInformation = {
  [key: string]: any;
};

/**
 * Parameters for card

 */
export type CreateACustomerBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number?: string;
  /** Card expiry month.
   */
  expiry_month?: number;
  /** Card expiry year.
   */
  expiry_year?: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateACustomerBodyCardAdditionalInformation;
};

/**
 * The preferred offline payment method for the customer. \* sepa_credit - SEPA Credit \* cash - Cash \* no_preference - No Preference \* bank_transfer - Bank Transfer \* boleto - Boleto \* check - Check \* ach_credit - ACH Credit

 */
export type CreateACustomerBodyOfflinePaymentMethod =
  (typeof CreateACustomerBodyOfflinePaymentMethod)[keyof typeof CreateACustomerBodyOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyOfflinePaymentMethod = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * A set of key-value pairs stored as additional information for the customer. \[Learn more\](./#meta_data).

 */
export type CreateACustomerBodyMetaData = { [key: string]: any };

/**
 * The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* l - Other or custom \* m - Educational organization \* n - Local government \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* j - Direct pay permit \* k - Direct mail \* p - Commercial aquaculture \* q - Commercial Fishery \* r - Non-resident \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* d - Foreign diplomat \* e - Charitable or benevolent organization \* f - Religious organization \* g - Resale \* a - Federal government \* b - State government \* c - Tribe/Status Indian/Indian Band

 */
export type CreateACustomerBodyEntityCode =
  (typeof CreateACustomerBodyEntityCode)[keyof typeof CreateACustomerBodyEntityCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyEntityCode = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
  f: "f",
  g: "g",
  h: "h",
  i: "i",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "n",
  p: "p",
  q: "q",
  r: "r",
  med1: "med1",
  med2: "med2",
} as const;

/**
 * Indicates the exemption type of the customer. This is applicable only if you use Chargebee's TaxJar integration. \* other - Other \* government - Government \* wholesale - Whole-sale

 */
export type CreateACustomerBodyTaxjarExemptionCategory =
  (typeof CreateACustomerBodyTaxjarExemptionCategory)[keyof typeof CreateACustomerBodyTaxjarExemptionCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyTaxjarExemptionCategory = {
  wholesale: "wholesale",
  government: "government",
  other: "other",
} as const;

/**
 * Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* industrial - When the purchase is made by an industrial business \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use

 */
export type CreateACustomerBodyCustomerType =
  (typeof CreateACustomerBodyCustomerType)[keyof typeof CreateACustomerBodyCustomerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyCustomerType = {
  residential: "residential",
  business: "business",
  senior_citizen: "senior_citizen",
  industrial: "industrial",
} as const;

/**
 * Specifies if the customer is liable for tax. \* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type CreateACustomerBodyTaxability =
  (typeof CreateACustomerBodyTaxability)[keyof typeof CreateACustomerBodyTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyTaxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Determines whether to send an e-invoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.

 */
export type CreateACustomerBodyEinvoicingMethod =
  (typeof CreateACustomerBodyEinvoicingMethod)[keyof typeof CreateACustomerBodyEinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyEinvoicingMethod = {
  automatic: "automatic",
  manual: "manual",
  site_default: "site_default",
} as const;

/**
 * Whether payments needs to be collected automatically for this customer. \* on - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* off - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type CreateACustomerBodyAutoCollection =
  (typeof CreateACustomerBodyAutoCollection)[keyof typeof CreateACustomerBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type CreateACustomerChargebeeEventWebhook =
  (typeof CreateACustomerChargebeeEventWebhook)[keyof typeof CreateACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACustomerChargebeeEventEmail =
  (typeof CreateACustomerChargebeeEventEmail)[keyof typeof CreateACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACustomerChargebeeEventActions =
  (typeof CreateACustomerChargebeeEventActions)[keyof typeof CreateACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListCustomers200ListItem = {
  customer: Customer;
  card?: Card;
};

export type ListCustomers200 = {
  list: ListCustomers200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListCustomersHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * Parent who is going to handle invoices

 */
export type ListCustomersRelationshipInvoiceOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Parent who is going to pay

 */
export type ListCustomersRelationshipPaymentOwnerId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

/**
 * Immediate parent with whom we will link our new customer(child)

 */
export type ListCustomersRelationshipParentId = {
  is?: string;
  is_not?: string;
  starts_with?: string;
};

export type ListCustomersSortByDesc =
  (typeof ListCustomersSortByDesc)[keyof typeof ListCustomersSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersSortByDesc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListCustomersSortByAsc =
  (typeof ListCustomersSortByAsc)[keyof typeof ListCustomersSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersSortByAsc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListCustomersChannelIsNot =
  (typeof ListCustomersChannelIsNot)[keyof typeof ListCustomersChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListCustomersChannelIs =
  (typeof ListCustomersChannelIs)[keyof typeof ListCustomersChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

export type ListCustomersAutoCloseInvoicesIs =
  (typeof ListCustomersAutoCloseInvoicesIs)[keyof typeof ListCustomersAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ListCustomersOfflinePaymentMethodIsNot =
  (typeof ListCustomersOfflinePaymentMethodIsNot)[keyof typeof ListCustomersOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersOfflinePaymentMethodIsNot = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ListCustomersOfflinePaymentMethodIs =
  (typeof ListCustomersOfflinePaymentMethodIs)[keyof typeof ListCustomersOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersOfflinePaymentMethodIs = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ListCustomersTaxabilityIsNot =
  (typeof ListCustomersTaxabilityIsNot)[keyof typeof ListCustomersTaxabilityIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersTaxabilityIsNot = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type ListCustomersTaxabilityIs =
  (typeof ListCustomersTaxabilityIs)[keyof typeof ListCustomersTaxabilityIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersTaxabilityIs = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ListCustomersAutoCollectionIsNot =
  (typeof ListCustomersAutoCollectionIsNot)[keyof typeof ListCustomersAutoCollectionIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersAutoCollectionIsNot = {
  on: "on",
  off: "off",
} as const;

/**
 * \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type ListCustomersAutoCollectionIs =
  (typeof ListCustomersAutoCollectionIs)[keyof typeof ListCustomersAutoCollectionIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersAutoCollectionIs = {
  on: "on",
  off: "off",
} as const;

export type ListCustomersPhoneIsPresent =
  (typeof ListCustomersPhoneIsPresent)[keyof typeof ListCustomersPhoneIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersPhoneIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListCustomersCompanyIsPresent =
  (typeof ListCustomersCompanyIsPresent)[keyof typeof ListCustomersCompanyIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersCompanyIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListCustomersEmailIsPresent =
  (typeof ListCustomersEmailIsPresent)[keyof typeof ListCustomersEmailIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersEmailIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListCustomersLastNameIsPresent =
  (typeof ListCustomersLastNameIsPresent)[keyof typeof ListCustomersLastNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersLastNameIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListCustomersFirstNameIsPresent =
  (typeof ListCustomersFirstNameIsPresent)[keyof typeof ListCustomersFirstNameIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCustomersFirstNameIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListCustomersParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * If set to true, includes the deleted resources in the response. For the deleted resources in the response, the '<strong>deleted</strong>' attribute will be '<strong>true</strong>'.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Identifier of the customer.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is] = "9bsvnHgsvmsI"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>First name of the customer.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>first_name[is] = "John"</i>
   */
  first_name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListCustomersFirstNameIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Last name of the customer.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>last_name[is] = "Clint"</i>
   */
  last_name?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListCustomersLastNameIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Email of the customer. Configured email notifications will be sent to this email.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>email[is] = "john@test.com"</i>
   */
  email?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListCustomersEmailIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Company name of the customer.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>company[is_not] = "Globex Corp"</i>
   */
  company?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListCustomersCompanyIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Phone number of the customer.<br><b>Supported operators : </b>is, is_not, starts_with, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>phone[is_not] = "(541) 754-3010"</i>
   */
  phone?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    is_present?: ListCustomersPhoneIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Whether payments needs to be collected automatically for this customer. Possible values are : <dfn>on, off.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>auto_collection[is] = "on"</i>
   */
  auto_collection?: {
    /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
     */
    is?: ListCustomersAutoCollectionIs;
    /** \* \`on\` - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* \`off\` - Automatic collection of charges will not be made. All payments must be recorded offline.
     */
    is_not?: ListCustomersAutoCollectionIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Specifies if the customer is liable for tax. Possible values are : <dfn>taxable, exempt.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>taxability[is] = "taxable"</i>
   */
  taxability?: {
    /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
    is?: ListCustomersTaxabilityIs;
    /** \* \`taxable\` - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* \`exempt\` -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
    is_not?: ListCustomersTaxabilityIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Timestamp indicating when this customer resource is created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[before] = "1435054328"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on <code>updated_at</code>. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the <code>sort_by</code> input parameter as <code>updated_at</code> for a faster response.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
 * <dfn class="text-muted">optional, string filter</dfn><br>The unique ID of the <a href='/docs/api/advanced-features?prod_cat_ver=2#mbe'>business entity</a> of this subscription. This is always the same as the 
<a href="/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id">business entity</a> of the customer. 
<span ismicro="true" featureid="cb-mbe"></span><br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>business_entity_id[is_not] = "business_entity_id"</i>
 */
  business_entity_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The preferred offline payment method for the customer. Possible values are : <dfn>no_preference, cash, check, bank_transfer, ach_credit, sepa_credit.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>offline_payment_method[is] = "cash"</i>
   */
  offline_payment_method?: {
    /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
     */
    is?: ListCustomersOfflinePaymentMethodIs;
    /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
     */
    is_not?: ListCustomersOfflinePaymentMethodIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Override for this customer, the <a href="https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing" rel="noopener noreferrer" target="_blank">site-level setting</a> for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the <a href="/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices">subscription level</a> which takes precedence. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>auto_close_invoices[is] = "true"</i>
   */
  auto_close_invoices?: {
    is?: ListCustomersAutoCloseInvoicesIs;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The subscription channel this object originated from and is maintained in. Possible values are : <dfn>web, app_store, play_store.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>channel[is] = "APP STORE"</i>
   */
  channel?: {
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is?: ListCustomersChannelIs;
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is_not?: ListCustomersChannelIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>created_at, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "created_at"</i><br>This will sort the result based on the 'created_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListCustomersSortByAsc;
    desc?: ListCustomersSortByDesc;
  };
  /**
   * Parameters for relationship
   */
  relationship?: {
    /** Immediate parent with whom we will link our new customer(child)
     */
    parent_id?: ListCustomersRelationshipParentId;
    /** Parent who is going to pay
     */
    payment_owner_id?: ListCustomersRelationshipPaymentOwnerId;
    /** Parent who is going to handle invoices
     */
    invoice_owner_id?: ListCustomersRelationshipInvoiceOwnerId;
  };
};

export type ChangeBillingDate200 = {
  customer: Customer;
};

/**
 * Indicates whether this customer's *billing_day_of_week* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_day_of_week* will not be reset even when all of the weekly subscriptions are cancelled. \* manually_set - Billing date is specifically set (default configuration is overridden) \* using_defaults - Billing date is set based on defaults configured.

 */
export type ChangeBillingDateBodyBillingDayOfWeekMode =
  (typeof ChangeBillingDateBodyBillingDayOfWeekMode)[keyof typeof ChangeBillingDateBodyBillingDayOfWeekMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeBillingDateBodyBillingDayOfWeekMode = {
  using_defaults: "using_defaults",
  manually_set: "manually_set",
} as const;

/**
 * Applicable when *calendar billing* (with customer specific billing date support) is enabled. When set, renewals of all the weekly subscriptions of this customer will be aligned to this week day. \* sunday - Sunday \* wednesday - Wednesday \* tuesday - Tuesday \* monday - Monday \* saturday - Saturday \* friday - Friday \* thursday - Thursday

 */
export type ChangeBillingDateBodyBillingDayOfWeek =
  (typeof ChangeBillingDateBodyBillingDayOfWeek)[keyof typeof ChangeBillingDateBodyBillingDayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeBillingDateBodyBillingDayOfWeek = {
  sunday: "sunday",
  monday: "monday",
  tuesday: "tuesday",
  wednesday: "wednesday",
  thursday: "thursday",
  friday: "friday",
  saturday: "saturday",
} as const;

/**
 * Indicates whether this customer's *billing_date* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_date* will not be reset even when all of the monthly/yearly subscriptions are cancelled. \* manually_set - Billing date is specifically set (default configuration is overridden) \* using_defaults - Billing date is set based on defaults configured.

 */
export type ChangeBillingDateBodyBillingDateMode =
  (typeof ChangeBillingDateBodyBillingDateMode)[keyof typeof ChangeBillingDateBodyBillingDateMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeBillingDateBodyBillingDateMode = {
  using_defaults: "using_defaults",
  manually_set: "manually_set",
} as const;

export type ChangeBillingDateBody = {
  /** Applicable when *calendar billing* (with customer specific billing date support) is enabled. When set, renewals of all the monthly and yearly subscriptions of this customer will be aligned to this date.
   */
  billing_date?: number;
  /** `billing_month`, together with `billing_date`, specify, for this customer, the day of the year when the renewals of all the year-based subscriptions take place.

For example, the renewals happen on 15th July when `billing_month` is `7` and `billing_date` is `15`.  
**Note**

Applicable when [Calendar Billing](https://www.chargebee.com/docs/calendar-billing.html) (with customer-specific billing date support) is enabled and `billing_date_mode` is `manually_set`.
 */
  billing_month?: number;
  /** Indicates whether this customer's *billing_date* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_date* will not be reset even when all of the monthly/yearly subscriptions are cancelled. \* manually_set - Billing date is specifically set (default configuration is overridden) \* using_defaults - Billing date is set based on defaults configured.
   */
  billing_date_mode?: ChangeBillingDateBodyBillingDateMode;
  /** Applicable when *calendar billing* (with customer specific billing date support) is enabled. When set, renewals of all the weekly subscriptions of this customer will be aligned to this week day. \* sunday - Sunday \* wednesday - Wednesday \* tuesday - Tuesday \* monday - Monday \* saturday - Saturday \* friday - Friday \* thursday - Thursday
   */
  billing_day_of_week?: ChangeBillingDateBodyBillingDayOfWeek;
  /** Indicates whether this customer's *billing_day_of_week* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_day_of_week* will not be reset even when all of the weekly subscriptions are cancelled. \* manually_set - Billing date is specifically set (default configuration is overridden) \* using_defaults - Billing date is set based on defaults configured.
   */
  billing_day_of_week_mode?: ChangeBillingDateBodyBillingDayOfWeekMode;
};

export type ChangeBillingDateChargebeeEventWebhook =
  (typeof ChangeBillingDateChargebeeEventWebhook)[keyof typeof ChangeBillingDateChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeBillingDateChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ChangeBillingDateChargebeeEventEmail =
  (typeof ChangeBillingDateChargebeeEventEmail)[keyof typeof ChangeBillingDateChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeBillingDateChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ChangeBillingDateChargebeeEventActions =
  (typeof ChangeBillingDateChargebeeEventActions)[keyof typeof ChangeBillingDateChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeBillingDateChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ChangeBillingDateHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ChangeBillingDateChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ChangeBillingDateChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ChangeBillingDateChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateACustomer200 = {
  customer: Customer;
  card?: Card;
};

/**
 * Indicates whether or not the customer has been identified as fraudulent. \* fraudulent - The customer has been marked as fraudulent \* suspicious - The customer has been identified as potentially fraudulent by the gateway \* safe - The customer has been marked as safe

 */
export type UpdateACustomerBodyFraudFlag =
  (typeof UpdateACustomerBodyFraudFlag)[keyof typeof UpdateACustomerBodyFraudFlag];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyFraudFlag = {
  safe: "safe",
  fraudulent: "fraudulent",
} as const;

/**
 * A set of key-value pairs stored as additional information for the customer. \[Learn more\](./#meta_data).

 */
export type UpdateACustomerBodyMetaData = { [key: string]: any };

/**
 * The preferred offline payment method for the customer. \* bank_transfer - Bank Transfer \* boleto - Boleto \* sepa_credit - SEPA Credit \* cash - Cash \* check - Check \* no_preference - No Preference \* ach_credit - ACH Credit

 */
export type UpdateACustomerBodyOfflinePaymentMethod =
  (typeof UpdateACustomerBodyOfflinePaymentMethod)[keyof typeof UpdateACustomerBodyOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyOfflinePaymentMethod = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* d - Foreign diplomat \* e - Charitable or benevolent organization \* f - Religious organization \* g - Resale \* a - Federal government \* b - State government \* c - Tribe/Status Indian/Indian Band \* l - Other or custom \* m - Educational organization \* n - Local government \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* j - Direct pay permit \* k - Direct mail \* p - Commercial aquaculture \* q - Commercial Fishery \* r - Non-resident

 */
export type UpdateACustomerBodyEntityCode =
  (typeof UpdateACustomerBodyEntityCode)[keyof typeof UpdateACustomerBodyEntityCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyEntityCode = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
  f: "f",
  g: "g",
  h: "h",
  i: "i",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "n",
  p: "p",
  q: "q",
  r: "r",
  med1: "med1",
  med2: "med2",
} as const;

/**
 * Indicates the exemption type of the customer. This is applicable only if you use Chargebee's TaxJar integration. \* government - Government \* other - Other \* wholesale - Whole-sale

 */
export type UpdateACustomerBodyTaxjarExemptionCategory =
  (typeof UpdateACustomerBodyTaxjarExemptionCategory)[keyof typeof UpdateACustomerBodyTaxjarExemptionCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyTaxjarExemptionCategory = {
  wholesale: "wholesale",
  government: "government",
  other: "other",
} as const;

/**
 * Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks \* industrial - When the purchase is made by an industrial business \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use

 */
export type UpdateACustomerBodyCustomerType =
  (typeof UpdateACustomerBodyCustomerType)[keyof typeof UpdateACustomerBodyCustomerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyCustomerType = {
  residential: "residential",
  business: "business",
  senior_citizen: "senior_citizen",
  industrial: "industrial",
} as const;

/**
 * Specifies if the customer is liable for tax. \* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type UpdateACustomerBodyTaxability =
  (typeof UpdateACustomerBodyTaxability)[keyof typeof UpdateACustomerBodyTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyTaxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Whether payments needs to be collected automatically for this customer. \* on - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* off - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type UpdateACustomerBodyAutoCollection =
  (typeof UpdateACustomerBodyAutoCollection)[keyof typeof UpdateACustomerBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type UpdateACustomerBody = {
  /** First name of the customer.
   */
  first_name?: string;
  /** Last name of the customer.
   */
  last_name?: string;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: string;
  /** The currency code (ISO 4217 format) of the customer. Applicable if Multicurrency is enabled.
   */
  preferred_currency_code?: string;
  /** Phone number of the customer.
   */
  phone?: string;
  /** Company name of the customer.
   */
  company?: string;
  /** Whether payments needs to be collected automatically for this customer. \* on - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* off - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  auto_collection?: UpdateACustomerBodyAutoCollection;
  /** Whether the customer can pay via Direct Debit.
   */
  allow_direct_debit?: boolean;
  /** The number of days within which the customer has to make payment for the invoice. .
   */
  net_term_days?: number;
  /** Specifies if the customer is liable for tax. \* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  taxability?: UpdateACustomerBodyTaxability;
  /** Indicates the exemption information. You can customize customer exemption based on specific Location, Tax level (Federal, State, County and Local), Category of Tax or specific Tax Name. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.  
To know more about what values you need to provide, refer to this [Avalara's API document](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/exemption/).
 */
  exemption_details?: unknown[];
  /** Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks \* industrial - When the purchase is made by an industrial business \* business - When the purchase is made at a place of business \* residential - When the purchase is made by a customer for home use
   */
  customer_type?: UpdateACustomerBodyCustomerType;
  /** Indicates the Client profile id for the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  client_profile_id?: string;
  /** Indicates the exemption type of the customer. This is applicable only if you use Chargebee's TaxJar integration. \* government - Government \* other - Other \* wholesale - Whole-sale
   */
  taxjar_exemption_category?: UpdateACustomerBodyTaxjarExemptionCategory;
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
  /** The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax \* d - Foreign diplomat \* e - Charitable or benevolent organization \* f - Religious organization \* g - Resale \* a - Federal government \* b - State government \* c - Tribe/Status Indian/Indian Band \* l - Other or custom \* m - Educational organization \* n - Local government \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* j - Direct pay permit \* k - Direct mail \* p - Commercial aquaculture \* q - Commercial Fishery \* r - Non-resident
   */
  entity_code?: UpdateACustomerBodyEntityCode;
  /** Any string value that will cause the sale to be exempted. Use this if your finance team manually verifies and tracks exemption certificates. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption).
   */
  exempt_number?: string;
  /** The preferred offline payment method for the customer. \* bank_transfer - Bank Transfer \* boleto - Boleto \* sepa_credit - SEPA Credit \* cash - Cash \* check - Check \* no_preference - No Preference \* ach_credit - ACH Credit
   */
  offline_payment_method?: UpdateACustomerBodyOfflinePaymentMethod;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** Override for this customer, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the [subscription level](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.
   */
  auto_close_invoices?: boolean;
  /** A set of key-value pairs stored as additional information for the customer. \[Learn more\](./#meta_data).
   */
  meta_data?: UpdateACustomerBodyMetaData;
  /** Indicates whether or not the customer has been identified as fraudulent. \* fraudulent - The customer has been marked as fraudulent \* suspicious - The customer has been identified as potentially fraudulent by the gateway \* safe - The customer has been marked as safe
   */
  fraud_flag?: UpdateACustomerBodyFraudFlag;
  /** Indicates whether invoices raised on the same day for the `customer` are consolidated. When provided, this overrides the default configuration at the [site-level](https://www.chargebee.com/docs/consolidated-invoicing.html#configuring-consolidated-invoicing). This parameter can be provided only when [Consolidated Invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled.  
**Note:**

Any invoices raised when a subscription activates from `in_trial` or `future` `status`, are not consolidated by default. [Contact Support](https://chargebee.freshdesk.com/support/home) to enable consolidation for such invoices.
.
 */
  consolidated_invoicing?: boolean;
  [key: string]: any;
};

export type UpdateACustomerChargebeeEventWebhook =
  (typeof UpdateACustomerChargebeeEventWebhook)[keyof typeof UpdateACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACustomerChargebeeEventEmail =
  (typeof UpdateACustomerChargebeeEventEmail)[keyof typeof UpdateACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACustomerChargebeeEventActions =
  (typeof UpdateACustomerChargebeeEventActions)[keyof typeof UpdateACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveACustomer200 = {
  customer: Customer;
  card?: Card;
};

export type RetrieveACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdatePaymentMethodForACustomer200 = {
  customer: Customer;
  card?: Card;
};

export type UpdatePaymentMethodForACustomerBody = {
  /** Parameters for payment_method
   */
  payment_method?: UpdatePaymentMethodForACustomerBodyPaymentMethod;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type UpdatePaymentMethodForACustomerBodyPaymentMethodAdditionalInformation =
  { [key: string]: any };

/**
 * The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* unionpay - Payments made via UnionPay. \* ideal - Payments made via iDEAL. \* bancontact - Payments made via Bancontact Card. \* dotpay - Payments made via Dotpay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* sofort - Payments made via Sofort. \* alipay - Payments made via Alipay. \* giropay - Payments made via giropay. \* generic - Payments made via Generic Payment Method. \* upi - UPI Payments. \* google_pay - Payments made via Google Pay. \* wechat_pay - Payments made via WeChat Pay. \* amazon_payments - Payments made via Amazon Payments. \* netbanking_emandates - Netbanking (eMandates) Payments. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* apple_pay - Payments made via Apple Pay.

 */
export type UpdatePaymentMethodForACustomerBodyPaymentMethodType =
  (typeof UpdatePaymentMethodForACustomerBodyPaymentMethodType)[keyof typeof UpdatePaymentMethodForACustomerBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodForACustomerBodyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_method

 */
export type UpdatePaymentMethodForACustomerBodyPaymentMethod = {
  /** The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* unionpay - Payments made via UnionPay. \* ideal - Payments made via iDEAL. \* bancontact - Payments made via Bancontact Card. \* dotpay - Payments made via Dotpay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* sofort - Payments made via Sofort. \* alipay - Payments made via Alipay. \* giropay - Payments made via giropay. \* generic - Payments made via Generic Payment Method. \* upi - UPI Payments. \* google_pay - Payments made via Google Pay. \* wechat_pay - Payments made via WeChat Pay. \* amazon_payments - Payments made via Amazon Payments. \* netbanking_emandates - Netbanking (eMandates) Payments. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* apple_pay - Payments made via Apple Pay.
   */
  type: UpdatePaymentMethodForACustomerBodyPaymentMethodType;
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** The reference id. In the case of Amazon and PayPal this will be the *billing agreement id* . For GoCardless direct debit this will be 'mandate id'. In the case of card this will be the identifier provided by the gateway/card vault for the specific payment method resource. **Note:** This is not the one-time temporary token provided by gateways like Stripe.   
For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource.
 */
  reference_id?: string;
  /** Single-use toke created by payment gateways. In Stripe, a single-use token is created for direct debit. In Braintree, a nonce is created for PayPal.
   */
  tmp_token?: string;
  /** [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern
Ireland**) is available as an option.
 */
  issuing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: UpdatePaymentMethodForACustomerBodyPaymentMethodAdditionalInformation;
};

export type UpdatePaymentMethodForACustomerChargebeeEventWebhook =
  (typeof UpdatePaymentMethodForACustomerChargebeeEventWebhook)[keyof typeof UpdatePaymentMethodForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdatePaymentMethodForACustomerChargebeeEventEmail =
  (typeof UpdatePaymentMethodForACustomerChargebeeEventEmail)[keyof typeof UpdatePaymentMethodForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdatePaymentMethodForACustomerChargebeeEventActions =
  (typeof UpdatePaymentMethodForACustomerChargebeeEventActions)[keyof typeof UpdatePaymentMethodForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePaymentMethodForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdatePaymentMethodForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdatePaymentMethodForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdatePaymentMethodForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdatePaymentMethodForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type GetHierarchy200 = {
  hierarchies: Hierarchy[];
};

export type GetHierarchyHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type GetHierarchyHierarchyOperationType =
  (typeof GetHierarchyHierarchyOperationType)[keyof typeof GetHierarchyHierarchyOperationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetHierarchyHierarchyOperationType = {
  complete_hierarchy: "complete_hierarchy",
  subordinates: "subordinates",
  path_to_root: "path_to_root",
} as const;

export type GetHierarchyParams = {
  /**
   * Selects the specific part of the hierarchy to be fetched.
   * complete_hierarchy - List the nodes of the full hierarchy to which the customer belongs.
   * subordinates - List all the nodes of the hierarchy formed by the customer and its subordinates. In other words, fetch the nodes of the tree whose root node is the customer.
   * subordinates_with_unbilled_charges_payable_by_parent - List all the nodes of the hierarchy formed by its subordinates with unbilled charges whose payment owner is the customer.
   * path_to_root - List the nodes along the path from the customer to the root of the full hierarchy.
   */
  hierarchy_operation_type: GetHierarchyHierarchyOperationType;
};

export type MoveACustomer200 = {
  resource_migration: ResourceMigration;
};

export type MoveACustomerBody = {
  /** Id of the customer to be copied.
   */
  id_at_from_site: string;
  /** Name of the site from which this customer need to be copied.
   */
  from_site: string;
};

export type MoveACustomerChargebeeEventWebhook =
  (typeof MoveACustomerChargebeeEventWebhook)[keyof typeof MoveACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MoveACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type MoveACustomerChargebeeEventEmail =
  (typeof MoveACustomerChargebeeEventEmail)[keyof typeof MoveACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MoveACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type MoveACustomerChargebeeEventActions =
  (typeof MoveACustomerChargebeeEventActions)[keyof typeof MoveACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MoveACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type MoveACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: MoveACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: MoveACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: MoveACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AssignPaymentRole200 = {
  customer: Customer;
  payment_source: PaymentSource;
};

/**
 * Indicates whether the payment source is Primary, Backup, or neither. \* backup - Backup \* none - None \* primary - Primary

 */
export type AssignPaymentRoleBodyRole =
  (typeof AssignPaymentRoleBodyRole)[keyof typeof AssignPaymentRoleBodyRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignPaymentRoleBodyRole = {
  primary: "primary",
  backup: "backup",
  none: "none",
} as const;

export type AssignPaymentRoleBody = {
  /** Payment source id this role will be assigned to.
   */
  payment_source_id: string;
  /** Indicates whether the payment source is Primary, Backup, or neither. \* backup - Backup \* none - None \* primary - Primary
   */
  role: AssignPaymentRoleBodyRole;
};

export type AssignPaymentRoleChargebeeEventWebhook =
  (typeof AssignPaymentRoleChargebeeEventWebhook)[keyof typeof AssignPaymentRoleChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignPaymentRoleChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AssignPaymentRoleChargebeeEventEmail =
  (typeof AssignPaymentRoleChargebeeEventEmail)[keyof typeof AssignPaymentRoleChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignPaymentRoleChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AssignPaymentRoleChargebeeEventActions =
  (typeof AssignPaymentRoleChargebeeEventActions)[keyof typeof AssignPaymentRoleChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssignPaymentRoleChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AssignPaymentRoleHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AssignPaymentRoleChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AssignPaymentRoleChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AssignPaymentRoleChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteContactsForACustomer200 = {
  customer: Customer;
  card?: Card;
};

/**
 * Parameters for contact

 */
export type DeleteContactsForACustomerBodyContact = {
  /** Unique reference ID provided for the contact.
   */
  id: string;
};

export type DeleteContactsForACustomerBody = {
  /** Parameters for contact
   */
  contact?: DeleteContactsForACustomerBodyContact;
};

export type DeleteContactsForACustomerChargebeeEventWebhook =
  (typeof DeleteContactsForACustomerChargebeeEventWebhook)[keyof typeof DeleteContactsForACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteContactsForACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteContactsForACustomerChargebeeEventEmail =
  (typeof DeleteContactsForACustomerChargebeeEventEmail)[keyof typeof DeleteContactsForACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteContactsForACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteContactsForACustomerChargebeeEventActions =
  (typeof DeleteContactsForACustomerChargebeeEventActions)[keyof typeof DeleteContactsForACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteContactsForACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteContactsForACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteContactsForACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteContactsForACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteContactsForACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DelinkACustomer200 = {
  customer: Customer;
};

export type DelinkACustomerChargebeeEventWebhook =
  (typeof DelinkACustomerChargebeeEventWebhook)[keyof typeof DelinkACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DelinkACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DelinkACustomerChargebeeEventEmail =
  (typeof DelinkACustomerChargebeeEventEmail)[keyof typeof DelinkACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DelinkACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DelinkACustomerChargebeeEventActions =
  (typeof DelinkACustomerChargebeeEventActions)[keyof typeof DelinkACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DelinkACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DelinkACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DelinkACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DelinkACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DelinkACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type LinkACustomer200 = {
  customer: Customer;
};

export type LinkACustomerBody = {
  /** The `id` of the customer which is to be set as the immediate parent.
   */
  parent_id?: string;
  /** The `id` of the customer who will pay the invoices for this customer. Can be the child itself or the `invoice_owner_id`.
   */
  payment_owner_id?: string;
  /** The `id` of the customer who will be invoiced for charges incurred. Can be the child itself or any parent in its hierarchy.
   */
  invoice_owner_id?: string;
  /** The level of access that the parent and the child itself have to the child's information can be set here. This data falls into two categories:

* **Self-Serve Portal data:** subscriptions and invoices of the child.
* **Email Notifications:** subscription-, invoice- and payment-related notifications for the child.



**Usage:**

* Value set to `true`: Applies the global access levels defined in the Account Hierarchy settings to this child. These global settings are configured in the admin console
* Value set to `false`: Customizes the access levels for this customer. Pass the `parent_account_access` and `child_account_access` parameters to specify the settings. If you skip passing any parameters, the global settings are applied for them.
.
 */
  use_default_hierarchy_settings?: boolean;
  /** Parameters for parent_account_access
   */
  parent_account_access?: LinkACustomerBodyParentAccountAccess;
  /** Parameters for child_account_access
   */
  child_account_access?: LinkACustomerBodyChildAccountAccess;
};

/**
 * Sets the child's level of access to its own invoices on the Self-Serve Portal. \* yes - The child account can view and download its own invoices. \* view_only - The child account can only view its invoices and not download them. \* no - The child account can neither view nor download its own invoices.

 */
export type LinkACustomerBodyChildAccountAccessPortalDownloadInvoices =
  (typeof LinkACustomerBodyChildAccountAccessPortalDownloadInvoices)[keyof typeof LinkACustomerBodyChildAccountAccessPortalDownloadInvoices];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerBodyChildAccountAccessPortalDownloadInvoices = {
  yes: "yes",
  view_only: "view_only",
  no: "no",
} as const;

/**
 * Sets the child's level of access to its own subscriptions on the Self-Serve Portal. \* view_only - The child account can only view its own subscriptions. \* yes - The child account can view and edit its own subscriptions.

 */
export type LinkACustomerBodyChildAccountAccessPortalEditSubscriptions =
  (typeof LinkACustomerBodyChildAccountAccessPortalEditSubscriptions)[keyof typeof LinkACustomerBodyChildAccountAccessPortalEditSubscriptions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerBodyChildAccountAccessPortalEditSubscriptions = {
  yes: "yes",
  view_only: "view_only",
} as const;

/**
 * Parameters for child_account_access

 */
export type LinkACustomerBodyChildAccountAccess = {
  /** Sets the child's level of access to its own subscriptions on the Self-Serve Portal. \* view_only - The child account can only view its own subscriptions. \* yes - The child account can view and edit its own subscriptions.
   */
  portal_edit_subscriptions?: LinkACustomerBodyChildAccountAccessPortalEditSubscriptions;
  /** Sets the child's level of access to its own invoices on the Self-Serve Portal. \* yes - The child account can view and download its own invoices. \* view_only - The child account can only view its invoices and not download them. \* no - The child account can neither view nor download its own invoices.
   */
  portal_download_invoices?: LinkACustomerBodyChildAccountAccessPortalDownloadInvoices;
  /** If `true`, the child account will receive subscription-related emails for its own subscriptions.
   */
  send_subscription_emails?: boolean;
  /** If `true`, the child account will receive payment-related emails for its own invoices.
   */
  send_payment_emails?: boolean;
  /** If `true`, the child account will receive invoice-related emails for its own invoices.
   */
  send_invoice_emails?: boolean;
};

/**
 * Sets parent's level of access to child invoices on the Self-Serve Portal. \* no - The parent account can neither view nor download the invoices of the child account. \* view_only - The parent account can only view the invoices of the child account. \* yes - The parent account can view and download the invoices of the child account.

 */
export type LinkACustomerBodyParentAccountAccessPortalDownloadChildInvoices =
  (typeof LinkACustomerBodyParentAccountAccessPortalDownloadChildInvoices)[keyof typeof LinkACustomerBodyParentAccountAccessPortalDownloadChildInvoices];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerBodyParentAccountAccessPortalDownloadChildInvoices = {
  yes: "yes",
  view_only: "view_only",
  no: "no",
} as const;

/**
 * Sets parent's level of access to child subscriptions on the Self-Serve Portal. \* yes - The parent account can view and edit the subscriptions of the child account. \* no - The parent account cannot view or edit the subscriptions of the child account. \* view_only - The parent account can only view the subscriptions of the child account.

 */
export type LinkACustomerBodyParentAccountAccessPortalEditChildSubscriptions =
  (typeof LinkACustomerBodyParentAccountAccessPortalEditChildSubscriptions)[keyof typeof LinkACustomerBodyParentAccountAccessPortalEditChildSubscriptions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerBodyParentAccountAccessPortalEditChildSubscriptions =
  {
    yes: "yes",
    view_only: "view_only",
    no: "no",
  } as const;

/**
 * Parameters for parent_account_access

 */
export type LinkACustomerBodyParentAccountAccess = {
  /** Sets parent's level of access to child subscriptions on the Self-Serve Portal. \* yes - The parent account can view and edit the subscriptions of the child account. \* no - The parent account cannot view or edit the subscriptions of the child account. \* view_only - The parent account can only view the subscriptions of the child account.
   */
  portal_edit_child_subscriptions?: LinkACustomerBodyParentAccountAccessPortalEditChildSubscriptions;
  /** Sets parent's level of access to child invoices on the Self-Serve Portal. \* no - The parent account can neither view nor download the invoices of the child account. \* view_only - The parent account can only view the invoices of the child account. \* yes - The parent account can view and download the invoices of the child account.
   */
  portal_download_child_invoices?: LinkACustomerBodyParentAccountAccessPortalDownloadChildInvoices;
  /** If `true`, the parent account will receive subscription-related emails sent to the child account.
   */
  send_subscription_emails?: boolean;
  /** If `true`, the parent account will receive payment-related emails sent to the child account.
   */
  send_payment_emails?: boolean;
  /** If `true`, the parent account will receive invoice-related emails sent to the child account.
   */
  send_invoice_emails?: boolean;
};

export type LinkACustomerChargebeeEventWebhook =
  (typeof LinkACustomerChargebeeEventWebhook)[keyof typeof LinkACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type LinkACustomerChargebeeEventEmail =
  (typeof LinkACustomerChargebeeEventEmail)[keyof typeof LinkACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type LinkACustomerChargebeeEventActions =
  (typeof LinkACustomerChargebeeEventActions)[keyof typeof LinkACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LinkACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type LinkACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: LinkACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: LinkACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: LinkACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteACustomer200 = {
  customer: Customer;
  card?: Card;
};

export type DeleteACustomerBody = {
  /** Deletes the Payment Method from the gateway/vault.
   */
  delete_payment_method?: boolean;
};

export type DeleteACustomerChargebeeEventWebhook =
  (typeof DeleteACustomerChargebeeEventWebhook)[keyof typeof DeleteACustomerChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACustomerChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACustomerChargebeeEventEmail =
  (typeof DeleteACustomerChargebeeEventEmail)[keyof typeof DeleteACustomerChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACustomerChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACustomerChargebeeEventActions =
  (typeof DeleteACustomerChargebeeEventActions)[keyof typeof DeleteACustomerChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteACustomerChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteACustomerHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteACustomerChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteACustomerChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteACustomerChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateScheduledChangesASubscriptionScheduledChange200 = {
  subscription_scheduled_change: SubscriptionScheduledChange;
};

export type UpdateScheduledChangesASubscriptionScheduledChangeBodyActionType =
  (typeof UpdateScheduledChangesASubscriptionScheduledChangeBodyActionType)[keyof typeof UpdateScheduledChangesASubscriptionScheduledChangeBodyActionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateScheduledChangesASubscriptionScheduledChangeBodyActionType =
  {
    cancel: "cancel",
    pause: "pause",
    reactivate: "reactivate",
  } as const;

export type UpdateScheduledChangesASubscriptionScheduledChangeBody = {
  cancel_reason_code?: string;
  action_type?: UpdateScheduledChangesASubscriptionScheduledChangeBodyActionType;
};

export type UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventWebhook =
  (typeof UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventWebhook)[keyof typeof UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventWebhook =
  {
    "all-disabled": "all-disabled",
  } as const;

export type UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventEmail =
  (typeof UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventEmail)[keyof typeof UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventEmail =
  {
    "all-disabled": "all-disabled",
  } as const;

export type UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventActions =
  (typeof UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventActions)[keyof typeof UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventActions =
  {
    "all-disabled": "all-disabled",
  } as const;

export type UpdateScheduledChangesASubscriptionScheduledChangeHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateScheduledChangesASubscriptionScheduledChangeChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ScheduledChangesASubscriptionScheduledChange200 = {
  subscription_scheduled_change: SubscriptionScheduledChange;
};

export type ScheduledChangesASubscriptionScheduledChangeHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type PauseASubscription200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
  credit_notes?: CreditNote[];
};

/**
 * Handles dunning for invoices already in the dunning cycle when a subscription is paused. Applicable when [pause_option](/docs/api/subscriptions#pause_a_subscription_pause_option) is set as `immediately`.

If invoice is in the dunning cycle, `invoice_dunning_handing` allows you to `stop` or `continue` dunning.
\* continue - Continue dunning \* stop - Stop dunning

 */
export type PauseASubscriptionBodyInvoiceDunningHandling =
  (typeof PauseASubscriptionBodyInvoiceDunningHandling)[keyof typeof PauseASubscriptionBodyInvoiceDunningHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseASubscriptionBodyInvoiceDunningHandling = {
  continue: "continue",
  stop: "stop",
} as const;

/**
 * Applicable when unbilled charges are present for the subscription and [pause_option](/docs/api/subscriptions#pause_a_subscription_pause_option) is set as `immediately`. **Note:** On the invoice raised, an automatic charge is attempted on the payment method available, if customer's auto-collection property is set to `on`.
\* invoice -

Invoice charges

If `invoice` is chosen, an automatic charge is attempted on the payment method available if the customer has enabled auto-collection. If a payment collection fails or when auto-collection is not enabled, the invoice is closed as unpaid.
\* no_action -

Retain as unbilled

If `no_action` is chosen, charges are added to the resumption invoice.

 */
export type PauseASubscriptionBodyUnbilledChargesHandling =
  (typeof PauseASubscriptionBodyUnbilledChargesHandling)[keyof typeof PauseASubscriptionBodyUnbilledChargesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseASubscriptionBodyUnbilledChargesHandling = {
  no_action: "no_action",
  invoice: "invoice",
} as const;

/**
 * List of options to pause the subscription. \* billing_cycles -

Pause at the end of the current term, and resume automatically after the set number of billing cycles (in [skip_billing_cycles](/docs/api/subscriptions#pause_a_subscription_skip_billing_cycles)) have been skipped
\* immediately - Pause immediately
\* end_of_term - Pause at the end of current term
\* specific_date - Pause on a specific date

 */
export type PauseASubscriptionBodyPauseOption =
  (typeof PauseASubscriptionBodyPauseOption)[keyof typeof PauseASubscriptionBodyPauseOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseASubscriptionBodyPauseOption = {
  immediately: "immediately",
  end_of_term: "end_of_term",
  specific_date: "specific_date",
  billing_cycles: "billing_cycles",
} as const;

export type PauseASubscriptionBody = {
  /** List of options to pause the subscription. \* billing_cycles -

Pause at the end of the current term, and resume automatically after the set number of billing cycles (in [skip_billing_cycles](/docs/api/subscriptions#pause_a_subscription_skip_billing_cycles)) have been skipped
\* immediately - Pause immediately
\* end_of_term - Pause at the end of current term
\* specific_date - Pause on a specific date
 */
  pause_option?: PauseASubscriptionBodyPauseOption;
  /** Date on which the subscription will be paused. Applicable when `specific_date` option is chosen in the [pause_option](/docs/api/subscriptions#pause_a_subscription_pause_option) field.

For non-renewing subscriptions, `pause_date` should be before the cancellation date.
 */
  pause_date?: number;
  /** Applicable when unbilled charges are present for the subscription and [pause_option](/docs/api/subscriptions#pause_a_subscription_pause_option) is set as `immediately`. **Note:** On the invoice raised, an automatic charge is attempted on the payment method available, if customer's auto-collection property is set to `on`.
\* invoice -

Invoice charges

If `invoice` is chosen, an automatic charge is attempted on the payment method available if the customer has enabled auto-collection. If a payment collection fails or when auto-collection is not enabled, the invoice is closed as unpaid.
\* no_action -

Retain as unbilled

If `no_action` is chosen, charges are added to the resumption invoice.
 */
  unbilled_charges_handling?: PauseASubscriptionBodyUnbilledChargesHandling;
  /** Handles dunning for invoices already in the dunning cycle when a subscription is paused. Applicable when [pause_option](/docs/api/subscriptions#pause_a_subscription_pause_option) is set as `immediately`.

If invoice is in the dunning cycle, `invoice_dunning_handing` allows you to `stop` or `continue` dunning.
\* continue - Continue dunning \* stop - Stop dunning
 */
  invoice_dunning_handling?: PauseASubscriptionBodyInvoiceDunningHandling;
  /** The number of subscription billing cycles that will be skipped. The subscription resumes after the set number of billing cycles have been skipped. This is applicable only when the value of of [pause_option](/docs/api/subscriptions#pause_a_subscription_pause_option) is `billing_cycles`.
   */
  skip_billing_cycles?: number;
  /** For a paused subscription, it is the date/time when the subscription is scheduled to resume. If the pause is for an indefinite period, this value is not returned.

For non-renewing subscriptions,`resume_date` should be before the cancellation date.
 */
  resume_date?: number;
};

export type PauseASubscriptionChargebeeEventWebhook =
  (typeof PauseASubscriptionChargebeeEventWebhook)[keyof typeof PauseASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type PauseASubscriptionChargebeeEventEmail =
  (typeof PauseASubscriptionChargebeeEventEmail)[keyof typeof PauseASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type PauseASubscriptionChargebeeEventActions =
  (typeof PauseASubscriptionChargebeeEventActions)[keyof typeof PauseASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type PauseASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: PauseASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: PauseASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: PauseASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListContractTermsForASubscription200ListItem = {
  contract_term: ContractTerm;
};

export type ListContractTermsForASubscription200 = {
  list: ListContractTermsForASubscription200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListContractTermsForASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListContractTermsForASubscriptionParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type ListDiscountsForASubscription200ListItem = {
  discount: Discount;
};

export type ListDiscountsForASubscription200 = {
  list: ListDiscountsForASubscription200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListDiscountsForASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListDiscountsForASubscriptionParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
};

export type EditAdvanceInvoiceSchedule200 = {
  advance_invoice_schedules: AdvanceInvoiceSchedule[];
};

/**
 * Parameters for specific_dates_schedule

 */
export type EditAdvanceInvoiceScheduleBodySpecificDatesSchedule = {
  /** The [unique id](advance_invoice_schedules#advance_invoice_schedule_id) of the member of the [advance_invoice_schedule](advance_invoice_schedules#advance_invoice_schedule) array which corresponds to the [specific_dates_schedule](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule) that you intend to modify. Only applicable when [schedule_type](subscriptions#edit_advance_invoice_schedule_schedule_type) is specific_dates.
   */
  id?: string[];
  /** The number of billing cycles to charge for, on the date specified. Applicable only when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is specific_dates.
   */
  terms_to_charge?: number[];
  /** The unique id of the member of the advance_invoice_schedule array which corresponds to the specific_dates_schedule that you intend to modify. Only applicable when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is `specific_dates`.
   */
  date?: number[];
};

/**
 * Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.

 */
export type EditAdvanceInvoiceScheduleBodyFixedIntervalScheduleEndScheduleOn =
  (typeof EditAdvanceInvoiceScheduleBodyFixedIntervalScheduleEndScheduleOn)[keyof typeof EditAdvanceInvoiceScheduleBodyFixedIntervalScheduleEndScheduleOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditAdvanceInvoiceScheduleBodyFixedIntervalScheduleEndScheduleOn =
  {
    after_number_of_intervals: "after_number_of_intervals",
    specific_date: "specific_date",
    subscription_end: "subscription_end",
  } as const;

/**
 * Parameters for fixed_interval_schedule

 */
export type EditAdvanceInvoiceScheduleBodyFixedIntervalSchedule = {
  /** The number of advance invoices to generate. The schedule is created such that the total number of billing cycles in the schedule does not exceed the [`remaining_billing_cycles`](subscriptions#subscription_remaining_billing_cycles) of the subscription. This parameter is applicable only when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `after_number_of_intervals`
   */
  number_of_occurrences?: number;
  /** The number of days before each interval that advance invoices are generated.
   */
  days_before_renewal?: number;
  /** Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.
   */
  end_schedule_on?: EditAdvanceInvoiceScheduleBodyFixedIntervalScheduleEndScheduleOn;
  /** The date when the schedule should end. Advance invoices are not generated beyond this date. It must be at least 1 day before the start of the last billing cycle of the subscription and also within 5 years from the current date. This parameter is only applicable when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `specific_date`.
   */
  end_date?: number;
};

/**
 * The type of advance invoice or advance invoicing schedule. \* specific_dates - Charge on [specific dates](subscriptions#charge_future_renewals_specific_dates_schedule_date). For each date, specify the [number of billing cycles](subscriptions#charge_future_renewals_specific_dates_schedule_terms_to_charge) to charge for. Up to 5 dates can be configured. \* fixed_intervals - Charge at fixed intervals of time. Specify the [number of billing cycles](subscriptions#charge_future_renewals_terms_to_charge) that constitute an interval and the number of [days before each interval](subscriptions#charge_future_renewals_fixed_interval_schedule_days_before_renewal) that the invoice should be generated. Also specify [when the schedule should end](subscriptions#charge_future_renewals_fixed_interval_schedule_end_schedule_on).

 */
export type EditAdvanceInvoiceScheduleBodyScheduleType =
  (typeof EditAdvanceInvoiceScheduleBodyScheduleType)[keyof typeof EditAdvanceInvoiceScheduleBodyScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditAdvanceInvoiceScheduleBodyScheduleType = {
  specific_dates: "specific_dates",
  fixed_intervals: "fixed_intervals",
} as const;

export type EditAdvanceInvoiceScheduleBody = {
  /** The number of billing cycles in one interval.
   */
  terms_to_charge?: number;
  /** The type of advance invoice or advance invoicing schedule. \* specific_dates - Charge on [specific dates](subscriptions#charge_future_renewals_specific_dates_schedule_date). For each date, specify the [number of billing cycles](subscriptions#charge_future_renewals_specific_dates_schedule_terms_to_charge) to charge for. Up to 5 dates can be configured. \* fixed_intervals - Charge at fixed intervals of time. Specify the [number of billing cycles](subscriptions#charge_future_renewals_terms_to_charge) that constitute an interval and the number of [days before each interval](subscriptions#charge_future_renewals_fixed_interval_schedule_days_before_renewal) that the invoice should be generated. Also specify [when the schedule should end](subscriptions#charge_future_renewals_fixed_interval_schedule_end_schedule_on).
   */
  schedule_type?: EditAdvanceInvoiceScheduleBodyScheduleType;
  /** Parameters for fixed_interval_schedule
   */
  fixed_interval_schedule?: EditAdvanceInvoiceScheduleBodyFixedIntervalSchedule;
  /** Parameters for specific_dates_schedule
   */
  specific_dates_schedule?: EditAdvanceInvoiceScheduleBodySpecificDatesSchedule;
};

export type EditAdvanceInvoiceScheduleChargebeeEventWebhook =
  (typeof EditAdvanceInvoiceScheduleChargebeeEventWebhook)[keyof typeof EditAdvanceInvoiceScheduleChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditAdvanceInvoiceScheduleChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type EditAdvanceInvoiceScheduleChargebeeEventEmail =
  (typeof EditAdvanceInvoiceScheduleChargebeeEventEmail)[keyof typeof EditAdvanceInvoiceScheduleChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditAdvanceInvoiceScheduleChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type EditAdvanceInvoiceScheduleChargebeeEventActions =
  (typeof EditAdvanceInvoiceScheduleChargebeeEventActions)[keyof typeof EditAdvanceInvoiceScheduleChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EditAdvanceInvoiceScheduleChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type EditAdvanceInvoiceScheduleHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: EditAdvanceInvoiceScheduleChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: EditAdvanceInvoiceScheduleChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: EditAdvanceInvoiceScheduleChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveScheduledPause200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type RemoveScheduledPauseChargebeeEventWebhook =
  (typeof RemoveScheduledPauseChargebeeEventWebhook)[keyof typeof RemoveScheduledPauseChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledPauseChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledPauseChargebeeEventEmail =
  (typeof RemoveScheduledPauseChargebeeEventEmail)[keyof typeof RemoveScheduledPauseChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledPauseChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledPauseChargebeeEventActions =
  (typeof RemoveScheduledPauseChargebeeEventActions)[keyof typeof RemoveScheduledPauseChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledPauseChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledPauseHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveScheduledPauseChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveScheduledPauseChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveScheduledPauseChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type OverrideBillingProfile200 = {
  subscription: Subscription;
  payment_source?: PaymentSource;
};

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.

 */
export type OverrideBillingProfileBodyAutoCollection =
  (typeof OverrideBillingProfileBodyAutoCollection)[keyof typeof OverrideBillingProfileBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverrideBillingProfileBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type OverrideBillingProfileBody = {
  /** Unique identifier of the payment source to be attached to this subscription.
   */
  payment_source_id?: string;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available.
   */
  auto_collection?: OverrideBillingProfileBodyAutoCollection;
};

export type OverrideBillingProfileChargebeeEventWebhook =
  (typeof OverrideBillingProfileChargebeeEventWebhook)[keyof typeof OverrideBillingProfileChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverrideBillingProfileChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type OverrideBillingProfileChargebeeEventEmail =
  (typeof OverrideBillingProfileChargebeeEventEmail)[keyof typeof OverrideBillingProfileChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverrideBillingProfileChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type OverrideBillingProfileChargebeeEventActions =
  (typeof OverrideBillingProfileChargebeeEventActions)[keyof typeof OverrideBillingProfileChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OverrideBillingProfileChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type OverrideBillingProfileHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: OverrideBillingProfileChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: OverrideBillingProfileChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: OverrideBillingProfileChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportContractTerm200 = {
  contract_term: ContractTerm;
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.


 */
export type ImportContractTermBodyContractTermActionAtTermEnd =
  (typeof ImportContractTermBodyContractTermActionAtTermEnd)[keyof typeof ImportContractTermBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportContractTermBodyContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Current status of contract \* active - An actively running contract term. \* completed - The contract term has run its full duration. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* terminated - The contract term was terminated ahead of completion.

 */
export type ImportContractTermBodyContractTermStatus =
  (typeof ImportContractTermBodyContractTermStatus)[keyof typeof ImportContractTermBodyContractTermStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportContractTermBodyContractTermStatus = {
  active: "active",
  completed: "completed",
  cancelled: "cancelled",
  terminated: "terminated",
} as const;

/**
 * Parameters for contract_term

 */
export type ImportContractTermBodyContractTerm = {
  /** Id that uniquely identifies the contract term in the site.
   */
  id?: string;
  /** The date when the contract term was created.
   */
  created_at?: number;
  /** The start date of the contract term
   */
  contract_start?: number;
  /** The end date of the contract term
   */
  contract_end?: number;
  /** Current status of contract \* active - An actively running contract term. \* completed - The contract term has run its full duration. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* terminated - The contract term was terminated ahead of completion.
 */
  status?: ImportContractTermBodyContractTermStatus;
  /** The amount raised for the contract term till the time of importing the subscription. This amount is added to the [total_contract_value](contract_terms#contract_term_total_contract_value)
   */
  total_amount_raised?: number;
  /** The amount raised for the contract term till the time of importing the subscription excluding tax. This amount is added to the [total_contract_value_before_tax](contract_terms#contract_term_total_contract_value)
   */
  total_amount_raised_before_tax?: number;
  /** The sum of the [totals](invoices#invoice_total) of all the invoices raised as part of the contract term. For `active` contract terms, this is a predicted value. The value depends on the [type of currency](./#handling_currency_units). If the subscription was [imported](#import_a_subscription) with the contract term, then this value includes the value passed for `total_amount_raised`.
   */
  total_contract_value?: number;
  /** It refers to the total amount of revenue that is expected to be generated from a specific contract term, calculated as the sum of all invoices raised during the term, regardless of payment status. It is based on past performance and the specified currency in the contract. If the subscription was imported, the value for `total_amount_raised_before_tax` is included in the calculation of the total contract value before tax. It's important to note that this value excludes any applicable taxes.
   */
  total_contract_value_before_tax?: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle?: number;
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.

 */
  action_at_term_end?: ImportContractTermBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

export type ImportContractTermBody = {
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** Parameters for contract_term
   */
  contract_term?: ImportContractTermBodyContractTerm;
};

export type ImportContractTermChargebeeEventWebhook =
  (typeof ImportContractTermChargebeeEventWebhook)[keyof typeof ImportContractTermChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportContractTermChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportContractTermChargebeeEventEmail =
  (typeof ImportContractTermChargebeeEventEmail)[keyof typeof ImportContractTermChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportContractTermChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportContractTermChargebeeEventActions =
  (typeof ImportContractTermChargebeeEventActions)[keyof typeof ImportContractTermChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportContractTermChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportContractTermHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportContractTermChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportContractTermChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportContractTermChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveASubscription200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type RetrieveASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveScheduledResumption200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type RemoveScheduledResumptionChargebeeEventWebhook =
  (typeof RemoveScheduledResumptionChargebeeEventWebhook)[keyof typeof RemoveScheduledResumptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledResumptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledResumptionChargebeeEventEmail =
  (typeof RemoveScheduledResumptionChargebeeEventEmail)[keyof typeof RemoveScheduledResumptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledResumptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledResumptionChargebeeEventActions =
  (typeof RemoveScheduledResumptionChargebeeEventActions)[keyof typeof RemoveScheduledResumptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledResumptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledResumptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveScheduledResumptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveScheduledResumptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveScheduledResumptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportUnbilledCharges200 = {
  unbilled_charges: UnbilledCharge[];
};

/**
 * Parameters for tiers

 */
export type ImportUnbilledChargesBodyTiers = {
  /** Uniquely identifies an unbilled charge.
   */
  unbilled_charge_id: string[];
  /** The lower limit of a range of units for the tier
   */
  starting_unit?: number[];
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number[];
  /** The number of units purchased in a range.
   */
  quantity_used?: number[];
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
};

export type ImportUnbilledChargesBody = {
  /** Parameters for unbilled_charges
   */
  unbilled_charges?: ImportUnbilledChargesBodyUnbilledCharges;
  /** Parameters for discounts
   */
  discounts?: ImportUnbilledChargesBodyDiscounts;
  /** Parameters for tiers
   */
  tiers?: ImportUnbilledChargesBodyTiers;
};

/**
 * The type of deduction and the amount to which it is applied. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice.

 */
export type ImportUnbilledChargesBodyDiscountsEntityTypeItem =
  (typeof ImportUnbilledChargesBodyDiscountsEntityTypeItem)[keyof typeof ImportUnbilledChargesBodyDiscountsEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportUnbilledChargesBodyDiscountsEntityTypeItem = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

/**
 * Parameters for discounts

 */
export type ImportUnbilledChargesBodyDiscounts = {
  /** Uniquely identifies an unbilled charge.
   */
  unbilled_charge_id?: string[];
  entity_type?: ImportUnbilledChargesBodyDiscountsEntityTypeItem[];
  /** When the deduction is due to a `coupon`, then this is the `id` of the coupon. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  entity_id?: string[];
  /** Description for this deduction.
   */
  description?: string[];
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number[];
};

/**
 * Specifies the modelled entity this line item is based on. \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price

 */
export type ImportUnbilledChargesBodyUnbilledChargesEntityTypeItem =
  (typeof ImportUnbilledChargesBodyUnbilledChargesEntityTypeItem)[keyof typeof ImportUnbilledChargesBodyUnbilledChargesEntityTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportUnbilledChargesBodyUnbilledChargesEntityTypeItem = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * Parameters for unbilled_charges

 */
export type ImportUnbilledChargesBodyUnbilledCharges = {
  /** Uniquely identifies an unbilled charge.
   */
  id?: string[];
  /** Start date of this charge.
   */
  date_from: number[];
  /** End date of this charge.
   */
  date_to: number[];
  entity_type: ImportUnbilledChargesBodyUnbilledChargesEntityTypeItem[];
  /** The identifier of the modelled entity this charge is based on. Will be null for 'adhoc' entity type.
   */
  entity_id?: string[];
  /** Detailed description about this charge.
   */
  description?: string[];
  /** Unit amount of the charge item.
   */
  unit_amount?: number[];
  /** Quantity of the item which is represented by this charge.
   */
  quantity?: number[];
  /** Total amount of this charge. Typically equals to unit amount x quantity.
   */
  amount?: number[];
  /** The decimal representation of the amount for the charge, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string[];
  /** The decimal representation of the quantity of this entity. Returned when the entity is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The decimal representation of the unit amount for the entity. The value is in major units of the currency. Returned when the entity is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string[];
  /** Total discounts for this charge.
   */
  discount_amount?: number[];
  /** If the unbilled charge falls within the subscription's current term it will be used for proration.
   */
  use_for_proration?: boolean[];
  /** The value of this parameter will be true if it is a recurring unbilled charge for a future term.
   */
  is_advance_charge?: boolean[];
};

export type ImportUnbilledChargesChargebeeEventWebhook =
  (typeof ImportUnbilledChargesChargebeeEventWebhook)[keyof typeof ImportUnbilledChargesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportUnbilledChargesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportUnbilledChargesChargebeeEventEmail =
  (typeof ImportUnbilledChargesChargebeeEventEmail)[keyof typeof ImportUnbilledChargesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportUnbilledChargesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportUnbilledChargesChargebeeEventActions =
  (typeof ImportUnbilledChargesChargebeeEventActions)[keyof typeof ImportUnbilledChargesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportUnbilledChargesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportUnbilledChargesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportUnbilledChargesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportUnbilledChargesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportUnbilledChargesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CreateSubscriptionForItems200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
};

/**
 * Parameters for item_tiers

 */
export type CreateSubscriptionForItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type CreateSubscriptionForItemsBody = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) this subscription should be [linked](/docs/api/advanced-features?prod_cat_ver=2#mbe-linked-be) to. Applicable only when multiple business entities have been created for the site. This must be the same as the business entity of the `{customer_id}` for the operation to be successful.  
**Note**

An alternative way of passing this parameter is by means of a [custom HTTP header](/docs/api/advanced-features?prod_cat_ver=2#mbe-header-main).
.
 */
  business_entity_id?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period.
   */
  trial_end?: number;
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** Defines [Net D](https://www.chargebee.com/docs/net_d.html) for the subscription. Net D is the number of days within which any invoice raised for the subscription must be paid.

* If a value is provided: Net D is set explicitly for the subscription to the value provided. The value must be one among those defined in the [site configuration](https://www.chargebee.com/docs/net_d.html#enable-net-d-for-chargebee-invoices).
* If not provided: The attribute is not set and therefore not returned by the API. In this case, when an invoice is raised -- whether now or later -- the `net_term_days` defined at the [customer level](customers#customer_net_term_days) is considered.
.
 */
  net_term_days?: number;
  /** The date/time at which the subscription is to start. If not provided, the subscription starts immediately. You can provide a value in the past as well. This is called backdating the subscription creation and is done when the subscription has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past, where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `start_date` cannot be earlier than 14th February.
.
 */
  start_date?: number;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments.
   */
  auto_collection?: CreateSubscriptionForItemsBodyAutoCollection;
  /** The number of subscription billing cycles (including the first one) to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html).
   */
  terms_to_charge?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: CreateSubscriptionForItemsBodyBillingAlignmentMode;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or coupon codes.
   */
  coupon_ids?: string[];
  /** Id of the payment source to be attached to this subscription.
   */
  payment_source_id?: string;
  /** If `true`, ignores the [hierarchy relationship](./customers?prod_cat_ver=2#customer_relationship) and uses customer as payment and invoice owner.
   */
  override_relationship?: boolean;
  /** A customer-facing note added to all invoices associated with this subscription. This note is one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is set to `true`, and if the site is configured to set invoice dates to the date of closing, then upon invoice closure, this date is changed to the invoice closing date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* It is not earlier than `start_date`.
* It is not more than one calendar month into the past. Eg. If today is 13th January, then you cannot pass a value that is earlier than 13th December.
* `invoice_immediately` is true.
.
 */
  invoice_date?: number;
  /** A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./#meta_data).
   */
  meta_data?: CreateSubscriptionForItemsBodyMetaData;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
  /** Indicates whether the primary payment source should be replaced with this payment source. In case of Create Subscription for Customer endpoint, the default value is True. Otherwise, the default value is False.
   */
  replace_primary_payment_source?: boolean;
  /** The period of time by which the first term of the subscription is to be extended free-of-charge. The value must be in multiples of free_period_unit.
   */
  free_period?: number;
  /** The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* week - Charge based on week(s) \* month - Charge based on month(s) \* day - Charge based on day(s) \* year - Charge based on year(s)
   */
  free_period_unit?: CreateSubscriptionForItemsBodyFreePeriodUnit;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** Indicates whether the invoices for this subscription are generated with a `pending` `status`. This attribute is set to `true` automatically when the subscription has item prices that belong to `metered` items.

You can also set this to `true` explicitly using the [create](/docs/api/subscriptions#create_subscription_for_items_create_pending_invoices)/[update](/docs/api/subscriptions#update_subscription_for_items_create_pending_invoices) subscription operations. This is useful in the following scenarios:

* When tracking usages and calculating usage-based charges on your end. You can then add them to the subscription as a [one-time charge](https://www.chargebee.com/docs/charges.html) at the end of the billing term.
* When you need to inspect all charges before closing invoices for this subscription.

Applicable only when [Metered Billing](https://www.chargebee.com/docs/metered_billing.html) is enabled for the site
.
 */
  create_pending_invoices?: boolean;
  /** Set to `false` to override for this subscription, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the [customer level](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: boolean;
  /** If you want to bill the usages from the previous billing cycle, set this parameter to `true`. This is useful if the subscription has moved from another system into Chargebee and you haven't closed the previous cycle's invoice yet. This creates a `pending` invoice immediately on subscription creation, to which you can [add usages](/docs/api/usages#create_a_usage) for the previous cycle.

If any non-`metered` items are present for the current term, they're also added to this `pending` invoice. As with all `pending` invoices, this invoice is also [closed automatically](https://www.chargebee.com/docs/metered_billing.html#configuring-metered-billing) or via an [API call](/docs/api/invoices#close_a_pending_invoice). This parameter can be passed only when the `create_pending_invoices` is `true`
.
 */
  first_invoice_pending?: boolean;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.
   */
  trial_end_action?: CreateSubscriptionForItemsBodyTrialEndAction;
  /** The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant
   */
  payment_initiator?: CreateSubscriptionForItemsBodyPaymentInitiator;
  /** Parameters for shipping_address
   */
  shipping_address?: CreateSubscriptionForItemsBodyShippingAddress;
  /** Parameters for payment_intent
   */
  payment_intent?: CreateSubscriptionForItemsBodyPaymentIntent;
  /** Parameters for contract_term
   */
  contract_term?: CreateSubscriptionForItemsBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: CreateSubscriptionForItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: CreateSubscriptionForItemsBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: CreateSubscriptionForItemsBodyItemTiers;
  [key: string]: any;
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type CreateSubscriptionForItemsBodyDiscountsPeriodUnitItem =
  (typeof CreateSubscriptionForItemsBodyDiscountsPeriodUnitItem)[keyof typeof CreateSubscriptionForItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type CreateSubscriptionForItemsBodyDiscountsDurationTypeItem =
  (typeof CreateSubscriptionForItemsBodyDiscountsDurationTypeItem)[keyof typeof CreateSubscriptionForItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyDiscountsDurationTypeItem = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CreateSubscriptionForItemsBodyDiscountsApplyOnItem =
  (typeof CreateSubscriptionForItemsBodyDiscountsApplyOnItem)[keyof typeof CreateSubscriptionForItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type CreateSubscriptionForItemsBodyDiscounts = {
  apply_on: CreateSubscriptionForItemsBodyDiscountsApplyOnItem[];
  duration_type: CreateSubscriptionForItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: CreateSubscriptionForItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type CreateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem =
  (typeof CreateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem)[keyof typeof CreateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type CreateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof CreateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof CreateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type CreateSubscriptionForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** Sub Item Plan Unit Amount for create subscription
   */
  unit_price?: number[];
  /** Sub Item Plan Unit Amount in Decimal for create subscription
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: CreateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: CreateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type CreateSubscriptionForItemsBodyContractTermActionAtTermEnd =
  (typeof CreateSubscriptionForItemsBodyContractTermActionAtTermEnd)[keyof typeof CreateSubscriptionForItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
} as const;

/**
 * Parameters for contract_term

 */
export type CreateSubscriptionForItemsBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: CreateSubscriptionForItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type CreateSubscriptionForItemsBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* bancontact - bancontact \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort

 */
export type CreateSubscriptionForItemsBodyPaymentIntentPaymentMethodType =
  (typeof CreateSubscriptionForItemsBodyPaymentIntentPaymentMethodType)[keyof typeof CreateSubscriptionForItemsBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type CreateSubscriptionForItemsBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* netbanking_emandates - netbanking_emandates \* direct_debit - direct_debit \* bancontact - bancontact \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort
   */
  payment_method_type?: CreateSubscriptionForItemsBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: CreateSubscriptionForItemsBodyPaymentIntentAdditionalInformation;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type CreateSubscriptionForItemsBodyShippingAddressValidationStatus =
  (typeof CreateSubscriptionForItemsBodyShippingAddressValidationStatus)[keyof typeof CreateSubscriptionForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type CreateSubscriptionForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: CreateSubscriptionForItemsBodyShippingAddressValidationStatus;
};

/**
 * The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant

 */
export type CreateSubscriptionForItemsBodyPaymentInitiator =
  (typeof CreateSubscriptionForItemsBodyPaymentInitiator)[keyof typeof CreateSubscriptionForItemsBodyPaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyPaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.

 */
export type CreateSubscriptionForItemsBodyTrialEndAction =
  (typeof CreateSubscriptionForItemsBodyTrialEndAction)[keyof typeof CreateSubscriptionForItemsBodyTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* week - Charge based on week(s) \* month - Charge based on month(s) \* day - Charge based on day(s) \* year - Charge based on year(s)

 */
export type CreateSubscriptionForItemsBodyFreePeriodUnit =
  (typeof CreateSubscriptionForItemsBodyFreePeriodUnit)[keyof typeof CreateSubscriptionForItemsBodyFreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyFreePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./#meta_data).

 */
export type CreateSubscriptionForItemsBodyMetaData = { [key: string]: any };

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) for Calendar Billing. Only applicable when using Calendar Billing. The default value is that which has been configured for the site. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type CreateSubscriptionForItemsBodyBillingAlignmentMode =
  (typeof CreateSubscriptionForItemsBodyBillingAlignmentMode)[keyof typeof CreateSubscriptionForItemsBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments.

 */
export type CreateSubscriptionForItemsBodyAutoCollection =
  (typeof CreateSubscriptionForItemsBodyAutoCollection)[keyof typeof CreateSubscriptionForItemsBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type CreateSubscriptionForItemsChargebeeEventWebhook =
  (typeof CreateSubscriptionForItemsChargebeeEventWebhook)[keyof typeof CreateSubscriptionForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CreateSubscriptionForItemsChargebeeEventEmail =
  (typeof CreateSubscriptionForItemsChargebeeEventEmail)[keyof typeof CreateSubscriptionForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CreateSubscriptionForItemsChargebeeEventActions =
  (typeof CreateSubscriptionForItemsChargebeeEventActions)[keyof typeof CreateSubscriptionForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateSubscriptionForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CreateSubscriptionForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CreateSubscriptionForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CreateSubscriptionForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CreateSubscriptionForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type DeleteASubscription200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type DeleteASubscriptionChargebeeEventWebhook =
  (typeof DeleteASubscriptionChargebeeEventWebhook)[keyof typeof DeleteASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteASubscriptionChargebeeEventEmail =
  (typeof DeleteASubscriptionChargebeeEventEmail)[keyof typeof DeleteASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteASubscriptionChargebeeEventActions =
  (typeof DeleteASubscriptionChargebeeEventActions)[keyof typeof DeleteASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type DeleteASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: DeleteASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: DeleteASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: DeleteASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ChangeTermEnd200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
  credit_notes?: CreditNote[];
};

export type ChangeTermEndBody = {
  /** The time at which the current term should end for this subscription.
   */
  term_ends_at: number;
  /** Applicable for *active* / *non_renewing* subscriptions. If specified as *true* prorated charges / credits will be added during this operation.
   */
  prorate?: boolean;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
};

export type ChangeTermEndChargebeeEventWebhook =
  (typeof ChangeTermEndChargebeeEventWebhook)[keyof typeof ChangeTermEndChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeTermEndChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ChangeTermEndChargebeeEventEmail =
  (typeof ChangeTermEndChargebeeEventEmail)[keyof typeof ChangeTermEndChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeTermEndChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ChangeTermEndChargebeeEventActions =
  (typeof ChangeTermEndChargebeeEventActions)[keyof typeof ChangeTermEndChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeTermEndChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ChangeTermEndHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ChangeTermEndChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ChangeTermEndChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ChangeTermEndChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveScheduledChanges200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  credit_notes?: CreditNote[];
};

export type RemoveScheduledChangesChargebeeEventWebhook =
  (typeof RemoveScheduledChangesChargebeeEventWebhook)[keyof typeof RemoveScheduledChangesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledChangesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledChangesChargebeeEventEmail =
  (typeof RemoveScheduledChangesChargebeeEventEmail)[keyof typeof RemoveScheduledChangesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledChangesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledChangesChargebeeEventActions =
  (typeof RemoveScheduledChangesChargebeeEventActions)[keyof typeof RemoveScheduledChangesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledChangesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledChangesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveScheduledChangesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveScheduledChangesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveScheduledChangesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type AddChargeAtTermEnd200 = {
  estimate: Estimate;
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* retail - Transaction is a sale to an end user \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly

 */
export type AddChargeAtTermEndBodyAvalaraSaleType =
  (typeof AddChargeAtTermEndBodyAvalaraSaleType)[keyof typeof AddChargeAtTermEndBodyAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddChargeAtTermEndBodyAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

export type AddChargeAtTermEndBody = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  amount?: number;
  /** Description for this charge.
   */
  description: string;
  /** The decimal representation of the amount for the [one-time charge](https://www.chargebee.com/docs/charges.html#one-time-charges ). Provide the value in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* retail - Transaction is a sale to an end user \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly
   */
  avalara_sale_type?: AddChargeAtTermEndBodyAvalaraSaleType;
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number;
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number;
  /** The time when the service period for the charge starts.
   */
  date_from?: number;
  /** The time when the service period for the charge ends.
   */
  date_to?: number;
};

export type AddChargeAtTermEndChargebeeEventWebhook =
  (typeof AddChargeAtTermEndChargebeeEventWebhook)[keyof typeof AddChargeAtTermEndChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddChargeAtTermEndChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type AddChargeAtTermEndChargebeeEventEmail =
  (typeof AddChargeAtTermEndChargebeeEventEmail)[keyof typeof AddChargeAtTermEndChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddChargeAtTermEndChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type AddChargeAtTermEndChargebeeEventActions =
  (typeof AddChargeAtTermEndChargebeeEventActions)[keyof typeof AddChargeAtTermEndChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddChargeAtTermEndChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type AddChargeAtTermEndHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: AddChargeAtTermEndChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: AddChargeAtTermEndChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: AddChargeAtTermEndChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ChargeFutureRenewals200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  advance_invoice_schedules?: AdvanceInvoiceSchedule[];
};

/**
 * Parameters for specific_dates_schedule

 */
export type ChargeFutureRenewalsBodySpecificDatesSchedule = {
  /** The number of billing cycles to charge for, on the date specified. Applicable only when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is specific_dates.
   */
  terms_to_charge?: number[];
  /** The unique id of the member of the advance_invoice_schedule array which corresponds to the specific_dates_schedule that you intend to modify. Only applicable when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is `specific_dates`.
   */
  date?: number[];
};

/**
 * Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.

 */
export type ChargeFutureRenewalsBodyFixedIntervalScheduleEndScheduleOn =
  (typeof ChargeFutureRenewalsBodyFixedIntervalScheduleEndScheduleOn)[keyof typeof ChargeFutureRenewalsBodyFixedIntervalScheduleEndScheduleOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeFutureRenewalsBodyFixedIntervalScheduleEndScheduleOn = {
  after_number_of_intervals: "after_number_of_intervals",
  specific_date: "specific_date",
  subscription_end: "subscription_end",
} as const;

/**
 * Parameters for fixed_interval_schedule

 */
export type ChargeFutureRenewalsBodyFixedIntervalSchedule = {
  /** The number of advance invoices to generate. The schedule is created such that the total number of billing cycles in the schedule does not exceed the [`remaining_billing_cycles`](subscriptions#subscription_remaining_billing_cycles) of the subscription. This parameter is applicable only when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `after_number_of_intervals`
   */
  number_of_occurrences?: number;
  /** The number of days before each interval that advance invoices are generated.
   */
  days_before_renewal?: number;
  /** Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.
   */
  end_schedule_on?: ChargeFutureRenewalsBodyFixedIntervalScheduleEndScheduleOn;
  /** The date when the schedule should end. Advance invoices are not generated beyond this date. It must be at least 1 day before the start of the last billing cycle of the subscription and also within 5 years from the current date. This parameter is only applicable when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `specific_date`.
   */
  end_date?: number;
};

/**
 * The type of advance invoice or advance invoicing schedule. \* immediate - Charge immediately for the number of billing cycles specified by [`terms_to_charge`](subscriptions#charge_future_renewals_terms_to_charge). \* specific_dates - Charge on [specific dates](subscriptions#charge_future_renewals_specific_dates_schedule_date). For each date, specify the [number of billing cycles](subscriptions#charge_future_renewals_specific_dates_schedule_terms_to_charge) to charge for. Up to 5 dates can be configured. \* fixed_intervals - Charge at fixed intervals of time. Specify the [number of billing cycles](subscriptions#charge_future_renewals_terms_to_charge) that constitute an interval and the number of [days before each interval](subscriptions#charge_future_renewals_fixed_interval_schedule_days_before_renewal) that the invoice should be generated. Also specify [when the schedule should end](subscriptions#charge_future_renewals_fixed_interval_schedule_end_schedule_on).

 */
export type ChargeFutureRenewalsBodyScheduleType =
  (typeof ChargeFutureRenewalsBodyScheduleType)[keyof typeof ChargeFutureRenewalsBodyScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeFutureRenewalsBodyScheduleType = {
  immediate: "immediate",
  specific_dates: "specific_dates",
  fixed_intervals: "fixed_intervals",
} as const;

export type ChargeFutureRenewalsBody = {
  /** * For `schedule_type = immediate`: the number of future billing cycles to be invoiced in advance. The invoicing is done for the [`remaining_billing_cycles`](subscriptions#subscription_remaining_billing_cycles) of the subscription if that is less than `terms_to_charge`.
* For `schedule_type = fixed_intervals`: The number of future billing cycles in one [interval](advance_invoice_schedules#fixed_interval_schedule). The schedule is created such that the total number of billing cycles in the schedule does not exceed the [remaining_billing_cycles](subscriptions#subscription_remaining_billing_cycles) of the subscription.
.
 */
  terms_to_charge?: number;
  /** Whether the charge should be invoiced immediately or added to [`unbilled_charges`](unbilled_charges). Applicable only when [`schedule_type`](subscriptions#charge_future_renewals_schedule_type) is `immediate`.
   */
  invoice_immediately?: boolean;
  /** The type of advance invoice or advance invoicing schedule. \* immediate - Charge immediately for the number of billing cycles specified by [`terms_to_charge`](subscriptions#charge_future_renewals_terms_to_charge). \* specific_dates - Charge on [specific dates](subscriptions#charge_future_renewals_specific_dates_schedule_date). For each date, specify the [number of billing cycles](subscriptions#charge_future_renewals_specific_dates_schedule_terms_to_charge) to charge for. Up to 5 dates can be configured. \* fixed_intervals - Charge at fixed intervals of time. Specify the [number of billing cycles](subscriptions#charge_future_renewals_terms_to_charge) that constitute an interval and the number of [days before each interval](subscriptions#charge_future_renewals_fixed_interval_schedule_days_before_renewal) that the invoice should be generated. Also specify [when the schedule should end](subscriptions#charge_future_renewals_fixed_interval_schedule_end_schedule_on).
   */
  schedule_type?: ChargeFutureRenewalsBodyScheduleType;
  /** Parameters for fixed_interval_schedule
   */
  fixed_interval_schedule?: ChargeFutureRenewalsBodyFixedIntervalSchedule;
  /** Parameters for specific_dates_schedule
   */
  specific_dates_schedule?: ChargeFutureRenewalsBodySpecificDatesSchedule;
};

export type ChargeFutureRenewalsChargebeeEventWebhook =
  (typeof ChargeFutureRenewalsChargebeeEventWebhook)[keyof typeof ChargeFutureRenewalsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeFutureRenewalsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ChargeFutureRenewalsChargebeeEventEmail =
  (typeof ChargeFutureRenewalsChargebeeEventEmail)[keyof typeof ChargeFutureRenewalsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeFutureRenewalsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ChargeFutureRenewalsChargebeeEventActions =
  (typeof ChargeFutureRenewalsChargebeeEventActions)[keyof typeof ChargeFutureRenewalsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeFutureRenewalsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ChargeFutureRenewalsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ChargeFutureRenewalsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ChargeFutureRenewalsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ChargeFutureRenewalsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ReactivateASubscription200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type ReactivateASubscriptionBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* card - card \* sofort - sofort \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* ideal - ideal \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* boleto - boleto \* google_pay - google_pay \* apple_pay - apple_pay

 */
export type ReactivateASubscriptionBodyPaymentIntentPaymentMethodType =
  (typeof ReactivateASubscriptionBodyPaymentIntentPaymentMethodType)[keyof typeof ReactivateASubscriptionBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type ReactivateASubscriptionBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* card - card \* sofort - sofort \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* ideal - ideal \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* boleto - boleto \* google_pay - google_pay \* apple_pay - apple_pay
   */
  payment_method_type?: ReactivateASubscriptionBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: ReactivateASubscriptionBodyPaymentIntentAdditionalInformation;
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* cancel - Contract term completes and subscription is canceled. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.


 */
export type ReactivateASubscriptionBodyContractTermActionAtTermEnd =
  (typeof ReactivateASubscriptionBodyContractTermActionAtTermEnd)[keyof typeof ReactivateASubscriptionBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionBodyContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
} as const;

/**
 * Parameters for contract_term

 */
export type ReactivateASubscriptionBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* cancel - Contract term completes and subscription is canceled. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.

 */
  action_at_term_end?: ReactivateASubscriptionBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant

 */
export type ReactivateASubscriptionBodyPaymentInitiator =
  (typeof ReactivateASubscriptionBodyPaymentInitiator)[keyof typeof ReactivateASubscriptionBodyPaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionBodyPaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

/**
 * Applicable when calendar billing is enabled and a new *active* term gets started during this operation. Unless specified the configured *default* value will be used. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..

 */
export type ReactivateASubscriptionBodyBillingAlignmentMode =
  (typeof ReactivateASubscriptionBodyBillingAlignmentMode)[keyof typeof ReactivateASubscriptionBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type ReactivateASubscriptionBody = {
  /** Providing this parameter indicates that the subscription reactivates with an `in_trial` `status` and the trial period ends at the date provided. The value must not be earlier than `reactivate_from`. Note: This parameter can be backdated (set to a value in the past) only when `reactivate_from` has been backdated. Do this to keep a record of when the trial ended in case it ended at some point in the past. When `trial_end` is backdated, the subscription immediately goes into `active` or `non_renewing` status.
   */
  trial_end?: number;
  /** Number of cycles(plan interval) this subscription should be charged. After the billing cycles exhausted, the subscription will be cancelled.
   */
  billing_cycles?: number;
  /** The date/time at which the subscription was reactivated. When not provided, the subscription is reactivated immediately on calling this API. The value of this parameter must always be in the past (backdating). Do this when the subscription has already been reactivated and the billing has been delayed. The following prerequisites must be met for this parameter to be passed:

* The backdating feature has been enabled for subscription reactivation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `reactivate_from` cannot be earlier than 14th February.
.
 */
  reactivate_from?: number;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
  /** Applicable when calendar billing is enabled and a new *active* term gets started during this operation. Unless specified the configured *default* value will be used. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly..
   */
  billing_alignment_mode?: ReactivateASubscriptionBodyBillingAlignmentMode;
  /** The number of subscription billing cycles to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html). If a new term is started for the subscription due to this API call, then `terms_to_charge` is inclusive of this new term. See description for the `force_term_reset` parameter to learn more about when a subscription term is reset.
   */
  terms_to_charge?: number;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is `true`, and if the site is configured to set invoice dates to the date of closing, then upon invoice closure, this date is changed to the invoice closing date. `taxes` and `line_item_taxes` are computed based on the tax configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* It is not earlier than `reactivate_from` or `trial_end`.
* `invoice_immediately` is `true`.
.
 */
  invoice_date?: number;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant
   */
  payment_initiator?: ReactivateASubscriptionBodyPaymentInitiator;
  /** Parameters for contract_term
   */
  contract_term?: ReactivateASubscriptionBodyContractTerm;
  /** Parameters for payment_intent
   */
  payment_intent?: ReactivateASubscriptionBodyPaymentIntent;
};

export type ReactivateASubscriptionChargebeeEventWebhook =
  (typeof ReactivateASubscriptionChargebeeEventWebhook)[keyof typeof ReactivateASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ReactivateASubscriptionChargebeeEventEmail =
  (typeof ReactivateASubscriptionChargebeeEventEmail)[keyof typeof ReactivateASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ReactivateASubscriptionChargebeeEventActions =
  (typeof ReactivateASubscriptionChargebeeEventActions)[keyof typeof ReactivateASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactivateASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ReactivateASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ReactivateASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ReactivateASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ReactivateASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveWithScheduledChanges200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type RetrieveWithScheduledChangesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveScheduledCancellation200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type RemoveScheduledCancellationBody = {
  /** Number of cycles(plan interval) this subscription should be charged. After the billing cycles exhausted, the subscription will be cancelled.
   */
  billing_cycles?: number;
};

export type RemoveScheduledCancellationChargebeeEventWebhook =
  (typeof RemoveScheduledCancellationChargebeeEventWebhook)[keyof typeof RemoveScheduledCancellationChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledCancellationChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledCancellationChargebeeEventEmail =
  (typeof RemoveScheduledCancellationChargebeeEventEmail)[keyof typeof RemoveScheduledCancellationChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledCancellationChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledCancellationChargebeeEventActions =
  (typeof RemoveScheduledCancellationChargebeeEventActions)[keyof typeof RemoveScheduledCancellationChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveScheduledCancellationChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveScheduledCancellationHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveScheduledCancellationChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveScheduledCancellationChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveScheduledCancellationChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RetrieveAdvanceInvoice200 = {
  advance_invoice_schedules: AdvanceInvoiceSchedule[];
};

export type RetrieveAdvanceInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ImportSubscriptionForItems200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
};

/**
 * Parameters for item_tiers

 */
export type ImportSubscriptionForItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

/**
 * Parameters for charged_items

 */
export type ImportSubscriptionForItemsBodyChargedItems = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id?: string[];
  /** Timestamp indicating when this charge item_price was last charged for this subscription.
   */
  last_charged_at?: number[];
};

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month. \* year - A period of 1 calendar year.

 */
export type ImportSubscriptionForItemsBodyDiscountsPeriodUnitItem =
  (typeof ImportSubscriptionForItemsBodyDiscountsPeriodUnitItem)[keyof typeof ImportSubscriptionForItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type ImportSubscriptionForItemsBodyDiscountsDurationTypeItem =
  (typeof ImportSubscriptionForItemsBodyDiscountsDurationTypeItem)[keyof typeof ImportSubscriptionForItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyDiscountsDurationTypeItem = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type ImportSubscriptionForItemsBodyDiscountsApplyOnItem =
  (typeof ImportSubscriptionForItemsBodyDiscountsApplyOnItem)[keyof typeof ImportSubscriptionForItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type ImportSubscriptionForItemsBodyDiscounts = {
  apply_on: ImportSubscriptionForItemsBodyDiscountsApplyOnItem[];
  duration_type: ImportSubscriptionForItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: ImportSubscriptionForItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
};

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* subscription_creation - the time of creation of the subscription.

 */
export type ImportSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof ImportSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof ImportSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type ImportSubscriptionForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: ImportSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
};

export type ImportSubscriptionForItemsBody = {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id?: string;
  /** End of the trial period for the subscription. This overrides the trial period set for the plan-item. The value must be later than `start_date`. Set it to `0` to have no trial period.
   */
  trial_end?: number;
  /** The number of billing cycles the subscription runs before canceling. If not provided, then the billing cycles [set for the plan-item price](https://apidocs.chargebee.com/docs/api/item_prices?prod_cat_ver=2#item_price_billing_cycles) is used.
   */
  billing_cycles?: number;
  /** Defines [Net D](https://www.chargebee.com/docs/net_d.html) for the subscription. Net D is the number of days within which any invoice raised for the subscription must be paid.

* If a value is provided: Net D is set explicitly for the subscription to the value provided. The value must be one among those defined in the [site configuration](https://www.chargebee.com/docs/net_d.html#enable-net-d-for-chargebee-invoices).
* If not provided: The attribute is not set and therefore not returned by the API. In this case, when an invoice is raised -- whether now or later -- the `net_term_days` defined at the [customer level](customers#customer_net_term_days) is considered.
.
 */
  net_term_days?: number;
  /** The date/time at which the subscription is to start or has started. If not provided, the subscription starts immediately.
   */
  start_date?: number;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments.
   */
  auto_collection?: ImportSubscriptionForItemsBodyAutoCollection;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or [coupon codes](./coupon_codes).
   */
  coupon_ids?: string[];
  /** Id of the payment source to be attached to this subscription.
   */
  payment_source_id?: string;
  /** Current state of the subscription. \* future - The subscription is scheduled to start at a future date. \* active - The subscription is active and will be charged for automatically based on the items in it. \* cancelled - The subscription has been canceled and is no longer in service. \* in_trial - The subscription is in trial. \* non_renewing - The subscription will be canceled at the end of the current term. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state.
   */
  status: ImportSubscriptionForItemsBodyStatus;
  /** End of the current billing term. Subscription is renewed immediately after this. If not given, this will be calculated based on plan billing cycle.



**Note:**


For subscription status: `non_renewing`, `active`, and `paused`, `current_term_end` is required.



.
 */
  current_term_end?: number;
  /** Start of the current billing period of the subscription. This is required when the subscription `status` is `paused`. When the `status` is `active` or `non_renewing`, it defaults to the current time.
   */
  current_term_start?: number;
  /** Start of the trial period for the subscription. When not passed, it is assumed to be current time. When passed for a `future` subscription, it implies that the subscription goes into `in_trial` when it starts.
   */
  trial_start?: number;
  /** Time at which subscription was cancelled or is set to be cancelled.
   */
  cancelled_at?: number;
  /** Time at which the subscription was started. Is `null` for `future`subscriptions as it is yet to be started.
   */
  started_at?: number;
  /** The time at which the subscription was activated. A subscription is "activated" when its `status` changes from any other, to either `active` or `non_renewing`.

The following conditions must be satisfied when passing this parameter:

* When `status` is `active`, `non_renewing`, or `paused`, `activated_at` must be on or after `trial_end` or `started_at`. Additionally, `activated_at` must be on or before `current_term_start`.
* When `status` is `in_trial`, `activated_at` must precede `trial_start`

#### Note:

This parameter should not be provided when passing `status` as `future` or `cancelled`.
 */
  activated_at?: number;
  /** When a pause has been scheduled, it is the date/time of scheduled pause. When the subscription is in the `paused` state, it is the date/time when the subscription was paused.
   */
  pause_date?: number;
  /** For a paused subscription, it is the date/time when the subscription is scheduled to resume. If the pause is for an indefinite period, this value is not returned.
   */
  resume_date?: number;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** Set as `true` if you want an invoice to be created for the subscription.  

* The invoice will be created for the subscription only if it has an `active` or `non_renewing` status.
* The period of the invoice is from `current_term_start` to `current_term_end`.
* The invoice will not be generated if the subscription amount is zero dollars (for that period) and 'Hide Zero Value Line Items' option is enabled in site settings.
 */
  create_current_term_invoice?: boolean;
  /** A customer-facing note added to all invoices associated with this subscription. This note is one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./#meta_data).
   */
  meta_data?: ImportSubscriptionForItemsBodyMetaData;
  /** Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Subscriptions \> Subscription Cancellation**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  cancel_reason_code?: string;
  /** Indicates whether the invoices for this subscription are generated with a `pending` `status`. This attribute is set to `true` automatically when the subscription has item prices that belong to `metered` items.

You can also set this to `true` explicitly using the [create](/docs/api/subscriptions#create_subscription_for_items_create_pending_invoices)/[update](/docs/api/subscriptions#update_subscription_for_items_create_pending_invoices) subscription operations. This is useful in the following scenarios:

* When tracking usages and calculating usage-based charges on your end. You can then add them to the subscription as a [one-time charge](https://www.chargebee.com/docs/charges.html) at the end of the billing term.
* When you need to inspect all charges before closing invoices for this subscription.

Applicable only when [Metered Billing](https://www.chargebee.com/docs/metered_billing.html) is enabled for the site
.
 */
  create_pending_invoices?: boolean;
  /** Set to `false` to override for this subscription, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the [customer level](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: boolean;
  /** Parameters for contract_term
   */
  contract_term?: ImportSubscriptionForItemsBodyContractTerm;
  /** Parameters for transaction
   */
  transaction?: ImportSubscriptionForItemsBodyTransaction;
  /** Parameters for shipping_address
   */
  shipping_address?: ImportSubscriptionForItemsBodyShippingAddress;
  /** Parameters for subscription_items
   */
  subscription_items?: ImportSubscriptionForItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: ImportSubscriptionForItemsBodyDiscounts;
  /** Parameters for charged_items
   */
  charged_items?: ImportSubscriptionForItemsBodyChargedItems;
  /** Parameters for item_tiers
   */
  item_tiers?: ImportSubscriptionForItemsBodyItemTiers;
  [key: string]: any;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type ImportSubscriptionForItemsBodyShippingAddressValidationStatus =
  (typeof ImportSubscriptionForItemsBodyShippingAddressValidationStatus)[keyof typeof ImportSubscriptionForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type ImportSubscriptionForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: ImportSubscriptionForItemsBodyShippingAddressValidationStatus;
};

/**
 * The payment method of this transaction. This parameter should be passed only if the invoice is created for current term. \* cash - Cash \* alipay - Alipay \* sofort - Sofort \* direct_debit - Direct Debit \* netbanking_emandates - netbanking_emandates \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* upi - upi \* unionpay - Unionpay \* apple_pay - Apple Pay \* wechat_pay - WeChat Pay \* card - Card \* boleto - boleto \* ideal - IDEAL \* check - Check \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* dotpay - Dotpay \* amazon_payments - Amazon Payments \* google_pay - Google Pay \* other - Payment Methods other than the above types \* giropay - giropay

 */
export type ImportSubscriptionForItemsBodyTransactionPaymentMethod =
  (typeof ImportSubscriptionForItemsBodyTransactionPaymentMethod)[keyof typeof ImportSubscriptionForItemsBodyTransactionPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyTransactionPaymentMethod = {
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  other: "other",
  custom: "custom",
} as const;

/**
 * Parameters for transaction

 */
export type ImportSubscriptionForItemsBodyTransaction = {
  /** The payment transaction amount. This parameter should be passed only if the invoice is created for current term.
   */
  amount?: number;
  /** The payment method of this transaction. This parameter should be passed only if the invoice is created for current term. \* cash - Cash \* alipay - Alipay \* sofort - Sofort \* direct_debit - Direct Debit \* netbanking_emandates - netbanking_emandates \* paypal_express_checkout - Paypal Express Checkout \* bancontact - Bancontact \* custom - Custom \* upi - upi \* unionpay - Unionpay \* apple_pay - Apple Pay \* wechat_pay - WeChat Pay \* card - Card \* boleto - boleto \* ideal - IDEAL \* check - Check \* sepa_credit - SEPA Credit \* ach_credit - ACH Credit \* bank_transfer - Bank Transfer \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* dotpay - Dotpay \* amazon_payments - Amazon Payments \* google_pay - Google Pay \* other - Payment Methods other than the above types \* giropay - giropay
   */
  payment_method?: ImportSubscriptionForItemsBodyTransactionPaymentMethod;
  /** The reference number for this transaction. For example, check number in case of `check` `payment_method`. This parameter should be passed only if the invoice is created for current term.
   */
  reference_number?: string;
  /** The date of occurence of the transaction. This parameter should be passed only if the invoice is created for current term.
   */
  date?: number;
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type ImportSubscriptionForItemsBodyContractTermActionAtTermEnd =
  (typeof ImportSubscriptionForItemsBodyContractTermActionAtTermEnd)[keyof typeof ImportSubscriptionForItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Parameters for contract_term

 */
export type ImportSubscriptionForItemsBodyContractTerm = {
  /** Id that uniquely identifies the contract term in the site.
   */
  id?: string;
  /** The date when the contract term was created.
   */
  created_at?: number;
  /** The start date of the contract term
   */
  contract_start?: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle?: number;
  /** The amount raised for the contract term till the time of importing the subscription. This amount is added to the [total_contract_value](contract_terms#contract_term_total_contract_value)
   */
  total_amount_raised?: number;
  /** The amount raised for the contract term till the time of importing the subscription excluding tax. This amount is added to the [total_contract_value_before_tax](contract_terms#contract_term_total_contract_value)
   */
  total_amount_raised_before_tax?: number;
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end?: ImportSubscriptionForItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./#meta_data).

 */
export type ImportSubscriptionForItemsBodyMetaData = { [key: string]: any };

/**
 * Current state of the subscription. \* future - The subscription is scheduled to start at a future date. \* active - The subscription is active and will be charged for automatically based on the items in it. \* cancelled - The subscription has been canceled and is no longer in service. \* in_trial - The subscription is in trial. \* non_renewing - The subscription will be canceled at the end of the current term. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state.

 */
export type ImportSubscriptionForItemsBodyStatus =
  (typeof ImportSubscriptionForItemsBodyStatus)[keyof typeof ImportSubscriptionForItemsBodyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyStatus = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments.

 */
export type ImportSubscriptionForItemsBodyAutoCollection =
  (typeof ImportSubscriptionForItemsBodyAutoCollection)[keyof typeof ImportSubscriptionForItemsBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

export type ImportSubscriptionForItemsChargebeeEventWebhook =
  (typeof ImportSubscriptionForItemsChargebeeEventWebhook)[keyof typeof ImportSubscriptionForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ImportSubscriptionForItemsChargebeeEventEmail =
  (typeof ImportSubscriptionForItemsChargebeeEventEmail)[keyof typeof ImportSubscriptionForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ImportSubscriptionForItemsChargebeeEventActions =
  (typeof ImportSubscriptionForItemsChargebeeEventActions)[keyof typeof ImportSubscriptionForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImportSubscriptionForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ImportSubscriptionForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ImportSubscriptionForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ImportSubscriptionForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ImportSubscriptionForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ListSubscriptions200ListItem = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type ListSubscriptions200 = {
  list: ListSubscriptions200ListItem[];
  /** This attribute is returned only if more resources are present. To fetch the next set of resources use this value for the input parameter `offset`. */
  next_offset?: string;
};

export type ListSubscriptionsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListSubscriptionsChannelIsNot =
  (typeof ListSubscriptionsChannelIsNot)[keyof typeof ListSubscriptionsChannelIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsChannelIsNot = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ListSubscriptionsChannelIs =
  (typeof ListSubscriptionsChannelIs)[keyof typeof ListSubscriptionsChannelIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsChannelIs = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

export type ListSubscriptionsSortByDesc =
  (typeof ListSubscriptionsSortByDesc)[keyof typeof ListSubscriptionsSortByDesc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsSortByDesc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListSubscriptionsSortByAsc =
  (typeof ListSubscriptionsSortByAsc)[keyof typeof ListSubscriptionsSortByAsc];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsSortByAsc = {
  created_at: "created_at",
  updated_at: "updated_at",
} as const;

export type ListSubscriptionsOverrideRelationshipIs =
  (typeof ListSubscriptionsOverrideRelationshipIs)[keyof typeof ListSubscriptionsOverrideRelationshipIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsOverrideRelationshipIs = {
  true: "true",
  false: "false",
} as const;

export type ListSubscriptionsAutoCloseInvoicesIs =
  (typeof ListSubscriptionsAutoCloseInvoicesIs)[keyof typeof ListSubscriptionsAutoCloseInvoicesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsAutoCloseInvoicesIs = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ListSubscriptionsOfflinePaymentMethodIsNot =
  (typeof ListSubscriptionsOfflinePaymentMethodIsNot)[keyof typeof ListSubscriptionsOfflinePaymentMethodIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsOfflinePaymentMethodIsNot = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto

 */
export type ListSubscriptionsOfflinePaymentMethodIs =
  (typeof ListSubscriptionsOfflinePaymentMethodIs)[keyof typeof ListSubscriptionsOfflinePaymentMethodIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsOfflinePaymentMethodIs = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

export type ListSubscriptionsHasScheduledChangesIs =
  (typeof ListSubscriptionsHasScheduledChangesIs)[keyof typeof ListSubscriptionsHasScheduledChangesIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsHasScheduledChangesIs = {
  true: "true",
  false: "false",
} as const;

export type ListSubscriptionsActivatedAtIsPresent =
  (typeof ListSubscriptionsActivatedAtIsPresent)[keyof typeof ListSubscriptionsActivatedAtIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsActivatedAtIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListSubscriptionsRemainingBillingCyclesIsPresent =
  (typeof ListSubscriptionsRemainingBillingCyclesIsPresent)[keyof typeof ListSubscriptionsRemainingBillingCyclesIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsRemainingBillingCyclesIsPresent = {
  true: "true",
  false: "false",
} as const;

export type ListSubscriptionsCancelReasonIsPresent =
  (typeof ListSubscriptionsCancelReasonIsPresent)[keyof typeof ListSubscriptionsCancelReasonIsPresent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsCancelReasonIsPresent = {
  true: "true",
  false: "false",
} as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ListSubscriptionsCancelReasonIsNot =
  (typeof ListSubscriptionsCancelReasonIsNot)[keyof typeof ListSubscriptionsCancelReasonIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsCancelReasonIsNot = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer

 */
export type ListSubscriptionsCancelReasonIs =
  (typeof ListSubscriptionsCancelReasonIs)[keyof typeof ListSubscriptionsCancelReasonIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsCancelReasonIs = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ListSubscriptionsStatusIsNot =
  (typeof ListSubscriptionsStatusIsNot)[keyof typeof ListSubscriptionsStatusIsNot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsStatusIsNot = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.

 */
export type ListSubscriptionsStatusIs =
  (typeof ListSubscriptionsStatusIs)[keyof typeof ListSubscriptionsStatusIs];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListSubscriptionsStatusIs = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

export type ListSubscriptionsParams = {
  /**
   * The number of resources to be returned.
   */
  limit?: number;
  /**
   * Determines your position in the list for pagination. To ensure that the next page is retrieved correctly, always set <code>offset</code> to the value of <code>next_offset</code> obtained in the previous iteration of the API call.
   */
  offset?: string;
  /**
   * Indicates whether to include deleted objects in the list. The deleted objects have the attribute <code>deleted</code> as <code>true</code>.
   */
  include_deleted?: boolean;
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>A unique and immutable identifier for the subscription. If not provided, it is autogenerated.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>id[is_not] = "8gsnbYfsMLds"</i>
   */
  id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Identifier of the customer with whom this subscription is associated.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>customer_id[is] = "8gsnbYfsMLds"</i>
   */
  customer_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The plan item code.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_id[is_not] = "silver"</i>
   */
  item_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>The plan item price code.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>item_price_id[is] = "silver-USD-monthly"</i>
   */
  item_price_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>Current state of the subscription. Possible values are : <dfn>future, in_trial, active, non_renewing, paused, cancelled.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>status[is_not] = "active"</i>
   */
  status?: {
    /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
     */
    is?: ListSubscriptionsStatusIs;
    /** \* \`future\` - The subscription is scheduled to start at a future date. \* \`in_trial\` - The subscription is in trial. \* \`active\` - The subscription is active and will be charged for automatically based on the items in it. \* \`non_renewing\` - The subscription will be canceled at the end of the current term. \* \`paused\` - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* \`cancelled\` - The subscription has been canceled and is no longer in service.
     */
    is_not?: ListSubscriptionsStatusIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The reason for canceling the subscription. Set by Chargebee automatically. Possible values are : <dfn>not_paid, no_card, fraud_review_failed, non_compliant_eu_customer, tax_calculation_failed, currency_incompatible_with_gateway, non_compliant_customer.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>cancel_reason[is] = "not_paid"</i>
   */
  cancel_reason?: {
    /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
     */
    is?: ListSubscriptionsCancelReasonIs;
    /** \* \`not_paid\` - Not Paid \* \`no_card\` - No Card \* \`fraud_review_failed\` - Fraud Review Failed \* \`non_compliant_eu_customer\` - Non Compliant EU Customer \* \`tax_calculation_failed\` - Tax Calculation Failed \* \`currency_incompatible_with_gateway\` - Currency incompatible with Gateway \* \`non_compliant_customer\` - Non Compliant Customer
     */
    is_not?: ListSubscriptionsCancelReasonIsNot;
    in?: string;
    not_in?: string;
    is_present?: ListSubscriptionsCancelReasonIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br> Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in <strong>Settings > Configure Chargebee > Reason Codes > Subscriptions > Subscription Cancellation</strong>. Must be passed if set as mandatory in the app. The codes are case-sensitive.<br><b>Supported operators : </b>is, is_not, starts_with, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>cancel_reason_code[is] = "Not Paid"</i>
   */
  cancel_reason_code?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, integer filter</dfn><br><ul><li>When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels.</li><li>When the subscription is on a <a href="contract_terms">contract term</a>: this value is the number of billing cycles remaining in the contract term after the current billing cycle.</li></ul>.<br><b>Supported operators : </b>is, is_not, lt, lte, gt, gte, between, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>remaining_billing_cycles[is_not] = "3"</i>
   */
  remaining_billing_cycles?: {
    is?: string;
    is_not?: string;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    between?: string;
    is_present?: ListSubscriptionsRemainingBillingCyclesIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The time at which the subscription was created.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>created_at[before] = "1435054328"</i>
   */
  created_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
 * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Time at which the subscription¬†<code>status</code>¬†last changed to¬†
<code>active</code>. For example, this value is updated when an¬†<code>in_trial</code>¬†or¬†
<code>cancelled</code>¬†subscription activates.<br><b>Supported operators : </b>after, before, on, between, is_present<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>activated_at[after] = "1435054328"</i>
 */
  activated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
    is_present?: ListSubscriptionsActivatedAtIsPresent;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>The date/time at which the next billing for the subscription happens. This is usually right after <code>current_term_end</code> unless multiple subscription terms were invoiced in advance using the <code>terms_to_charge</code> parameter.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>next_billing_at[after] = "1435054328"</i>
   */
  next_billing_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>Time at which subscription was cancelled or is set to be cancelled.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>cancelled_at[after] = "1435054328"</i>
   */
  cancelled_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>If <code>true</code>, there are subscription changes scheduled on next renewal. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>has_scheduled_changes[is] = "true"</i>
   */
  has_scheduled_changes?: {
    is?: ListSubscriptionsHasScheduledChangesIs;
  };
  /**
   * <dfn class="text-muted">optional, timestamp(UTC) in seconds filter</dfn><br>To filter based on <code>updated_at</code>. This attribute will be present only if the resource has been updated after 2016-09-28. It is advisable when using this filter, to pass the <code>sort_by</code> input parameter as <code>updated_at</code> for a faster response.<br><b>Supported operators : </b>after, before, on, between<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>updated_at[after] = "1243545465"</i>
   */
  updated_at?: {
    after?: string;
    before?: string;
    on?: string;
    between?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The preferred offline payment method for the subscription. Possible values are : <dfn>no_preference, cash, check, bank_transfer, ach_credit, sepa_credit.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>offline_payment_method[is_not] = "cash"</i>
   */
  offline_payment_method?: {
    /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
     */
    is?: ListSubscriptionsOfflinePaymentMethodIs;
    /** \* \`no_preference\` - No Preference \* \`cash\` - Cash \* \`check\` - Check \* \`bank_transfer\` - Bank Transfer \* \`ach_credit\` - ACH Credit \* \`sepa_credit\` - SEPA Credit \* \`boleto\` - Boleto
     */
    is_not?: ListSubscriptionsOfflinePaymentMethodIsNot;
    in?: string;
    not_in?: string;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>Set to <code>false</code> to override for this subscription, the <a href="https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing" rel="noopener noreferrer" target="_blank">site-level setting</a> for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the <a href="/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices">customer level</a>. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>auto_close_invoices[is] = "true"</i>
   */
  auto_close_invoices?: {
    is?: ListSubscriptionsAutoCloseInvoicesIs;
  };
  /**
   * <dfn class="text-muted">optional, boolean filter</dfn><br>If <code>true</code>, ignores the <a href="./customers?prod_cat_ver=2#customer_relationship">hierarchy relationship</a> and uses customer as payment and invoice owner. Possible values are : <i>true, false</i><br><b>Supported operators : </b>is<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>override_relationship[is] = "false"</i>
   */
  override_relationship?: {
    is?: ListSubscriptionsOverrideRelationshipIs;
  };
  /**
   * <dfn class="text-muted">optional, string filter</dfn><br>Sorts based on the specified attribute. <br><b>Supported attributes :</b> <dfn>created_at, updated_at</dfn><br><b>Supported sort-orders : </b><dfn>asc, desc</dfn><br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>sort_by[asc] = "created_at"</i><br>This will sort the result based on the 'created_at' attribute in ascending(earliest first) order.
   */
  sort_by?: {
    asc?: ListSubscriptionsSortByAsc;
    desc?: ListSubscriptionsSortByDesc;
  };
  /**
 * <dfn class="text-muted">optional, string filter</dfn><br>The unique ID of the 
<a href="/docs/api/advanced-features?prod_cat_ver=2#mbe">business entity</a> of this subscription. This is always the same as the 
<a href="/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id">business entity</a> of the customer. 
<span ismicro="true" featureid="cb-mbe"></span><br><b>Supported operators : </b>is, is_not, starts_with<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>business_entity_id[is_not] = "business_entity_id"</i>
 */
  business_entity_id?: {
    is?: string;
    is_not?: string;
    starts_with?: string;
  };
  /**
   * <dfn class="text-muted">optional, enumerated string filter</dfn><br>The subscription channel this object originated from and is maintained in. Possible values are : <dfn>web, app_store, play_store.</dfn><br><b>Supported operators : </b>is, is_not, in, not_in<br><br><b>Example <span class="cb-char-arrow">‚Üí</span> </b><i>channel[is_not] = "APP STORE"</i>
   */
  channel?: {
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is?: ListSubscriptionsChannelIs;
    /** \* \`web\` - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* \`app_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* \`play_store\` - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
    is_not?: ListSubscriptionsChannelIsNot;
    in?: string;
    not_in?: string;
  };
};

export type RegenerateAnInvoice200 = {
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
};

export type RegenerateAnInvoiceBody = {
  /** The start date of the period being invoiced. The default value is [current_term_start](https://apidocs.chargebee.com/docs/api/subscriptions#subscription_current_term_start ).
   */
  date_from?: number;
  /** The end date of the period being invoiced. The default value is [current_term_end](https://apidocs.chargebee.com/docs/api/subscriptions#subscription_current_term_end ).
   */
  date_to?: number;
  /** Whether the charges should be prorated according to the term specified by `date_from` and `date_to`. Should not be passed without `date_from` and `date_to`.
   */
  prorate?: boolean;
  /** Only applicable when [Consolidated Invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html ) is enabled for the customer. Set to `false` to leave the current term charge for the subscription as [unbilled](https://www.chargebee.com/docs/unbilled-charges.html ). Once you have done this for all suitable subscriptions of the customer, call [Create an invoice for unbilled charges](https://apidocs.chargebee.com/docs/api/unbilled_charges#create_an_invoice_for_unbilled_charges ) to invoice them.
   */
  invoice_immediately?: boolean;
};

export type RegenerateAnInvoiceChargebeeEventWebhook =
  (typeof RegenerateAnInvoiceChargebeeEventWebhook)[keyof typeof RegenerateAnInvoiceChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegenerateAnInvoiceChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RegenerateAnInvoiceChargebeeEventEmail =
  (typeof RegenerateAnInvoiceChargebeeEventEmail)[keyof typeof RegenerateAnInvoiceChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegenerateAnInvoiceChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RegenerateAnInvoiceChargebeeEventActions =
  (typeof RegenerateAnInvoiceChargebeeEventActions)[keyof typeof RegenerateAnInvoiceChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegenerateAnInvoiceChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RegenerateAnInvoiceHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RegenerateAnInvoiceChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RegenerateAnInvoiceChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RegenerateAnInvoiceChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type CancelSubscriptionForItems200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
  credit_notes?: CreditNote[];
};

/**
 * Parameters for subscription_items

 */
export type CancelSubscriptionForItemsBodySubscriptionItems = {
  /** The unique `id` of the charge item_price that represents the termination fee.
   */
  item_price_id?: string[];
  /** The quantity associated with the termination fee. Applicable only when the item_price for the termination charge is quantity-based.
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The termination fee. In case it is quantity-based, this is the fee per unit.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/2.0/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](https://apidocs.chargebee.com/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string[];
  /** The service period of the termination fee---expressed in days---starting from the current date.
   */
  service_period_days?: number[];
};

/**
 * Cancels the current contract term.

* `terminate_immediately` immediately does the following:
  * sets the contract term [`status`](contract_terms#contract_term_status) to `terminated`.
  * Cancels the subscription.
  * Collects any [termination fee](contract_terms#termintation_fee).
* `end_of_contract_term` Sets the [`contract_term[action_at_term_end]`](contract_terms#contract_term_action_at_term_end) to `cancel`. In other words, the contract term is not renewed and the subscription is canceled at the end of the contract term.
. \* terminate_immediately - Terminate immediately \* end_of_contract_term - End of contract term

 */
export type CancelSubscriptionForItemsBodyContractTermCancelOption =
  (typeof CancelSubscriptionForItemsBodyContractTermCancelOption)[keyof typeof CancelSubscriptionForItemsBodyContractTermCancelOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsBodyContractTermCancelOption = {
  terminate_immediately: "terminate_immediately",
  end_of_contract_term: "end_of_contract_term",
} as const;

/**
 * Applicable when the customer has remaining refundable credits(issued against online payments). If specified as schedule_refund, the refund will be initiated for these credits after they are applied against the subscription's past due invoices if any. **Note:** The refunds initiated will be asynchronous. Not applicable when 'end_of_term' is true. \* schedule_refund - Initiates refund of the remaining credits. \* no_action - No action is taken.

 */
export type CancelSubscriptionForItemsBodyRefundableCreditsHandling =
  (typeof CancelSubscriptionForItemsBodyRefundableCreditsHandling)[keyof typeof CancelSubscriptionForItemsBodyRefundableCreditsHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsBodyRefundableCreditsHandling = {
  no_action: "no_action",
  schedule_refund: "schedule_refund",
} as const;

/**
 * Applicable when the subscription has past due invoices. Specify this if you want to close the due invoices of the subscription. If specified as schedule_payment_collection/write_off, the due invoices of the subscription will be qualified for the selected operation after the remaining refundable credits and excess payments are applied. **Note:** The payment collection attempt will be asynchronous. Not applicable when 'end_of_term' is true. \* no_action - No action is taken. \* write_off - The amount due in the invoices will be written-off. Credit notes created due to write-off will not be sent in the response. \* schedule_payment_collection - An automatic charge for the due amount of the past invoices will be attempted on the payment method available, if customer's auto-collection property is 'ON'.

 */
export type CancelSubscriptionForItemsBodyAccountReceivablesHandling =
  (typeof CancelSubscriptionForItemsBodyAccountReceivablesHandling)[keyof typeof CancelSubscriptionForItemsBodyAccountReceivablesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsBodyAccountReceivablesHandling = {
  no_action: "no_action",
  schedule_payment_collection: "schedule_payment_collection",
  write_off: "write_off",
} as const;

/**
 * For immediate cancellation (`end_of_term` = `false`), specify how to handle any unbilled charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* invoice - An invoice is generated immediately with the unbilled charges. \* delete - The unbilled charges are deleted.

 */
export type CancelSubscriptionForItemsBodyUnbilledChargesOption =
  (typeof CancelSubscriptionForItemsBodyUnbilledChargesOption)[keyof typeof CancelSubscriptionForItemsBodyUnbilledChargesOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsBodyUnbilledChargesOption = {
  invoice: "invoice",
  delete: "delete",
} as const;

/**
 * For immediate cancellation (`end_of_term` = `false`), specify how to provide credits for current term charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* none - No credits notes are created. \* full - Credits are issues for the full value of the current term charges. \* prorate - Prorated credits are issued.

 */
export type CancelSubscriptionForItemsBodyCreditOptionForCurrentTermCharges =
  (typeof CancelSubscriptionForItemsBodyCreditOptionForCurrentTermCharges)[keyof typeof CancelSubscriptionForItemsBodyCreditOptionForCurrentTermCharges];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsBodyCreditOptionForCurrentTermCharges = {
  none: "none",
  prorate: "prorate",
  full: "full",
} as const;

export type CancelSubscriptionForItemsBody = {
  /** Set this to `true` if you want to cancel the subscription at the end of the current subscription billing cycle. The subscription `status` changes to `non_renewing`.
   */
  end_of_term?: boolean;
  /** Specify the date/time at which you want to cancel the subscription. This parameter should not be provided when `end_of_term` is passed as `true`. `cancel_at` can be set to a value in the past. This is called backdating. Use backdating when the subscription has been canceled already but its billing has been delayed. The following prerequisites must be met to allow backdating:

* Backdating must be enabled for subscription cancellation.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription cancellation. This limit is typically the day of the month by which the accounting for the previous month must be closed.
* The date is on or after `current_term_start`.
* The date is on or after the last date/time any of the following changes were made:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the subscription's plan is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  cancel_at?: number;
  /** For immediate cancellation (`end_of_term` = `false`), specify how to provide credits for current term charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* none - No credits notes are created. \* full - Credits are issues for the full value of the current term charges. \* prorate - Prorated credits are issued.
   */
  credit_option_for_current_term_charges?: CancelSubscriptionForItemsBodyCreditOptionForCurrentTermCharges;
  /** For immediate cancellation (`end_of_term` = `false`), specify how to handle any unbilled charges. When not provided, the [site default](https://www.chargebee.com/docs/cancellations.html#configure-subscription-cancellation) is considered. \* invoice - An invoice is generated immediately with the unbilled charges. \* delete - The unbilled charges are deleted.
   */
  unbilled_charges_option?: CancelSubscriptionForItemsBodyUnbilledChargesOption;
  /** Applicable when the subscription has past due invoices. Specify this if you want to close the due invoices of the subscription. If specified as schedule_payment_collection/write_off, the due invoices of the subscription will be qualified for the selected operation after the remaining refundable credits and excess payments are applied. **Note:** The payment collection attempt will be asynchronous. Not applicable when 'end_of_term' is true. \* no_action - No action is taken. \* write_off - The amount due in the invoices will be written-off. Credit notes created due to write-off will not be sent in the response. \* schedule_payment_collection - An automatic charge for the due amount of the past invoices will be attempted on the payment method available, if customer's auto-collection property is 'ON'.
   */
  account_receivables_handling?: CancelSubscriptionForItemsBodyAccountReceivablesHandling;
  /** Applicable when the customer has remaining refundable credits(issued against online payments). If specified as schedule_refund, the refund will be initiated for these credits after they are applied against the subscription's past due invoices if any. **Note:** The refunds initiated will be asynchronous. Not applicable when 'end_of_term' is true. \* schedule_refund - Initiates refund of the remaining credits. \* no_action - No action is taken.
   */
  refundable_credits_handling?: CancelSubscriptionForItemsBodyRefundableCreditsHandling;
  /** Cancels the current contract term.

* `terminate_immediately` immediately does the following:
  * sets the contract term [`status`](contract_terms#contract_term_status) to `terminated`.
  * Cancels the subscription.
  * Collects any [termination fee](contract_terms#termintation_fee).
* `end_of_contract_term` Sets the [`contract_term[action_at_term_end]`](contract_terms#contract_term_action_at_term_end) to `cancel`. In other words, the contract term is not renewed and the subscription is canceled at the end of the contract term.
. \* terminate_immediately - Terminate immediately \* end_of_contract_term - End of contract term
 */
  contract_term_cancel_option?: CancelSubscriptionForItemsBodyContractTermCancelOption;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is `true`, and if the site is configured to set invoice dates to date of closing, then upon invoice closure, this date is changed to the invoice closing date. `taxes` and `line_item_taxes` are computed based on the `tax` configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* It is not earlier than `cancel_at`.
.
 */
  invoice_date?: number;
  /** Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Subscriptions \> Subscription Cancellation**. Must be passed if set as mandatory in the app. The codes are case-sensitive.
   */
  cancel_reason_code?: string;
  /** Parameters for subscription_items
   */
  subscription_items?: CancelSubscriptionForItemsBodySubscriptionItems;
};

export type CancelSubscriptionForItemsChargebeeEventWebhook =
  (typeof CancelSubscriptionForItemsChargebeeEventWebhook)[keyof typeof CancelSubscriptionForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type CancelSubscriptionForItemsChargebeeEventEmail =
  (typeof CancelSubscriptionForItemsChargebeeEventEmail)[keyof typeof CancelSubscriptionForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type CancelSubscriptionForItemsChargebeeEventActions =
  (typeof CancelSubscriptionForItemsChargebeeEventActions)[keyof typeof CancelSubscriptionForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CancelSubscriptionForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type CancelSubscriptionForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: CancelSubscriptionForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: CancelSubscriptionForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: CancelSubscriptionForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type ResumeASubscription200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type ResumeASubscriptionBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* card - card \* sofort - sofort \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* ideal - ideal \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* boleto - boleto \* google_pay - google_pay \* apple_pay - apple_pay

 */
export type ResumeASubscriptionBodyPaymentIntentPaymentMethodType =
  (typeof ResumeASubscriptionBodyPaymentIntentPaymentMethodType)[keyof typeof ResumeASubscriptionBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type ResumeASubscriptionBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* giropay - giropay \* paypal_express_checkout - paypal_express_checkout \* card - card \* sofort - sofort \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* ideal - ideal \* upi - upi \* direct_debit - direct_debit \* bancontact - bancontact \* boleto - boleto \* google_pay - google_pay \* apple_pay - apple_pay
   */
  payment_method_type?: ResumeASubscriptionBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: ResumeASubscriptionBodyPaymentIntentAdditionalInformation;
};

/**
 * The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant

 */
export type ResumeASubscriptionBodyPaymentInitiator =
  (typeof ResumeASubscriptionBodyPaymentInitiator)[keyof typeof ResumeASubscriptionBodyPaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionBodyPaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

/**
 * Applicable when the subscription has past due invoices and **resume_option** is set as 'immediately'. Allows to collect past due invoices or retain them as unpaid. If 'schedule_payment_collection' option is chosen in this field, remaining refundable credits and excess payments are applied. **Note:** The payment collection attempt will be asynchronous. \* no_action - Retain as unpaid \* schedule_payment_collection - Collect payment

 */
export type ResumeASubscriptionBodyUnpaidInvoicesHandling =
  (typeof ResumeASubscriptionBodyUnpaidInvoicesHandling)[keyof typeof ResumeASubscriptionBodyUnpaidInvoicesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionBodyUnpaidInvoicesHandling = {
  no_action: "no_action",
  schedule_payment_collection: "schedule_payment_collection",
} as const;

/**
 * Applicable when charges get added during this operation and **resume_option** is set as 'immediately'. Allows to raise invoice immediately or add them to unbilled charges. \* add_to_unbilled_charges - Add to unbilled charges \* invoice_immediately - Invoice immediately

 */
export type ResumeASubscriptionBodyChargesHandling =
  (typeof ResumeASubscriptionBodyChargesHandling)[keyof typeof ResumeASubscriptionBodyChargesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionBodyChargesHandling = {
  invoice_immediately: "invoice_immediately",
  add_to_unbilled_charges: "add_to_unbilled_charges",
} as const;

/**
 * List of options to resume the subscription. \* specific_date - Resume on a specific date \* immediately - Resume immediately

 */
export type ResumeASubscriptionBodyResumeOption =
  (typeof ResumeASubscriptionBodyResumeOption)[keyof typeof ResumeASubscriptionBodyResumeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionBodyResumeOption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

export type ResumeASubscriptionBody = {
  /** List of options to resume the subscription. \* specific_date - Resume on a specific date \* immediately - Resume immediately
   */
  resume_option?: ResumeASubscriptionBodyResumeOption;
  /** Date on which the subscription will be resumed. Applicable when **resume_option** is set as 'specific_date'.
   */
  resume_date?: number;
  /** Applicable when charges get added during this operation and **resume_option** is set as 'immediately'. Allows to raise invoice immediately or add them to unbilled charges. \* add_to_unbilled_charges - Add to unbilled charges \* invoice_immediately - Invoice immediately
   */
  charges_handling?: ResumeASubscriptionBodyChargesHandling;
  /** Applicable when the subscription has past due invoices and **resume_option** is set as 'immediately'. Allows to collect past due invoices or retain them as unpaid. If 'schedule_payment_collection' option is chosen in this field, remaining refundable credits and excess payments are applied. **Note:** The payment collection attempt will be asynchronous. \* no_action - Retain as unpaid \* schedule_payment_collection - Collect payment
   */
  unpaid_invoices_handling?: ResumeASubscriptionBodyUnpaidInvoicesHandling;
  /** The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant
   */
  payment_initiator?: ResumeASubscriptionBodyPaymentInitiator;
  /** Parameters for payment_intent
   */
  payment_intent?: ResumeASubscriptionBodyPaymentIntent;
};

export type ResumeASubscriptionChargebeeEventWebhook =
  (typeof ResumeASubscriptionChargebeeEventWebhook)[keyof typeof ResumeASubscriptionChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type ResumeASubscriptionChargebeeEventEmail =
  (typeof ResumeASubscriptionChargebeeEventEmail)[keyof typeof ResumeASubscriptionChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type ResumeASubscriptionChargebeeEventActions =
  (typeof ResumeASubscriptionChargebeeEventActions)[keyof typeof ResumeASubscriptionChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeASubscriptionChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type ResumeASubscriptionHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: ResumeASubscriptionChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: ResumeASubscriptionChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: ResumeASubscriptionChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveCoupons200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
};

export type RemoveCouponsBody = {
  /** List of coupons to be applied to this subscription. You can provide coupon ids or coupon codes.
   */
  coupon_ids?: string[];
};

export type RemoveCouponsChargebeeEventWebhook =
  (typeof RemoveCouponsChargebeeEventWebhook)[keyof typeof RemoveCouponsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveCouponsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveCouponsChargebeeEventEmail =
  (typeof RemoveCouponsChargebeeEventEmail)[keyof typeof RemoveCouponsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveCouponsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveCouponsChargebeeEventActions =
  (typeof RemoveCouponsChargebeeEventActions)[keyof typeof RemoveCouponsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveCouponsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveCouponsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveCouponsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveCouponsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveCouponsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type UpdateSubscriptionForItems200 = {
  subscription: Subscription;
  customer: Customer;
  card?: Card;
  invoice?: Invoice;
  unbilled_charges?: UnbilledCharge[];
  credit_notes?: CreditNote[];
};

/**
 * Parameters for item_tiers

 */
export type UpdateSubscriptionForItemsBodyItemTiers = {
  /** The id of the item price for which the tier price is being overridden.
   */
  item_price_id?: string[];
  /** The lowest value in the quantity tier.
   */
  starting_unit?: number[];
  /** The highest value in the quantity tier.
   */
  ending_unit?: number[];
  /** The overridden price of the tier. The value depends on the [type of currency](./#handling_currency_units).
   */
  price?: number[];
  /** The decimal representation of the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string[];
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string[];
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string[];
};

export type UpdateSubscriptionForItemsBody = {
  /** Item ids of [mandatorily attached addons](./attached_items?prod_cat_ver=2) that are to be removed from the subscription.
   */
  mandatory_items_to_remove?: string[];
  /** If `true` then the existing `subscription_items` list for the subscription is replaced by the one provided. If `false` then the provided `subscription_items` list gets added to the existing list.
   */
  replace_items_list?: boolean;
  /** Updates [Net D](https://www.chargebee.com/docs/net_d.html) for the subscription. Net D is the number of days within which any invoice raised for the subscription must be paid.

* If the value is `0` or a positive integer: Net D is set explicitly for the subscription to the value provided. The value must be one of those defined in the [site configuration](https://www.chargebee.com/docs/net_d.html#enable-net-d-for-chargebee-invoices).
* If the value is `-1`: The attribute is reset and therefore not returned by the API. In this case, when an invoice is raised -- whether now or later -- the `net_term_days` defined at the [customer level](customers#customer_net_term_days) is considered.
* If the value is not provided: The attribute is left unaltered.
.
 */
  net_term_days?: number;
  /** The document date displayed on the invoice PDF. The default value is the current date. Provide this value to backdate the invoice. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription is effective as of a past date. Moreover, if `create_pending_invoices` is set to `true`, and if the site is configured to set invoice dates to date of closing, then upon invoice closure, this date is changed to the invoice closing date. taxes and line_item_taxes are computed based on the tax configuration as of `invoice_date`. When passing this parameter, the following prerequisites must be met:

* `invoice_date` must be in the past.
* `invoice_date` is not more than one calendar month into the past. For example, if today is 13th January, then you cannot pass a value that is earlier than 13th December.
* It is not earlier than `changes_scheduled_at`, `reactivate_from`, or `trial_end`.
* `invoice_immediately` is `true`.
.
 */
  invoice_date?: number;
  /** The new start date of a `future` subscription. Applicable only for `future` subscriptions.
   */
  start_date?: number;
  /** The time at which the trial has ended or will end for the subscription. This is only allowed when the subscription `status` is `future`, `in_trial`, or `cancelled`. Also, the value must not be earlier than `changes_scheduled_at` or `start_date`. **Note** : This parameter can be backdated (set to a value in the past) only when the subscription is in `cancelled` or `in_trial` `status`. Do this to keep a record of when the trial ended in case it ended at some point in the past. When `trial_end` is backdated, the subscription immediately goes into `active` or `non_renewing` status.
   */
  trial_end?: number;
  /** Billing cycles set for plan-item price is used by default.
   */
  billing_cycles?: number;
  /** The number of subscription billing cycles to [invoice in advance](https://www.chargebee.com/docs/advance-invoices.html). If a new term is started for the subscription due to this API call, then `terms_to_charge` is inclusive of this new term. See description for the `force_term_reset` parameter to learn more about when a subscription term is reset.
   */
  terms_to_charge?: number;
  /** If the subscription `status` is `cancelled` and it is being reactivated via this operation, this is the date/time at which the subscription should be reactivated.  
**Note:** It is recommended not to pass this parameter along with `changed_scheduled_at`. `reactivate_from` can be backdated (set to a value in the past). Use backdating when the subscription has been reactivated already but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription reactivation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after the last date/time any of the product catalog items of the subscription were changed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  reactivate_from?: number;
  /** Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.
   */
  billing_alignment_mode?: UpdateSubscriptionForItemsBodyBillingAlignmentMode;
  /** Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments.
   */
  auto_collection?: UpdateSubscriptionForItemsBodyAutoCollection;
  /** The preferred offline payment method for the subscription. \* sepa_credit - SEPA Credit \* cash - Cash \* no_preference - No Preference \* bank_transfer - Bank Transfer \* check - Check \* boleto - Boleto \* ach_credit - ACH Credit
   */
  offline_payment_method?: UpdateSubscriptionForItemsBodyOfflinePaymentMethod;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** List of coupons to be applied to this subscription. You can provide coupon ids or [coupon codes](https://apidocs.chargebee.com/docs/api/coupon_codes). If `changes_scheduled_at` is in the past, then the currently available coupons can be used even if they were not available as of the date for when the change is scheduled.
   */
  coupon_ids?: string[];
  /** If `true` then the existing `coupon_ids` list for the subscription is replaced by the one provided. If `false` then the provided list gets added to the existing `coupon_ids`.
   */
  replace_coupon_list?: boolean;
  /** * When `true`: [Prorated credits or charges](https://www.chargebee.com/docs/2.0/proration.html#proration-mechanism) are created as applicable for this change.
* When `false`: The subscription is changed without creating any credits or charges.
* When not provided, the value configured in the [site settings](https://www.chargebee.com/docs/2.0/proration.html#proration-for-subscription-change) is considered.

**Caveat**

For further changes within the same billing term, when `prorate` is set to `true`, **credits** are **not created** when **all** the conditions below hold true:

An immediate previous change was made

* with `prorate` set to `false` and
* no changes were made to the subscription's billing term and
* a change was made to either the subscription's items or their prices.
 */
  prorate?: boolean;
  /** Set this to true if you want the update to be applied at the end of the current subscription billing cycle.
   */
  end_of_term?: boolean;
  /** Say the subscription has the renewal date as 28th of every month. When the plan-item price of the subscription is set to one that has the same billing period as the current plan-item price, the subscription change does not change the term. In other words, the subscription still renews on the 28th. Passing this parameter as `true` will have the subscription reset its term to the current date (provided `end_of_term` is false).
   **Note**: When the new plan-item price has a billing period different from the current plan-item price of the subscription, the term is always reset, regardless of the value passed for this parameter.
   */
  force_term_reset?: boolean;
  /** When the `status` of the subscription is `cancelled`, this parameter determines whether the subscription is reactivated upon making this API request. Unless passed explicitly as `false`, this parameter is implied as `true` when you provide the `subscription_items` parameter.
   */
  reactivate?: boolean;
  /** The Chargebee payment token generated by Chargebee JS.
   */
  token_id?: string;
  /** A customer-facing note added to all invoices associated with this subscription. This note is one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./advanced-features#meta_data).
   */
  meta_data?: UpdateSubscriptionForItemsBodyMetaData;
  /** If there are charges raised immediately for the subscription, this parameter specifies whether those charges are to be invoiced immediately or added to [unbilled charges](https://www.chargebee.com/docs/unbilled-charges.html). The default value is as per the [site settings](https://www.chargebee.com/docs/unbilled-charges.html#configuration).
   **Note:** `invoice_immediately` only affects charges that are raised at the time of execution of this API call. Any charges scheduled to be raised in the future are not affected by this parameter. .
   */
  invoice_immediately?: boolean;
  /** If `true`, ignores the [hierarchy relationship](./customers?prod_cat_ver=2#customer_relationship) and uses customer as payment and invoice owner.
   */
  override_relationship?: boolean;
  /** When `change_option` is set to `specific_date`, then set the date/time at which the subscription change is to happen or has happened. **Note:** It is recommended not to pass this parameter along with `reactivate_from`. `changes_scheduled_at` can be set to a value in the past. This is called backdating the subscription change and is performed when the subscription change has already been provisioned but its billing has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription change operations.
* Only the following changes can be backdated:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* Subscription `status` is `active`, `cancelled`, or `non_renewing`.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is typically the day of the month by which the accounting for the previous month must be closed.
* The date is on or after `current_term_start`.
* The date is on or after the last date/time any of the following changes were made:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the plan in the subscription is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
.
 */
  changes_scheduled_at?: number;
  /** When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is carried out at the end of the current billing cycle of the subscription. \* specific_date - The change is carried out as of the date specified under `changes_scheduled_at`. \* immediately - The change is carried out immediately.
   */
  change_option?: UpdateSubscriptionForItemsBodyChangeOption;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** The period of time by which the first term of the subscription is to be extended free-of-charge. The value must be in multiples of free_period_unit.
   */
  free_period?: number;
  /** The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* week - Charge based on week(s) \* month - Charge based on month(s) \* day - Charge based on day(s) \* year - Charge based on year(s)
   */
  free_period_unit?: UpdateSubscriptionForItemsBodyFreePeriodUnit;
  /** Indicates whether the invoices for this subscription are generated with a `pending` `status`. This attribute is set to `true` automatically when the subscription has item prices that belong to `metered` items.

You can also set this to `true` explicitly using the [create](/docs/api/subscriptions#create_subscription_for_items_create_pending_invoices)/[update](/docs/api/subscriptions#update_subscription_for_items_create_pending_invoices) subscription operations. This is useful in the following scenarios:

* When tracking usages and calculating usage-based charges on your end. You can then add them to the subscription as a [one-time charge](https://www.chargebee.com/docs/charges.html) at the end of the billing term.
* When you need to inspect all charges before closing invoices for this subscription.

Applicable only when [Metered Billing](https://www.chargebee.com/docs/metered_billing.html) is enabled for the site
.
 */
  create_pending_invoices?: boolean;
  /** Set to `false` to override for this subscription, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the [customer level](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: boolean;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.
   */
  trial_end_action?: UpdateSubscriptionForItemsBodyTrialEndAction;
  /** The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant
   */
  payment_initiator?: UpdateSubscriptionForItemsBodyPaymentInitiator;
  /** Parameters for card
   */
  card?: UpdateSubscriptionForItemsBodyCard;
  /** Parameters for payment_method
   */
  payment_method?: UpdateSubscriptionForItemsBodyPaymentMethod;
  /** Parameters for payment_intent
   */
  payment_intent?: UpdateSubscriptionForItemsBodyPaymentIntent;
  /** Parameters for billing_address
   */
  billing_address?: UpdateSubscriptionForItemsBodyBillingAddress;
  /** Parameters for shipping_address
   */
  shipping_address?: UpdateSubscriptionForItemsBodyShippingAddress;
  /** Parameters for customer
   */
  customer?: UpdateSubscriptionForItemsBodyCustomer;
  /** Parameters for contract_term
   */
  contract_term?: UpdateSubscriptionForItemsBodyContractTerm;
  /** Parameters for subscription_items
   */
  subscription_items?: UpdateSubscriptionForItemsBodySubscriptionItems;
  /** Parameters for discounts
   */
  discounts?: UpdateSubscriptionForItemsBodyDiscounts;
  /** Parameters for item_tiers
   */
  item_tiers?: UpdateSubscriptionForItemsBodyItemTiers;
  [key: string]: any;
};

/**
 * The operation to be carried out for the discount. \* remove - The discount (given by `discounts[id]`) is removed from the subscription. Subsequent invoices will no longer have the discount applied. **Tip:** If you want to replace a discount, `remove` it and `add` another in the same API call. \* add - The discount is attached to the subscription.

 */
export type UpdateSubscriptionForItemsBodyDiscountsOperationTypeItem =
  (typeof UpdateSubscriptionForItemsBodyDiscountsOperationTypeItem)[keyof typeof UpdateSubscriptionForItemsBodyDiscountsOperationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyDiscountsOperationTypeItem = {
  add: "add",
  remove: "remove",
} as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours. \* month - A period of 1 calendar month.

 */
export type UpdateSubscriptionForItemsBodyDiscountsPeriodUnitItem =
  (typeof UpdateSubscriptionForItemsBodyDiscountsPeriodUnitItem)[keyof typeof UpdateSubscriptionForItemsBodyDiscountsPeriodUnitItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyDiscountsPeriodUnitItem = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type UpdateSubscriptionForItemsBodyDiscountsDurationTypeItem =
  (typeof UpdateSubscriptionForItemsBodyDiscountsDurationTypeItem)[keyof typeof UpdateSubscriptionForItemsBodyDiscountsDurationTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyDiscountsDurationTypeItem = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type UpdateSubscriptionForItemsBodyDiscountsApplyOnItem =
  (typeof UpdateSubscriptionForItemsBodyDiscountsApplyOnItem)[keyof typeof UpdateSubscriptionForItemsBodyDiscountsApplyOnItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyDiscountsApplyOnItem = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * Parameters for discounts

 */
export type UpdateSubscriptionForItemsBodyDiscounts = {
  apply_on: UpdateSubscriptionForItemsBodyDiscountsApplyOnItem[];
  duration_type: UpdateSubscriptionForItemsBodyDiscountsDurationTypeItem[];
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number[];
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number[];
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number[];
  period_unit?: UpdateSubscriptionForItemsBodyDiscountsPeriodUnitItem[];
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean[];
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string[];
  operation_type: UpdateSubscriptionForItemsBodyDiscountsOperationTypeItem[];
  /** The `id` of the `discount` to be removed. This parameter is only relevant when `discounts[operation_type]` is `remove`.
   */
  id?: string[];
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* immediately - The item is charged immediately on being added to the subscription. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`.

 */
export type UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem =
  (typeof UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem)[keyof typeof UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem =
  {
    immediately: "immediately",
    on_event: "on_event",
  } as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_creation - the time of creation of the subscription.

 */
export type UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem =
  (typeof UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem)[keyof typeof UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem =
  {
    subscription_creation: "subscription_creation",
    subscription_trial_start: "subscription_trial_start",
    plan_activation: "plan_activation",
    subscription_activation: "subscription_activation",
    contract_termination: "contract_termination",
  } as const;

/**
 * Parameters for subscription_items

 */
export type UpdateSubscriptionForItemsBodySubscriptionItems = {
  /** The unique identifier of the item price.
   */
  item_price_id: string[];
  /** The quantity of the item purchased
   */
  quantity?: number[];
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string[];
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number[];
  /** When [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site, the price or per-unit price of the item can be set here. The [value set for the item price](/docs/api/item_prices#item_price_price) is used by default. Provide the value as a decimal string in major units of the currency. Can be provided only when [multi-decimal pricing](/docs/api#handling_currency_units) is enabled. If `changes_scheduled_at` is in the past and a `unit_price_in_decimal` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price_in_decimal?: string[];
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number[];
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number[];
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number[];
  charge_on_event?: UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnEventItem[];
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean[];
  charge_on_option?: UpdateSubscriptionForItemsBodySubscriptionItemsChargeOnOptionItem[];
};

/**
 * Action to be taken when the contract term completes. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.


 */
export type UpdateSubscriptionForItemsBodyContractTermActionAtTermEnd =
  (typeof UpdateSubscriptionForItemsBodyContractTermActionAtTermEnd)[keyof typeof UpdateSubscriptionForItemsBodyContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Parameters for contract_term

 */
export type UpdateSubscriptionForItemsBodyContractTerm = {
  /** Action to be taken when the contract term completes. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.

 */
  action_at_term_end?: UpdateSubscriptionForItemsBodyContractTermActionAtTermEnd;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

/**
 * Determines whether to send einvoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.

 */
export type UpdateSubscriptionForItemsBodyCustomerEinvoicingMethod =
  (typeof UpdateSubscriptionForItemsBodyCustomerEinvoicingMethod)[keyof typeof UpdateSubscriptionForItemsBodyCustomerEinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyCustomerEinvoicingMethod = {
  automatic: "automatic",
  manual: "manual",
  site_default: "site_default",
} as const;

/**
 * Parameters for customer

 */
export type UpdateSubscriptionForItemsBodyCustomer = {
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_scheme?: string;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
 */
  is_einvoice_enabled?: boolean;
  /** Determines whether to send einvoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.
   */
  einvoicing_method?: UpdateSubscriptionForItemsBodyCustomerEinvoicingMethod;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_standard?: string;
  /** Confirms that a customer is a valid business without an EU/UK VAT number.
   */
  business_customer_without_vat_number?: boolean;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
};

/**
 * The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.

 */
export type UpdateSubscriptionForItemsBodyShippingAddressValidationStatus =
  (typeof UpdateSubscriptionForItemsBodyShippingAddressValidationStatus)[keyof typeof UpdateSubscriptionForItemsBodyShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for shipping_address

 */
export type UpdateSubscriptionForItemsBodyShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.
   */
  validation_status?: UpdateSubscriptionForItemsBodyShippingAddressValidationStatus;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type UpdateSubscriptionForItemsBodyBillingAddressValidationStatus =
  (typeof UpdateSubscriptionForItemsBodyBillingAddressValidationStatus)[keyof typeof UpdateSubscriptionForItemsBodyBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Parameters for billing_address

 */
export type UpdateSubscriptionForItemsBodyBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  state?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).  
**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: UpdateSubscriptionForItemsBodyBillingAddressValidationStatus;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type UpdateSubscriptionForItemsBodyPaymentIntentAdditionalInformation = {
  [key: string]: any;
};

/**
 * The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* direct_debit - direct_debit \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort

 */
export type UpdateSubscriptionForItemsBodyPaymentIntentPaymentMethodType =
  (typeof UpdateSubscriptionForItemsBodyPaymentIntentPaymentMethodType)[keyof typeof UpdateSubscriptionForItemsBodyPaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyPaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_intent

 */
export type UpdateSubscriptionForItemsBodyPaymentIntent = {
  /** Identifier for PaymentIntent generated by Chargebee.js. Applicable only when you are using Chargebee.js for completing the 3DS flow. The PaymentIntent should be in 'authorized' state while passing it here. You need not pass other PaymentIntent parameters if this is passed.
   */
  id?: string;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id?: string;
  /** Identifier for 3DS transaction/verification object at the gateway. Can be passed only after successfully completing the 3DS flow. Refer [3DS implementation in Chargebee](/docs/api/3ds_card_payments#3ds-gateway-side-implementation) to find out the gateway-specific gw_token format. Applicable when you are using gateway APIs directly for completing the 3DS flow.
   */
  gw_token?: string;
  /** The list of payment method types (For example, card, ideal, sofort, bancontact, etc.) this Payment Intent is allowed to use. If payment method type is empty, Card is taken as the default type for all gateways except Razorpay. \* card - card \* dotpay - dotpay \* upi - upi \* google_pay - google_pay \* paypal_express_checkout - paypal_express_checkout \* ideal - ideal \* boleto - boleto \* direct_debit - direct_debit \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* apple_pay - apple_pay \* giropay - giropay \* sofort - sofort
   */
  payment_method_type?: UpdateSubscriptionForItemsBodyPaymentIntentPaymentMethodType;
  /** Identifier for Braintree permanent token. Applicable when you are using Braintree APIs for completing the 3DS flow.
   */
  reference_id?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: UpdateSubscriptionForItemsBodyPaymentIntentAdditionalInformation;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type UpdateSubscriptionForItemsBodyPaymentMethodAdditionalInformation = {
  [key: string]: any;
};

/**
 * The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* google_pay - Payments made via Google Pay. \* sofort - Payments made via Sofort. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay. \* dotpay - Payments made via Dotpay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource.

 */
export type UpdateSubscriptionForItemsBodyPaymentMethodType =
  (typeof UpdateSubscriptionForItemsBodyPaymentMethodType)[keyof typeof UpdateSubscriptionForItemsBodyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Parameters for payment_method

 */
export type UpdateSubscriptionForItemsBodyPaymentMethod = {
  /** The type of payment method. For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource. \* google_pay - Payments made via Google Pay. \* sofort - Payments made via Sofort. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay. \* dotpay - Payments made via Dotpay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource.
   */
  type?: UpdateSubscriptionForItemsBodyPaymentMethodType;
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** The reference id. In the case of Amazon and PayPal this will be the *billing agreement id* . For GoCardless direct debit this will be 'mandate id'. In the case of card this will be the identifier provided by the gateway/card vault for the specific payment method resource. **Note:** This is not the one-time temporary token provided by gateways like Stripe.   
For more details refer [Update payment method for a customer](customers#update_payment_method_for_a_customer) API under Customer resource.
 */
  reference_id?: string;
  /** Single-use tokens created by payment gateways. In Stripe, a single-use token is created for Apple Pay Wallet, card details or direct debit. In Braintree, a nonce is created for Apple Pay Wallet, PayPal, or card details. In Authorize.Net, a nonce is created for card details. In Adyen, an encrypted data is created from the card details.
   */
  tmp_token?: string;
  /** [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern
Ireland**) is available as an option.
 */
  issuing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: UpdateSubscriptionForItemsBodyPaymentMethodAdditionalInformation;
};

/**
 * \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.

 */
export type UpdateSubscriptionForItemsBodyCardAdditionalInformation = {
  [key: string]: any;
};

/**
 * Parameters for card

 */
export type UpdateSubscriptionForItemsBodyCard = {
  /** The gateway account in which this payment source is stored.
   */
  gateway_account_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The credit card number without any format. If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted card number here.
   */
  number?: string;
  /** Card expiry month.
   */
  expiry_month?: number;
  /** Card expiry year.
   */
  expiry_year?: number;
  /** The card verification value (CVV). If you are using [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2#getting-braintree.js), you can specify the Braintree encrypted CVV here.
   */
  cvv?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search/code) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name. Is set by Chargebee automatically for US, Canada and India If `state_code` is provided.
   */
  billing_state?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** \* \`checkout_com\`: While adding a new payment method using \[permanent token\](./payment_sources?#create_using_permanent_token) or passing raw card details to Checkout.com, \`document\` ID and \`country_of_residence\` are required to support payments through \[dLocal\](https://docs.checkout.com/payment-methods/cards/dlocal). \* \`payer\`: User related information. \* \`country_of_residence\`: This is required since the billing country associated with the user's payment method may not be the same as their country of residence. Hence the user's country of residence needs to be specified. The country code should be a \[two-character ISO code\](https://www.checkout.com/docs/developer-resources/testing/codes/country-codes). \* \`document\`: Document ID is the user's \[identification number\](https://docs.dlocal.com/reference/country-reference#documents) based on their country. \* \`bluesnap\`: While passing raw card details to BlueSnap, if \`fraud_session_id\` is added, \[additional validation\](https://developers.bluesnap.com/reference/fraud-prevention) is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your \[BlueSnap fraud session ID\](https://developers.bluesnap.com/reference/fraud-prevention#section-implementing-device-data-collector) required to perform anti-fraud validation. \* \`braintree\`: While passing raw card details to Braintree, your \`fraud_merchant_id\` and the user's \`device_session_id\` can be added to perform \[additional validation\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) and avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`device_session_id\`: Session ID associated with the user's device. \* \`fraud_merchant_id\`: Your \[merchant ID\](https://developer.paypal.com/braintree/docs/guides/premium-fraud-management-tools/device-data-collection/javascript/v3#collecting-device-data) for fraud detection. \* \`chargebee_payments\`: While passing raw card details to Chargebee Payments, if \`fraud_session_id\` is added, additional validation is performed to avoid fraudulent transactions. \* \`fraud\`: Fraud identification related information. \* \`fraud_session_id\`: Your Chargebee Payments fraud session ID required to perform anti-fraud validation.
   */
  additional_information?: UpdateSubscriptionForItemsBodyCardAdditionalInformation;
};

/**
 * The type of initiator to be used for the payment request triggered by this operation. \* customer - Pass this value to indicate that the request is initiated by the customer \* merchant - Pass this value to indicate that the request is initiated by the merchant

 */
export type UpdateSubscriptionForItemsBodyPaymentInitiator =
  (typeof UpdateSubscriptionForItemsBodyPaymentInitiator)[keyof typeof UpdateSubscriptionForItemsBodyPaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyPaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.

 */
export type UpdateSubscriptionForItemsBodyTrialEndAction =
  (typeof UpdateSubscriptionForItemsBodyTrialEndAction)[keyof typeof UpdateSubscriptionForItemsBodyTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The unit of time in multiples of which the free_period parameter is expressed. The value must be equal to or lower than the [period_unit](/docs/api/plans#create_a_plan_period_unit) attribute of the [plan](/docs/api/subscriptions#create_a_subscription_plan_id) chosen. \* week - Charge based on week(s) \* month - Charge based on month(s) \* day - Charge based on day(s) \* year - Charge based on year(s)

 */
export type UpdateSubscriptionForItemsBodyFreePeriodUnit =
  (typeof UpdateSubscriptionForItemsBodyFreePeriodUnit)[keyof typeof UpdateSubscriptionForItemsBodyFreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyFreePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is carried out at the end of the current billing cycle of the subscription. \* specific_date - The change is carried out as of the date specified under `changes_scheduled_at`. \* immediately - The change is carried out immediately.

 */
export type UpdateSubscriptionForItemsBodyChangeOption =
  (typeof UpdateSubscriptionForItemsBodyChangeOption)[keyof typeof UpdateSubscriptionForItemsBodyChangeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyChangeOption = {
  immediately: "immediately",
  end_of_term: "end_of_term",
  specific_date: "specific_date",
} as const;

/**
 * A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./advanced-features#meta_data).

 */
export type UpdateSubscriptionForItemsBodyMetaData = { [key: string]: any };

/**
 * The preferred offline payment method for the subscription. \* sepa_credit - SEPA Credit \* cash - Cash \* no_preference - No Preference \* bank_transfer - Bank Transfer \* check - Check \* boleto - Boleto \* ach_credit - ACH Credit

 */
export type UpdateSubscriptionForItemsBodyOfflinePaymentMethod =
  (typeof UpdateSubscriptionForItemsBodyOfflinePaymentMethod)[keyof typeof UpdateSubscriptionForItemsBodyOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyOfflinePaymentMethod = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * Defines whether payments need to be collected automatically for this subscription. Overrides customer's auto-collection property. \* on - Whenever an invoice is created for this subscription, an automatic charge will be attempted on the payment method available. \* off - Automatic collection of charges will not be made for this subscription. Use this for offline payments.

 */
export type UpdateSubscriptionForItemsBodyAutoCollection =
  (typeof UpdateSubscriptionForItemsBodyAutoCollection)[keyof typeof UpdateSubscriptionForItemsBodyAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyAutoCollection = {
  on: "on",
  off: "off",
} as const;

/**
 * Override the [billing alignment mode](https://www.chargebee.com/docs/calendar-billing.html#alignment-of-billing-date) chosen for the site for calendar billing. Only applicable when using calendar billing. \* immediate - Subscription period will be aligned with the configured billing date immediately, with credits or charges raised accordingly.. \* delayed - Subscription period will be aligned with the configured billing date at the next renewal.

 */
export type UpdateSubscriptionForItemsBodyBillingAlignmentMode =
  (typeof UpdateSubscriptionForItemsBodyBillingAlignmentMode)[keyof typeof UpdateSubscriptionForItemsBodyBillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsBodyBillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type UpdateSubscriptionForItemsChargebeeEventWebhook =
  (typeof UpdateSubscriptionForItemsChargebeeEventWebhook)[keyof typeof UpdateSubscriptionForItemsChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateSubscriptionForItemsChargebeeEventEmail =
  (typeof UpdateSubscriptionForItemsChargebeeEventEmail)[keyof typeof UpdateSubscriptionForItemsChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateSubscriptionForItemsChargebeeEventActions =
  (typeof UpdateSubscriptionForItemsChargebeeEventActions)[keyof typeof UpdateSubscriptionForItemsChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateSubscriptionForItemsChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type UpdateSubscriptionForItemsHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: UpdateSubscriptionForItemsChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: UpdateSubscriptionForItemsChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: UpdateSubscriptionForItemsChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type RemoveAnAdvanceInvoiceSchedules200 = {
  subscription: Subscription;
  advance_invoice_schedules?: AdvanceInvoiceSchedule[];
};

/**
 * Parameters for specific_dates_schedule

 */
export type RemoveAnAdvanceInvoiceSchedulesBodySpecificDatesSchedule = {
  /** When *schedule_type = specific_dates* , pass the id of the [specific_dates_schedule](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule) that you want to remove. If not passed, the entire advance_invoice_schedule is removed.
   */
  id?: string[];
};

export type RemoveAnAdvanceInvoiceSchedulesBody = {
  /** Parameters for specific_dates_schedule
   */
  specific_dates_schedule?: RemoveAnAdvanceInvoiceSchedulesBodySpecificDatesSchedule;
};

export type RemoveAnAdvanceInvoiceSchedulesChargebeeEventWebhook =
  (typeof RemoveAnAdvanceInvoiceSchedulesChargebeeEventWebhook)[keyof typeof RemoveAnAdvanceInvoiceSchedulesChargebeeEventWebhook];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveAnAdvanceInvoiceSchedulesChargebeeEventWebhook = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveAnAdvanceInvoiceSchedulesChargebeeEventEmail =
  (typeof RemoveAnAdvanceInvoiceSchedulesChargebeeEventEmail)[keyof typeof RemoveAnAdvanceInvoiceSchedulesChargebeeEventEmail];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveAnAdvanceInvoiceSchedulesChargebeeEventEmail = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveAnAdvanceInvoiceSchedulesChargebeeEventActions =
  (typeof RemoveAnAdvanceInvoiceSchedulesChargebeeEventActions)[keyof typeof RemoveAnAdvanceInvoiceSchedulesChargebeeEventActions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveAnAdvanceInvoiceSchedulesChargebeeEventActions = {
  "all-disabled": "all-disabled",
} as const;

export type RemoveAnAdvanceInvoiceSchedulesHeaders = {
  /**
   * The device from which the customer has made the request
   */
  "chargebee-request-origin-device"?: string;
  /**
   * The email address of your customer/user. Use this when the email address has only ASCII characters.
   */
  "chargebee-request-origin-user"?: string;
  /**
   * The Base64-encoded email address of your customer/user. Use this if the email address has UTF-8 characters. When this header is provided, the header `chargebee-request-origin-user` is ignored.
   */
  "chargebee-request-origin-user-encoded"?: string;
  /**
   * The IP address of the customer where the request originated
   */
  "chargebee-request-origin-ip"?: string;
  /**
   * skip all actions to be done on the events
   */
  "chargebee-event-actions"?: RemoveAnAdvanceInvoiceSchedulesChargebeeEventActions;
  /**
   * skip only emails
   */
  "chargebee-event-email"?: RemoveAnAdvanceInvoiceSchedulesChargebeeEventEmail;
  /**
   *  skip only webhooks
   */
  "chargebee-event-webhook"?: RemoveAnAdvanceInvoiceSchedulesChargebeeEventWebhook;
  /**
   * If the site has multiple business entities, you can use this custom HTTP header to specify the business entity for which Chargebee should perform the operation.
   */
  "chargebee-business-entity-id"?: string;
};

export type OffsetParameter = string;

export type IncludeDeletedParameter = boolean;

export type LimitParameter = number;

export type VoucherType = (typeof VoucherType)[keyof typeof VoucherType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoucherType = {
  boleto: "boleto",
} as const;

/**
 * Name of the gateway this virtual bank account is stored in. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* bank_of_america - Bank of America Gateway \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.

 */
export type VirtualBankAccountGateway =
  (typeof VirtualBankAccountGateway)[keyof typeof VirtualBankAccountGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VirtualBankAccountGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * type of the credit transfer \* ach_credit - ACH Credit Transfer \* sepa_credit - SEPA Credit Transfer

 */
export type VirtualBankAccountScheme =
  (typeof VirtualBankAccountScheme)[keyof typeof VirtualBankAccountScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VirtualBankAccountScheme = {
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
} as const;

/**
 * A virtual bank account is a unique account number which is generated so you don't need to share your sensitive bank account details with your users. A virtual bank account can be paid with ACH credit or wire transfer. Users can make payment of the amount due to this account, and the amount will be matched with the invoice.

 */
export interface VirtualBankAccount {
  /** Identifier of the virtual bank account
   */
  id: string;
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Email address associated with the virtual bank account
   */
  email: string;
  /** type of the credit transfer \* ach_credit - ACH Credit Transfer \* sepa_credit - SEPA Credit Transfer
   */
  scheme?: VirtualBankAccountScheme;
  /** Name of the bank
   */
  bank_name?: string;
  /** The account number to which funds will be transferred.
   */
  account_number: string;
  /** The routing number of the bank
   */
  routing_number?: string;
  /** Swift code of the bank in which the account exists.
   */
  swift_code: string;
  /** Name of the gateway this virtual bank account is stored in. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* bank_of_america - Bank of America Gateway \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.
   */
  gateway: VirtualBankAccountGateway;
  /** The gateway account in which this virtual bank account is stored.
   */
  gateway_account_id: string;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this virtual bank account resource was last updated.
   */
  updated_at?: number;
  /** Timestamp indicating when this virtual bank account resource is created.
   */
  created_at: number;
  /** Identifier provided by the gateway for the virtual bank account source. In case of Stripe, the reference_id consists of a combination of Stripe Customer ID and Stripe Source ID separated by a forward slash (e.g. cus_63MnDn0t6kfDW7/src_6WjCF20vT9WN1G).
   */
  reference_id: string;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
}

export type VariantOptionValuesItem = {
  /** Name of the option values.
   */
  name?: string;
  /** Pass values of the `option_values`.
   */
  value?: string;
};

/**
 * The meta description of the product variant for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).

 */
export type VariantMetadata = { [key: string]: any };

/**
 * Status of the product variant. \* active - The active product variants are visible on the storefront, subscription, or checkout. \* inactive - The inactive product variants are not visible on the storefront, subscription, or checkout.

 */
export type VariantStatus = (typeof VariantStatus)[keyof typeof VariantStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VariantStatus = {
  active: "active",
  inactive: "inactive",
} as const;

/**
 * A product variant is a specific product version with a unique combination of product option values.

 */
export interface Variant {
  /** The immutable unique identifier of a product variant.
   */
  id?: string;
  /** This is a unique name that appears for each product variant to the end user.
   */
  name: string;
  /** This is a unique name appears for each product variant to the end user.
   */
  external_name?: string;
  /** Description of the product variant.
   */
  description?: string;
  /** A unique identifier code a seller assigns to each product variant. Retailers and merchants use SKUs to keep track of inventory and sales data and help organize products within a store or warehouse. SKUs can include a combination of letters, numbers, and symbols and can vary in length depending on the seller's needs.
   */
  sku?: string;
  /** Product variant is deleted or not. If the value is `true` then the product variant has been deleted else it exists. Once the product variant is deleted, you can reuse the product variant `id` and `name`.
   */
  deleted: boolean;
  /** The unique identifier of the product that is associated with this variant.
   */
  product_id: string;
  /** Status of the product variant. \* active - The active product variants are visible on the storefront, subscription, or checkout. \* inactive - The inactive product variants are not visible on the storefront, subscription, or checkout.
   */
  status?: VariantStatus;
  /** Timestamp when the product variant was created.
   */
  created_at: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this product variant was last updated.
   */
  updated_at?: number;
  /** The meta description of the product variant for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).
   */
  metadata?: VariantMetadata;
  /** List of product variants option values.
   */
  option_values?: VariantOptionValuesItem[];
}

export type ValidationStatus =
  (typeof ValidationStatus)[keyof typeof ValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * The source from which the usage record was created. \* admin_console - Operation made through the Chargebee admin UI \* api - Operation made through the API \* bulk_operation - Operation that are triggerd through bulk operation.

 */
export type UsageSource = (typeof UsageSource)[keyof typeof UsageSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsageSource = {
  admin_console: "admin_console",
  api: "api",
  bulk_operation: "bulk_operation",
} as const;

/**
 * The Usages API is used to record usage for metered item prices in a subscription. This API is only applicable when Automated Metered Billing is enabled in Chargebee.

Metered items are those that are billed based on the service usage. Common examples include:

* Internet data services.
* SMS send/receive services.
* API services that are billed for the number of API calls made, say, per month.



An [item](/docs/api/items) is marked metered by setting its `metered` attribute as `true`. Only recurring items can be can be set as `metered`. Recurring items are those of `type` `plan` or `addon`. A subscription can have both metered and non-metered items. The usages API (described in this page), is used to add, retrieve and delete usages for the metered items in a subscription.

#### Invoicing Metered Item Prices {#invoicing_usages_pcv2}

While non-metered items are invoiced in a prepaid manner at the beginning of each billing cycle; for metered items, the charges are raised at the end of the billing term (postpaid). During the course of the billing period, [usages can be added](usages?prod_cat_ver=2#create_a_usage) as and when they occur. For a given `subscription_id` and `item_price_id`, there can be only one usage record for a specific `usage_date`. At the end of each term, the invoice is generated with `status` as `pending`. Any remaining usage records can continue to be added to the subscription until the invoice [closes automatically](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) or is [closed via an API call](/docs/api/invoices?prod_cat_ver=2#close_a_pending_invoice). If a usage record has erroneous information and you want to correct it, [delete the usage](usages?prod_cat_ver=2#delete_a_usage) and add it again.  
**Max Usages**   

* The maximum number of usages that can be recorded for the entire lifetime of a subscription is 5000. [Contact Support](https://chargebee.freshdesk.com/support/home) if you want this limit to be increased for your site.
* If there are no usages for an item price, the item price is not invoiced.

 */
export interface Usage {
  /** A unique and immutable id for the usage. If not provided, it is autogenerated.
   */
  id?: string;
  /** The time at which this usage occurred. Chargebee bills only those usages whose `usage_date` falls within a time when the subscription `status` was `active` or `non_renewing`. However, the remaining usage records are still stored and are [retrievable](/docs/api/usages?prod_cat_ver=2#retrieve_a_usage).
   **Note:** If `usage_date` corresponds to a time already invoiced, then it is stored but never invoiced unless the [invoice is regenerated](/docs/api/subscriptions?prod_cat_ver=2#regenerate_an_invoice).
   */
  usage_date: number;
  /** The id of the [subscription](/docs/api/subscriptions?prod_cat_ver=2) to which this usage record belongs.
   */
  subscription_id: string;
  /** The id of the [item price](/docs/api/item_prices?prod_cat_ver=2) to which this usage belongs. The item price must be a part of the subscription or should have been part of it historically.
   */
  item_price_id: string;
  /** When the usage has been invoiced, this is the `id` of the [invoice](/docs/api/invoices?prod_cat_ver=2). This is cleared when the invoice is `voided` or deleted.
   */
  invoice_id?: string;
  /** When the usage has been invoiced, this is the `id` of the [invoice.line_item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items) that the usage is for. This is cleared when the invoice is [voided](/docs/api/invoices?prod_cat_ver=2#void_an_invoice) or [deleted](/docs/api/invoices?prod_cat_ver=2#delete_an_invoice).
   */
  line_item_id?: string;
  /** The quantity specified for this usage record.
   */
  quantity: string;
  /** The source from which the usage record was created. \* admin_console - Operation made through the Chargebee admin UI \* api - Operation made through the API \* bulk_operation - Operation that are triggerd through bulk operation.
   */
  source?: UsageSource;
  /** A note for this usage record. This appears against the usage on the Chargebee UI. This note is not displayed on any customer-facing document or interface such as [invoice PDFs](/docs/api/invoices?prod_cat_ver=2#retrieve_invoice_as_pdf) or [Hosted Pages](/docs/api/hosted_pages?prod_cat_ver=2).
   */
  note?: string;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this usage resource was last updated.
   */
  updated_at?: number;
  /** Timestamp indicating when the item was created.
   */
  created_at: number;
}

export type UnpaidInvoicesHandling =
  (typeof UnpaidInvoicesHandling)[keyof typeof UnpaidInvoicesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnpaidInvoicesHandling = {
  no_action: "no_action",
  schedule_payment_collection: "schedule_payment_collection",
} as const;

export type UnbilledChargesOption =
  (typeof UnbilledChargesOption)[keyof typeof UnbilledChargesOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnbilledChargesOption = {
  invoice: "invoice",
  delete: "delete",
} as const;

export type UnbilledChargesHandling =
  (typeof UnbilledChargesHandling)[keyof typeof UnbilledChargesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnbilledChargesHandling = {
  no_action: "no_action",
  invoice: "invoice",
} as const;

export type UnbilledChargeOption =
  (typeof UnbilledChargeOption)[keyof typeof UnbilledChargeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnbilledChargeOption = {
  invoice: "invoice",
  delete: "delete",
} as const;

export type UnbilledChargeTiersItem = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan_item_price - Indicates that this line item is based on plan Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price

 */
export type UnbilledChargeEntityType =
  (typeof UnbilledChargeEntityType)[keyof typeof UnbilledChargeEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnbilledChargeEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The pricing scheme for this line item. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* flat_fee - A fixed price that is not quantity-based. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type UnbilledChargePricingModel =
  (typeof UnbilledChargePricingModel)[keyof typeof UnbilledChargePricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnbilledChargePricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * Unbilled charge represents the charges that are held by passing invoice_later in various operations such as update subscription, add charge, create subscription, etc. [Learn more.](https://www.chargebee.com/docs/unbilled-charges.html)

If any invoice is to be created for a subscription all the unbilled charges associated with the subscription will be included in that invoice.

If any invoice is to be created for a customer, all the unbilled charges associated with its subscriptions will be included in that invoice.

Any automatic invoice creation like renewal, activation, etc., will include the unbilled charges.

Subscriptions are invoiced at the start of every term based on the recurring items and charged immediately against the customer's credit card if 'auto_collection' is turned 'on', otherwise the resulting invoice will be created as 'Payment Due'.

If consolidated invoicing is enabled, the charges during the subscription renewals/activations will be held and consolidated at the last renewal/activation that takes place on that particular day.

 */
export interface UnbilledCharge {
  /** Uniquely identifies an unbilled charge.
   */
  id?: string;
  /** A unique identifier for the customer being charged.
   */
  customer_id?: string;
  /** A unique identifier for the subscription this charge belongs to.
   */
  subscription_id?: string;
  /** Start date of this charge.
   */
  date_from?: number;
  /** End date of this charge.
   */
  date_to?: number;
  /** Unit amount of the charge item.
   */
  unit_amount?: number;
  /** The pricing scheme for this line item. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* flat_fee - A fixed price that is not quantity-based. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
   */
  pricing_model?: UnbilledChargePricingModel;
  /** Quantity of the item which is represented by this charge.
   */
  quantity?: number;
  /** Total amount of this charge. Typically equals to unit amount x quantity.
   */
  amount?: number;
  /** The currency code (ISO 4217 format) for the charge.
   */
  currency_code: string;
  /** Total discounts for this charge.
   */
  discount_amount?: number;
  /** Detailed description about this charge.
   */
  description?: string;
  /** Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan_item_price - Indicates that this line item is based on plan Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price
   */
  entity_type: UnbilledChargeEntityType;
  /** The identifier of the modelled entity this charge is based on. Will be null for 'adhoc' entity type.
   */
  entity_id?: string;
  /** Will be true if the charge has been voided. Usually the unbilled charge will be voided and revised to different charges(s) during proration.
   */
  is_voided: boolean;
  /** Timestamp indicating the date and time this charge got voided.
   */
  voided_at?: number;
  /** The decimal representation of the unit amount for the entity. The value is in major units of the currency. Returned when the entity is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this entity. Returned when the entity is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the charge, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Timestamp indicating when the unbilled charge was last updated
   */
  updated_at: number;
  /** The value of this parameter will be true if it is a recurring unbilled charge for a future term.
   */
  is_advance_charge?: boolean;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** The list of tiers applicable for this line item
   */
  tiers?: UnbilledChargeTiersItem[];
}

export type Type = (typeof Type)[keyof typeof Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Type = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type TrialEndAction =
  (typeof TrialEndAction)[keyof typeof TrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The status of this transaction. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* success - The transaction is successful. \* voided - The transaction got voided or authorization expired at gateway. \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* timeout - Transaction failed because of Gateway not accepting the connection.

 */
export type TransactionLinkedPaymentsItemStatus =
  (typeof TransactionLinkedPaymentsItemStatus)[keyof typeof TransactionLinkedPaymentsItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionLinkedPaymentsItemStatus = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

export type TransactionLinkedPaymentsItem = {
  /** Uniquely identifies the transaction.
   */
  id: string;
  /** The status of this transaction. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* success - The transaction is successful. \* voided - The transaction got voided or authorization expired at gateway. \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* timeout - Transaction failed because of Gateway not accepting the connection.
   */
  status?: TransactionLinkedPaymentsItemStatus;
  /** Amount for this transaction.
   */
  amount?: number;
  /** Indicates when this transaction occurred.
   */
  date?: number;
};

/**
 * The status of this transaction. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* voided - The transaction got voided or authorization expired at gateway. \* timeout - Transaction failed because of Gateway not accepting the connection. \* success - The transaction is successful. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method.

 */
export type TransactionLinkedRefundsItemTxnStatus =
  (typeof TransactionLinkedRefundsItemTxnStatus)[keyof typeof TransactionLinkedRefundsItemTxnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionLinkedRefundsItemTxnStatus = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

export type TransactionLinkedRefundsItem = {
  /** Uniquely identifies the transaction.
   */
  txn_id: string;
  /** The status of this transaction. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* voided - The transaction got voided or authorization expired at gateway. \* timeout - Transaction failed because of Gateway not accepting the connection. \* success - The transaction is successful. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method.
   */
  txn_status: TransactionLinkedRefundsItemTxnStatus;
  /** Indicates when this refund occured.
   */
  txn_date: number;
  /** Amount of this refund transaction.
   */
  txn_amount: number;
};

/**
 * The status of this Credit Note. \* voided - When the Credit Note has been cancelled. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice.

 */
export type TransactionLinkedCreditNotesItemCnStatus =
  (typeof TransactionLinkedCreditNotesItemCnStatus)[keyof typeof TransactionLinkedCreditNotesItemCnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionLinkedCreditNotesItemCnStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * Credit note reason code. Deprecated use the cn_create_reason_code parameter instead \* service_unsatisfactory - Service Unsatisfactory \* other - Can be set when none of the above reason codes are applicable \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* fraudulent - FRAUDULENT \* order_change - Order Change \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* chargeback - Can be set when you are recording your customer Chargebacks \* waiver - Waiver \* order_cancellation - Order Cancellation \* product_unsatisfactory - Product Unsatisfactory

 */
export type TransactionLinkedCreditNotesItemCnReasonCode =
  (typeof TransactionLinkedCreditNotesItemCnReasonCode)[keyof typeof TransactionLinkedCreditNotesItemCnReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionLinkedCreditNotesItemCnReasonCode = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

export type TransactionLinkedCreditNotesItem = {
  /** Identifier for the credit-notes.
   */
  cn_id: string;
  /** The transaction amount applied to this invoice
   */
  applied_amount: number;
  /** Timestamp at which the transaction is applied.
   */
  applied_at: number;
  /** Credit note reason code. Deprecated use the cn_create_reason_code parameter instead \* service_unsatisfactory - Service Unsatisfactory \* other - Can be set when none of the above reason codes are applicable \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* fraudulent - FRAUDULENT \* order_change - Order Change \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* chargeback - Can be set when you are recording your customer Chargebacks \* waiver - Waiver \* order_cancellation - Order Cancellation \* product_unsatisfactory - Product Unsatisfactory
   */
  cn_reason_code?: TransactionLinkedCreditNotesItemCnReasonCode;
  /** Credit note reason code
   */
  cn_create_reason_code?: string;
  /** The date this credit note is created.
   */
  cn_date?: number;
  /** Total amount of the credit note
   */
  cn_total?: number;
  /** The status of this Credit Note. \* voided - When the Credit Note has been cancelled. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice.
   */
  cn_status: TransactionLinkedCreditNotesItemCnStatus;
  /** The invoice number. Acts as a identifier for invoice and typically generated sequentially.
   */
  cn_reference_invoice_id: string;
};

/**
 * Current status of this invoice. \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* voided - Indicates a voided invoice. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings. \* paid - Indicates a paid invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* not_paid - Indicates the payment is not made and all attempts to collect is failed.

 */
export type TransactionLinkedInvoicesItemInvoiceStatus =
  (typeof TransactionLinkedInvoicesItemInvoiceStatus)[keyof typeof TransactionLinkedInvoicesItemInvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionLinkedInvoicesItemInvoiceStatus = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

export type TransactionLinkedInvoicesItem = {
  /** Identifier for the invoice.
   */
  invoice_id: string;
  /** The transaction amount applied to this invoice
   */
  applied_amount: number;
  /** Timestamp at which the transaction is applied.
   */
  applied_at: number;
  /** The date this invoice is issued.
   */
  invoice_date?: number;
  /** Total amount of the invoice
   */
  invoice_total?: number;
  /** Current status of this invoice. \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* voided - Indicates a voided invoice. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings. \* paid - Indicates a paid invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* not_paid - Indicates the payment is not made and all attempts to collect is failed.
 */
  invoice_status: TransactionLinkedInvoicesItemInvoiceStatus;
};

/**
 * Type of authorization transaction. \* verification - The transaction has been created for payment method verification. \* blocking_funds - The transaction has been created to block the funds from payment method.

 */
export type TransactionAuthorizationReason =
  (typeof TransactionAuthorizationReason)[keyof typeof TransactionAuthorizationReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionAuthorizationReason = {
  blocking_funds: "blocking_funds",
  verification: "verification",
} as const;

/**
 * Marker for on-session payments (3DS). null indicates 'merchant'. \* merchant - Payment initiated on stored payment method by the merchant \* customer - Customer initiated 3DS payment

 */
export type TransactionInitiatorType =
  (typeof TransactionInitiatorType)[keyof typeof TransactionInitiatorType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionInitiatorType = {
  customer: "customer",
  merchant: "merchant",
} as const;

/**
 * Indicates whether or not the transaction has been identified as fraudulent. \* suspicious - The transaction has been identified as potentially fraudulent by the gateway \* safe - The transaction has been marked as safe \* fraudulent - The transaction has been marked as fraudulent

 */
export type TransactionFraudFlag =
  (typeof TransactionFraudFlag)[keyof typeof TransactionFraudFlag];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionFraudFlag = {
  safe: "safe",
  suspicious: "suspicious",
  fraudulent: "fraudulent",
} as const;

/**
 * The status of this transaction. \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* timeout - Transaction failed because of Gateway not accepting the connection. \* success - The transaction is successful. \* voided - The transaction got voided or authorization expired at gateway. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure

 */
export type TransactionStatus =
  (typeof TransactionStatus)[keyof typeof TransactionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionStatus = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

/**
 * Type of the transaction. \* authorization - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* payment - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* refund - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* payment_reversal - Indicates a reversal transaction.

 */
export type TransactionType =
  (typeof TransactionType)[keyof typeof TransactionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionType = {
  authorization: "authorization",
  payment: "payment",
  refund: "refund",
  payment_reversal: "payment_reversal",
} as const;

/**
 * Gateway through which this transaction was done. Applicable only for 'Card' Payment Method \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* cybersource - CyberSource is a payment gateway. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* eway - eWAY Account is a payment gateway. \* amazon_payments - Amazon Payments is a payment service provider. \* sage_pay - Sage Pay is a payment gateway. \* elavon - Elavon Virtual Merchant is a payment solution. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* bank_of_america - Bank of America Gateway \* gocardless - GoCardless is a payment service provider. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* global_payments - Global Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* nmi - NMI is a payment gateway. \* worldpay - WorldPay is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* stripe - Stripe is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* paypal_pro - PayPal Pro Account is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* vantiv - Vantiv is a payment gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* mollie - Mollie is a payment gateway.

 */
export type TransactionGateway =
  (typeof TransactionGateway)[keyof typeof TransactionGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * The payment method of this transaction \* unionpay - Unionpay \* upi - upi \* check - Check \* custom - Custom \* amazon_payments - Amazon Payments \* boleto - boleto \* direct_debit - Direct Debit \* apple_pay - Apple Pay \* wechat_pay - WeChat Pay \* bancontact - Bancontact \* bank_transfer - Bank Transfer \* paypal_express_checkout - Paypal Express Checkout \* other - Payment Methods other than the above types \* ach_credit - ACH Credit \* sepa_credit - SEPA Credit \* card - Card \* ideal - IDEAL \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* google_pay - Google Pay \* netbanking_emandates - netbanking_emandates \* dotpay - Dotpay \* alipay - Alipay \* sofort - Sofort \* giropay - giropay \* cash - Cash

 */
export type TransactionPaymentMethod =
  (typeof TransactionPaymentMethod)[keyof typeof TransactionPaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionPaymentMethod = {
  card: "card",
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  other: "other",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  custom: "custom",
  boleto: "boleto",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * This resource represents the [transaction](https://www.chargebee.com/docs/transactions.html) event that has happened in your account.

 */
export interface Transaction {
  /** Uniquely identifies the transaction.
   */
  id: string;
  /** Identifier of the customer for which this transaction is made
   */
  customer_id?: string;
  /** Identifier of the subscription for which this transaction is made.
   */
  subscription_id?: string;
  /** The gateway account used for this transaction
   */
  gateway_account_id?: string;
  /** Identifier of the payment source for which this transaction is made
   */
  payment_source_id?: string;
  /** The payment method of this transaction \* unionpay - Unionpay \* upi - upi \* check - Check \* custom - Custom \* amazon_payments - Amazon Payments \* boleto - boleto \* direct_debit - Direct Debit \* apple_pay - Apple Pay \* wechat_pay - WeChat Pay \* bancontact - Bancontact \* bank_transfer - Bank Transfer \* paypal_express_checkout - Paypal Express Checkout \* other - Payment Methods other than the above types \* ach_credit - ACH Credit \* sepa_credit - SEPA Credit \* card - Card \* ideal - IDEAL \* chargeback - Only applicable for a transaction of [type](transactions#transaction_type) = `refund`. This value is set by Chargebee when an automated [chargeback](https://www.chargebee.com/docs/chargeback.html#chargeback-process) occurs. You can also set this explicitly when [recording a refund](transactions#record_an_offline_refund). \* google_pay - Google Pay \* netbanking_emandates - netbanking_emandates \* dotpay - Dotpay \* alipay - Alipay \* sofort - Sofort \* giropay - giropay \* cash - Cash
   */
  payment_method: TransactionPaymentMethod;
  /** The reference number for this transaction. For example, the check number when [payment_method](transactions#transaction_payment_method) = `check`.
   */
  reference_number?: string;
  /** Gateway through which this transaction was done. Applicable only for 'Card' Payment Method \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* cybersource - CyberSource is a payment gateway. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* eway - eWAY Account is a payment gateway. \* amazon_payments - Amazon Payments is a payment service provider. \* sage_pay - Sage Pay is a payment gateway. \* elavon - Elavon Virtual Merchant is a payment solution. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* bank_of_america - Bank of America Gateway \* gocardless - GoCardless is a payment service provider. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* global_payments - Global Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* nmi - NMI is a payment gateway. \* worldpay - WorldPay is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* stripe - Stripe is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* paypal_pro - PayPal Pro Account is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* vantiv - Vantiv is a payment gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* mollie - Mollie is a payment gateway.
   */
  gateway: TransactionGateway;
  /** Type of the transaction. \* authorization - The transaction represents an authorization for capturing the [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* payment - The transaction represents capture of [amount](transactions#transaction_amount) from the customer's [payment_source](payment_sources). \* refund - The transaction represents a refund of [amount](transactions#transaction_amount) to the customer's [payment_source](payment_sources). \* payment_reversal - Indicates a reversal transaction.
   */
  type: TransactionType;
  /** Indicates when this transaction occurred.
   */
  date?: number;
  /** Indicates the time at which the final status of the transaction has been marked.
   */
  settled_at?: number;
  /** Exchange rate used for base currency conversion
   */
  exchange_rate?: number;
  /** The currency code (ISO 4217 format) for the transaction.
   */
  currency_code: string;
  /** Amount for this transaction.
   */
  amount?: number;
  /** The id with which this transaction is referred in gateway.
   */
  id_at_gateway?: string;
  /** The status of this transaction. \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* timeout - Transaction failed because of Gateway not accepting the connection. \* success - The transaction is successful. \* voided - The transaction got voided or authorization expired at gateway. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure
   */
  status?: TransactionStatus;
  /** Indicates whether or not the transaction has been identified as fraudulent. \* suspicious - The transaction has been identified as potentially fraudulent by the gateway \* safe - The transaction has been marked as safe \* fraudulent - The transaction has been marked as fraudulent
   */
  fraud_flag?: TransactionFraudFlag;
  /** Marker for on-session payments (3DS). null indicates 'merchant'. \* merchant - Payment initiated on stored payment method by the merchant \* customer - Customer initiated 3DS payment
   */
  initiator_type?: TransactionInitiatorType;
  /** Indicates whether this transaction has gone through 3DS. Applicable only for 'on-session' payments \& verifications.If 3DS is not enforced by the gateway/bank or if the customers' card is not enrolled, this will be false.
   */
  three_d_secure?: boolean;
  /** Type of authorization transaction. \* verification - The transaction has been created for payment method verification. \* blocking_funds - The transaction has been created to block the funds from payment method.
   */
  authorization_reason?: TransactionAuthorizationReason;
  /** Error code received from the payment gateway on failure.
   */
  error_code?: string;
  /** Error message received from the payment gateway on failure.
   */
  error_text?: string;
  /** Timestamp indicating when the payment was voided or authorization expired at gateway.
   */
  voided_at?: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this transaction was last updated. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  updated_at?: number;
  /** Short description why the transaction was marked as fraud/suspicious
   */
  fraud_reason?: string;
  /** This is the part of the `amount` which has not been invoiced yet and is therefore added to [excess_payments](customers#customer_excess_payments) for the customer. Applicable only for a transaction of `type` = `payment`.
   */
  amount_unused?: number;
  /** The masked card number used for this transaction. Applicable only for 'Card' Payment Method
   */
  masked_card_number?: string;
  /** This is the `id` of the offline transaction that is being refunded or reversed. Applicable only for transaction of `type` = `refund` or `payment_reversal`.
   */
  reference_transaction_id?: string;
  /** This is the `id` of the transaction (always of `type` = `payment`) being refunded. Applicable only for transaction of `type` = `refund`.
   */
  refunded_txn_id?: string;
  /** This is the `id` of the transaction (always of `type` = `authorization`) which authorizes the payment being captured. Applicable only for transaction of `type` = `payment`.
   */
  reference_authorization_id?: string;
  /** This is the part of the authorized `amount` that is yet to be captured. The payment capture is recorded as a transaction of of `type` = `payment`. Applicable only for a transaction of `type` = `authorization`.
   */
  amount_capturable?: number;
  /** Reversal transaction id. Applicable only for payment transactions.
   */
  reversal_transaction_id?: string;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** First 6 digits of the card payment method.
   */
  iin?: string;
  /** Last 4 digits of the card payment method.
   */
  last4?: string;
  /** A unique id used to track this transaction across various systems you integrate with. This id is passed to the payment gateway when the transaction is initiated. Supported only for the [Exact payment gateway](https://www.chargebee.com/docs/exact-direct.html).
   */
  merchant_reference_id?: string;
  /** The unique ID of the [business entity](/docs/api?prod_cat_ver=2#mbe) of this `transaction`. This is always the same as the business entity of the [customer](/docs/api/transactions?prod_cat_ver=2#transaction_customer_id).
   */
  business_entity_id?: string;
  /** Payment method details of the corresponding transaction
   */
  payment_method_details?: string;
  /** Applicable only for 'Payment' transactions. The list of invoices this 'payment' transaction is applied to.
   */
  linked_invoices?: TransactionLinkedInvoicesItem[];
  /** Applicable only for 'Refund' transactions. The list of Credit Notes this 'refund' transaction is associated with.
   */
  linked_credit_notes?: TransactionLinkedCreditNotesItem[];
  /** Applicable only for Payment transactions. It only returns values when the transaction is not associated with an invoice, and that there is a refund for the transaction.
   */
  linked_refunds?: TransactionLinkedRefundsItem[];
  /** The list of payments captured for this authorization transaction.
   */
  linked_payments?: TransactionLinkedPaymentsItem[];
}

/**
 * Name of the gateway/vault provider where the payment method is tokenized \* gateway - gateway \* spreedly - spreedly

 */
export type TokenVault = (typeof TokenVault)[keyof typeof TokenVault];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TokenVault = {
  spreedly: "spreedly",
  gateway: "gateway",
} as const;

/**
 * Status of the token \* new - new \* consumed - The token is already used \* expired - expired

 */
export type TokenStatus = (typeof TokenStatus)[keyof typeof TokenStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TokenStatus = {
  new: "new",
  expired: "expired",
  consumed: "consumed",
} as const;

/**
 * Type of payment method of the token. \* google_pay - Payments made via Google Pay. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* ideal - Payments made via iDEAL. \* bancontact - Payments made via Bancontact Card. \* netbanking_emandates - Netbanking (eMandates) Payments. \* alipay - Payments made via Alipay. \* dotpay - Payments made via Dotpay. \* giropay - Payments made via giropay. \* sofort - Payments made via Sofort. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* upi - UPI Payments. \* generic - Payments made via Generic Payment Method. \* wechat_pay - Payments made via WeChat Pay.

 */
export type TokenPaymentMethodType =
  (typeof TokenPaymentMethodType)[keyof typeof TokenPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TokenPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Name of the gateway this token is stored in. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.

 */
export type TokenGateway = (typeof TokenGateway)[keyof typeof TokenGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TokenGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Tokenization hides sensitive payment information into a unique token for a secure transaction. The token does not expose any actual payment details.

 */
export interface Token {
  /** Identifier of the Chargebee Token
   */
  id: string;
  /** Name of the gateway this token is stored in. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.
   */
  gateway: TokenGateway;
  /** The gateway account in which this token is stored.
   */
  gateway_account_id: string;
  /** Type of payment method of the token. \* google_pay - Payments made via Google Pay. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* ideal - Payments made via iDEAL. \* bancontact - Payments made via Bancontact Card. \* netbanking_emandates - Netbanking (eMandates) Payments. \* alipay - Payments made via Alipay. \* dotpay - Payments made via Dotpay. \* giropay - Payments made via giropay. \* sofort - Payments made via Sofort. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* upi - UPI Payments. \* generic - Payments made via Generic Payment Method. \* wechat_pay - Payments made via WeChat Pay.
   */
  payment_method_type: TokenPaymentMethodType;
  /** Status of the token \* new - new \* consumed - The token is already used \* expired - expired
   */
  status: TokenStatus;
  /** The id with which this token is referred in gateway
   */
  id_at_vault: string;
  /** Name of the gateway/vault provider where the payment method is tokenized \* gateway - gateway \* spreedly - spreedly
   */
  vault: TokenVault;
  /** The IP address from where the token is created. Used primarily for EU VAT validation.
   */
  ip_address?: string;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this token resource was last updated.
   */
  updated_at?: number;
  /** Timestamp indicating when this token resource is created.
   */
  created_at: number;
  /** Timestamp indicating when this token is expired
   */
  expired_at?: number;
}

/**
 * The current status of time travel \* succeeded - Time travel has succeeded. \* not_enabled - Time travel has not been enabled for the site \* failed - Time travel has failed. Check the failure code and failure reason attributes for further details.  
**Note:** The time machine needs to be reset by starting afresh again. \* in_progress - Time travel is in progress

 */
export type TimeMachineTimeTravelStatus =
  (typeof TimeMachineTimeTravelStatus)[keyof typeof TimeMachineTimeTravelStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TimeMachineTimeTravelStatus = {
  not_enabled: "not_enabled",
  in_progress: "in_progress",
  succeeded: "succeeded",
  failed: "failed",
} as const;

/**
 * Time Machine is a simulation feature which imitates the key characteristics, behaviours and functions of the billing configurations. It is a virtual time travelling tool which facilitates the integration testing process by carrying out subscription renewals, dunning, webhooks etc on a hypothetical time frame.

You can use Time Machine in the test site to verify if the billing rules configured in your site adhere to your expectations before executing them in real time. This feature can be used in both API and UI versions.

View this [doc](https://www.chargebee.com/docs/time-machine.html) for more details.

**Note:** In order to use Time Machine via API , you need to first "enable" the Time Travel option which is available under **Settings** \> **Configure Chargebee** \> **Time Machine**.

 */
export interface TimeMachine {
  /** The name of the time machine. Currently only **delorean** is allowed
   */
  name: string;
  /** The current status of time travel \* succeeded - Time travel has succeeded. \* not_enabled - Time travel has not been enabled for the site \* failed - Time travel has failed. Check the failure code and failure reason attributes for further details.
   **Note:** The time machine needs to be reset by starting afresh again. \* in_progress - Time travel is in progress
   */
  time_travel_status: TimeMachineTimeTravelStatus;
  /** The start time of the time machine. Specified when 'starting afresh'
   */
  genesis_time: number;
  /** The destination time to which the time machine is travelling (or has traveled)
   */
  destination_time: number;
  /** The failure code. This will follow the api error code convention
   */
  failure_code?: string;
  /** The more descriptive failure reason.
   */
  failure_reason?: string;
  /** The failure details as error json.
   */
  error_json?: string;
}

/**
 * Type of charge \* non_recurring - Charged immediately and only once every time it is applied. \* recurring - Charges are automatically applied in sync with the billing frequency of subscription.

 */
export type ThunkingPlanChargeType =
  (typeof ThunkingPlanChargeType)[keyof typeof ThunkingPlanChargeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanChargeType = {
  recurring: "recurring",
  non_recurring: "non_recurring",
} as const;

/**
 * Indicates if all or only some addons are applicable with the plan. \* all - All addons are applicable with this plan. \* restricted - Only addons marked as 'applicable_addons' are applicable with the plan.

 */
export type ThunkingPlanAddonApplicability =
  (typeof ThunkingPlanAddonApplicability)[keyof typeof ThunkingPlanAddonApplicability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanAddonApplicability = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* retail - Transaction is a sale to an end user \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer

 */
export type ThunkingPlanAvalaraSaleType =
  (typeof ThunkingPlanAvalaraSaleType)[keyof typeof ThunkingPlanAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

/**
 * Indicates which addon-items and charge-items can be applied to the item. Only meant for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type ThunkingPlanItemApplicability =
  (typeof ThunkingPlanItemApplicability)[keyof typeof ThunkingPlanItemApplicability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanItemApplicability = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * The type of the item. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* addon - A recurring component that can be added to a subscription in addition to its plan.

 */
export type ThunkingPlanType =
  (typeof ThunkingPlanType)[keyof typeof ThunkingPlanType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * The subscription channel this object originated from and is maintained in. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.

 */
export type ThunkingPlanChannel =
  (typeof ThunkingPlanChannel)[keyof typeof ThunkingPlanChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * Defines the shipping frequency in association with shipping period. \* year - A period of 1 calendar year. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month.

 */
export type ThunkingPlanShippingPeriodUnit =
  (typeof ThunkingPlanShippingPeriodUnit)[keyof typeof ThunkingPlanShippingPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanShippingPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.

 */
export type ThunkingPlanTrialEndAction =
  (typeof ThunkingPlanTrialEndAction)[keyof typeof ThunkingPlanTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanTrialEndAction = {
  site_default: "site_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.

 */
export type ThunkingPlanTrialPeriodUnit =
  (typeof ThunkingPlanTrialPeriodUnit)[keyof typeof ThunkingPlanTrialPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanTrialPeriodUnit = {
  day: "day",
  month: "month",
} as const;

/**
 * The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon` \* month - A period of 1 calendar month. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year.

 */
export type ThunkingPlanPeriodUnit =
  (typeof ThunkingPlanPeriodUnit)[keyof typeof ThunkingPlanPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type ThunkingPlanPricingModel =
  (typeof ThunkingPlanPricingModel)[keyof typeof ThunkingPlanPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * The status of the item price. \* archived - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* active - The item price can be used in subscriptions. \* deleted - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type ThunkingPlanStatus =
  (typeof ThunkingPlanStatus)[keyof typeof ThunkingPlanStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThunkingPlanStatus = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * This resource is used to return thunking plan.

 */
export interface ThunkingPlan {
  /** The identifier for the item price. It is unique and immutable.
   */
  id: string;
  /** A unique display name for the item price in the Chargebee UI. If `external_name` is not provided, this is also used in customer-facing pages and documents such as [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2).
   */
  name: string;
  /** The id of the item that the item price belongs to.
   */
  item_id?: string;
  /** Description of the item price.
   */
  description?: string;
  /** The status of the item price. \* archived - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* active - The item price can be used in subscriptions. \* deleted - Indicates that the item price has been deleted. The `id` and `name` can be reused.
   */
  status?: ThunkingPlanStatus;
  /** The name of the item price used in customer-facing pages and documents. These include [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2). If not provided, then `name` is used
   */
  external_name?: string;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
 */
  pricing_model: ThunkingPlanPricingModel;
  /** The cost of the item price when the pricing model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** 

* When the item `type` is `plan`: The billing period of the plan in `period_unit`s. For example, create a 6 month plan by providing `period` as 6 and `period_unit` as month.
* When item `type` is `addon`: The period of the addon in `period_unit`s. For example, create an addon with a 2 month `period` by providing period as 2 and `period_unit` as `month`. The period of an addon is the duration for which its `price` applies. When attached to a plan, the addon is billed for the billing period of the plan. [Learn more.](https://www.chargebee.com/docs/2.0/addons-billingcycle.html)



If subscriptions or invoices exist for this item price, `period` cannot be changed. The `period` is mandatory when the item `type` is `plan` or `addon`
 */
  period?: number;
  /** The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon` \* month - A period of 1 calendar month. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year.
   */
  period_unit?: ThunkingPlanPeriodUnit;
  /** The trial period of the plan in `trial_period_unit`s. You can also set [trial periods for addons](https://www.chargebee.com/docs/2.0/addons-trial.html); contact [Support](https://chargebee.freshdesk.com/support/home) to enable that feature.
   */
  trial_period?: number;
  /** The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.
   */
  trial_period_unit?: ThunkingPlanTrialPeriodUnit;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.
   */
  trial_end_action?: ThunkingPlanTrialEndAction;
  /** Defines the shipping frequency. Example: to bill customer every 2 weeks, provide "2" here.
   */
  shipping_period?: number;
  /** Defines the shipping frequency in association with shipping period. \* year - A period of 1 calendar year. \* day - A period of 24 hours. \* week - A period of 7 days. \* month - A period of 1 calendar month.
   */
  shipping_period_unit?: ThunkingPlanShippingPeriodUnit;
  /** The default number of billing cycles a subscription to the plan must run. Can be [overridden](./subscriptions?prod_cat_ver=2) for a subscription.

Addons can also [have billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html). However, you must contact [Support](https://chargebee.freshdesk.com/support/home) to enable that. Also, for addons, you can [override this](./attached_items?prod_cat_ver=2) while attaching it to a plan. However, if you provide the value while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items_item_type), then that value takes still higher precedence.
If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `billing_cycles` cannot be changed.
 */
  billing_cycles?: number;
  /** Free quantity the subscriptions of this item_price will have. Only the quantity more than this will be charged for the subscription.
   */
  free_quantity: number;
  /** The quantity of the item that is available free-of-charge, represented in decimal. When a subscription is created for this plan or when the plan of a subscription is changed to this one, only the quantity above this number is charged for. Applicable for quantity-based plans and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  free_quantity_in_decimal?: string;
  /** The subscription channel this object originated from and is maintained in. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.
   */
  channel?: ThunkingPlanChannel;
  /** Timestamp indicating when this item price was last updated
   */
  updated_at?: number;
  /** Timestamp indicating when this item price was created
   */
  created_at: number;
  /** The type of the item. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* addon - A recurring component that can be added to a subscription in addition to its plan.
   */
  type: ThunkingPlanType;
  /** Indicates that the item is a physical product. If Orders are enabled in Chargebee, subscriptions created for this item will have orders associated with them.
   */
  is_shippable?: boolean;
  /** Specifies if gift subscriptions can be created for this item.
   */
  giftable: boolean;
  /** If `enabled_for_checkout`, then the URL to be redirected to once the checkout is complete. This attribute is only available for plan-items.
   */
  redirect_url?: string;
  /** Allow the plan to subscribed to via Checkout. Applies only for plan-items.
   **Note:** Only the in-app version of Checkout is supported for Product Catalog v2.
   */
  enabled_for_checkout: boolean;
  /** Allow customers to change their subscription to this plan via the [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html). Applies only for plan-items. This requires the Portal configuration to [allow changing subscriptions](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription).
   */
  enabled_in_portal: boolean;
  /** The item is included in MRR calculations for your site. This attribute is only applicable for items of `type = charge` and when the feature is enabled in Chargebee. Note: If the site-level setting is to exclude charge-items from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean;
  /** Indicates which addon-items and charge-items can be applied to the item. Only meant for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
   */
  item_applicability: ThunkingPlanItemApplicability;
  /** The URL to redirect to once the gift has been claimed by the receiver.
   */
  gift_claim_redirect_url?: string;
  /** The unit of measure for a quantity-based item. This is displayed on the Chargebee UI and on customer facing documents/pages. The latter includes [hosted pages](./hosted_pages?prod_cat_ver=2), [invoices](./invoices?prod_cat_ver=2) and [quotes](./quotes?prod_cat_ver=2#). Examples follow:  

* "user" for a cloud-collaboration platform.
* "GB" for a data service.
* "issue" for a magazine.

**Note:** `unit` is only exposed via the API to quantity-based addons; it is however NOT exposed to quantity-based plans.
 */
  unit?: string;
  /** Name of the items.
   */
  item_name: string;
  /** Description of the item. This is visible only in Chargebee and not to customers.
   */
  item_description?: string;
  /** Timestamp indicating when the item was last updated.
   */
  item_updated_at?: number;
  /** Id of the addon-item or plan-item that can be applied to the plan-item.
   */
  applicable_item_id?: string;
  /** This maps to the sku or product name in the accounting integration.
   */
  sku?: string;
  /** The identifier of the chart of accounts under which the item price falls in the accounting system.
   */
  accounting_code?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, provide the category name and option. Use the format: `<category-name>: <option>`. For example:`Location: Singapore.`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Classes, provide the class name here. Use the following format: `<parent class>:<sub-class-1>:<sub-class-2>...`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Classes, provide the class name here. Use the following format: `<parent class> : <sub-class-1> : <sub-class2> ....` For example: `Services : Plan.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Locations, provide the name of the Location here.

 */
  accounting_category1?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, then provide the second category name and option here. Use the format: `<category-name>: <option>....` For example, `Region: South`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Location, provide the Location name here. Use the following format: `<parent-location>:<sub-location-1>:<sub-location-2>....` For example: `Location: North America: Canada`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Locations, provide the location name here. Use the following format `<parent-location> : <sub-location-1>: <sub-location-2>....` For example: `NA:US:CA`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Dimensions, provide the value of the Dimension here.

 */
  accounting_category2?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Departments, pass the department name here. Use the following format: `<parent-department> : <sub-department-1>: <sub-department-2>....` For example: `Production: Assembly.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under multiple Dimensions, provide the value of the second Dimension here.
 */
  accounting_category3?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/1.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )Provide the "Revenue Recognition Rule Id" for the product from NetSuite.
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you have configured "Revenue Recognition Templates" for products in Intacct, provide the template ID for the product.
 */
  accounting_category4?: string;
  /** The tax profile of the item price.
   */
  tax_profile_id?: string;
  /** Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* retail - Transaction is a sale to an end user \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer
   */
  avalara_sale_type?: ThunkingPlanAvalaraSaleType;
  /** Indicates the [Avalara transaction type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_transaction_type?: number;
  /** Indicates the [Avalara service type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_service_type?: number;
  /** The [Avalara tax codes](https://taxcode.avatax.avalara.com) for the item price. Applicable only if you use [AvaTax for Sales integration](https://www.chargebee.com/docs/2.0/avalara-for-sales.html).
   */
  avalara_tax_code?: string;
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string;
  /** The [TaxJar product code](https://developers.taxjar.com/api/reference/#get-list-tax-categories) for the item price. Applicable only if you use [TaxJar integration](https://www.chargebee.com/docs/2.0/taxjar.html).
   */
  taxjar_product_code?: string;
  /** One-time setup fee charged as part of the first invoice.
   */
  setup_cost?: number;
  /** Indicates if all or only some addons are applicable with the plan. \* all - All addons are applicable with this plan. \* restricted - Only addons marked as 'applicable_addons' are applicable with the plan.
   */
  addon_applicability: ThunkingPlanAddonApplicability;
  /** Type of charge \* non_recurring - Charged immediately and only once every time it is applied. \* recurring - Charges are automatically applied in sync with the billing frequency of subscription.
   */
  charge_type: ThunkingPlanChargeType;
  /** If enabled indicates that the particular site is on new Item model, else on old model
   */
  item_model: boolean;
}

/**
 * Name of the gateway this card is stored with. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* bank_of_america - Bank of America Gateway \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.

 */
export type ThirdPartyPaymentMethodGateway =
  (typeof ThirdPartyPaymentMethodGateway)[keyof typeof ThirdPartyPaymentMethodGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThirdPartyPaymentMethodGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Type of the payment method. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* unionpay - Payments made via UnionPay. \* google_pay - Payments made via Google Pay. \* dotpay - Payments made via Dotpay. \* generic - Payments made via Generic Payment Method. \* giropay - Payments made via giropay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* alipay - Payments made via Alipay. \* sofort - Payments made via Sofort. \* wechat_pay - Payments made via WeChat Pay. \* ideal - Payments made via iDEAL. \* netbanking_emandates - Netbanking (eMandates) Payments. \* upi - UPI Payments. \* bancontact - Payments made via Bancontact Card. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* amazon_payments - Payments made via Amazon Payments. \* apple_pay - Payments made via Apple Pay.

 */
export type ThirdPartyPaymentMethodType =
  (typeof ThirdPartyPaymentMethodType)[keyof typeof ThirdPartyPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThirdPartyPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Used when you want to copy card information between two gateways (such as copying cards between Authorize.Net and Stripe). Will contain details of the payment method type (card, Amazon Payments, etc.), name of the gateway, and the reference ID that the gateway uses to identify the specific card.

 */
export interface ThirdPartyPaymentMethod {
  /** Type of the payment method. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* unionpay - Payments made via UnionPay. \* google_pay - Payments made via Google Pay. \* dotpay - Payments made via Dotpay. \* generic - Payments made via Generic Payment Method. \* giropay - Payments made via giropay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* alipay - Payments made via Alipay. \* sofort - Payments made via Sofort. \* wechat_pay - Payments made via WeChat Pay. \* ideal - Payments made via iDEAL. \* netbanking_emandates - Netbanking (eMandates) Payments. \* upi - UPI Payments. \* bancontact - Payments made via Bancontact Card. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* amazon_payments - Payments made via Amazon Payments. \* apple_pay - Payments made via Apple Pay.
   */
  type: ThirdPartyPaymentMethodType;
  /** Name of the gateway this card is stored with. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* bank_of_america - Bank of America Gateway \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.
   */
  gateway: ThirdPartyPaymentMethodGateway;
  /** The gateway account this payment method is stored with.
   */
  gateway_account_id?: string;
  /** Identifier provided by the gateway to reference that specific card.
   */
  reference_id: string;
}

export type TaxjarExemptionCategory =
  (typeof TaxjarExemptionCategory)[keyof typeof TaxjarExemptionCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxjarExemptionCategory = {
  wholesale: "wholesale",
  government: "government",
  other: "other",
} as const;

export type Taxability = (typeof Taxability)[keyof typeof Taxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Taxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Tax regulations in many countries allow taxes to be deducted by the buyer while making payments for products and services. The buyer then pays this tax to the taxation authority. The `tax_withheld` resource captures the details of such tax deductions.  
**Note:**

* This resource is available as the `linked_taxes_withheld` sub-resource under `invoice`s.
* Whenever refunds are provided against this resource, they are available as `linked_tax_withheld_refunds` sub-resource under `credit_note`s.

 */
export interface TaxWithheld {
  /** An auto-generated unique identifier for the tax withheld. The value starts with the prefix `tax_wh_`. For example, `tax_wh_16BdDXSlbu4uV1Ee6`.
   */
  id: string;
  /** A unique external reference number for the tax withheld. Typically, this is the reference number used by the system you are integrating the API with. Depending on your integration, this could be the reference number issued by the taxation authority to identify the customer or the specific tax transaction.
   */
  reference_number?: string;
  /** The description for this tax withheld.
   */
  description?: string;
  /** Date or time associated with the tax withheld.
   */
  date?: number;
  /** The amount withheld by the customer as tax from the invoice. The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  amount?: number;
  resource_version?: number;
  updated_at?: number;
}

export type TaxOverrideReason =
  (typeof TaxOverrideReason)[keyof typeof TaxOverrideReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxOverrideReason = {
  id_exempt: "id_exempt",
  customer_exempt: "customer_exempt",
  export: "export",
} as const;

export type TaxJurisType = (typeof TaxJurisType)[keyof typeof TaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type TaxExemptReason =
  (typeof TaxExemptReason)[keyof typeof TaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

export type Tax4JurisType = (typeof Tax4JurisType)[keyof typeof Tax4JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Tax4JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type Tax3JurisType = (typeof Tax3JurisType)[keyof typeof Tax3JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Tax3JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type Tax2JurisType = (typeof Tax2JurisType)[keyof typeof Tax2JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Tax2JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type Tax1JurisType = (typeof Tax1JurisType)[keyof typeof Tax1JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Tax1JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type SubscriptionSettingGiftSubscription = {
  enabled?: boolean;
  automatically_claim_gifts?: boolean;
  allow_customer_to_claim_gifts?: boolean;
  claim_validity_days?: number;
};

export interface SubscriptionSetting {
  subscription_cancellation?: SubscriptionSettingSubscriptionCancellation;
  pause_subscription?: SubscriptionSettingPauseSubscription;
  gift_subscription?: SubscriptionSettingGiftSubscription;
}

export type SubscriptionSettingPauseSubscriptionAccountReceivable =
  (typeof SubscriptionSettingPauseSubscriptionAccountReceivable)[keyof typeof SubscriptionSettingPauseSubscriptionAccountReceivable];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionAccountReceivable = {
  no_action: "no_action",
  collect_payment: "collect_payment",
} as const;

export type SubscriptionSettingPauseSubscriptionInvoiceOption =
  (typeof SubscriptionSettingPauseSubscriptionInvoiceOption)[keyof typeof SubscriptionSettingPauseSubscriptionInvoiceOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionInvoiceOption = {
  invoice_immediately: "invoice_immediately",
  add_to_unbilled_charges: "add_to_unbilled_charges",
} as const;

export type SubscriptionSettingPauseSubscriptionResumption =
  (typeof SubscriptionSettingPauseSubscriptionResumption)[keyof typeof SubscriptionSettingPauseSubscriptionResumption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionResumption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

export type SubscriptionSettingPauseSubscriptionInvoiceInDunning =
  (typeof SubscriptionSettingPauseSubscriptionInvoiceInDunning)[keyof typeof SubscriptionSettingPauseSubscriptionInvoiceInDunning];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionInvoiceInDunning = {
  continue: "continue",
  stop: "stop",
} as const;

export type SubscriptionSettingPauseSubscriptionUnbilledCharges =
  (typeof SubscriptionSettingPauseSubscriptionUnbilledCharges)[keyof typeof SubscriptionSettingPauseSubscriptionUnbilledCharges];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionUnbilledCharges = {
  no_action: "no_action",
  invoice: "invoice",
} as const;

export type SubscriptionSettingPauseSubscriptionPauseResumption =
  (typeof SubscriptionSettingPauseSubscriptionPauseResumption)[keyof typeof SubscriptionSettingPauseSubscriptionPauseResumption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionPauseResumption = {
  pause_indefinitely: "pause_indefinitely",
  specific_date: "specific_date",
} as const;

export type SubscriptionSettingPauseSubscriptionEffectiveFrom =
  (typeof SubscriptionSettingPauseSubscriptionEffectiveFrom)[keyof typeof SubscriptionSettingPauseSubscriptionEffectiveFrom];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingPauseSubscriptionEffectiveFrom = {
  immediately: "immediately",
  end_of_term: "end_of_term",
  specific_date: "specific_date",
} as const;

export type SubscriptionSettingPauseSubscription = {
  enabled?: boolean;
  effective_from?: SubscriptionSettingPauseSubscriptionEffectiveFrom;
  pause_resumption?: SubscriptionSettingPauseSubscriptionPauseResumption;
  unbilled_charges?: SubscriptionSettingPauseSubscriptionUnbilledCharges;
  invoice_in_dunning?: SubscriptionSettingPauseSubscriptionInvoiceInDunning;
  resumption?: SubscriptionSettingPauseSubscriptionResumption;
  invoice_option?: SubscriptionSettingPauseSubscriptionInvoiceOption;
  account_receivable?: SubscriptionSettingPauseSubscriptionAccountReceivable;
};

export type SubscriptionSettingSubscriptionCancellationUnbilledChargeOption =
  (typeof SubscriptionSettingSubscriptionCancellationUnbilledChargeOption)[keyof typeof SubscriptionSettingSubscriptionCancellationUnbilledChargeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingSubscriptionCancellationUnbilledChargeOption = {
  invoice: "invoice",
  delete: "delete",
} as const;

export type SubscriptionSettingSubscriptionCancellationAccountReceivableHandling =
  (typeof SubscriptionSettingSubscriptionCancellationAccountReceivableHandling)[keyof typeof SubscriptionSettingSubscriptionCancellationAccountReceivableHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingSubscriptionCancellationAccountReceivableHandling =
  {
    no_action: "no_action",
    schedule_payment_collection: "schedule_payment_collection",
    write_off: "write_off",
  } as const;

export type SubscriptionSettingSubscriptionCancellationRefundOption =
  (typeof SubscriptionSettingSubscriptionCancellationRefundOption)[keyof typeof SubscriptionSettingSubscriptionCancellationRefundOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingSubscriptionCancellationRefundOption = {
  no_action: "no_action",
  schedule_refund: "schedule_refund",
} as const;

export type SubscriptionSettingSubscriptionCancellationCreditOption =
  (typeof SubscriptionSettingSubscriptionCancellationCreditOption)[keyof typeof SubscriptionSettingSubscriptionCancellationCreditOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingSubscriptionCancellationCreditOption = {
  none: "none",
  prorate: "prorate",
  full: "full",
} as const;

export type SubscriptionSettingSubscriptionCancellationEffectiveFrom =
  (typeof SubscriptionSettingSubscriptionCancellationEffectiveFrom)[keyof typeof SubscriptionSettingSubscriptionCancellationEffectiveFrom];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSettingSubscriptionCancellationEffectiveFrom = {
  immediately: "immediately",
  end_of_term: "end_of_term",
  specific_date: "specific_date",
} as const;

export type SubscriptionSettingSubscriptionCancellation = {
  effective_from?: SubscriptionSettingSubscriptionCancellationEffectiveFrom;
  credit_option?: SubscriptionSettingSubscriptionCancellationCreditOption;
  refund_option?: SubscriptionSettingSubscriptionCancellationRefundOption;
  account_receivable_handling?: SubscriptionSettingSubscriptionCancellationAccountReceivableHandling;
  unbilled_charge_option?: SubscriptionSettingSubscriptionCancellationUnbilledChargeOption;
  apply_credits?: boolean;
};

export type SubscriptionScheduledChangeActionType =
  (typeof SubscriptionScheduledChangeActionType)[keyof typeof SubscriptionScheduledChangeActionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionScheduledChangeActionType = {
  cancel: "cancel",
  pause: "pause",
  reactivate: "reactivate",
} as const;

export interface SubscriptionScheduledChange {
  action_type: SubscriptionScheduledChangeActionType;
  data?: string;
  created_at: number;
  modified_at: number;
}

/**
 * JSON object representing subscription

 */
export type SubscriptionPreviewSubscription = { [key: string]: any };

/**
 * Describes the time in the subscription lifecycle when the charge is to occur. \* subscription_changed - Subscription Changed \* subscription_resumed - Subscription Resumed \* subscription_renewed - Subscription Renewed \* subscription_activated - Subscription Activated \* subscription_cancelled - Subscription Cancelled \* subscription_started - Subscription Started \* subscription_paused - Subscription Paused \* subscription_created - Subscription Created

 */
export type SubscriptionPreviewBillingEvent =
  (typeof SubscriptionPreviewBillingEvent)[keyof typeof SubscriptionPreviewBillingEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionPreviewBillingEvent = {
  subscription_created: "subscription_created",
  subscription_changed: "subscription_changed",
  subscription_renewed: "subscription_renewed",
  subscription_cancelled: "subscription_cancelled",
  subscription_resumed: "subscription_resumed",
  subscription_paused: "subscription_paused",
  subscription_started: "subscription_started",
  subscription_activated: "subscription_activated",
} as const;

/**
 * This resource returns subscription preview attributes.

 */
export interface SubscriptionPreview {
  /** Describes the time in the subscription lifecycle when the charge is to occur. \* subscription_changed - Subscription Changed \* subscription_resumed - Subscription Resumed \* subscription_renewed - Subscription Renewed \* subscription_activated - Subscription Activated \* subscription_cancelled - Subscription Cancelled \* subscription_started - Subscription Started \* subscription_paused - Subscription Paused \* subscription_created - Subscription Created
   */
  billing_event?: SubscriptionPreviewBillingEvent;
  /** Billing sequence number.
   */
  billing_sequence_number?: number;
  /** Timestamp to indicate when the event was occurred.
   */
  occurred_at?: number;
  /** JSON object representing subscription
   */
  subscription: SubscriptionPreviewSubscription;
  /** JSON object representing invoice
   */
  invoices?: unknown[];
  /** JSON object representing credit_notes
   */
  credit_notes?: unknown[];
  /** Represents the preview of the unbilled charges generated during 'estimate' operation.
   */
  unbilled_charges?: unknown[];
}

/**
 * Type of items. \* addon - addon \* plan - plan

 */
export type SubscriptionHistoryItemType =
  (typeof SubscriptionHistoryItemType)[keyof typeof SubscriptionHistoryItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionHistoryItemType = {
  plan: "plan",
  addon: "addon",
} as const;

/**
 * This resource returns the subscription history.

 */
export interface SubscriptionHistory {
  /** The unique identifier of the item price.
   */
  item_price_id?: string;
  /** Type of items. \* addon - addon \* plan - plan
   */
  item_type?: SubscriptionHistoryItemType;
  /** Timestamp to indicate from when this item was attached to the subscription
   */
  active_from?: number;
  /** Timestamp to indicate till when this item was attached to the subscription
   */
  active_to?: number;
  /** Timestamp to indicate when this subscription was created.
   */
  created_at?: number;
  item_unit_amount_in_cents?: number;
  actual_item_unit_amount_in_cents?: number;
  item_amount_in_cents?: number;
  actual_item_amount_in_cents?: number;
}

export type SubscriptionEstimateContractTermActionAtTermEnd =
  (typeof SubscriptionEstimateContractTermActionAtTermEnd)[keyof typeof SubscriptionEstimateContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionEstimateContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

export type SubscriptionEstimateContractTermStatus =
  (typeof SubscriptionEstimateContractTermStatus)[keyof typeof SubscriptionEstimateContractTermStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionEstimateContractTermStatus = {
  active: "active",
  completed: "completed",
  cancelled: "cancelled",
  terminated: "terminated",
} as const;

export type SubscriptionEstimateContractTerm = {
  id: string;
  status: SubscriptionEstimateContractTermStatus;
  contract_start: number;
  contract_end: number;
  billing_cycle: number;
  action_at_term_end: SubscriptionEstimateContractTermActionAtTermEnd;
  total_contract_value: number;
  total_contract_value_before_tax: number;
  cancellation_cutoff_period?: number;
  created_at: number;
  subscription_id: string;
  remaining_billing_cycles?: number;
};

export type SubscriptionEstimateShippingAddressValidationStatus =
  (typeof SubscriptionEstimateShippingAddressValidationStatus)[keyof typeof SubscriptionEstimateShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionEstimateShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

export type SubscriptionEstimateShippingAddress = {
  first_name?: string;
  last_name?: string;
  email?: string;
  company?: string;
  phone?: string;
  line1?: string;
  line2?: string;
  line3?: string;
  city?: string;
  state_code?: string;
  state?: string;
  country?: string;
  zip?: string;
  validation_status?: SubscriptionEstimateShippingAddressValidationStatus;
  index: number;
};

export type SubscriptionEstimateTrialEndAction =
  (typeof SubscriptionEstimateTrialEndAction)[keyof typeof SubscriptionEstimateTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionEstimateTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

export type SubscriptionEstimateStatus =
  (typeof SubscriptionEstimateStatus)[keyof typeof SubscriptionEstimateStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionEstimateStatus = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

export interface SubscriptionEstimate {
  id?: string;
  currency_code: string;
  status?: SubscriptionEstimateStatus;
  trial_end_action?: SubscriptionEstimateTrialEndAction;
  next_billing_at?: number;
  pause_date?: number;
  resume_date?: number;
  shipping_address?: SubscriptionEstimateShippingAddress;
  contract_term?: SubscriptionEstimateContractTerm;
}

/**
 * When a subscription entitlement has been explicitly overridden, this object contains the details of said override. An \`entitlement_override\` can be \[temporary\](/docs/api/entitlement_overrides#entitlement_override_expires_at) such that it expires at some point in time and is no longer returned.

 */
export type SubscriptionEntitlementComponentsEntitlementOverrides = {
  /** The level of entitlement that the subscription has towards the feature. The possible values depend on the value of `feature.type`:

* When `feature.type` is `custom`: The value can be any one of `levels[].value`.
* When `feature.type` is `switch`: This value is `true`.
* When `feature.type` is `quantity`:
  * When `levels[].is_unlimited` is not `true`: The value can be any one of `levels[].value`.
  * When `levels[].is_unlimited` is `true`: The value can also be any one of `levels[].value` or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `feature.type` is `range`:
  * When `levels[].is_unlimited` is not `true`: The value can be any whole number between `levels[0].value` and `levels[1].value` (inclusive).
  * When `levels[].is_unlimited` is `true`: The value can be any whole number equal to or greater than `levels[0].value` or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
 */
  value?: string;
  /** A case-sensitive name for the subscription entitlement override. If it was not provided while creating this subscription entitlement override, then it is derived based on the `feature.type` as follows:

* When `feature.type` is `range` or `quantity`: the `name` is the space-separated concatenation of value and the pluralized form of `feature_unit`. For example, if `value` is `20` and `feature_unit` is `user`, then `name` becomes `20 users`.
* When `feature.type` is `custom`: the `name` is the same as `value`.
* When `feature.type` is `switch`: `name` is not applicable.
 */
  name?: string;
};

/**
 * The component entitlements that constitute this \`subscription_entitlement\`. The effective entitlement \[value\](/docs/api/subscription_entitlements#subscription_entitlement_value) and \[name\](/docs/api/subscription_entitlements#subscription_entitlement_name) are determined from these component entitlements.

 */
export type SubscriptionEntitlementComponents = {
  /** When a subscription entitlement has been explicitly overridden, this object contains the details of said override. An \`entitlement_override\` can be \[temporary\](/docs/api/entitlement_overrides#entitlement_override_expires_at) such that it expires at some point in time and is no longer returned.
   */
  entitlement_overrides?: SubscriptionEntitlementComponentsEntitlementOverrides;
};

/**
 * The subscription entitlement
object represents the entitlements a subscription has towards a feature. A
subscription can have multiple `subscription_entitlements`, each
corresponding to a feature it is entitled to. The `subscription_entitlement`
includes both the effective (or final) entitlement and its `components`.
The `components` consist of `inherited_entitlements`
and any `entitlement_overrides`.

Effective
and Component Entitlements {#types}
---------------------------------------------

The effective entitlement of a given
subscription towards a given feature is given by `subscription_entitlement.value`.
It is the final entitlement derived from the entitlement `components`.
There are two types of component entitlements:

* `inherited_entitlements`: Inherited entitlements are derived from the `item_entitlements` of the subscription's `items`. The following section describes how this works, providing examples for each feature `type`.
* `entitlement_overrides`: An overridden entitlement is that which is granted explicitly on the subscription for a feature. Such an entitlement, when present, becomes the effective entitlement for the subscription, thereby overriding any inherited entitlement towards the feature. An `entitlement_override` can be [temporary](/docs/api/entitlement_overrides#entitlement_override_expires_at) such that it expires at some point in time and is no longer returned. See [entitlement_overrides](/docs/api/entitlement_overrides).

How `inherited_entitlements.value`
is determined {#inheritance}
---------------------------------------------------------------

The `inherited_entitlements.value` is determined
from the `item_entitlements` of the items in the subscription and
based on `feature.type`:  

### When the `feature.type` is `quantity` {#quantity}

In this case,

* if any of the `subscription_item_entitlements[].values` is `unlimited`, then `inherited_entitlements.value` is also `unlimited`.
* otherwise, the `inherited_entitlements.value` is the sum of all the `subscription_item_entitlements[].values`.

#### Example {#quantity-content}

Consider the following...

* A `feature` of `type` `quantity`, named `User Licenses` has entitlement levels defined as:
  * `feature.levels[0].value` = `5`
  * `feature.levels[1].value`=`10`
  * `feature.levels[2].value`=`30`
* Also, `feature.levels[i].is_unlimited` is `false` for all values of `i`, which means that the feature has no `Unlimited` level.
* A quantity-based plan-item named `Standard` has entitlements to the above feature defined as `item_entitlement.value` = `10`.
* A quantity-based addon-item `Extra licenses
  - small` has entitlements to the same feature defined as `item_entitlement.value` = `5`.
* A subscription contains:
  * `2` units of an item price under the plan-item `Standard`. Which is seen in the subscription as `subscription.subscription_items[0].quantity` = `2`.
  * `3` units of an item price `price-1` under the addon-item `Extra licenses - small`. Which is `subscription.subscription_items[1].quantity` = `3`
  * `4` units of an item price `price-2` under the addon-item `Extra licenses - small`. Which is `subscription.subscription_items[2].quantity` = `4`

We derive `inherited_entitlements.value` as follows:

1. Determine `subscription_item_entitlements[i].item_entitlement_value` for both the items. The value is the same as `item_entitlement.value`, so we have:
   * `subscription_item_entitlements[0].item_entitlement_value` = `10` for the plan
   * `subscription_item_entitlements[1].item_entitlement_value` = `5` for the addon
2. Determine `subscription_item_entitlements[i].subscription_item_quantity` for both the items:
   * For the plan-item, the value is the same as the item price quantity (`subscription.subscription_items[0].quantity`). So we have `subscription_item_entitlements[0].subscription_item_quantity`= `2`.
   * For the addon-item, since two item prices `price-1` and `price-2` have been added to the subscription, the quantity of the item price that was updated last in Chargebee is considered. If we assume `price-1` was updated last, then the quantity of `price-1` in the subscription is considered, which is `subscription.subscription_items[1].quantity`. So we have `subscription_item_entitlements[n].subscription_item_quantity`= `3`
3. Determine `subscription_item_entitlements[].value` for the items. The value is given by `subscription_item_entitlements[i].item_entitlement_value` x `subscription_item_entitlements[i].subscription_item_quantity`, so we have:
   * `subscription_item_entitlements[0].value` = 10 x 2 = `20` for the plan.
   * `subscription_item_entitlements[1].value` = 5 x 3 = `15` for the addon.
4. Calculate `inherited_entitlements.value` as the sum of all the `subscription_item_entitlements[i].values`, so we have: 20 + 15 = `35` as the inherited entitlement of the subscription towards the feature named `User Licenses`.  

### When the `feature.type` is `range` {#range}

In this case,

* if any of the `subscription_item_entitlements[i].values` is `unlimited`, then `inherited_entitlements.value` is also `unlimited`.
* otherwise, the `inherited_entitlements.value` is the sum of all the `subscription_item_entitlements[i].values`. Additionally, when the value of `levels[i].is_unlimited` for the feature is `false` for values of `i`, and the sum of all `subscription_item_entitlements[i].values` exceeds `feature.levels[1].value` (the upper limit of the range), then `inherited_entitlements.value` is set to `feature.levels[1].value`.

#### Example {#range-content}

Consider the following...

* A `feature` of `type` `range`, named `API
  Rate Limit` has entitlement levels defined as:
  * feature.`levels[0].value` = `100`
  * `levels[1].value` = `1000`
* Also, `feature.levels[i].is_unlimited` as `false` for all values of `i`, which means that the feature has no `Unlimited` level.
* A quantity-based plan-item named`Standard` has entitlements to the above feature defined as `item_entitlement.value` = `400`.
* a quantity-based addon-item `API Boost
  - small` has entitlements to the same feature defined as `item_entitlement.value` = `100`.
* A subscription contains:
  * `2` units of an item price under the plan-item `Standard`. Which is seen in the subscription as `subscription.subscription_items[0].quantity` = `2`.
  * `3` units of an item price `price-1` under the addon-item `API Boost - small`. Which is `subscription.subscription_items[1].quantity` = `3`.
  * `4` units of an item price `price-2` under the addon-item `API Boost - small`. Which is `subscription.subscription_items[1].quantity` = `4`.

We derive `inherited_entitlements.value`, as follows:

1. Determine `subscription_item_entitlements[i].item_entitlement_value` for both the items. The value is the same as `item_entitlement.value`, so we have:
   * `subscription_item_entitlements[0].item_entitlement_value` = `400` for the plan
   * `subscription_item_entitlements[0].item_entitlement_value` = `100` for the addon
2. Determine `subscription_item_entitlements[i].subscription_item_quantity` for both the items:
   * For the plan-item, the value is the same as the item rice quantity (`subscription.subscription_items[0].quantity`) so we have: `subscription_item_entitlements[0].subscription_item_quantity` = `2`
   * For the addon-item, since two item prices `price-1` and `price-2` have been added to the subscription, the quantity of the item price that was updated last in Chargebee is considered. If we assume `price-1` was updated last, then the quantity of `price-1` in the subscription is considered, which is `subscription.subscription_items[1].quantity`. So we have `subscription_item_entitlements[1].subscription_item_quantity` = `3`
3. Determine `subscription_item_entitlements[i].value` for the items. The value is given by `subscription_item_entitlements[i].item_entitlement_value` x `subscription_item_entitlements[i].subscription_item_quantity`, so we have:
   * `subscription_item_entitlements[0].value` = 400 x 2 = `800` for the plan
   * `subscription_item_entitlements[1].value` = 100 x 3 = `300` for the addon
4. Calculate the sum of all the `subscription_item_entitlements[i].values`, so we have: 800 + 300 = `1100`
5. Determine `inherited_entitlements.value`: Since `feature.levels[i].is_unlimited` is `false` for all values of `i`, and the sum in the previous step exceeds the upper limit of the range (`1000`) given by `levels[1].value`, the `inherited_entitlements.value` is the same as `levels[1].value` which is `1000`. So `1000` is the inherited entitlement of the subscription towards the feature named `API Rate Limit`.  

### When the `feature.type` is `custom` {#custom}

In this case, the `inherited_entitlements.value` is the highest
of all `subscription_item_entitlements[].values`

#### Example {#custom-content}

Consider the following...

* A `feature` of type `custom`, named `Email Support` that has entitlement levels defined as `levels[0].value` = `"email"`, `levels[1].value` = `"24x5"`, and `levels[2].value` = `"24x7"`.
* A plan-item named `Standard` has entitlements to the above feature defined as `item_entitlement[i].value` = `"24x5"`.
* An addon-item `Premium Support` has entitlements to the same feature defined as `item_entitlement.value[j]` = `"24x
  7"`.
* A subscription subscribes to the `Standard plan` with the `Premium Support` addon.

In this case,
`inherited_entitlements.value` = `24x7`, which is the
highest of `24x5` and `24x7` as determined by their
relative positions in the `feature.levels[].value` list.  

### When the `feature.type` is `switch` {#switch}

In this case, the `inherited_entitlements.value` is set to
`true` when any of the `subscription_item_entitlements[].values` is `true`.

 */
export interface SubscriptionEntitlement {
  /** The `id` of the [subscription](/docs/api/subscriptions) to which this entitlement belongs.
   */
  subscription_id: string;
  /** The `id` of the [feature](/docs/api/features) towards which this subscription entitlement has been granted.
   */
  feature_id?: string;
  /** The [name of the feature](/docs/api/features#feature_name) towards which this subscription entitlement has been granted.
   */
  feature_name?: string;
  /** [The unit of measure](/docs/api/features#feature_unit) for the feature when its `type` is either `quantity` or `range`.
   */
  feature_unit?: string;
  /** The value denoting the effective entitlement level that the subscription has towards the feature. When `components.entitlement_override` is present, then this is the same as `components.entitlement_override.value`. Otherwise, it is `components.inherited_entitlements.value`.
   */
  value?: string;
  /** The display name of the effective entitlement level. When `components.entitlement_override` is present, then this is the same as `components.entitlement_override.name`. Otherwise, it is derived based on the `type` of feature as follows:

* When `feature.type` is `range` or `quantity`: the `name` is the space-separated concatenation of `inherited_entitlements.value` and the pluralized form of `feature_unit`. For example, if `value` is `20` and `feature_unit` is `user`, then `name` becomes `20 users`.
* When `feature.type` is `custom`: the `name` is the same as `inherited_entitlements.value`.
* When `feature.type` is `switch`: `name` is not applicable.
 */
  name?: string;
  /** Indicates that `components.entitlement_overrides` exists.
   */
  is_overridden: boolean;
  /** Indicates that `components.is_enabled` exists.
   */
  is_enabled: boolean;
  /** Timestamp when the subscription entitlements are going to expire.
   */
  expires_at?: number;
  /** The component entitlements that constitute this \`subscription_entitlement\`. The effective entitlement \[value\](/docs/api/subscription_entitlements#subscription_entitlement_value) and \[name\](/docs/api/subscription_entitlements#subscription_entitlement_name) are determined from these component entitlements.
   */
  components?: SubscriptionEntitlementComponents;
}

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type SubscriptionDiscountsItemApplyOn =
  (typeof SubscriptionDiscountsItemApplyOn)[keyof typeof SubscriptionDiscountsItemApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionDiscountsItemApplyOn = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours. \* month - A period of 1 calendar month.

 */
export type SubscriptionDiscountsItemPeriodUnit =
  (typeof SubscriptionDiscountsItemPeriodUnit)[keyof typeof SubscriptionDiscountsItemPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionDiscountsItemPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type SubscriptionDiscountsItemDurationType =
  (typeof SubscriptionDiscountsItemDurationType)[keyof typeof SubscriptionDiscountsItemDurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionDiscountsItemDurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The type of discount. Possible value are: \* percentage - The specified percentage will be given as discount. \* fixed_amount - The specified amount will be given as discount.

 */
export type SubscriptionDiscountsItemType =
  (typeof SubscriptionDiscountsItemType)[keyof typeof SubscriptionDiscountsItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionDiscountsItemType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type SubscriptionDiscountsItem = {
  /** An immutable unique id for the discount. It is always auto-generated.
   */
  id: string;
  /** The name of the discount as it should appear on customer-facing pages and documents such as [invoices](/docs/api/invoices?prod_cat_ver=2) and [hosted pages](/docs/api/hosted_pages?prod_cat_ver=2). This is auto-generated based on the `type`, `amount`, and `currency_code` of the discount. For example, it can be `10% off` or `10$ off`.
   */
  invoice_name?: string;
  /** The type of discount. Possible value are: \* percentage - The specified percentage will be given as discount. \* fixed_amount - The specified amount will be given as discount.
   */
  type: SubscriptionDiscountsItemType;
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number;
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the discount. This is only applicable when `discount.type` is `fixed_amount`.
   */
  currency_code?: string;
  /** Specifies the time duration for which this discount is attached to the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.
   */
  duration_type: SubscriptionDiscountsItemDurationType;
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number;
  /** The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours. \* month - A period of 1 calendar month.
   */
  period_unit?: SubscriptionDiscountsItemPeriodUnit;
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr: boolean;
  /** The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.
   */
  apply_on: SubscriptionDiscountsItemApplyOn;
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string;
  /** Timestamp indicating when this discount is created.
   */
  created_at: number;
  /** Specifies till when the limited period discount is applicable. This attribute will be sent in the response only for `limited_period` duration type discount.
   */
  apply_till?: number;
  /** Specifies the number of times the discount has been applied.
   */
  applied_count?: number;
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.  
**Note:**


When the coupon ID contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
 */
  coupon_id: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * Action to be taken when the contract term completes. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.


 */
export type SubscriptionContractTermActionAtTermEnd =
  (typeof SubscriptionContractTermActionAtTermEnd)[keyof typeof SubscriptionContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Current status of contract \* terminated - The contract term was terminated ahead of completion. \* completed - The contract term has run its full duration. \* active - An actively running contract term. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.

 */
export type SubscriptionContractTermStatus =
  (typeof SubscriptionContractTermStatus)[keyof typeof SubscriptionContractTermStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionContractTermStatus = {
  active: "active",
  completed: "completed",
  cancelled: "cancelled",
  terminated: "terminated",
} as const;

/**
 * Contract terms for this subscription

 */
export type SubscriptionContractTerm = {
  /** Id that uniquely identifies the contract term in the site.
   */
  id: string;
  /** Current status of contract \* terminated - The contract term was terminated ahead of completion. \* completed - The contract term has run its full duration. \* active - An actively running contract term. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
 */
  status: SubscriptionContractTermStatus;
  /** The start date of the contract term
   */
  contract_start: number;
  /** The end date of the contract term
   */
  contract_end: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle: number;
  /** Action to be taken when the contract term completes. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* evergreen - Contract term completes and the subscription renews. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.

 */
  action_at_term_end: SubscriptionContractTermActionAtTermEnd;
  /** The sum of the [totals](invoices#invoice_total) of all the invoices raised as part of the contract term. For `active` contract terms, this is a predicted value. The value depends on the [type of currency](./#handling_currency_units). If the subscription was [imported](#import_a_subscription) with the contract term, then this value includes the value passed for `total_amount_raised`.
   */
  total_contract_value: number;
  /** It refers to the total amount of revenue that is expected to be generated from a specific contract term, calculated as the sum of all invoices raised during the term, regardless of payment status. It is based on past performance and the specified currency in the contract. If the subscription was imported, the value for `total_amount_raised_before_tax` is included in the calculation of the total contract value before tax. It's important to note that this value excludes any applicable taxes.
   */
  total_contract_value_before_tax: number;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
  /** The date when the contract term was created.
   */
  created_at: number;
  /** The [Id](subscriptions#subscription_id) of the subscription that this contract term is for.
   */
  subscription_id: string;
  /** The number of subscription billing cycles remaining after the current one for the contract term. This attribute is only returned for `active` contract terms.
   */
  remaining_billing_cycles?: number;
};

/**
 * Whether or not to notify the referral purchases to the referral system \* first_paid_conversion - First Paid Conversion \* none - None \* all_invoices - All Invoices

 */
export type SubscriptionReferralInfoNotifyReferralSystem =
  (typeof SubscriptionReferralInfoNotifyReferralSystem)[keyof typeof SubscriptionReferralInfoNotifyReferralSystem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionReferralInfoNotifyReferralSystem = {
  none: "none",
  first_paid_conversion: "first_paid_conversion",
  all_invoices: "all_invoices",
} as const;

/**
 * Referrer reward type for the referral campaign \* none - None \* custom_revenue_percent_based - Custom Revenue Percent Based \* referral_direct_reward - Referral Direct Reward \* custom_promotional_credit - Custom Promotional Credit

 */
export type SubscriptionReferralInfoReferrerRewardType =
  (typeof SubscriptionReferralInfoReferrerRewardType)[keyof typeof SubscriptionReferralInfoReferrerRewardType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionReferralInfoReferrerRewardType = {
  none: "none",
  referral_direct_reward: "referral_direct_reward",
  custom_promotional_credit: "custom_promotional_credit",
  custom_revenue_percent_based: "custom_revenue_percent_based",
} as const;

/**
 * Friend offer type for the referral camapign \* none - None \* coupon_code - Coupon Code \* coupon - Coupon

 */
export type SubscriptionReferralInfoFriendOfferType =
  (typeof SubscriptionReferralInfoFriendOfferType)[keyof typeof SubscriptionReferralInfoFriendOfferType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionReferralInfoFriendOfferType = {
  none: "none",
  coupon: "coupon",
  coupon_code: "coupon_code",
} as const;

/**
 * Source referral system for the referral subscription \* referral_saasquatch - Referral Saasquatch \* referral_candy - Referral Candy \* friendbuy - Friendbuy

 */
export type SubscriptionReferralInfoReferralSystem =
  (typeof SubscriptionReferralInfoReferralSystem)[keyof typeof SubscriptionReferralInfoReferralSystem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionReferralInfoReferralSystem = {
  referral_candy: "referral_candy",
  referral_saasquatch: "referral_saasquatch",
  friendbuy: "friendbuy",
} as const;

/**
 * Reward status for the referral subscription \* paid - Paid \* invalid - Invalid \* pending - Pending

 */
export type SubscriptionReferralInfoRewardStatus =
  (typeof SubscriptionReferralInfoRewardStatus)[keyof typeof SubscriptionReferralInfoRewardStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionReferralInfoRewardStatus = {
  pending: "pending",
  paid: "paid",
  invalid: "invalid",
} as const;

/**
 * Referral details if exists for the subscription

 */
export type SubscriptionReferralInfo = {
  /** Referral code if available for the subscription
   */
  referral_code?: string;
  /** Referral coupon code if available for the subscription
   */
  coupon_code?: string;
  /** Referrer id if available for the subscription
   */
  referrer_id?: string;
  /** External reference id in referral system for the subscription
   */
  external_reference_id?: string;
  /** Reward status for the referral subscription \* paid - Paid \* invalid - Invalid \* pending - Pending
   */
  reward_status?: SubscriptionReferralInfoRewardStatus;
  /** Source referral system for the referral subscription \* referral_saasquatch - Referral Saasquatch \* referral_candy - Referral Candy \* friendbuy - Friendbuy
   */
  referral_system?: SubscriptionReferralInfoReferralSystem;
  /** Referral account id
   */
  account_id: string;
  /** Referral campaign id
   */
  campaign_id: string;
  /** Referral external campaign id
   */
  external_campaign_id?: string;
  /** Friend offer type for the referral camapign \* none - None \* coupon_code - Coupon Code \* coupon - Coupon
   */
  friend_offer_type?: SubscriptionReferralInfoFriendOfferType;
  /** Referrer reward type for the referral campaign \* none - None \* custom_revenue_percent_based - Custom Revenue Percent Based \* referral_direct_reward - Referral Direct Reward \* custom_promotional_credit - Custom Promotional Credit
   */
  referrer_reward_type?: SubscriptionReferralInfoReferrerRewardType;
  /** Whether or not to notify the referral purchases to the referral system \* first_paid_conversion - First Paid Conversion \* none - None \* all_invoices - All Invoices
   */
  notify_referral_system?: SubscriptionReferralInfoNotifyReferralSystem;
  /** Destination url for the referral campaign
   */
  destination_url?: string;
  /** Whether post purchase widget is enabled for this campaign
   */
  post_purchase_widget_enabled: boolean;
};

/**
 * The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.

 */
export type SubscriptionShippingAddressValidationStatus =
  (typeof SubscriptionShippingAddressValidationStatus)[keyof typeof SubscriptionShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Shipping address for the subscription.

 */
export type SubscriptionShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.
   */
  validation_status?: SubscriptionShippingAddressValidationStatus;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

export type SubscriptionCouponsItem = {
  /** Used to uniquely identify the coupon
   */
  coupon_id: string;
  /** The date till when the coupon can be applied. Applicable for `limited_period` [coupons](./coupons?prod_cat_ver=2) only.
   */
  apply_till?: number;
  /** Number of times this coupon has been applied for this subscription
   */
  applied_count: number;
  /** The coupon code used to redeem the coupon. Will be present only when associated code for a coupon is used.
   */
  coupon_code?: string;
};

export type SubscriptionChargedItemsItem = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id: string;
  /** Timestamp indicating when this charge item_price was last charged for this subscription.
   */
  last_charged_at: number;
};

export type SubscriptionItemTiersItem = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id: string;
  /** The lowest value in the quantity tier.
   */
  starting_unit: number;
  /** The highest value in the quantity tier.
   */
  ending_unit?: number;
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* immediately - The item is charged immediately on being added to the subscription. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`.

 */
export type SubscriptionSubscriptionItemsItemChargeOnOption =
  (typeof SubscriptionSubscriptionItemsItemChargeOnOption)[keyof typeof SubscriptionSubscriptionItemsItemChargeOnOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSubscriptionItemsItemChargeOnOption = {
  immediately: "immediately",
  on_event: "on_event",
} as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_creation - the time of creation of the subscription.

 */
export type SubscriptionSubscriptionItemsItemChargeOnEvent =
  (typeof SubscriptionSubscriptionItemsItemChargeOnEvent)[keyof typeof SubscriptionSubscriptionItemsItemChargeOnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSubscriptionItemsItemChargeOnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
} as const;

/**
 * The type of item. There must be one and only one item of type `plan` in this list. \* plan - Plan \* charge - Charge \* addon - Addon

 */
export type SubscriptionSubscriptionItemsItemItemType =
  (typeof SubscriptionSubscriptionItemsItemItemType)[keyof typeof SubscriptionSubscriptionItemsItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionSubscriptionItemsItemItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

export type SubscriptionSubscriptionItemsItem = {
  /** The unique identifier of the item price.
   */
  item_price_id: string;
  /** The type of item. There must be one and only one item of type `plan` in this list. \* plan - Plan \* charge - Charge \* addon - Addon
   */
  item_type: SubscriptionSubscriptionItemsItemItemType;
  /** The quantity of the item purchased
   */
  quantity?: number;
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number;
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string;
  /** The total amount for the item as determined from `unit_price`, `free_quantity`, `quantity` and `item_tiers` as applicable. The value depends on the [type of currency](./#handling_currency_units).
   */
  amount?: number;
  /** The decimal representation of the total amount for the item, in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  amount_in_decimal?: string;
  /** The `free_quantity` of the plan-item as [specified](./item_prices?prod_cat_ver=2) for the item price.
   */
  free_quantity?: number;
  /** The `free_quantity_in_decimal` as set for the item price. Returned for quantity-based item prices when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  free_quantity_in_decimal?: string;
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number;
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number;
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number;
  /** When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_creation - the time of creation of the subscription.
   */
  charge_on_event?: SubscriptionSubscriptionItemsItemChargeOnEvent;
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean;
  /** Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* immediately - The item is charged immediately on being added to the subscription. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`.
   */
  charge_on_option?: SubscriptionSubscriptionItemsItemChargeOnOption;
};

/**
 * Defines additional free period in association with the billing period. \* week - Charge based on week(s) \* month - Charge based on month(s) \* day - Charge based on day(s) \* year - Charge based on year(s)

 */
export type SubscriptionFreePeriodUnit =
  (typeof SubscriptionFreePeriodUnit)[keyof typeof SubscriptionFreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionFreePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./advanced-features#meta_data).

 */
export type SubscriptionMetadata = { [key: string]: any };

/**
 * The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.

 */
export type SubscriptionChannel =
  (typeof SubscriptionChannel)[keyof typeof SubscriptionChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The reason for canceling the subscription. Set by Chargebee automatically. \* no_card - No Card \* non_compliant_customer - Non Compliant Customer \* currency_incompatible_with_gateway - Currency incompatible with Gateway \* fraud_review_failed - Fraud Review Failed \* tax_calculation_failed - Tax Calculation Failed \* not_paid - Not Paid \* non_compliant_eu_customer - Non Compliant EU Customer

 */
export type SubscriptionCancelReason =
  (typeof SubscriptionCancelReason)[keyof typeof SubscriptionCancelReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionCancelReason = {
  not_paid: "not_paid",
  no_card: "no_card",
  fraud_review_failed: "fraud_review_failed",
  non_compliant_eu_customer: "non_compliant_eu_customer",
  tax_calculation_failed: "tax_calculation_failed",
  currency_incompatible_with_gateway: "currency_incompatible_with_gateway",
  non_compliant_customer: "non_compliant_customer",
} as const;

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.

 */
export type SubscriptionTrialEndAction =
  (typeof SubscriptionTrialEndAction)[keyof typeof SubscriptionTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * Current state of the subscription \* future - The subscription is scheduled to start at a future date. \* non_renewing - The subscription will be canceled at the end of the current term. \* active - The subscription is active and will be charged for automatically based on the items in it. \* cancelled - The subscription has been canceled and is no longer in service. \* in_trial - The subscription is in trial. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state.

 */
export type SubscriptionStatus =
  (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionStatus = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * A Chargebee subscription connects a customer record to products/services. It describes what the customer has signed up for and how often they're charged for it. The essential components of a subscription are:

* A [plan-item price](./item_prices?prod_cat_ver=2).
* Any addon- and charge-item prices applied to the subscription.
* Any [coupons](./coupons?prod_cat_ver=2) applied.
* Any [discounts](./discounts?prod_cat_ver=2) applied.

The charges in a subscription are billed via invoices.

**Note:** The maximum number of subscriptions for any given [customer](customers) ([active](subscriptions#subscription_status) or not) is 900.  

Item price compatibility in a subscription {#item-price-compatibility}
----------------------------------------------------------------------

When creating or updating a subscription, one of the item prices specified under subscription_items must be a plan-item price. The remaining must be compatible addon- or charge-item prices. An item price is compatible with a plan-item price if their currencies are the same. Additionally, an addon-item price is compatible with a plan-item price only if their billing frequencies meet the following conditions:

| `period_unit` for plan-item price | Compatible `period_unit` for addon-item price |                                                                                                                                                                                                   Compatible period for addon-item price                                                                                                                                                                                                    |
|-----------------------------------|-----------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `day`                             | `day`                                         | The `period` of the plan-item price should be divisible by the `period` of the addon-item price. **Example** If the `period` of the plan-item price is `10`, then the period of the addon-item price can be `10`, `5`, `2`, or `1`.                                                                                                                                                                                                         |
| `week`                            | `week` or `day`                               | The `period` (in days) of the plan-item price should be divisible by the `period` of the addon-item price. **Example** If the `period` of the plan-item price is `2`, then the period of the addon-item price can be as follows depending on the value of `period_unit`: * for `period_unit` as `week`, `period` can be `2` or `1`. * for `period_unit` as `day`, `period` can be `14`, `7`, `2`, or `1`.                             |
| `month`                           | `month`                                       | The `period` of the plan-item price should be divisible by the `period` of the addon-item price. **Example** If the `period` of the plan-item price is `6`, then the `period` of the addon-item price can be `6`, `3`, `2`, or `1`.                                                                                                                                                                                                         |
| `year`                            | `year` or `month`                             | The `period` (in months) of the plan-item price should be divisible by the `period` of the addon-item price. **Example** If the `period` of the plan-item price is `2`, then the `period` of the addon-item price can be as follows depending on the value of `period_unit`: * for `period_unit` as `year`, `period` can be `2` or `1`. * for `period_unit` as `month`, `period` can be `24`, `12`, `8`, `6`, `4`, `3`, `2`, or `1`.  |

**See also**

* [Purchase](https://apidocs.chargebee.com/docs/api/purchases): a resource that represents multiple subscriptions bought together by a customer.




 */
export interface Subscription {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id: string;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the subscription
   */
  currency_code: string;
  /** Applicable only for 'future' subscriptions. The scheduled start time of the subscription.
   */
  start_date?: number;
  /** End of the trial period for the subscription. Presence of this value for 'future' subscription implies the subscription will go into 'in_trial' state when it starts.
   */
  trial_end?: number;
  /** * When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels.
   * When the subscription is on a [contract term](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.
   */
  remaining_billing_cycles?: number;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** The decimal representation of the quantity of the plan purchased. Returned for quantity-based plans when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  plan_quantity_in_decimal?: string;
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  plan_unit_price_in_decimal?: string;
  /** Identifier of the customer with whom this subscription is associated.
   */
  customer_id: string;
  /** Current state of the subscription \* future - The subscription is scheduled to start at a future date. \* non_renewing - The subscription will be canceled at the end of the current term. \* active - The subscription is active and will be charged for automatically based on the items in it. \* cancelled - The subscription has been canceled and is no longer in service. \* in_trial - The subscription is in trial. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state.
   */
  status: SubscriptionStatus;
  /** Start of the trial period for the subscription. Presence of this value for `future` subscription implies the subscription will go into `in_trial` state when it starts.
   */
  trial_start?: number;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* cancel_subscription - The subscription cancels. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan.
   */
  trial_end_action?: SubscriptionTrialEndAction;
  /** Start of the current billing period of the subscription.
   */
  current_term_start?: number;
  /** End of the current billing period of the subscription. Subscription is renewed immediately after this
   */
  current_term_end?: number;
  /** The date/time at which the next billing for the subscription happens. This is usually right after `current_term_end` unless multiple subscription terms were invoiced in advance using the `terms_to_charge` parameter.
   */
  next_billing_at?: number;
  /** The time at which the subscription was created.
   */
  created_at?: number;
  /** Time at which the subscription was started. Is `null` for `future`subscriptions as it is yet to be started.
   */
  started_at?: number;
  /** Time at which the subscription `status` last changed to `active`. For example, this value is updated when an `in_trial` or `cancelled` subscription activates.
   */
  activated_at?: number;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** If `true`, ignores the [hierarchy relationship](./customers?prod_cat_ver=2#customer_relationship) and uses customer as payment and invoice owner.
   */
  override_relationship?: boolean;
  /** When a pause has been scheduled, it is the date/time of scheduled pause. When the subscription is in the `paused` state, it is the date/time when the subscription was paused.
   */
  pause_date?: number;
  /** For a paused subscription, it is the date/time when the subscription is scheduled to resume. If the pause is for an indefinite period, this value is not returned.
   */
  resume_date?: number;
  /** Time at which subscription was cancelled or is set to be cancelled.
   */
  cancelled_at?: number;
  /** The reason for canceling the subscription. Set by Chargebee automatically. \* no_card - No Card \* non_compliant_customer - Non Compliant Customer \* currency_incompatible_with_gateway - Currency incompatible with Gateway \* fraud_review_failed - Fraud Review Failed \* tax_calculation_failed - Tax Calculation Failed \* not_paid - Not Paid \* non_compliant_eu_customer - Non Compliant EU Customer
   */
  cancel_reason?: SubscriptionCancelReason;
  /** The IP address of the user. Used primarly in Refersion integration. Refersion uses this field to track/log affiliate subscription.
   */
  created_from_ip?: string;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when the item was last updated.
   */
  updated_at?: number;
  /** The subscription has an [advance invoicing schedule](advance_invoice_schedules).
   */
  has_scheduled_advance_invoices: boolean;
  /** If `true`, there are subscription changes scheduled on next renewal.
   */
  has_scheduled_changes: boolean;
  /** Payment source attached to this subscription. If present, customer's payment sources won't be used to collect any payment for this subscripiton.
   */
  payment_source_id?: string;
  /** The free_quantity_in_decimal as set for the plan. Returned for quantity-based plans when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  plan_free_quantity_in_decimal?: string;
  /** The decimal representation of the total amount for the plan, in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  plan_amount_in_decimal?: string;
  /** This is the date/time at which the most recent cancellation schedule for the subscription was created in Chargebee. Applicable only for `cancelled` subscriptions or subscriptions that are scheduled for cancellation.
   */
  cancel_schedule_created_at?: number;
  /** The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.
   */
  channel?: SubscriptionChannel;
  /** The [Net D](https://www.chargebee.com/docs/net_d.html) value explicitly set for this subscription. Net D is the number of days within which any invoice raised for the subscription must be paid. When an invoice is raised, and this value is unavailable, the net_term_days defined at [the customer level](customers#customer_net_term_days) is considered.
   */
  net_term_days?: number;
  /** Total number of invoices that are due for payment against the subscription.
   **Note:** Not supported if [consolidated invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled, or when the subscription is for the customer who is in [hierarchy](./hierarchies), and the parent of this customer owns and pays for the invoices of the subscription. It is also worth noting that the consolidated invoice amount is not included in the calculation of `due_invoices_count`.
   */
  due_invoices_count?: number;
  /** Time since this subscription has unpaid invoices.
   **Note:** Not supported if [consolidated invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled, or when the subscription is for the customer who is in [hierarchy](./hierarchies), and the parent of this customer owns and pays for the invoices of the subscription.
   */
  due_since?: number;
  /** Total invoice due amount for this subscription. The value depends on the [type of currency](./#handling_currency_units).
   **Note:** Not supported if [consolidated invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled, or when the subscription is for the customer who is in [hierarchy](./hierarchies), and the parent of this customer owns and pays for the invoices of the subscription. It is also worth noting that the consolidated invoice amount is not included in the calculation of `total_dues`.
   */
  total_dues?: number;
  /** Monthly recurring revenue for the subscription. Updated asynchronously, this value catches up with changes to the subscription in less than a minute. The value depends on the [type of currency](./#handling_currency_units).
   **Note:** This may not return accurate values since updated asynchronously.
   */
  mrr?: number;
  /** Exchange rate used for base currency conversion.This value is updated to the [rate configured](https://www.chargebee.com/docs/multi-currency-pricing.html#configuring-multicurrency) on your site each time any change is made to the subscription.
   */
  exchange_rate?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the site's base currency.
   */
  base_currency_code?: string;
  /** A customer-facing note added to all invoices associated with this subscription. This note is one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** A set of key-value pairs stored as additional information for the subscription. \[Learn more\](./advanced-features#meta_data).
   */
  metadata?: SubscriptionMetadata;
  /** Indicates that the subscription has been deleted. You can retrieve a deleted subscription using the [list operation](./subscriptions#list_subscriptions).
   */
  deleted: boolean;
  /** If a subscription change has been scheduled, this is the date/time when the change is set to take effect. **Note:** As a limitation, this attribute is not returned when the change is scheduled to happen at the end of the current term.
   */
  changes_scheduled_at?: number;
  /** Reason code for canceling the subscription. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Subscriptions \> Subscription Cancellation**. Must be passed if set as mandatory in the app. The codes are case-sensitive
   */
  cancel_reason_code?: string;
  /** The period of time by which the first term of the subscription is to be extended free-of-charge. The value must be in multiples of free_period_unit."
   */
  free_period?: number;
  /** Defines additional free period in association with the billing period. \* week - Charge based on week(s) \* month - Charge based on month(s) \* day - Charge based on day(s) \* year - Charge based on year(s)
   */
  free_period_unit?: SubscriptionFreePeriodUnit;
  /** Indicates whether the invoices for this subscription are generated with a `pending` `status`. This attribute is set to `true` automatically when the subscription has item prices that belong to `metered` items.

You can also set this to `true` explicitly using the [create](/docs/api/subscriptions#create_subscription_for_items_create_pending_invoices)/[update](/docs/api/subscriptions#update_subscription_for_items_create_pending_invoices) subscription operations. This is useful in the following scenarios:

* When tracking usages and calculating usage-based charges on your end. You can then add them to the subscription as a [one-time charge](https://www.chargebee.com/docs/charges.html) at the end of the billing term.
* When you need to inspect all charges before closing invoices for this subscription.

Applicable only when [Metered Billing](https://www.chargebee.com/docs/metered_billing.html) is enabled for the site
 */
  create_pending_invoices?: boolean;
  /** Set to `false` to override for this subscription, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute has a higher precedence than the same attribute at the [customer level](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices).
   */
  auto_close_invoices?: boolean;
  /** The unique ID of the [business entity](/docs/api/advanced-features/?prod_cat_ver=2#mbe) of this subscription. This is always the same as the [business entity](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer.
   */
  business_entity_id?: string;
  /** Details of individual [item prices](/docs/api/item_prices?prod_cat_ver=2) that are part of this subscription.
   */
  subscription_items?: SubscriptionSubscriptionItemsItem[];
  /** The pricing details of `subscription_items` which have [pricing_model](/docs/api/item_prices?prod_cat_ver=2#item_price_pricing_model) as `tiered`, `volume` or `stairstep`.
   */
  item_tiers?: SubscriptionItemTiersItem[];
  /** List of event based charge items that have already been charged.
   */
  charged_items?: SubscriptionChargedItemsItem[];
  /** List of coupons for this subscription
   */
  coupons?: SubscriptionCouponsItem[];
  /** Shipping address for the subscription.
   */
  shipping_address?: SubscriptionShippingAddress;
  /** Referral details if exists for the subscription
   */
  referral_info?: SubscriptionReferralInfo;
  /** Contract terms for this subscription
   */
  contract_term?: SubscriptionContractTerm;
  /** List of discounts for this subscription
   */
  discounts?: SubscriptionDiscountsItem[];
  [key: string]: any;
}

export type Source = (typeof Source)[keyof typeof Source];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Source = {
  admin_console: "admin_console",
  api: "api",
  scheduled_job: "scheduled_job",
  hosted_page: "hosted_page",
  portal: "portal",
  system: "system",
  none: "none",
  js_api: "js_api",
  migration: "migration",
  bulk_operation: "bulk_operation",
  external_service: "external_service",
} as const;

/**
 * Status of the migration \* moving_out - Moving out from one cb site to another \* moved_in - Moved in from another cb site \* moved_out - Moved out from one cb site to another

 */
export type SiteMigrationDetailStatus =
  (typeof SiteMigrationDetailStatus)[keyof typeof SiteMigrationDetailStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SiteMigrationDetailStatus = {
  moved_in: "moved_in",
  moved_out: "moved_out",
  moving_out: "moving_out",
} as const;

/**
 * Entity Type of the record \* order - Entity that represents an order \* customer - Entity that represents a customer \* invoice - Invoice description \* subscription - Entity that represents a subscription of a customer \* transaction - Entity that represents a transaction. \* credit_note - Credit note description

 */
export type SiteMigrationDetailEntityType =
  (typeof SiteMigrationDetailEntityType)[keyof typeof SiteMigrationDetailEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SiteMigrationDetailEntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  credit_note: "credit_note",
  transaction: "transaction",
  order: "order",
} as const;

/**
 * Site Migration details is used for finding the records that are moved in and moved out from one Chargebee site to another.

 */
export interface SiteMigrationDetail {
  /** Id of the entity in this site.
   */
  entity_id: string;
  /** Site name to which the record is moved in/out.
   */
  other_site_name: string;
  /** Entity Id of the record in the other site.
   */
  entity_id_at_other_site: string;
  /** Date in which the record is copied
   */
  migrated_at: number;
  /** Entity Type of the record \* order - Entity that represents an order \* customer - Entity that represents a customer \* invoice - Invoice description \* subscription - Entity that represents a subscription of a customer \* transaction - Entity that represents a transaction. \* credit_note - Credit note description
   */
  entity_type: SiteMigrationDetailEntityType;
  /** Status of the migration \* moving_out - Moving out from one cb site to another \* moved_in - Moved in from another cb site \* moved_out - Moved out from one cb site to another
   */
  status: SiteMigrationDetailStatus;
}

export type ScheduleType = (typeof ScheduleType)[keyof typeof ScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ScheduleType = {
  immediate: "immediate",
  specific_dates: "specific_dates",
  fixed_intervals: "fixed_intervals",
} as const;

/**
 * This resource returns the RevenueStory data export attributes.

 */
export interface RsDataExportResource {
  /** Resource of RevenueStory data export.
   */
  resource: string;
}

export type Role = (typeof Role)[keyof typeof Role];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Role = {
  primary: "primary",
  backup: "backup",
  none: "none",
} as const;

export type ResumeOption = (typeof ResumeOption)[keyof typeof ResumeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResumeOption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

/**
 * Status of the copy customer process. \* failed - Failed \* succeeded - Succeeded \* scheduled - Scheduled

 */
export type ResourceMigrationStatus =
  (typeof ResourceMigrationStatus)[keyof typeof ResourceMigrationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResourceMigrationStatus = {
  scheduled: "scheduled",
  failed: "failed",
  succeeded: "succeeded",
} as const;

/**
 * Type of the entity this record is stored for \* customer - Entity that represents a customer

 */
export type ResourceMigrationEntityType =
  (typeof ResourceMigrationEntityType)[keyof typeof ResourceMigrationEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResourceMigrationEntityType = {
  customer: "customer",
} as const;

/**
 * Resource Migration is used for finding the status of customer migration between Chargebee sites.

 */
export interface ResourceMigration {
  /** Domain name to which the item is moved.
   */
  from_site: string;
  /** Type of the entity this record is stored for \* customer - Entity that represents a customer
   */
  entity_type: ResourceMigrationEntityType;
  /** Handle of the customer in the current site.
   */
  entity_id: string;
  /** Status of the copy customer process. \* failed - Failed \* succeeded - Succeeded \* scheduled - Scheduled
   */
  status: ResourceMigrationStatus;
  /** Filled only if the copy operation gets failed
   */
  errors?: string;
  /** Time the log is created
   */
  created_at: number;
  /** Time the log is updated
   */
  updated_at: number;
}

export type ReportBy = (typeof ReportBy)[keyof typeof ReportBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReportBy = {
  customer: "customer",
  invoice: "invoice",
  product: "product",
  subscription: "subscription",
} as const;

/**
 * For operator usages, see the [Pagination and Filtering](https://apidocs.chargebee.com/docs/api/#pagination_and_filtering) section. \* is - is \* is_not - is_not \* in - in \* not_in - not_in

 */
export type ReportFilterItemOperator =
  (typeof ReportFilterItemOperator)[keyof typeof ReportFilterItemOperator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReportFilterItemOperator = {
  is: "is",
  is_not: "is_not",
  in: "in",
  not_in: "not_in",
} as const;

/**
 * Attribute name to filter out. \* country - country \* subscription_id - subscription_id \* entity_id - entity_id \* customer_id - customer_id \* company - company

 */
export type ReportFilterItemOperand =
  (typeof ReportFilterItemOperand)[keyof typeof ReportFilterItemOperand];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReportFilterItemOperand = {
  entity_id: "entity_id",
  customer_id: "customer_id",
  subscription_id: "subscription_id",
  country: "country",
  company: "company",
} as const;

export type ReportFilterItem = {
  /** Attribute name to filter out. \* country - country \* subscription_id - subscription_id \* entity_id - entity_id \* customer_id - customer_id \* company - company
   */
  operand: ReportFilterItemOperand;
  /** For operator usages, see the [Pagination and Filtering](https://apidocs.chargebee.com/docs/api/#pagination_and_filtering) section. \* is - is \* is_not - is_not \* in - in \* not_in - not_in
   */
  operator?: ReportFilterItemOperator;
  /** The value must be passed within the JSON array. For `is` and `is_not` we took only first value in json array.
   */
  value: string;
};

/**
 * Defines the [granularity](https://www.chargebee.com/docs/2.0/report-explorer.html#report-view_time-period-granularity-relationship) of the report based on the period. \* daily - daily \* quarterly - quarterly \* yearly - yearly \* monthly - monthly \* weekly - weekly

 */
export type ReportPeriodGranularity =
  (typeof ReportPeriodGranularity)[keyof typeof ReportPeriodGranularity];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReportPeriodGranularity = {
  daily: "daily",
  weekly: "weekly",
  monthly: "monthly",
  quarterly: "quarterly",
  yearly: "yearly",
} as const;

/**
 * Defining the period for the reports.

 */
export type ReportPeriod = {
  /** Defines the [granularity](https://www.chargebee.com/docs/2.0/report-explorer.html#report-view_time-period-granularity-relationship) of the report based on the period. \* daily - daily \* quarterly - quarterly \* yearly - yearly \* monthly - monthly \* weekly - weekly
   */
  granularity: ReportPeriodGranularity;
  /** Year in which the period is present (2015 -2023)
   */
  start_year: number;
  /** Quarter in which the period is present (1-4). If the granularity selected is quarterly then it is a required parameter.
   */
  start_quarter?: number;
  /** Month in which the period is present (1-12). If the granularity selected is monthly or daily then it is a required parameter.
   */
  start_month?: number;
  /** Week in which the period is present (1-52).If the granularity selected is weekly then it is a required parameter.
   */
  start_week?: number;
  /** Day in which the period is present (1-31). If the granularity selected is daily then it is a required parameter.
   */
  start_day?: number;
  /** Year in which the period is present (2015 -2023)
   */
  end_year: number;
  /** Quarter in which the period is present (1-4). If the granularity selected is quarterly then it is a required parameter.
   */
  end_quarter?: number;
  /** Month in which the period is present (1-12). If the granularity selected is monthly or daily then it is a required parameter.
   */
  end_month?: number;
  /** Week in which the period is present (1-52).If the granularity selected is weekly then it is a required parameter.
   */
  end_week?: number;
  /** Day in which the period is present (1-31). If the granularity selected is daily then it is a required parameter.
   */
  end_day?: number;
};

/**
 * Data type of the attribute. \* unix_time_ms - unix_time_ms \* number - number \* decimal - decimal \* datetime - datetime \* date - date \* string - string

 */
export type ReportSchemaItemType =
  (typeof ReportSchemaItemType)[keyof typeof ReportSchemaItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReportSchemaItemType = {
  string: "string",
  number: "number",
  decimal: "decimal",
  date: "date",
  datetime: "datetime",
  unix_time_ms: "unix_time_ms",
} as const;

export type ReportSchemaItem = {
  /** A unique identifier for the attributes within the report's response - CSV headers and JSON attributes. The CSV headers refer to the name of the column in a file and JSON attributes refer to the key in the JSON response.
   */
  attribute: string;
  /** Data type of the attribute. \* unix_time_ms - unix_time_ms \* number - number \* decimal - decimal \* datetime - datetime \* date - date \* string - string
   */
  type?: ReportSchemaItemType;
  /** When type is a string then max_length will be available with the maximum limit of data.
   */
  max_length?: number;
};

/**
 * This resource represents the status and details of the report's request. This API allows customers to export key SaaS Metrics (MRR, ARR, Churn, Trials, Signups, and more) and report data that powers RevenueStory dashboards. You can use the REST endpoint to fetch historical data up to the last seven years or for a specific time period across all time granularities (Daily, Weekly, Monthly, or Yearly).

**Summary report**

Summary report metrics with the CSV headers and their respective data type.

|           **Report**            |eader|                                       **Data Type**                                       |
|---------------------------------||-------------------------------------------------------------------------------------------|
| MRR (Monthly Recurring Revenue) | [new_mrr](https://www.chargebee.com/help/metricdescription/?q=New%20MRR "https://www.chargebee.com/help/metricdescription/?q=New%20MRR") [free_to_paid_mrr](https://www.chargebee.com/help/metricdescription/?q=Free%20to%20Paid%20MRR "https://www.chargebee.com/help/metricdescription/?q=Free%20to%20Paid%20MRR") [upgrade_mrr](https://www.chargebee.com/help/metricdescription/?q=Upgrade%20MRR "https://www.chargebee.com/help/metricdescription/?q=Upgrade%20MRR") [reactivation_mrr](https://www.chargebee.com/help/metricdescription/?q=Reactivation%20MRR "https://www.chargebee.com/help/metricdescription/?q=Reactivation%20MRR") [expansion_mrr](https://www.chargebee.com/help/metricdescription/?q=Expansion%20MRR "https://www.chargebee.com/help/metricdescription/?q=Expansion%20MRR") [downgrade_mrr](https://www.chargebee.com/help/metricdescription/?q=Downgrade%20MRR "https://www.chargebee.com/help/metricdescription/?q=Downgrade%20MRR") [paused_mrr](https://www.chargebee.com/help/metricdescription/?q=Paused%20Subscription%20MRR "https://www.chargebee.com/help/metricdescription/?q=Paused%20Subscription%20MRR") [cancellation_mrr](https://www.chargebee.com/help/metricdescription/?q=Cancellation%20MRR "https://www.chargebee.com/help/metricdescription/?q=Cancellation%20MRR") [total_mrr](https://www.chargebee.com/help/metricdescription/?q=Total%20MRR "https://www.chargebee.com/help/metricdescription/?q=Total%20MRR") [resumed_mrr](https://www.chargebee.com/help/metricdescription/?q=Reactivation%20MRR "https://www.chargebee.com/help/metricdescription/?q=Reactivation%20MRR") | currency currency currency currency currency currency currency currency currency currency |
| Churn                           | [total_mrr_churn](https://www.chargebee.com/help/metricdescription/?q=Gross%20MRR%20Churn "https://www.chargebee.com/help/metricdescription/?q=Gross%20MRR%20Churn") [total_subscription_churn](https://www.chargebee.com/help/metricdescription/?q=Total%20Subscription%20Churn "https://www.chargebee.com/help/metricdescription/?q=Total%20Subscription%20Churn") [paid_subscription_churn](https://www.chargebee.com/help/metricdescription/?q=Paid%20Subscription%20Churn "https://www.chargebee.com/help/metricdescription/?q=Paid%20Subscription%20Churn| currency number number                                                                    |
| Acquisition                     | [signups](https://www.chargebee.com/help/metricdescription/?q=Signups "https://www.chargebee.com/help/metricdescription/?q=Signups") [new_trails](https://www.chargebee.com/help/metricdescription/?q=New%20Trials "https://www.chargebee.com/help/metricdescription/?q=New%20Trials") [activations](https://www.chargebee.com/help/metricdescription/?q=Activations "https://www.chargebee.com/help/metricdescription/?q=Activations") [total_trials](https://www.chargebee.com/help/metricdescription/?q=Total%20Subscriptions%20in%20Trial "https://www.chargebee.com/help/metricdescription/?q=Total%20Subscriptions%20in%20Trial") [total_active_subscriptions](https://www.chargebee.com/help/metricdescription/?q=Total%20Active%20Subscriptions "https://www.chargebee.com/help/metricdescription/?q=Total%20Active%20Subscriptions") [total_active_paid_subscriptions](https://www.chargebee.com/help/metricdescription/?q=Total%20Active%20Paid%20Subscriptions "https://www.chargebee.com/help/metricdescription/?q=Total%20Active%20Paid%20Subscriptions| number number number number number number                                                 |
| Billing                         | [new_billing](https://www.chargebee.com/help/metricdescription/?q=New%20Billing "https://www.chargebee.com/help/metricdescription/?q=New%20Billing") [total_billing](https://www.chargebee.com/help/metricdescription/?q=Total%20Billing "https://www.chargebee.com/help/metricdescription/?q=Total%20Billing") [net_billing](https://www.chargebee.com/help/metricdescription/?q=Net%20Billing "https://www.chargebee.com/help/metricdescription/?q=Net%20Billing") [total_taxes](https://www.chargebee.com/help/metricdescription/?q=Total%20Taxes "https://www.chargebee.com/help/metricdescription/?q=Total%20Taxes") [total_credit_notes](https://www.chargebee.com/help/metricdescription/?q=Total%20Credit%20Notes%20Amount "https://www.chargebee.com/help/metricdescription/?q=Total%20Credit%20Notes%20Amount| currency currency currency currency currency                                              |
| Payments                        | [recurring_payments](https://www.chargebee.com/help/metricdescription/?q=Recurring%20Cashflow "https://www.chargebee.com/help/metricdescription/?q=Recurring%20Cashflow") [non_recurring_payments](https://www.chargebee.com/help/metricdescription/?q=Non-recurring%20cashflow "https://www.chargebee.com/help/metricdescription/?q=Non-recurring%20cashflow") [total_payments](https://www.chargebee.com/help/metricdescription/?q=Gross%20Cashflow "https://www.chargebee.com/help/metricdescription/?q=Gross%20Cashflow") [net_payments](https://www.chargebee.com/help/metricdescription/?q=Net%20Cashflow "https://www.chargebee.com/help/metricdescription/?q=Net%20Cashflow") [refunds](https://www.chargebee.com/help/metricdescription/?q=Refunds "https://www.chargebee.com/help/metricdescription/?q=Refunds| currency currency currency currency currency                                              |
| ARR (Annual Recurring Revenue)  | [new_arr](https://www.chargebee.com/help/metricdescription/?q=ARR%20Movement%20Summary "https://www.chargebee.com/help/metricdescription/?q=ARR%20Movement%20Summary") [total_arr](https://www.chargebee.com/help/metricdescription/?q=Total%20ARR "https://www.chargebee.com/help/metricdescription/?q=Total| currency currency                                                                         |
| LTV (Life Time Value)           | [ltv_of_paid_subscription](https://www.chargebee.com/help/metricdescription/?q=Lifetime%20Value%20of%20a%20Paid%20Subscription "https://www.chargebee.com/help/metricdescription/?q=Lifetime%20Value%20of%20a%20Paid%20Subscription| currency                                                                                  |


 */
export interface Report {
  /** A unique identifier to identify the report.
   */
  id?: string;
  /** * **true** : The report data is embedded in the API response in a JSON format.
   **Note: The number of data points should not exceed 100, which means that the difference between the start date and end date divided by the granularity must be 100 or less.**
   * **false** : The report data is in CSV format. This is provided as a file or set of files that can be downloaded.
   */
  is_embedded: boolean;
  /** A unique identifier for the standard report type.  

* mrr
* arr
* billing
* payments
* churn
* acquisition
* life_time_value
 */
  report_identifier: string;
  /** Returns the time at which the data was last synced from Chargebee into the reporting system. The report is created using data available in Chargebee at that point in time.
   */
  data_synced_at?: number;
  /** When is_embedded is file :  

* download_url
* valid_till
* mime_type



When is_embedded is JSON :  

* Date
* Report specific data like mrr, upgrade_mrr, churn etc.
 */
  data?: unknown[];
  /** Response attribue details about data
   */
  schema?: ReportSchemaItem[];
  /** Defining the period for the reports.
   */
  period?: ReportPeriod;
  /** This is an JSON array with all additional filters over reports other then the reporting period.
   */
  filter?: ReportFilterItem[];
}

export type RefundableCreditsHandling =
  (typeof RefundableCreditsHandling)[keyof typeof RefundableCreditsHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundableCreditsHandling = {
  no_action: "no_action",
  schedule_refund: "schedule_refund",
} as const;

export type RefundOption = (typeof RefundOption)[keyof typeof RefundOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefundOption = {
  no_action: "no_action",
  schedule_refund: "schedule_refund",
} as const;

export type ReferrerRewardType =
  (typeof ReferrerRewardType)[keyof typeof ReferrerRewardType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferrerRewardType = {
  none: "none",
  referral_direct_reward: "referral_direct_reward",
  custom_promotional_credit: "custom_promotional_credit",
  custom_revenue_percent_based: "custom_revenue_percent_based",
} as const;

export type ReferralSystem =
  (typeof ReferralSystem)[keyof typeof ReferralSystem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferralSystem = {
  referral_candy: "referral_candy",
  referral_saasquatch: "referral_saasquatch",
  friendbuy: "friendbuy",
} as const;

/**
 * The `type` of the `item` \* charge - Charge \* plan - Plan \* addon - Addon

 */
export type ReferenceCountType =
  (typeof ReferenceCountType)[keyof typeof ReferenceCountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferenceCountType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * This resource returns the number of items.

 */
export interface ReferenceCount {
  /** The `type` of the `item` \* charge - Charge \* plan - Plan \* addon - Addon
   */
  type?: ReferenceCountType;
  /** Number of items.
   */
  count?: number;
}

export type ReasonCodeStatus =
  (typeof ReasonCodeStatus)[keyof typeof ReasonCodeStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReasonCodeStatus = {
  enabled: "enabled",
  disabled: "disabled",
} as const;

export type ReasonCodeType =
  (typeof ReasonCodeType)[keyof typeof ReasonCodeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReasonCodeType = {
  subscription_cancellation: "subscription_cancellation",
  create_credit_note: "create_credit_note",
  refund_credit_note: "refund_credit_note",
  void_invoice: "void_invoice",
  order_resend: "order_resend",
} as const;

export interface ReasonCode {
  type: ReasonCodeType;
  id: string;
  code: string;
  status: ReasonCodeStatus;
}

/**
 * Action to be taken when the contract term completes. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* evergreen - Contract term completes and the subscription renews.


 */
export type QuotedSubscriptionQuotedContractTermActionAtTermEnd =
  (typeof QuotedSubscriptionQuotedContractTermActionAtTermEnd)[keyof typeof QuotedSubscriptionQuotedContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionQuotedContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * The details of the contract term to be created when this quote is invoiced.

 */
export type QuotedSubscriptionQuotedContractTerm = {
  /** The start date of the contract term
   */
  contract_start: number;
  /** The end date of the contract term
   */
  contract_end: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle: number;
  /** Action to be taken when the contract term completes. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled. \* evergreen - Contract term completes and the subscription renews.

 */
  action_at_term_end: QuotedSubscriptionQuotedContractTermActionAtTermEnd;
  /** The sum of the [totals](invoices#invoice_total) of all the invoices raised as part of the contract term. For `active` contract terms, this is a predicted value. The value depends on the [type of currency](./#handling_currency_units). If the subscription was [imported](#import_a_subscription) with the contract term, then this value includes the value passed for `total_amount_raised`.
   */
  total_contract_value: number;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
};

export type QuotedSubscriptionItemTiersItem = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id: string;
  /** The lowest value in the quantity tier.
   */
  starting_unit: number;
  /** The highest value in the quantity tier.
   */
  ending_unit?: number;
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * When a [quote](/docs/api/quotes) is created, it generates the `quoted_subscription` resource. This captures most of the details of the subscription that would eventually be created once the quote is invoiced. This resource is returned along with the quote for most of the associated operations.

 */
export interface QuotedSubscription {
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  id: string;
  /** Applicable only when `operation_type` of the quote is `create_subscription_for_customer`. For subscriptions in the `future` `status`, this is the date/time when the subscription is set to start. The quote can be converted on a date/time after this date. This is called backdating the subscription creation. Backdating is performed when the subscription has already been provisioned but the conversion action has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating is enabled for subscription creation operations.
* The current day of the month does not exceed the limit set in Chargebee for backdating such operations. This day is typically the day of the month by which the accounting for the previous month must be closed.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the subscription's plan is 2 months and today is 14th April, the `start_date` cannot be earlier than 14th February.
 */
  start_date?: number;
  /** End of the trial period for the subscription. Presence of this value for 'future' subscription implies the subscription will go into 'in_trial' state when it starts.
   */
  trial_end?: number;
  /** * When the subscription is not on a contract term: this value is the number of billing cycles remaining after the current cycle, at the end of which, the subscription cancels.
   * When the subscription is on a [contract term](contract_terms): this value is the number of billing cycles remaining in the contract term after the current billing cycle.
   */
  remaining_billing_cycles?: number;
  /** Purchase order number for this subscription.
   */
  po_number?: string;
  /** The decimal representation of the quantity of the plan purchased. Returned for quantity-based plans when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  plan_quantity_in_decimal?: string;
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  plan_unit_price_in_decimal?: string;
  /** Applicable only when `operation_type` of the quote is `change_subscription`. When `change_option` is set to `specific_date`, then this is the date/time at which the subscription change is scheduled to occur. The quote can be converted on a date/time after this date. This is called backdating the subscription change and performed when the subscription change has already been provisioned but the conversion action has been delayed. Backdating is allowed only when the following prerequisites are met:

* Backdating must be enabled for subscription change operations.
* Only the following changes can be backdated:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* Subscription `status` is `active`, `cancelled`, or `non_renewing`.
* The current day of the month does not exceed the limit set in Chargebee for backdating subscription change. This limit is the day of the month by which the accounting for the previous month must be closed.
* The date is on or after `current_term_start`.
* The date is on or after the last date/time any of the following changes were made:
  * Changes in the recurring items or their prices.
  * Addition of non-recurring items.
* The date is not more than duration X into the past where X is the billing period of the plan. For example, if the period of the subscription's plan is 2 months and today is 14th April, `changes_scheduled_at` cannot be earlier than 14th February.
 */
  changes_scheduled_at?: number;
  /** Applicable only when `operation_type` of the quote is `change_subscription`. When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is scheduled to be carried out at the end of the billing cycle of the subscription. \* specific_date - The change is carried out as of `changes_scheduled_at`. \* immediately - The change is carried out immediately upon quote conversion.
   */
  change_option?: QuotedSubscriptionChangeOption;
  /** Number of billing cycles the new contract term should run for, on contract renewal. The default value is the same as `billing_cycles` or a custom value depending on the [site configuration](https://www.chargebee.com/docs/contract-terms.html#configuring-contract-terms).
   */
  contract_term_billing_cycle_on_renewal?: number;
  /** List of coupons for this subscription
   */
  coupons?: QuotedSubscriptionCouponsItem[];
  /** List of discounts for this quoted subscription.
   */
  discounts?: QuotedSubscriptionDiscountsItem[];
  /** Details of individual [item prices](/docs/api/item_prices?prod_cat_ver=2) that are part of this subscription
   */
  subscription_items?: QuotedSubscriptionSubscriptionItemsItem[];
  /** List of item tier.
   */
  item_tiers?: QuotedSubscriptionItemTiersItem[];
  /** The details of the contract term to be created when this quote is invoiced.
   */
  quoted_contract_term?: QuotedSubscriptionQuotedContractTerm;
}

/**
 * Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.

 */
export type QuotedSubscriptionSubscriptionItemsItemChargeOnOption =
  (typeof QuotedSubscriptionSubscriptionItemsItemChargeOnOption)[keyof typeof QuotedSubscriptionSubscriptionItemsItemChargeOnOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionSubscriptionItemsItemChargeOnOption = {
  immediately: "immediately",
  on_event: "on_event",
} as const;

/**
 * When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_creation - the time of creation of the subscription.

 */
export type QuotedSubscriptionSubscriptionItemsItemChargeOnEvent =
  (typeof QuotedSubscriptionSubscriptionItemsItemChargeOnEvent)[keyof typeof QuotedSubscriptionSubscriptionItemsItemChargeOnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionSubscriptionItemsItemChargeOnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
} as const;

/**
 * The type of item. There must be one and only one item of type `plan` in this list. \* plan - Plan \* addon - Addon \* charge - Charge

 */
export type QuotedSubscriptionSubscriptionItemsItemItemType =
  (typeof QuotedSubscriptionSubscriptionItemsItemItemType)[keyof typeof QuotedSubscriptionSubscriptionItemsItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionSubscriptionItemsItemItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

export type QuotedSubscriptionSubscriptionItemsItem = {
  /** The unique identifier of the item price.
   */
  item_price_id: string;
  /** The type of item. There must be one and only one item of type `plan` in this list. \* plan - Plan \* addon - Addon \* charge - Charge
   */
  item_type: QuotedSubscriptionSubscriptionItemsItemItemType;
  /** The quantity of the item purchased
   */
  quantity?: number;
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** The price/per unit price of the item. When not provided, [the value set](/docs/api/item_prices?prod_cat_ver=2#item_price_attributes) for the item price is used. This is only applicable when the `pricing_model` of the item price is `flat_fee` or `per_unit`. Also, it is only allowed when [price overriding](https://www.chargebee.com/docs/price-override.html) is enabled for the site. The value depends on the type of currency. If `changes_scheduled_at` is in the past and a `unit_price` is not passed, then the item price's current unit price is considered even if the item price did not exist on the date as of when the change is scheduled.
   */
  unit_price?: number;
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string;
  /** The total amount for the item as determined from `unit_price`, `free_quantity`, `quantity` and `item_tiers` as applicable. The value depends on the [type of currency](./#handling_currency_units).
   */
  amount?: number;
  /** The decimal representation of the total amount for the item, in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  amount_in_decimal?: string;
  /** The `free_quantity` of the plan-item as [specified](./item_prices?prod_cat_ver=2) for the item price.
   */
  free_quantity?: number;
  /** The `free_quantity_in_decimal` as set for the item price. Returned for quantity-based item prices when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  free_quantity_in_decimal?: string;
  /** The date/time when the trial period of the item ends. Applies to plan-items and----when [enabled](https://www.chargebee.com/docs/2.0/addons-trial.html)----addon-items as well.
   */
  trial_end?: number;
  /** For the plan-item price:  
the value determines the number of billing cycles the subscription runs before canceling automatically. If not provided, then [the value set](./item_prices?prod_cat_ver=2#item_price_attributes) for the plan-item price is used.  

For addon-item prices:  
If [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) are enabled then this is the number of subscription billing cycles for which the addon is included. If not provided, then [the value set under attached addons](./attached_items?prod_cat_ver=2#attached_item_attributes) is used. Further, if that value is not provided, then [the value set for the addon-item price](./item_prices?prod_cat_ver=2#item_price_attributes) is used.
 */
  billing_cycles?: number;
  /** The service period of the item in days from the day of charge.
   */
  service_period_days?: number;
  /** When `charge_on_option` option is set to `on_event`, this parameter specifies the event at which the charge-item is applied to the subscription. This parameter only applies to charge-items. \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_trial_start - the time when the trial period of the subscription begins. \* subscription_creation - the time of creation of the subscription.
   */
  charge_on_event?: QuotedSubscriptionSubscriptionItemsItemChargeOnEvent;
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This parameter only applies to charge-items.
   */
  charge_once?: boolean;
  /** Indicates when the charge-item is to be charged. This parameter only applies to charge-items. \* on_event - The item is charged at the occurrence of the event specified as `charge_on_event`. \* immediately - The item is charged immediately on being added to the subscription.
   */
  charge_on_option?: QuotedSubscriptionSubscriptionItemsItemChargeOnOption;
};

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type QuotedSubscriptionDiscountsItemApplyOn =
  (typeof QuotedSubscriptionDiscountsItemApplyOn)[keyof typeof QuotedSubscriptionDiscountsItemApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionDiscountsItemApplyOn = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* year - A period of 1 calendar year. \* week - A period of 7 days. \* month - A period of 1 calendar month.

 */
export type QuotedSubscriptionDiscountsItemPeriodUnit =
  (typeof QuotedSubscriptionDiscountsItemPeriodUnit)[keyof typeof QuotedSubscriptionDiscountsItemPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionDiscountsItemPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type QuotedSubscriptionDiscountsItemDurationType =
  (typeof QuotedSubscriptionDiscountsItemDurationType)[keyof typeof QuotedSubscriptionDiscountsItemDurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionDiscountsItemDurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The type of discount. Possible value are: \* fixed_amount - The specified amount will be given as discount. \* percentage - The specified percentage will be given as discount.

 */
export type QuotedSubscriptionDiscountsItemType =
  (typeof QuotedSubscriptionDiscountsItemType)[keyof typeof QuotedSubscriptionDiscountsItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionDiscountsItemType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type QuotedSubscriptionDiscountsItem = {
  /** An immutable unique id for the discount. It is always auto-generated.
   */
  id: string;
  /** The name of the discount as it should appear on customer-facing pages and documents such as [invoices](/docs/api/invoices?prod_cat_ver=2) and [hosted pages](/docs/api/hosted_pages?prod_cat_ver=2). This is auto-generated based on the `type`, `amount`, and `currency_code` of the discount. For example, it can be `10% off` or `10$ off`.
   */
  invoice_name?: string;
  /** The type of discount. Possible value are: \* fixed_amount - The specified amount will be given as discount. \* percentage - The specified percentage will be given as discount.
   */
  type: QuotedSubscriptionDiscountsItemType;
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number;
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the discount. This is only applicable when `discount.type` is `fixed_amount`.
   */
  currency_code?: string;
  /** Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
   */
  duration_type: QuotedSubscriptionDiscountsItemDurationType;
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number;
  /** The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* day - A period of 24 hours. \* year - A period of 1 calendar year. \* week - A period of 7 days. \* month - A period of 1 calendar month.
   */
  period_unit?: QuotedSubscriptionDiscountsItemPeriodUnit;
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr: boolean;
  /** The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.
   */
  apply_on: QuotedSubscriptionDiscountsItemApplyOn;
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string;
  /** Timestamp indicating when this discount is created.
   */
  created_at: number;
  /** Specifies till when the limited period discount is applicable. This attribute will be sent in the response only for `limited_period` duration type discount.
   */
  apply_till?: number;
  /** Specifies the number of times the discount has been applied.
   */
  applied_count?: number;
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.  
**Note:**


When the coupon ID contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
 */
  coupon_id: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

export type QuotedSubscriptionCouponsItem = {
  /** Used to uniquely identify the coupon
   */
  coupon_id: string;
};

/**
 * Applicable only when `operation_type` of the quote is `change_subscription`. When the quote is converted, this attribute determines the date/time as of when the subscription change is to be carried out. \* end_of_term - The change is scheduled to be carried out at the end of the billing cycle of the subscription. \* specific_date - The change is carried out as of `changes_scheduled_at`. \* immediately - The change is carried out immediately upon quote conversion.

 */
export type QuotedSubscriptionChangeOption =
  (typeof QuotedSubscriptionChangeOption)[keyof typeof QuotedSubscriptionChangeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedSubscriptionChangeOption = {
  end_of_term: "end_of_term",
  specific_date: "specific_date",
  immediately: "immediately",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type QuotedChargeDiscountsItemApplyOn =
  (typeof QuotedChargeDiscountsItemApplyOn)[keyof typeof QuotedChargeDiscountsItemApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedChargeDiscountsItemApplyOn = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * The type of discount. Possible value are: \* percentage - The specified percentage will be given as discount. \* fixed_amount - The specified amount will be given as discount.

 */
export type QuotedChargeDiscountsItemType =
  (typeof QuotedChargeDiscountsItemType)[keyof typeof QuotedChargeDiscountsItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedChargeDiscountsItemType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type QuotedChargeDiscountsItem = {
  /** An immutable unique id for the discount. It is always auto-generated.
   */
  id: string;
  /** The name of the discount as it should appear on customer-facing pages and documents such as [invoices](/docs/api/invoices?prod_cat_ver=2) and [hosted pages](/docs/api/hosted_pages?prod_cat_ver=2). This is auto-generated based on the `type`, `amount`, and `currency_code` of the discount. For example, it can be `10% off` or `10$ off`.
   */
  invoice_name?: string;
  /** The type of discount. Possible value are: \* percentage - The specified percentage will be given as discount. \* fixed_amount - The specified amount will be given as discount.
   */
  type: QuotedChargeDiscountsItemType;
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number;
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the discount. This is only applicable when `discount.type` is `fixed_amount`.
   */
  currency_code?: string;
  /** The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.
   */
  apply_on: QuotedChargeDiscountsItemApplyOn;
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string;
  /** Timestamp indicating when this discount is created.
   */
  created_at: number;
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.  
**Note:**


When the coupon ID contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
 */
  coupon_id: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

export type QuotedChargeCouponsItem = {
  /** Used to uniquely identify the coupon
   */
  coupon_id: string;
};

export type QuotedChargeItemTiersItem = {
  /** The id of the item price to which this tier belongs.
   */
  item_price_id: string;
  /** The lowest value in the quantity tier.
   */
  starting_unit: number;
  /** The highest value in the quantity tier.
   */
  ending_unit?: number;
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. The total cost for the item price when the `pricing_model` is `stairstep`. The value is in the minor unit of the currency.
   */
  price: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the pricing_model is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for the item. The value is in major units of the currency. Returned when the plan is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

export type QuotedChargeInvoiceItemsItem = {
  /** A unique ID for your system to identify the item price.
   */
  item_price_id: string;
  /** Item price quantity
   */
  quantity?: number;
  /** The decimal representation of the quantity of the item purchased. Can be provided for quantity-based item prices and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** The price or per-unit-price of the item price. By default, it is the [value set](/docs/api/item_prices#item_price_price) for the `item_price`. This is only applicable when the `pricing_model` of the `item_price` is `flat_fee` or `per_unit`. The value depends on the [type of currency](/docs/api/#handling_currency_units).
   */
  unit_price?: number;
  /** The decimal representation of the price or per-unit price of the plan. The value is in major units of the currency. Always returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  unit_price_in_decimal?: string;
  /** Defines service period of the item in days from the day of charge.
   */
  service_period_days?: number;
};

/**
 * Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user \* consumed - Transaction is for an item that is consumed directly \* vendor_use - Transaction is for an item that is subject to vendor use tax

 */
export type QuotedChargeChargesItemAvalaraSaleType =
  (typeof QuotedChargeChargesItemAvalaraSaleType)[keyof typeof QuotedChargeChargesItemAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotedChargeChargesItemAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

export type QuotedChargeChargesItem = {
  /** The amount to be charged. The unit depends on the [type of currency](/docs/api?prod_cat_ver=1#md_disabled).
   */
  amount?: number;
  /** The decimal representation of the amount for the one-time charge. The value is in [major units of the currency](/docs/api#md_enabled). Applicable only when multi-decimal pricing is enabled.
   */
  amount_in_decimal?: string;
  /** Description for this charge
   */
  description?: string;
  /** Specifies the service period of the charge in days. When the quote is converted, the [invoice.line_item.date_from](/docs/api/invoices#invoice_line_items) is set to current date/time and `invoice.line_item.date_to` is set to `service_period_in_days` ahead of `date_from`.
   */
  service_period_in_days?: number;
  /** Indicates the type of sale carried out. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user \* consumed - Transaction is for an item that is consumed directly \* vendor_use - Transaction is for an item that is subject to vendor use tax
   */
  avalara_sale_type?: QuotedChargeChargesItemAvalaraSaleType;
  /** Indicates the type of product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_transaction_type?: number;
  /** Indicates the type of service for the product to be taxed. Values for this field can be taken from Avalara. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  avalara_service_type?: number;
};

/**
 * When the [operation_type](/docs/api/quotes#quote_operation_type) of a `quote` is `onetime_invoice`, the `quoted_charges` resource contains the details of the invoice that is eventually created once the quote is invoiced. It is always returned along with the quote.

 */
export interface QuotedCharge {
  /** Provides details of all the ad-hoc charges [added to the quote](/docs/api/quotes?prod_cat_ver=2#create_a_quote_for_charge_and_charge_items).
   */
  charges?: QuotedChargeChargesItem[];
  /** Details of individual [item prices](/docs/api/item_prices?prod_cat_ver=2) that are part of this subscription
   */
  invoice_items?: QuotedChargeInvoiceItemsItem[];
  /** The pricing details of `subscription_items` which have `pricing_model` as `tiered`, `volume` or `stairstep`. [Learn more](https://www.chargebee.com/docs/plans.html#pricing-models) about pricing models.
   */
  item_tiers?: QuotedChargeItemTiersItem[];
  /** List of coupons for this charge
   */
  coupons?: QuotedChargeCouponsItem[];
  /** List of discounts for the charges in this quote.
   */
  discounts?: QuotedChargeDiscountsItem[];
}

/**
 * The type of tax jurisdiction \* unincorporated - Combined tax of state and county. \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* other - Jurisdictions other than the ones listed above. \* special - Special tax jurisdiction.

 */
export type QuoteLineGroupLineItemTaxesItemTaxJurisType =
  (typeof QuoteLineGroupLineItemTaxesItemTaxJurisType)[keyof typeof QuoteLineGroupLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type QuoteLineGroupLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* unincorporated - Combined tax of state and county. \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* other - Jurisdictions other than the ones listed above. \* special - Special tax jurisdiction.
   */
  tax_juris_type?: QuoteLineGroupLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type QuoteLineGroupTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case.

 */
export type QuoteLineGroupLineItemDiscountsItemDiscountType =
  (typeof QuoteLineGroupLineItemDiscountsItemDiscountType)[keyof typeof QuoteLineGroupLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type QuoteLineGroupLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case.
   */
  discount_type: QuoteLineGroupLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount

 */
export type QuoteLineGroupDiscountsItemDiscountType =
  (typeof QuoteLineGroupDiscountsItemDiscountType)[keyof typeof QuoteLineGroupDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type QuoteLineGroupDiscountsItemEntityType =
  (typeof QuoteLineGroupDiscountsItemEntityType)[keyof typeof QuoteLineGroupDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type QuoteLineGroupDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.
   */
  entity_type: QuoteLineGroupDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount
   */
  discount_type?: QuoteLineGroupDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

export type QuoteLineGroupLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* per_unit - A fixed price per unit quantity. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
   */
  pricing_model?: QuoteLineGroupLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id
   */
  entity_type: QuoteLineGroupLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively
   */
  tax_exempt_reason?: QuoteLineGroupLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The line items of a quote are grouped by charge event. Each of these groups is called a quote line group. A quote would have at least one quote line group. Let's look at an example.  

Consider the following:

* A monthly plan A for $500 per month.
* A non-recurring addon B for $50.

Now consider a quote that is created for 3 billing cycles of the plan with the addon applied immediately. This quote would be associated with a list of quote line groups: one for each charge event as shown below:

#### Quote Line group 1

**Plan A:** $500   
**Addon B:** $50   
**Total:** $550   

#### Quote Line group 2

**Plan A:** $500   
**Total:** $500   

#### Quote Line group 3

**Plan A:** $500   
**Total:** $500   




 */
export interface QuoteLineGroup {
  /** Version of the quote line group.
   */
  version?: number;
  /** Uniquely identifies a quote line group.
   */
  id?: string;
  /** Subtotal in cents.
   */
  sub_total: number;
  /** Total in cents.
   */
  total?: number;
  /** Credits (in cents) applied to this quote line group.
   */
  credits_applied?: number;
  /** Existing outstanding payments (in cents) if any, applied to this quote line group.
   */
  amount_paid?: number;
  /** Amount due in cents
   */
  amount_due?: number;
  /** Describes the time in the subscription lifecycle when the charge is to occur. \* subscription_creation - Subscription Creation \* trial_start - Trial Start \* subscription_renewal - Subscription Renewal \* subscription_change - Subscription Change \* subscription_cancel - Subscription Cancel \* immediate - Immediate
   */
  charge_event?: QuoteLineGroupChargeEvent;
  /** The serial number of the billing cycle of which the quote line group is a part.
   */
  billing_cycle_number?: number;
  /** The list of items in this quote line group.
   */
  line_items?: QuoteLineGroupLineItemsItem[];
  /** The list of discounts applied to this quote line group.
   */
  discounts?: QuoteLineGroupDiscountsItem[];
  /** The list of discount(s) applied for line items in this quote line group.
   */
  line_item_discounts?: QuoteLineGroupLineItemDiscountsItem[];
  /** The list of taxes applied to this quote line group.
   */
  taxes?: QuoteLineGroupTaxesItem[];
  /** The list of taxes applied on line items in this quote line group.
   */
  line_item_taxes?: QuoteLineGroupLineItemTaxesItem[];
}

/**
 * The reason due to which the line item price/amount is exempted from tax. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively

 */
export type QuoteLineGroupLineItemsItemTaxExemptReason =
  (typeof QuoteLineGroupLineItemsItemTaxExemptReason)[keyof typeof QuoteLineGroupLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id

 */
export type QuoteLineGroupLineItemsItemEntityType =
  (typeof QuoteLineGroupLineItemsItemEntityType)[keyof typeof QuoteLineGroupLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* per_unit - A fixed price per unit quantity. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.

 */
export type QuoteLineGroupLineItemsItemPricingModel =
  (typeof QuoteLineGroupLineItemsItemPricingModel)[keyof typeof QuoteLineGroupLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * Describes the time in the subscription lifecycle when the charge is to occur. \* subscription_creation - Subscription Creation \* trial_start - Trial Start \* subscription_renewal - Subscription Renewal \* subscription_change - Subscription Change \* subscription_cancel - Subscription Cancel \* immediate - Immediate

 */
export type QuoteLineGroupChargeEvent =
  (typeof QuoteLineGroupChargeEvent)[keyof typeof QuoteLineGroupChargeEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineGroupChargeEvent = {
  immediate: "immediate",
  subscription_creation: "subscription_creation",
  trial_start: "trial_start",
  subscription_change: "subscription_change",
  subscription_renewal: "subscription_renewal",
  subscription_cancel: "subscription_cancel",
} as const;

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type QuoteBillingAddressValidationStatus =
  (typeof QuoteBillingAddressValidationStatus)[keyof typeof QuoteBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Billing address for the quote.

 */
export type QuoteBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: QuoteBillingAddressValidationStatus;
};

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.

 */
export type QuoteShippingAddressValidationStatus =
  (typeof QuoteShippingAddressValidationStatus)[keyof typeof QuoteShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Shipping address for the quote.

 */
export type QuoteShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully.
   */
  validation_status?: QuoteShippingAddressValidationStatus;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

export type QuoteLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * The type of tax jurisdiction \* unincorporated - Combined tax of state and county. \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* other - Jurisdictions other than the ones listed above. \* special - Special tax jurisdiction.

 */
export type QuoteLineItemTaxesItemTaxJurisType =
  (typeof QuoteLineItemTaxesItemTaxJurisType)[keyof typeof QuoteLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type QuoteLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* unincorporated - Combined tax of state and county. \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* other - Jurisdictions other than the ones listed above. \* special - Special tax jurisdiction.
   */
  tax_juris_type?: QuoteLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type QuoteTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case.

 */
export type QuoteLineItemDiscountsItemDiscountType =
  (typeof QuoteLineItemDiscountsItemDiscountType)[keyof typeof QuoteLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type QuoteLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case.
   */
  discount_type: QuoteLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

/**
 * A quote is an estimate of the invoice with the charges likely to occur when customers buy an item. A quote can be converted to a regular invoice once the customer accepts it.

The line items of a quote are grouped by charge events and are available as a separate [resource](/docs/api/quote_line_groups). This resource can be retrieved using the [List quote line groups](/docs/api/quotes#list_quote_line_groups) endpoint. Note that the first quote line group is available within the quote resource itself and parsing the quote line groups object is not required.

 */
export interface Quote {
  /** The quote number. Acts as a identifier for quote and typically generated sequentially.
   */
  id: string;
  /** The quote name will be used as the pdf name of the quote.
   */
  name?: string;
  /** Purchase Order Number
   */
  po_number?: string;
  /** The identifier of the customer this quote belongs to.
   */
  customer_id: string;
  /** The identifier of the subscription this quote belongs to.
   */
  subscription_id?: string;
  /** The identifier of the invoice generated while converting this quote.
   */
  invoice_id?: string;
  /** Current status of this quote. \* open - Open \* closed - Closed \* declined - Declined. \* invoiced - Invoiced \* accepted - Accepted.
   */
  status: QuoteStatus;
  /** Operation Type \* onetime_invoice - onetime_invoice \* change_subscription - change_subscription \* create_subscription_for_customer - create_subscription_for_customer
   */
  operation_type: QuoteOperationType;
  /** VAT/ Tax registration number of the customer. [Learn more](https://www.chargebee.com/docs/tax.html#capture-tax-registration-number)
   */
  vat_number?: string;
  /** The price type of the quote. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: QuotePriceType;
  /** Quote will be valid till this date. After this date quote will be marked as closed.
   */
  valid_till: number;
  /** Creation date of the quote. Typically this is the date on which quote is generated.
   */
  date: number;
  /** Total contract value. Applicable when multi billing cycle quote is enabled.
   */
  total_payable?: number;
  /** Charge on acceptance. Applicable when multi billing cycle quote is enabled.
   */
  charge_on_acceptance?: number;
  /** Subtotal (in cents) of the first quote line group.
   */
  sub_total: number;
  /** Total (in cents) of the first quote line group.
   */
  total?: number;
  /** Credits applied (in cents) for the first quote line group.
   */
  credits_applied?: number;
  /** Existing outstanding payments (in cents) if any, applied to the first quote line group.
   */
  amount_paid?: number;
  /** Amount due (in cents) for the first quote line group.
   */
  amount_due?: number;
  /** Version of the quote.
   */
  version?: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this quote was last updated.
   */
  updated_at?: number;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** Specifies the customer's category for the Goods and Services Tax (GST). This field is returned only if you've configured GST for the India region.
   */
  tax_category?: string;
  /** The currency code (ISO 4217 format) of the quote.
   */
  currency_code: string;
  /** List of notes associated with this quotes.
   */
  notes?: unknown[];
  /** Specifies the contract term's start date.
   */
  contract_term_start?: number;
  /** Specifies the contract term's end date. It indicates when the action set in `action_at_term_end` gets triggered.
   */
  contract_term_end?: number;
  /** Specifies the charge to be applied for terminating the contract term.
   */
  contract_term_termination_fee?: number;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this quote.
   */
  business_entity_id: string;
  /** The list of line items for this quote.
   */
  line_items?: QuoteLineItemsItem[];
  /** The list of all deductions applied to the quote.
   */
  discounts?: QuoteDiscountsItem[];
  /** The list of deductions applied for each line item of this quote.
   */
  line_item_discounts?: QuoteLineItemDiscountsItem[];
  /** The list of taxes applicable for this quote.
   */
  taxes?: QuoteTaxesItem[];
  /** The list of taxes applied on the line items of this quote.
   */
  line_item_taxes?: QuoteLineItemTaxesItem[];
  /** The list of tiers applicable for the various line items in this quote.
   */
  line_item_tiers?: QuoteLineItemTiersItem[];
  /** Shipping address for the quote.
   */
  shipping_address?: QuoteShippingAddress;
  /** Billing address for the quote.
   */
  billing_address?: QuoteBillingAddress;
}

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount

 */
export type QuoteDiscountsItemDiscountType =
  (typeof QuoteDiscountsItemDiscountType)[keyof typeof QuoteDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type QuoteDiscountsItemEntityType =
  (typeof QuoteDiscountsItemEntityType)[keyof typeof QuoteDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type QuoteDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.
   */
  entity_type: QuoteDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount
   */
  discount_type?: QuoteDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively

 */
export type QuoteLineItemsItemTaxExemptReason =
  (typeof QuoteLineItemsItemTaxExemptReason)[keyof typeof QuoteLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id

 */
export type QuoteLineItemsItemEntityType =
  (typeof QuoteLineItemsItemEntityType)[keyof typeof QuoteLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* per_unit - A fixed price per unit quantity. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.

 */
export type QuoteLineItemsItemPricingModel =
  (typeof QuoteLineItemsItemPricingModel)[keyof typeof QuoteLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type QuoteLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* per_unit - A fixed price per unit quantity. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
   */
  pricing_model?: QuoteLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id
   */
  entity_type: QuoteLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively
   */
  tax_exempt_reason?: QuoteLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The price type of the quote. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type QuotePriceType =
  (typeof QuotePriceType)[keyof typeof QuotePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuotePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * Operation Type \* onetime_invoice - onetime_invoice \* change_subscription - change_subscription \* create_subscription_for_customer - create_subscription_for_customer

 */
export type QuoteOperationType =
  (typeof QuoteOperationType)[keyof typeof QuoteOperationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteOperationType = {
  create_subscription_for_customer: "create_subscription_for_customer",
  change_subscription: "change_subscription",
  onetime_invoice: "onetime_invoice",
} as const;

/**
 * Current status of this quote. \* open - Open \* closed - Closed \* declined - Declined. \* invoiced - Invoiced \* accepted - Accepted.

 */
export type QuoteStatus = (typeof QuoteStatus)[keyof typeof QuoteStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuoteStatus = {
  open: "open",
  accepted: "accepted",
  declined: "declined",
  invoiced: "invoiced",
  closed: "closed",
} as const;

/**
 * The `purchase` resource represents a collection of [item prices](item_prices) bought together. A purchase can contain one or more of the following:

* subscriptions (a [subscription](subscriptions) resource consists of item prices such that at least one of the item prices belongs to an [item](items) of `type` `plan`.)
* group of one-time charges (aka [charge item prices](item_prices#types))

**Prerequisite**

Purchases must be enabled explicitly for the site. If not already enabled, contact [Chargebee Support](https://support.chargebee.com/). Purchases require the following features to work so they're automatically enabled along with them:

* [Consolidated Invoicing](https://www.chargebee.com/docs/2.0/consolidated-invoicing.html)
* [Manual discounts](https://www.chargebee.com/docs/2.0/subscription-manual-discounts.html)
* [Multiple coupon support](https://www.chargebee.com/docs/2.0/coupons.html#applying-multiple-coupons-to-a-subscription)
* [Multi-decimal pricing and quantities](https://www.chargebee.com/docs/2.0/multi-decimal-support.html)  
**Note**

Once created, Chargebee never modifies a `purchase` resource; it cannot be modified via API either.

 */
export interface Purchase {
  /** The unique identifier of the purchase resource. This is always autogenerated.
   */
  id?: string;
  /** The unique identifier of the [customer](https://apidocs.chargebee.com/docs/api/customers) that made this purchase.
   */
  customer_id: string;
  /** The time at which this purchase was created.
   */
  created_at?: number;
  /** The time at which the purchase was modified.
   */
  modified_at?: number;
  /** The unique identifiers of the [subscriptions](https://apidocs.chargebee.com/docs/api/subscriptions) that are created as part of this purchase. These IDs remain even when the associated subscriptions have been deleted.
   */
  subscription_ids?: string[];
  /** The unique identifier of the [invoice(s)](invoices) created immediately as part of this purchase.
   */
  invoice_ids?: string[];
}

export type ProrationType = (typeof ProrationType)[keyof typeof ProrationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProrationType = {
  full_term: "full_term",
  partial_term: "partial_term",
  none: "none",
} as const;

/**
 * Type of promotional credits provided to customer \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits \* general - General

 */
export type PromotionalCreditCreditType =
  (typeof PromotionalCreditCreditType)[keyof typeof PromotionalCreditCreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PromotionalCreditCreditType = {
  loyalty_credits: "loyalty_credits",
  referral_rewards: "referral_rewards",
  general: "general",
} as const;

/**
 * Type of promotional credits \* decrement - Decrement \* increment - Increment

 */
export type PromotionalCreditType =
  (typeof PromotionalCreditType)[keyof typeof PromotionalCreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PromotionalCreditType = {
  increment: "increment",
  decrement: "decrement",
} as const;

/**
 * These credits can be provided to the customer for promoting the product. You can use Promotional Credits to offer referral bonuses, cash back offers and more. When a customer has promotional credits, it is automatically applied whenever a new invoice is created.

 */
export interface PromotionalCredit {
  /** Unique reference ID provided for promotional credits
   */
  id: string;
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Type of promotional credits \* decrement - Decrement \* increment - Increment
   */
  type: PromotionalCreditType;
  /** Amount in decimal
   */
  amount_in_decimal?: string;
  /** Promotional credits amount
   */
  amount: number;
  /** The currency code (ISO 4217 format) for promotional credit
   */
  currency_code: string;
  /** Detailed description of this promotional credits.
   */
  description: string;
  /** Type of promotional credits provided to customer \* referral_rewards - Referral \* loyalty_credits - Loyalty Credits \* general - General
   */
  credit_type: PromotionalCreditCreditType;
  /** Describes why promotional credits were provided
   */
  reference?: string;
  /** Closing balance as on end date.
   */
  closing_balance: number;
  /** The user who added/deducted the credit. If created via API, this contains the name given for the API key used.
   */
  done_by?: string;
  /** Timestamp indicating when this promotional credit resource is created.
   */
  created_at: number;
}

/**
 * Type of options. \* select - select

 */
export type ProductOptionsItemType =
  (typeof ProductOptionsItemType)[keyof typeof ProductOptionsItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductOptionsItemType = {
  select: "select",
} as const;

export type ProductOptionsItem = {
  /** The identifier of an option.
   */
  id?: string;
  /** Name of the option.
   */
  name?: string;
  /** List of values for the option.
   */
  values?: unknown[];
  /** Default value for the option.
   */
  default_value?: string;
  /** Type of options. \* select - select
   */
  type?: ProductOptionsItemType;
};

/**
 * The meta description of the product for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).

 */
export type ProductMetadata = { [key: string]: any };

/**
 * Status of the product. \* active - The active products are visible on the storefront, subscription, or checkout. \* inactive - The inactive products are not visible on the storefront, subscription, or checkout.

 */
export type ProductStatus = (typeof ProductStatus)[keyof typeof ProductStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductStatus = {
  active: "active",
  inactive: "inactive",
} as const;

/**
 * Products are offerings that can be sold to customers either as one-time purchases or as recurring subscriptions. These products could include physical items, digital goods, or services that are delivered over a period of time. Chargebee's API allows developers to interact with and manipulate product data, enabling businesses to seamlessly integrate their product offerings into their subscription management workflows.

 */
export interface Product {
  /** The immutable unique identifier of the product.
   */
  id: string;
  /** A unique display name for the product. This is visible only in Chargebee.
   */
  name: string;
  /** This is a unique name appears for each product to the end user.
   */
  external_name: string;
  /** Description of the product.
   */
  description?: string;
  /** Whether the product has variants or not.
   */
  has_variant: boolean;
  /** Status of the product. \* active - The active products are visible on the storefront, subscription, or checkout. \* inactive - The inactive products are not visible on the storefront, subscription, or checkout.
   */
  status: ProductStatus;
  /** Whether a product is shippable or not.
   */
  shippable: boolean;
  /** A unique identifier code a seller assigns to each product or item. Retailers and merchants use SKUs to keep track of inventory and sales data and help organize products within a store or warehouse. SKUs can include a combination of letters, numbers, and symbols and can vary in length depending on the seller's needs.
   */
  sku?: string;
  /** Timestamp when the product was created.
   */
  created_at: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this product was last updated
   */
  updated_at?: number;
  /** Determines if the product is deleted or not. If the value is `true` then the product has been deleted else it exists. Once the product is deleted, you can reuse the product `id` and `name`.
   */
  deleted: boolean;
  /** The meta description of the product for key-value pair. \[Learn more\](https://apidocs.chargebee.com/docs/api/advanced-features#metadata).
   */
  metadata?: ProductMetadata;
  /** Array of option list which helps in the product variant creation.
   */
  options?: ProductOptionsItem[];
}

export type PricingModel = (typeof PricingModel)[keyof typeof PricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type PriceType = (typeof PriceType)[keyof typeof PriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

export type PortalSessionLinkedCustomersItem = {
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: string;
  /** The customer has billing address.
   */
  has_billing_address: boolean;
  /** The customer has payment method.
   */
  has_payment_method: boolean;
  /** The customer has atleast one active subscription.
   */
  has_active_subscription: boolean;
};

/**
 * Indicates the current status of the portal session. \* created - Indicates that the portal session is just created and not yet accessed by the user. \* logged_out - Indicates that the portal session is logged out either by user or via API. \* not_yet_activated - Indicates that the portal session is created and not yet activated for the customer to allow access to your website. This is applicable when you use Chargebee's authentication for your website \* activated - Indicates that the portal session is activated for the customer to allow access to your website. This is applicable when you use Chargebee's authentication for your website. \* logged_in - Indicates that the portal session URL has been accessed by the user and the session is active.

 */
export type PortalSessionStatus =
  (typeof PortalSessionStatus)[keyof typeof PortalSessionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortalSessionStatus = {
  created: "created",
  logged_in: "logged_in",
  logged_out: "logged_out",
  not_yet_activated: "not_yet_activated",
  activated: "activated",
} as const;

/**
 * Customer Portal lets your customers to manage their account and billing themselves. Chargebee supports Single Sign-on (SSO) to access the customer portal. If you already have your own authentication for your website, it allows your authenticated customers to access their portal without having to login again.

**Note:** You can instead allow your customers to access the portal via login page provided by Chargebee. [Read more](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html).

Please follow the below steps for supporting portal access via SSO:

1. To enable the "Allow access to customer portal via API", click **Settings** \> **Configure Chargebee** \> **Customer Facing Essentials** \> **Checkout and Self Serve Portal** \> **Portal**.
2. Provide a link in your website/application which your authenticated customers can use to access the portal (For example, {your_website_url}/portal_link).
3. Handle the link request in your server code and create a portal session for the customer by calling Chargebee's "Create a portal session" API
4. Forward the user to the access URL present in the "Portal Session" resource returned by the above API call.

 */
export interface PortalSession {
  /** Unique identifier for the portal session.
   */
  id: string;
  /** Unique pre-authenticated portal session token to access customer portal directly.
   */
  token: string;
  /** Unique URL for accessing the customer portal. Once accessed, this cannot be reused.
   */
  access_url: string;
  /** URL to redirect when the user logs out from the portal.
   */
  redirect_url?: string;
  /** Indicates the current status of the portal session. \* created - Indicates that the portal session is just created and not yet accessed by the user. \* logged_out - Indicates that the portal session is logged out either by user or via API. \* not_yet_activated - Indicates that the portal session is created and not yet activated for the customer to allow access to your website. This is applicable when you use Chargebee's authentication for your website \* activated - Indicates that the portal session is activated for the customer to allow access to your website. This is applicable when you use Chargebee's authentication for your website. \* logged_in - Indicates that the portal session URL has been accessed by the user and the session is active.
   */
  status: PortalSessionStatus;
  /** Timestamp indicating when this portal session was generated.
   */
  created_at: number;
  /** Timestamp indicating when the access URL will expire. Once expired, the URL cannot be used to login into the portal.
   */
  expires_at?: number;
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Timestamp indicating when this portal session URL was accessed by the user.
   */
  login_at?: number;
  /** Timestamp indicating when this portal session was logged out either by user or via API.
   */
  logout_at?: number;
  /** IP Address from which the portal session URL was accessed.
   */
  login_ipaddress?: string;
  /** IP Address from which the portal session was logged out either by user or via API.
   */
  logout_ipaddress?: string;
  /** The list of customers for this session
   */
  linked_customers?: PortalSessionLinkedCustomersItem[];
}

export type PeriodUnit = (typeof PeriodUnit)[keyof typeof PeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

export type PaymentVoucherType =
  (typeof PaymentVoucherType)[keyof typeof PaymentVoucherType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentVoucherType = {
  boleto: "boleto",
} as const;

export type PaymentVoucherLinkedInvoicesItem = {
  /** Identifier for the invoice.
   */
  invoice_id: string;
  /** Uniquely identifies the payment voucher.
   */
  txn_id: string;
  /** Timestamp at which the transaction is applied.
   */
  applied_at: number;
};

/**
 * The gateway through which this payment voucher was created.  
**Note** : Note: Currently, `stripe` is the only supported gateway through which you can create the payment voucher. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* bank_of_america - Bank of America Gateway \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.

 */
export type PaymentVoucherGateway =
  (typeof PaymentVoucherGateway)[keyof typeof PaymentVoucherGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentVoucherGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Current status of the payment voucher. \* consumed - Consumed for a transaction and cannot be used again \* expired - Expired before consumed and cannot be used again \* active - Active and ready to be consumed \* failure - Failed to create the voucher due to gateway rejection

 */
export type PaymentVoucherStatus =
  (typeof PaymentVoucherStatus)[keyof typeof PaymentVoucherStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentVoucherStatus = {
  active: "active",
  consumed: "consumed",
  expired: "expired",
  failure: "failure",
} as const;

/**
 * Type of the payment source. \* boleto - Boleto

 */
export type PaymentVoucherPaymentVoucherType =
  (typeof PaymentVoucherPaymentVoucherType)[keyof typeof PaymentVoucherPaymentVoucherType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentVoucherPaymentVoucherType = {
  boleto: "boleto",
} as const;

/**
 * The Payment Voucher resource represents a voucher that has been created for a customer to initiate voucher-based payment. This resource contains relevant details such as the voucher URL, the amount of the voucher, the status of the voucher, and more. Currently, the only supported voucher-based payment source is Boleto. Boleto is a payment method in Brazil that is regulated by the Central Bank of Brazil and is considered an official form of payment. This is also a popular voucher-based payment method in Brazil.  
**Note:** This resource can be extended in the future to support other types of payment sources for vouchers.

 */
export interface PaymentVoucher {
  /** Uniquely identifies the payment voucher.
   */
  id: string;
  /** The id with which this voucher is referred in gateway.
   */
  id_at_gateway?: string;
  /** Type of the payment source. \* boleto - Boleto
   */
  payment_voucher_type: PaymentVoucherPaymentVoucherType;
  /** Timestamp indicating when the Voucher will expire if left unconsumed.
   */
  expires_at?: number;
  /** Current status of the payment voucher. \* consumed - Consumed for a transaction and cannot be used again \* expired - Expired before consumed and cannot be used again \* active - Active and ready to be consumed \* failure - Failed to create the voucher due to gateway rejection
   */
  status?: PaymentVoucherStatus;
  /** Identifier of the subscription for which this payment voucher is made.
   */
  subscription_id?: string;
  /** The currency code (ISO 4217 format) for the voucher.
   */
  currency_code: string;
  /** Amount for this payment voucher.
   */
  amount?: number;
  /** The gateway account used for this voucher
   */
  gateway_account_id?: string;
  /** Identifier of the payment source for which this payment voucher is created
   */
  payment_source_id?: string;
  /** The gateway through which this payment voucher was created.
   **Note** : Note: Currently, `stripe` is the only supported gateway through which you can create the payment voucher. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* amazon_payments - Amazon Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* worldpay - WorldPay is a payment gateway \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* stripe - Stripe is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* moneris - Moneris is a payment gateway. \* bank_of_america - Bank of America Gateway \* chargebee - Chargebee test gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* cybersource - CyberSource is a payment gateway.
   */
  gateway: PaymentVoucherGateway;
  /** Payload from the gateway response with voucher details
   */
  payload?: string;
  /** Error code received from the payment gateway on failure.
   */
  error_code?: string;
  /** Error message received from the payment gateway on failure.
   */
  error_text?: string;
  /** Chargebee Hosted Page url for payment voucher
   */
  url?: string;
  /** Indicates when this payment voucher occurred date.
   */
  date?: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this voucher was last updated.
   */
  updated_at?: number;
  /** The unique identifier of the customer.
   */
  customer_id: string;
  /** Invoices related to the generated voucher
   */
  linked_invoices?: PaymentVoucherLinkedInvoicesItem[];
}

export type PaymentSourceMandatesItem = {
  /** A unique mandate identifier used for recurring payments.
   */
  id: string;
  /** Chargebee's subscription id used to find the mapping between the payment source and the Subscription.
   */
  subscription_id: string;
  /** Timestamp indicating when the mandate is created
   */
  created_at: number;
};

export type PaymentSourceVenmo = {
  user_name?: string;
};

/**
 * PayPal Express Checkout details associated with this payment source.

 */
export type PaymentSourcePaypal = {
  /** Email address associated with PayPal Express Checkout
   */
  email?: string;
  /** Billing agreement id
   */
  agreement_id?: string;
};

/**
 * Represents the payment method that allows you to make payments directly using a bank account.

 */
export type PaymentSourceUpi = {
  /** A unique identifier mapped with an individuals bank account to help UPI track the account.
   */
  vpa?: string;
};

/**
 * Amazon payments details associated with this payment source.

 */
export type PaymentSourceAmazonPayment = {
  /** Email address associated with Amazon payment account
   */
  email?: string;
  /** Billing agreement id
   */
  agreement_id?: string;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type PaymentSourceBillingAddressValidationStatus =
  (typeof PaymentSourceBillingAddressValidationStatus)[keyof typeof PaymentSourceBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Billing address for the payment source.

 */
export type PaymentSourceBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://i18napis.appspot.com/address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: PaymentSourceBillingAddressValidationStatus;
};

/**
 * Boleto payment source details of the customer

 */
export type PaymentSourceBoleto = {
  /** Last four digits of unique id for voucher payment source ex: tax_id
   */
  last4: string;
  /** Customer first name as per voucher payment source.
   */
  first_name?: string;
  /** Customer last name as per voucher payment source.
   */
  last_name?: string;
  /** Email address associated Customer's voucher payment source.
   */
  email?: string;
};

/**
 * **Updates**   
This API obsoletes the [Cards API](/docs/api/cards) in Chargebee.

Represents the payment source for the customer. Specific types of payment source (Card, Direct Debit, Paypal Express Checkout, etc.) is defined as sub-resource in the response object. You can find the list of supported payment sources and the expected input parameters [here](/docs/api/payment_parameters). See [Payment source attributes](/docs/api/payment_sources#payment_source_attributes) for a descriptive list of attributes and payment source types.

 */
export interface PaymentSource {
  /** Identifier of the payment source
   */
  id: string;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this payment source resource was last updated.
   */
  updated_at?: number;
  /** Timestamp indicating when this payment source resource is created.
   */
  created_at: number;
  /** Identifier of the customer with whom this payment source is associated.
   */
  customer_id: string;
  /** Type of payment source \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* unionpay - Payments made via UnionPay. \* google_pay - Payments made via Google Pay. \* dotpay - Payments made via Dotpay. \* giropay - Payments made via giropay. \* alipay - Payments made via Alipay. \* sofort - Payments made via Sofort. \* wechat_pay - Payments made via WeChat Pay. \* netbanking_emandates - Netbanking (eMandates) Payments. \* bancontact - Payments made via Bancontact Card. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* amazon_payments - Payments made via Amazon Payments. \* generic - Payments made via Generic Payment Method. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* upi - UPI Payments. \* apple_pay - Payments made via Apple Pay.
   */
  type: PaymentSourceType;
  /** The reference id. In the case of Amazon and PayPal this will be the 'billing agreement id'. For GoCardless direct debit this will be 'mandate id'. In the case of card payments this will be the identifier provided by the gateway/card vault for the specific payment method resource.
   **Note:** This is not the one time temporary token provided by gateways like Stripe.
   */
  reference_id: string;
  /** Current status of the payment source. \* valid - A payment source that is valid and active. \* expiring - A payment source that is expiring (like card's status based on its expiry date). \* invalid - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* pending_verification - The payment source needs to be verified \* expired - A payment source that has expired
   */
  status: PaymentSourceStatus;
  /** Name of the gateway this payment source is stored with. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* worldpay - WorldPay is a payment gateway \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* stripe - Stripe is a payment gateway. \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* cybersource - CyberSource is a payment gateway. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* amazon_payments - Amazon Payments is a payment service provider. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* vantiv - Vantiv is a payment gateway. \* bank_of_america - Bank of America Gateway \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway
   */
  gateway: PaymentSourceGateway;
  /** The gateway account to which this payment source is stored with.
   */
  gateway_account_id?: string;
  /** The IP address of the customer. Used primarily for referral integration and EU VAT validation.
   */
  ip_address?: string;
  /** [two-letter(alpha2)](https://www.iso.org/iso-3166-country-codes.html) ISO country code.
   */
  issuing_country?: string;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this `payment_source`. This is always the same as the business entity of the [customer](/docs/api/payment_sources?prod_cat_ver=2#payment_source_customer_id).
   */
  business_entity_id?: string;
  /** Card details associated with this payment source.
   */
  card?: PaymentSourceCard;
  /** Bank account details the direct debit or ACH or NetBanking agreement/mandate created with this payment source.
   */
  bank_account?: PaymentSourceBankAccount;
  /** Boleto payment source details of the customer
   */
  boleto?: PaymentSourceBoleto;
  /** Billing address for the payment source.
   */
  billing_address?: PaymentSourceBillingAddress;
  /** Amazon payments details associated with this payment source.
   */
  amazon_payment?: PaymentSourceAmazonPayment;
  /** Represents the payment method that allows you to make payments directly using a bank account.
   */
  upi?: PaymentSourceUpi;
  /** PayPal Express Checkout details associated with this payment source.
   */
  paypal?: PaymentSourcePaypal;
  venmo?: PaymentSourceVenmo;
  /** Mandate details associated with the payment source.
   */
  mandates?: PaymentSourceMandatesItem[];
}

/**
 * For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.

 */
export type PaymentSourceBankAccountAccountHolderType =
  (typeof PaymentSourceBankAccountAccountHolderType)[keyof typeof PaymentSourceBankAccountAccountHolderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceBankAccountAccountHolderType = {
  individual: "individual",
  company: "company",
} as const;

/**
 * For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.

 */
export type PaymentSourceBankAccountEcheckType =
  (typeof PaymentSourceBankAccountEcheckType)[keyof typeof PaymentSourceBankAccountEcheckType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceBankAccountEcheckType = {
  web: "web",
  ppd: "ppd",
  ccd: "ccd",
} as const;

/**
 * Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* checking - Checking Account \* business_checking - Business Checking Account \* savings - Savings Account \* current - Current Account

 */
export type PaymentSourceBankAccountAccountType =
  (typeof PaymentSourceBankAccountAccountType)[keyof typeof PaymentSourceBankAccountAccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceBankAccountAccountType = {
  checking: "checking",
  savings: "savings",
  business_checking: "business_checking",
  current: "current",
} as const;

/**
 * Bank account's scheme to which the mandate and associated payments are submitted. \* becs_nz - The Bulk Electronic Clearing System (BECS) is a Direct Debit scheme and followed in New-Zealand for Direct Debit system. \* bacs - Automated payments are at the very centre of the UK's financial system, providing an essential service for both consumers and organisations. Bacs is the company which runs Direct Debit in the UK. \* becs - The Bulk Electronic Clearing System (BECS) is a Direct Debit scheme and followed in Australia for Direct Debit system. \* pad - Pre-Authorized Debit (PAD) is the scheme used for collecting Direct Debit payments from customers in Canada. \* ach - US Bank Account \* not_applicable - not_applicable \* sepa_core - SEPA Direct Debit is a Europe-wide Direct Debit system that allows merchants to collect Euro-denominated payments. \* autogiro - Bg Autogiro is a Direct Debit scheme for collecting Krona-denominated payments from a bank account in Sweden.

 */
export type PaymentSourceBankAccountDirectDebitScheme =
  (typeof PaymentSourceBankAccountDirectDebitScheme)[keyof typeof PaymentSourceBankAccountDirectDebitScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceBankAccountDirectDebitScheme = {
  ach: "ach",
  bacs: "bacs",
  sepa_core: "sepa_core",
  autogiro: "autogiro",
  becs: "becs",
  becs_nz: "becs_nz",
  pad: "pad",
  not_applicable: "not_applicable",
} as const;

/**
 * Bank account details the direct debit or ACH or NetBanking agreement/mandate created with this payment source.

 */
export type PaymentSourceBankAccount = {
  /** Last four digits of the bank account number
   */
  last4: string;
  /** Account holder's name as per bank account.
   */
  name_on_account?: string;
  /** Account holder's first name as per bank account.
   */
  first_name?: string;
  /** Account holder's last name as per bank account.
   */
  last_name?: string;
  /** Bank account's scheme to which the mandate and associated payments are submitted. \* becs_nz - The Bulk Electronic Clearing System (BECS) is a Direct Debit scheme and followed in New-Zealand for Direct Debit system. \* bacs - Automated payments are at the very centre of the UK's financial system, providing an essential service for both consumers and organisations. Bacs is the company which runs Direct Debit in the UK. \* becs - The Bulk Electronic Clearing System (BECS) is a Direct Debit scheme and followed in Australia for Direct Debit system. \* pad - Pre-Authorized Debit (PAD) is the scheme used for collecting Direct Debit payments from customers in Canada. \* ach - US Bank Account \* not_applicable - not_applicable \* sepa_core - SEPA Direct Debit is a Europe-wide Direct Debit system that allows merchants to collect Euro-denominated payments. \* autogiro - Bg Autogiro is a Direct Debit scheme for collecting Krona-denominated payments from a bank account in Sweden.
   */
  direct_debit_scheme?: PaymentSourceBankAccountDirectDebitScheme;
  /** Name of account holder's bank.
   */
  bank_name?: string;
  /** Mandate Id. Applicable for SEPA, BACS, Autogiro, and BECS.
   */
  mandate_id?: string;
  /** Represents the account type used to create a payment source. Available for [Authorize.net](https://www.authorize.net/) ACH and Razorpay NetBanking users only. If not passed, account type is taken as null. \* checking - Checking Account \* business_checking - Business Checking Account \* savings - Savings Account \* current - Current Account
   */
  account_type?: PaymentSourceBankAccountAccountType;
  /** For Authorize.net ACH users only. Indicates the type of eCheck. \* ppd - Payment Authorization is prearranged between the customer and the merchant. \* web - Payment Authorization obtained from the customer via the internet. \* ccd - Payment Authorization agreement from the corporate customer is required. Applicable for business_checking account_type.
   */
  echeck_type?: PaymentSourceBankAccountEcheckType;
  /** For Stripe ACH users only. Indicates the account holder type. \* company - Company Account. \* individual - Individual Account.
   */
  account_holder_type?: PaymentSourceBankAccountAccountHolderType;
  /** Account holder's email address. If not passed, details from customer details will be considered. All Direct Debit compliant emails will be sent to this email address.
   */
  email?: string;
};

/**
 * Card Funding type \* not_known - An unknown card. \* debit - A debit card. \* credit - A credit card. \* prepaid - A prepaid card. \* not_applicable - Used for ACH. Not applicable for cards

 */
export type PaymentSourceCardFundingType =
  (typeof PaymentSourceCardFundingType)[keyof typeof PaymentSourceCardFundingType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceCardFundingType = {
  credit: "credit",
  debit: "debit",
  prepaid: "prepaid",
  not_known: "not_known",
  not_applicable: "not_applicable",
} as const;

/**
 * Card brand \* american_express - An American Express card. \* visa - A Visa card. \* not_applicable - Used for offline entries in transactions. Not applicable for cards \* mastercard - A MasterCard. \* jcb - A JCB card. \* other - Card belonging to types other than those listed above. \* bancontact - A Bancontact card. \* discover - A Discover card. \* diners_club - A Diner's Club card.

 */
export type PaymentSourceCardBrand =
  (typeof PaymentSourceCardBrand)[keyof typeof PaymentSourceCardBrand];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceCardBrand = {
  visa: "visa",
  mastercard: "mastercard",
  american_express: "american_express",
  discover: "discover",
  jcb: "jcb",
  diners_club: "diners_club",
  other: "other",
  bancontact: "bancontact",
  not_applicable: "not_applicable",
} as const;

/**
 * Card details associated with this payment source.

 */
export type PaymentSourceCard = {
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The Issuer Identification Number, i.e. the first six digits of the card number
   */
  iin: string;
  /** Last four digits of the card number
   */
  last4: string;
  /** Card brand \* american_express - An American Express card. \* visa - A Visa card. \* not_applicable - Used for offline entries in transactions. Not applicable for cards \* mastercard - A MasterCard. \* jcb - A JCB card. \* other - Card belonging to types other than those listed above. \* bancontact - A Bancontact card. \* discover - A Discover card. \* diners_club - A Diner's Club card.
   */
  brand: PaymentSourceCardBrand;
  /** Card Funding type \* not_known - An unknown card. \* debit - A debit card. \* credit - A credit card. \* prepaid - A prepaid card. \* not_applicable - Used for ACH. Not applicable for cards
   */
  funding_type: PaymentSourceCardFundingType;
  /** Card expiry month.
   */
  expiry_month: number;
  /** Card expiry year.
   */
  expiry_year: number;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name.
   */
  billing_state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** Masked credit card number that is safe to show.
   */
  masked_number?: string;
};

/**
 * Name of the gateway this payment source is stored with. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* worldpay - WorldPay is a payment gateway \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* stripe - Stripe is a payment gateway. \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* cybersource - CyberSource is a payment gateway. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* amazon_payments - Amazon Payments is a payment service provider. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* vantiv - Vantiv is a payment gateway. \* bank_of_america - Bank of America Gateway \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway

 */
export type PaymentSourceGateway =
  (typeof PaymentSourceGateway)[keyof typeof PaymentSourceGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Current status of the payment source. \* valid - A payment source that is valid and active. \* expiring - A payment source that is expiring (like card's status based on its expiry date). \* invalid - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* pending_verification - The payment source needs to be verified \* expired - A payment source that has expired

 */
export type PaymentSourceStatus =
  (typeof PaymentSourceStatus)[keyof typeof PaymentSourceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceStatus = {
  valid: "valid",
  expiring: "expiring",
  expired: "expired",
  invalid: "invalid",
  pending_verification: "pending_verification",
} as const;

/**
 * Type of payment source \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* unionpay - Payments made via UnionPay. \* google_pay - Payments made via Google Pay. \* dotpay - Payments made via Dotpay. \* giropay - Payments made via giropay. \* alipay - Payments made via Alipay. \* sofort - Payments made via Sofort. \* wechat_pay - Payments made via WeChat Pay. \* netbanking_emandates - Netbanking (eMandates) Payments. \* bancontact - Payments made via Bancontact Card. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource. \* amazon_payments - Payments made via Amazon Payments. \* generic - Payments made via Generic Payment Method. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* upi - UPI Payments. \* apple_pay - Payments made via Apple Pay.

 */
export type PaymentSourceType =
  (typeof PaymentSourceType)[keyof typeof PaymentSourceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentSourceType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * This attribute helps `type` field in the API, specifies how to reconcile offline payments, and generate `payment_reference_number` on invoices based on country-specific rules. Setting the `type` field generates `payment_reference_number` for the respective country and includes them on the invoice for correct reconciliation. \* frn - The reference number printed on invoices in Finland is utilized by buyers for payment via bank transfer, facilitating the association of payments with invoices. \* fik - Denmark based number calculated using recursive MOD 10 algorithm. \* kid - The KID number (kundeidentifikasjon) in Norway is an abbreviation for "Customer identification". It is used to associate payments with the customer and invoice. \* ocr - A OCR-based payment, contains an OCR reference, which is used to identify the vendor and the purchase document in connection with a payment. Swedish reference number can contain customer ID and/or invoice number to identify customer and invoice.

 */
export type PaymentReferenceNumberType =
  (typeof PaymentReferenceNumberType)[keyof typeof PaymentReferenceNumberType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentReferenceNumberType = {
  kid: "kid",
  ocr: "ocr",
  frn: "frn",
  fik: "fik",
} as const;

/**
 * Using this resource you can create reference numbers for Payment Instructions at the invoice level, allowing for multiple payment information and payment reference numbers to be associated with a single invoice. However, only one PRN is generated for each payment method.

 */
export interface PaymentReferenceNumber {
  /** The `id` of the `payment_reference_number` resource is a unique identifier assigned to the PRN to track and reference in systems.
   */
  id: string;
  /** This attribute helps `type` field in the API, specifies how to reconcile offline payments, and generate `payment_reference_number` on invoices based on country-specific rules. Setting the `type` field generates `payment_reference_number` for the respective country and includes them on the invoice for correct reconciliation. \* frn - The reference number printed on invoices in Finland is utilized by buyers for payment via bank transfer, facilitating the association of payments with invoices. \* fik - Denmark based number calculated using recursive MOD 10 algorithm. \* kid - The KID number (kundeidentifikasjon) in Norway is an abbreviation for "Customer identification". It is used to associate payments with the customer and invoice. \* ocr - A OCR-based payment, contains an OCR reference, which is used to identify the vendor and the purchase document in connection with a payment. Swedish reference number can contain customer ID and/or invoice number to identify customer and invoice.
   */
  type: PaymentReferenceNumberType;
  /** A number is generated based on the configuration type of the PRN during the invoice creation process.
   */
  number: string;
  /** The `invoice_id` of the payment reference number (PRN) resource is the unique identifier assigned to the invoice that the PRN is associated with.
   */
  invoice_id?: string;
}

export type PaymentMethodType =
  (typeof PaymentMethodType)[keyof typeof PaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentMethod = {
  card: "card",
  cash: "cash",
  check: "check",
  chargeback: "chargeback",
  bank_transfer: "bank_transfer",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  other: "other",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  custom: "custom",
  boleto: "boleto",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * The payment method of this attempt \* ideal - ideal \* sofort - sofort \* paypal_express_checkout - paypal_express_checkout \* giropay - giropay \* bancontact - bancontact \* google_pay - google_pay \* card - card \* upi - upi \* direct_debit - direct_debit \* dotpay - dotpay \* apple_pay - apple_pay \* boleto - boleto \* netbanking_emandates - netbanking_emandates

 */
export type PaymentIntentActivePaymentAttemptPaymentMethodType =
  (typeof PaymentIntentActivePaymentAttemptPaymentMethodType)[keyof typeof PaymentIntentActivePaymentAttemptPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentIntentActivePaymentAttemptPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Current status of active payment attempt \* authorized - 3DS verification successfully completed. \* requires_challenge - The transaction has to go through 3DS Challenge flow and the customer needs to authenticate via 3DS 2.0 \* pending_authorization - Waiting for the authorization. \* requires_redirection - The transaction has to go through 3DS Redirection flow and the customer needs to authenticate via 3DS 1.0 \* inited - Payment attempt is initialized. \* refused - 3DS verification attempt failed. \* requires_identification - Customer's device fingerprint is used to verify their identity. It needs to be sent to the Issuing Bank for verification.

 */
export type PaymentIntentActivePaymentAttemptStatus =
  (typeof PaymentIntentActivePaymentAttemptStatus)[keyof typeof PaymentIntentActivePaymentAttemptStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentIntentActivePaymentAttemptStatus = {
  inited: "inited",
  requires_identification: "requires_identification",
  requires_challenge: "requires_challenge",
  requires_redirection: "requires_redirection",
  authorized: "authorized",
  refused: "refused",
  pending_authorization: "pending_authorization",
} as const;

/**
 * Active payment attempt for the PaymentIntent.

 */
export type PaymentIntentActivePaymentAttempt = {
  /** Identifier for PaymentIntent's active payment attempt.
   */
  id?: string;
  /** Current status of active payment attempt \* authorized - 3DS verification successfully completed. \* requires_challenge - The transaction has to go through 3DS Challenge flow and the customer needs to authenticate via 3DS 2.0 \* pending_authorization - Waiting for the authorization. \* requires_redirection - The transaction has to go through 3DS Redirection flow and the customer needs to authenticate via 3DS 1.0 \* inited - Payment attempt is initialized. \* refused - 3DS verification attempt failed. \* requires_identification - Customer's device fingerprint is used to verify their identity. It needs to be sent to the Issuing Bank for verification.
   */
  status: PaymentIntentActivePaymentAttemptStatus;
  /** The payment method of this attempt \* ideal - ideal \* sofort - sofort \* paypal_express_checkout - paypal_express_checkout \* giropay - giropay \* bancontact - bancontact \* google_pay - google_pay \* card - card \* upi - upi \* direct_debit - direct_debit \* dotpay - dotpay \* apple_pay - apple_pay \* boleto - boleto \* netbanking_emandates - netbanking_emandates
   */
  payment_method_type?: PaymentIntentActivePaymentAttemptPaymentMethodType;
  /** Reference of PaymentIntent at gateway
   */
  id_at_gateway?: string;
  /** Error code received from the payment gateway on failure.
   */
  error_code?: string;
  /** Error message received from the payment gateway on failure.
   */
  error_text?: string;
  /** Timestamp indicating when the active payment attempt was created.
   */
  created_at: number;
  /** Timestamp indicating when the active payment attempt was last modified.
   */
  modified_at: number;
};

/**
 * The payment method of this intent \* google_pay - google_pay \* apple_pay - apple_pay \* ideal - ideal \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* giropay - giropay \* sofort - sofort \* direct_debit - direct_debit \* paypal_express_checkout - paypal_express_checkout \* boleto - boleto \* card - card \* upi - upi

 */
export type PaymentIntentPaymentMethodType =
  (typeof PaymentIntentPaymentMethodType)[keyof typeof PaymentIntentPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentIntentPaymentMethodType = {
  card: "card",
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  google_pay: "google_pay",
  dotpay: "dotpay",
  giropay: "giropay",
  apple_pay: "apple_pay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  paypal_express_checkout: "paypal_express_checkout",
  direct_debit: "direct_debit",
  boleto: "boleto",
  venmo: "venmo",
  amazon_payments: "amazon_payments",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Current status of PaymentIntent. \* in_progress - Status will be in_progress if the Active Payment Attempt state is in requires_identification, requires_challenge or requires_redirection. \* authorized - 3DS verification successfully completed. \* consumed - If any Chargebee operation such as create subscription etc. is completed using the intent, it will be in consumed state. Intent cannot be used if it's already in consumed state. \* expired - Intent has expired, since it was not consumed before the predefined time-out. \* inited - Intent is initialized.

 */
export type PaymentIntentStatus =
  (typeof PaymentIntentStatus)[keyof typeof PaymentIntentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentIntentStatus = {
  inited: "inited",
  in_progress: "in_progress",
  authorized: "authorized",
  consumed: "consumed",
  expired: "expired",
} as const;

/**
 * A `payment_intent` is created to help you navigate the 3DS flow of collecting payment from your customer. It is necessary only for implementing 3DS flow using Chargebee.js.

#### Auto-expiry

All `payment_intent`s with `status` as `inited`, `in_progress` or `authorized` become `expired` after an **hour** automatically.

 */
export interface PaymentIntent {
  /** Identifier for PaymentIntent.
   */
  id: string;
  /** Current status of PaymentIntent. \* in_progress - Status will be in_progress if the Active Payment Attempt state is in requires_identification, requires_challenge or requires_redirection. \* authorized - 3DS verification successfully completed. \* consumed - If any Chargebee operation such as create subscription etc. is completed using the intent, it will be in consumed state. Intent cannot be used if it's already in consumed state. \* expired - Intent has expired, since it was not consumed before the predefined time-out. \* inited - Intent is initialized.
   */
  status: PaymentIntentStatus;
  /** The currency code (ISO 4217 format) of the amount used in transaction.
   */
  currency_code?: string;
  /** Amount(in cents) to be authorized for 3DS flow.
   */
  amount: number;
  /** The gateway account used for performing the 3DS flow.
   */
  gateway_account_id: string;
  /** Timestamp indicating when the PaymentIntent will expire if left unconsumed.
   */
  expires_at: number;
  /** Reference for payment method at gateway. Only applicable when the PaymentIntent is created for cards stored in the gateway.
   */
  reference_id?: string;
  /** The payment method of this intent \* google_pay - google_pay \* apple_pay - apple_pay \* ideal - ideal \* bancontact - bancontact \* netbanking_emandates - netbanking_emandates \* dotpay - dotpay \* giropay - giropay \* sofort - sofort \* direct_debit - direct_debit \* paypal_express_checkout - paypal_express_checkout \* boleto - boleto \* card - card \* upi - upi
   */
  payment_method_type?: PaymentIntentPaymentMethodType;
  /** The URL the customer will be directed to once 3DS verification is successful. Applicable only when `payment_method_type` is `ideal`, `sofort`, `dotpay` or `giropay`.
   */
  success_url?: string;
  /** The URL the customer will be directed to when 3DS verification fails. Applicable only when `payment_method_type` is `ideal`, `sofort`, `dotpay` or `giropay`.
   */
  failure_url?: string;
  /** Timestamp indicating when the PaymentIntent was created.
   */
  created_at: number;
  /** Timestamp indicating when the PaymentIntent was last modified.
   */
  modified_at: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this payment intent was last updated.
   */
  updated_at?: number;
  /** The unique ID of the customer for which this payment_intent should be created. If not provided, a new customer is created and its ID is autogenerated.  
**See also**

[Customer resource lookup and creation](/docs/api/payment_intents#customer_lookup)
 */
  customer_id: string;
  /** Gateway associated with the PaymentIntent.
   */
  gateway?: string;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this `payment_intent`
   */
  business_entity_id?: string;
  /** Active payment attempt for the PaymentIntent.
   */
  active_payment_attempt?: PaymentIntentActivePaymentAttempt;
}

export type PaymentInitiator =
  (typeof PaymentInitiator)[keyof typeof PaymentInitiator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentInitiator = {
  customer: "customer",
  merchant: "merchant",
} as const;

export type PauseOption = (typeof PauseOption)[keyof typeof PauseOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PauseOption = {
  immediately: "immediately",
  end_of_term: "end_of_term",
  specific_date: "specific_date",
  billing_cycles: "billing_cycles",
} as const;

export type OrderResentOrdersItem = {
  /** The order which is linked.
   */
  order_id: string;
  /** The order resent reason.
   */
  reason?: string;
  /** Value of the resent order.
   */
  amount?: number;
};

/**
 * The credit note status. \* voided - When the Credit Note has been cancelled. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice. \* refund_due - When the credits are yet to be used, or have been partially used.

 */
export type OrderLinkedCreditNotesItemStatus =
  (typeof OrderLinkedCreditNotesItemStatus)[keyof typeof OrderLinkedCreditNotesItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderLinkedCreditNotesItemStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note

 */
export type OrderLinkedCreditNotesItemType =
  (typeof OrderLinkedCreditNotesItemType)[keyof typeof OrderLinkedCreditNotesItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderLinkedCreditNotesItemType = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

export type OrderLinkedCreditNotesItem = {
  /** The amount issued for this order
   */
  amount?: number;
  /** The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note
   */
  type: OrderLinkedCreditNotesItemType;
  /** Credit-note id.
   */
  id: string;
  /** The credit note status. \* voided - When the Credit Note has been cancelled. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice. \* refund_due - When the credits are yet to be used, or have been partially used.
   */
  status: OrderLinkedCreditNotesItemStatus;
  /** Total amount adjusted on the order for the linked credit note. Applicable if the linked credit note is of the type 'adjustement'
   */
  amount_adjusted?: number;
  /** Total refundable credits issued on the order for the linked credit note. Applicable if the linked credit note is of the type 'refundable'
   */
  amount_refunded?: number;
};

/**
 * Type of this discount line item \* prorated_credits - Represents the credit adjustment items in invoice. The 'coupon_id' attribute will be null in this case \* document_level_coupon - Represents the 'Document' level coupons applied to this document. Further the 'coupon_id' attribute specifies the [coupon](/docs/api/coupons#coupon_attributes) id this discount is based on \* custom_discount - Represents the discount applied on an resent order against the orginal order. \* promotional_credits - Represents the Promotional Credits item in invoice. The 'coupon_id' attribute will be null in this case \* item_level_coupon - Represents the 'Item' level coupons applied to this invoice. Further the 'coupon_id' attribute specifies the [coupon](/docs/api/coupons#coupon_attributes) id this discount is based on \* document_level_discount - The deduction is due to a discount applied to the invoice `sub_total`. The discount id is available as the `entity_id`. \* item_level_discount - The deduction is due to a discount applied to a line item of the invoice. The discount id is available as the `entity_id`.

 */
export type OrderLineItemDiscountsItemDiscountType =
  (typeof OrderLineItemDiscountsItemDiscountType)[keyof typeof OrderLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  custom_discount: "custom_discount",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type OrderLineItemDiscountsItem = {
  /** The unique reference id of the line item for which the discount is applicable.
   */
  line_item_id: string;
  /** Type of this discount line item \* prorated_credits - Represents the credit adjustment items in invoice. The 'coupon_id' attribute will be null in this case \* document_level_coupon - Represents the 'Document' level coupons applied to this document. Further the 'coupon_id' attribute specifies the [coupon](/docs/api/coupons#coupon_attributes) id this discount is based on \* custom_discount - Represents the discount applied on an resent order against the orginal order. \* promotional_credits - Represents the Promotional Credits item in invoice. The 'coupon_id' attribute will be null in this case \* item_level_coupon - Represents the 'Item' level coupons applied to this invoice. Further the 'coupon_id' attribute specifies the [coupon](/docs/api/coupons#coupon_attributes) id this discount is based on \* document_level_discount - The deduction is due to a discount applied to the invoice `sub_total`. The discount id is available as the `entity_id`. \* item_level_discount - The deduction is due to a discount applied to a line item of the invoice. The discount id is available as the `entity_id`.
   */
  discount_type: OrderLineItemDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](\"discounts\"), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** Discount amount.
   */
  discount_amount: number;
};

/**
 * The type of tax jurisdiction \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* other - Jurisdictions other than the ones listed above.

 */
export type OrderLineItemTaxesItemTaxJurisType =
  (typeof OrderLineItemTaxesItemTaxJurisType)[keyof typeof OrderLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type OrderLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* other - Jurisdictions other than the ones listed above.
   */
  tax_juris_type?: OrderLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

/**
 * **Note:** This doc is for the latest version of Chargebee Orders. If you enabled Chargebee Orders before *September-30-2018* , you may be using the legacy version of the feature and its API. For help in migrating to the current system or using the legacy API for Chargebee Orders, please [contact support](https://chargebee.freshdesk.com/support/home)

Orders are automatically generated for an invoice when it gets paid, based on the shipping preference chosen for the invoice's product and the shipping date configuration. They can be updated either via api or merchant web console (a.k.a admin console).

 */
export interface Order {
  /** Uniquely identifies the order. It is the api identifier for the order
   */
  id: string;
  /** The order's serial number
   */
  document_number?: string;
  /** The invoice number which acts as an identifier for invoice and is generated sequentially.
   */
  invoice_id?: string;
  /** The subscription for which the order is created
   */
  subscription_id?: string;
  /** The customer for which the order is created
   */
  customer_id?: string;
  /** The status of this order. \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* partially_delivered - The order has been partially delivered to the customer. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* on_hold - The order is paused from being processed. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* shipped - The order has moved from order management system to a shipping system. \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* returned - The order has been returned after delivery. \* delivered - The order has been delivered to the customer. \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system
   */
  status?: OrderStatus;
  /** Cancellation reason \* payment_declined - Payment declined. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* product_not_available - Product not available. \* alternative_found - Alternative found. \* others - Other reason \* order_resent - Order resent \* product_unsatisfactory - Product unsatisfactory. \* delivery_date_missed - Delivery date missed. \* fraudulent_transaction - Fraudulent transaction. \* invoice_voided - The invoice for which the order was createed has been voided. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state. \* product_not_required - Product not required. \* third_party_cancellation - Third party cancellation.
   */
  cancellation_reason?: OrderCancellationReason;
  /** The payment status of the order \* paid - PAID \* not_paid - NOT_PAID
   */
  payment_status?: OrderPaymentStatus;
  /** Order type \* manual - The order has been created by the the user using Chargebee's legacy order management system. \* system_generated - The order has been created by Chargebee automatically based on the preferences set by the user.
   */
  order_type?: OrderOrderType;
  /** The price type of the order \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: OrderPriceType;
  /** Reference id can be used to map the orders in the shipping/order management application to the orders in ChargeBee. The reference_id generally is same as the order id in the third party application.
   */
  reference_id?: string;
  /** The fulfillment status of an order as reflected in the shipping/order management application. Typical statuses include Shipped,Awaiting Shipment,Not fulfilled etc;
   */
  fulfillment_status?: string;
  /** The date on which the order will start getting processed.
   */
  order_date?: number;
  /** This is the date on which the order will be delivered to the customer.
   */
  shipping_date?: number;
  /** The custom note for the order.
   */
  note?: string;
  /** The tracking id of the order.
   */
  tracking_id?: string;
  /** The tracking url of the order.
   */
  tracking_url?: string;
  /** Unique id to identify a group of orders.
   */
  batch_id?: string;
  /** The source (or the user) from where the order has been created.
   */
  created_by?: string;
  /** Shipment carrier
   */
  shipment_carrier?: string;
  /** The total round off taken from the invoice level
   */
  invoice_round_off_amount?: number;
  /** The total tax for the order.
   */
  tax?: number;
  /** Total amount paid for the order.
   */
  amount_paid?: number;
  /** Total amount adjusted for the order.
   */
  amount_adjusted?: number;
  /** The total amount issued as credits on behalf of this order.
   */
  refundable_credits_issued?: number;
  /** The total amount that can be issued as credits for this order.
   */
  refundable_credits?: number;
  /** Rounding adjustment
   */
  rounding_adjustement?: number;
  /** The timestamp indicating the date \& time the order's invoice got paid.
   */
  paid_on?: number;
  /** The time after which an order becomes unservicable
   */
  shipping_cut_off_date?: number;
  /** The time at which the order was created
   */
  created_at: number;
  /** The time at which the order status was last updated.
   */
  status_update_at?: number;
  /** The time at which the order was delivered
   */
  delivered_at?: number;
  /** The time at which the order was shipped.
   */
  shipped_at?: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** The order's last modified time.
   */
  updated_at?: number;
  /** The time at which the order was cancelled.
   */
  cancelled_at?: number;
  /** Resent status of the order. \* fully_resent - Order is Fully resent \* partially_resent - Order is Partially resent
   */
  resent_status?: OrderResentStatus;
  /** Show if the order is resent order or not.
   */
  is_resent: boolean;
  /** Refers to the original order id of the resent order.
   */
  original_order_id?: string;
  /** Total discount given for the order.
   */
  discount?: number;
  /** The order's sub-total
   */
  sub_total?: number;
  /** Total amount charged for the order.
   */
  total?: number;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** The currency code (ISO 4217 format) for the invoice
   */
  currency_code?: string;
  /** Boolean indicating whether this order is gifted or not.
   */
  is_gifted?: boolean;
  /** The gift message added by the gifter during purchase
   */
  gift_note?: string;
  /** The gift_id if the order is a gift order
   */
  gift_id?: string;
  /** Reason code for resending the order. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Orders \> Order Resend**. Must be passed if set as mandatory in the app. The codes are case-sensitive
   */
  resend_reason?: string;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this subscription. This is always the same as the [business entity](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer.
   */
  business_entity_id?: string;
  /** The list of line items for this order.
   */
  order_line_items?: OrderOrderLineItemsItem[];
  /** Shipping address for the order.
   */
  shipping_address?: OrderShippingAddress;
  /** Billing address for the order.
   */
  billing_address?: OrderBillingAddress;
  /** The list of taxes applied on the order line items.
   */
  line_item_taxes?: OrderLineItemTaxesItem[];
  /** The list of discounts applied for the order
   */
  line_item_discounts?: OrderLineItemDiscountsItem[];
  /** The credit notes linked to the order
   */
  linked_credit_notes?: OrderLinkedCreditNotesItem[];
  /** The list of resent orders applied on the order.
   */
  resent_orders?: OrderResentOrdersItem[];
}

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type OrderBillingAddressValidationStatus =
  (typeof OrderBillingAddressValidationStatus)[keyof typeof OrderBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Billing address for the order.

 */
export type OrderBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: OrderBillingAddressValidationStatus;
};

/**
 * The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.

 */
export type OrderShippingAddressValidationStatus =
  (typeof OrderShippingAddressValidationStatus)[keyof typeof OrderShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Shipping address for the order.

 */
export type OrderShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.
   */
  validation_status?: OrderShippingAddressValidationStatus;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * Specifies the modelled entity ([plan](/docs/api/plans#plan_attributes) / [addon](/docs/api/addons#addon_attributes) etc) this line item is based on \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id

 */
export type OrderOrderLineItemsItemEntityType =
  (typeof OrderOrderLineItemsItemEntityType)[keyof typeof OrderOrderLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderOrderLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The status of this order. \* shipped - The order line item has been shipped. \* on_hold - The delivery has been moved to "On hold" status. \* cancelled - The order has been returned after delivery. \* returned - The order has been returned after delivery. \* partially_delivered - The order has been partially delivered to the customer. \* delivered - The order line item has been delivered. \* queued - Not processed for shipping yet. \* awaiting_shipment - Moved to shipping platform.

 */
export type OrderOrderLineItemsItemStatus =
  (typeof OrderOrderLineItemsItemStatus)[keyof typeof OrderOrderLineItemsItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderOrderLineItemsItemStatus = {
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
  cancelled: "cancelled",
} as const;

export type OrderOrderLineItemsItem = {
  /** The identifier for the order line item.
   */
  id: string;
  /** The invoice of the line item.
   */
  invoice_id: string;
  /** The invoice line item id associated with this order line item.
   */
  invoice_line_item_id: string;
  /** The unit price.
   */
  unit_price?: number;
  /** The line item description.
   */
  description?: string;
  /** The sub total, of the order line item
   */
  amount?: number;
  /** The quantity that is going to get fulfilled for this order
   */
  fulfillment_quantity?: number;
  /** The amount that is going to get fulfilled for this order(amount after tax and discount)
   */
  fulfillment_amount?: number;
  /** The total tax applied on this line item
   */
  tax_amount?: number;
  /** The total amount paid on the invoice, on behalf of this delivery
   */
  amount_paid?: number;
  /** The total amount adjusted on the invoice, on behalf of this delivery
   */
  amount_adjusted?: number;
  /** The total refundable credits issued on the invoice, on behalf of this delivery
   */
  refundable_credits_issued?: number;
  /** The total amount issued as credits on behalf of this delivery
   */
  refundable_credits?: number;
  /** Appliable only if configured to include non shippable charges in orders, specifies if the charge is applicable for shipping
   */
  is_shippable: boolean;
  /** The SKU for the delivery.
   */
  sku?: string;
  /** The status of this order. \* shipped - The order line item has been shipped. \* on_hold - The delivery has been moved to "On hold" status. \* cancelled - The order has been returned after delivery. \* returned - The order has been returned after delivery. \* partially_delivered - The order has been partially delivered to the customer. \* delivered - The order line item has been delivered. \* queued - Not processed for shipping yet. \* awaiting_shipment - Moved to shipping platform.
   */
  status?: OrderOrderLineItemsItemStatus;
  /** Specifies the modelled entity ([plan](/docs/api/plans#plan_attributes) / [addon](/docs/api/addons#addon_attributes) etc) this line item is based on \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id
   */
  entity_type: OrderOrderLineItemsItemEntityType;
  /** Item level discount amount
   */
  item_level_discount_amount?: number;
  /** The discount given on the order line item.
   */
  discount_amount?: number;
  /** The identifier of the modelled entity this lineitem is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
};

/**
 * Resent status of the order. \* fully_resent - Order is Fully resent \* partially_resent - Order is Partially resent

 */
export type OrderResentStatus =
  (typeof OrderResentStatus)[keyof typeof OrderResentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderResentStatus = {
  fully_resent: "fully_resent",
  partially_resent: "partially_resent",
} as const;

/**
 * The price type of the order \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type OrderPriceType =
  (typeof OrderPriceType)[keyof typeof OrderPriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderPriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * Order type \* manual - The order has been created by the the user using Chargebee's legacy order management system. \* system_generated - The order has been created by Chargebee automatically based on the preferences set by the user.

 */
export type OrderOrderType =
  (typeof OrderOrderType)[keyof typeof OrderOrderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderOrderType = {
  manual: "manual",
  system_generated: "system_generated",
} as const;

/**
 * The payment status of the order \* paid - PAID \* not_paid - NOT_PAID

 */
export type OrderPaymentStatus =
  (typeof OrderPaymentStatus)[keyof typeof OrderPaymentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderPaymentStatus = {
  not_paid: "not_paid",
  paid: "paid",
} as const;

/**
 * Cancellation reason \* payment_declined - Payment declined. \* shipping_cut_off_passed - The invoice has been paid late and Chargebee cancel's the first order for the invoice. \* product_not_available - Product not available. \* alternative_found - Alternative found. \* others - Other reason \* order_resent - Order resent \* product_unsatisfactory - Product unsatisfactory. \* delivery_date_missed - Delivery date missed. \* fraudulent_transaction - Fraudulent transaction. \* invoice_voided - The invoice for which the order was createed has been voided. \* subscription_cancelled - The subsctiption for which the order was created has been cancelled. \* invoice_written_off - The invoice has been completely written off. Orders are generated by Chargebee in cancelled state. \* product_not_required - Product not required. \* third_party_cancellation - Third party cancellation.

 */
export type OrderCancellationReason =
  (typeof OrderCancellationReason)[keyof typeof OrderCancellationReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderCancellationReason = {
  shipping_cut_off_passed: "shipping_cut_off_passed",
  product_unsatisfactory: "product_unsatisfactory",
  third_party_cancellation: "third_party_cancellation",
  product_not_required: "product_not_required",
  delivery_date_missed: "delivery_date_missed",
  alternative_found: "alternative_found",
  invoice_written_off: "invoice_written_off",
  invoice_voided: "invoice_voided",
  fraudulent_transaction: "fraudulent_transaction",
  payment_declined: "payment_declined",
  subscription_cancelled: "subscription_cancelled",
  product_not_available: "product_not_available",
  others: "others",
  order_resent: "order_resent",
} as const;

/**
 * The status of this order. \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* partially_delivered - The order has been partially delivered to the customer. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* on_hold - The order is paused from being processed. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* shipped - The order has moved from order management system to a shipping system. \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* returned - The order has been returned after delivery. \* delivered - The order has been delivered to the customer. \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system

 */
export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderStatus = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

export type OperationType = (typeof OperationType)[keyof typeof OperationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OperationType = {
  add: "add",
  remove: "remove",
} as const;

export type Operation = (typeof Operation)[keyof typeof Operation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Operation = {
  create: "create",
  update: "update",
  delete: "delete",
} as const;

export type OnEvent = (typeof OnEvent)[keyof typeof OnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
} as const;

export type OfflinePaymentMethod =
  (typeof OfflinePaymentMethod)[keyof typeof OfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OfflinePaymentMethod = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

export type NotifyReferralSystem =
  (typeof NotifyReferralSystem)[keyof typeof NotifyReferralSystem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotifyReferralSystem = {
  none: "none",
  first_paid_conversion: "first_paid_conversion",
  all_invoices: "all_invoices",
} as const;

/**
 * Using the Non-Subscription resource, you can track one-time payments made for consumable, non-consumable, and non-renewing products in Chargebee. Call this API to notify Chargebee of non-subscription purchases made at stores.

 */
export interface NonSubscription {
  /** The unique immutable identifier of the invoice imported in Chargebee for which the receipt was sent.
   */
  invoice_id: string;
  /** The unique immutable identifier of the customer object to which the invoice belongs.
   */
  customer_id?: string;
  /** The [`subscription_item.item_price_id`](https://apidocs.chargebee.com/docs/api/subscriptions?prod_cat_ver=2#subscription_item_tiers_item_price_id) where the `item_type` is `charge`.
   */
  charge_id: string;
}

/**
 * A media artifact uploaded to Chargebee.

 */
export interface Media {
  /** The unique identifier for the media file. This is auto-generated by Chargebee.
   */
  id: string;
  /** The public URL for accessing the media file. This is auto-generated by Chargebee.
   */
  url?: string;
  /** The [alternative text](https://webaim.org/techniques/alttext/) for the image. Applicable only when the top-level `media_type` is `image`.
   */
  alt_text?: string;
  /** The [media type](https://en.wikipedia.org/wiki/Media_type) of the file.
   */
  media_type?: string;
}

/**
 * This resource returns the entitlement level attributes.

 */
export interface Level {
  /** A case-sensitive display name for the entitlement level. Provide a name that helps you clearly identify the entitlement level. For example: a feature such as `Email Support` can have entitlement levels named as `All weekdays`, `All days`, `40 hours per week` and so on. When not provided for `feature.type` `quantity` or `range`, this name is auto-generated as the space-separated concatenation of `levels[].value` and the pluralized version of `unit`. For example, if `levels[].value` is `20` and `unit` is `user`, then `levels[].name` becomes `20 users`.
   */
  name?: string;
  /** The value denoting the entitlement level granted.

* **When `type` is `quantity`:** this attribute denotes the quantity of units of the feature for this entitlement level. For example, a feature such as `number of users` can have `levels[].value` as `5`, `20`, `50`, and `100`. `levels[].is_unlimited` is used to set the entitlement level to "unlimited".
* **When `type` is `range`:** there can be be only two elements in the `levels[]` array; one corresponding to the minimum value (`levels[0]`) and the other to the maximum value (`levels[1]`) of the range of possible entitlement levels. For example, a feature such as `number of users` may have `levels[0].value` = `5` and `levels[1].value` = `50000`. When the upper limit is "unlimited", then `levels[1].value` is not set and `levels[1].is_unlimited` is `true`.
* **When `type` is `custom`:** this attribute denotes the value of this custom entitlement level. For example, a feature `Email Support` can have `levels[].value` as one of say, `24√ó7` and `24√ó5`.
 */
  value: string;
  /** This attribute represents the order of the entitlement levels from lowest to highest.  

* When `type` is `quantity` or `custom`: The lowest entitlement level has the value `0`, the next higher level has the value `1`, followed by `2`, and so on.
* When `type` is `range`: This attribute is `0` for the minimum value and `1` for the maximum value in the range.

When not defined, it is assumed as the index of the `levels[]` array.
 */
  level: number;
  /** When `type` is `quantity` or `range`, this attribute indicates whether the entitlement level corresponds to unlimited units of the feature. Possible values:

* `true`: The entitlement level corresponds to unlimited units of the feature. `levels[].value` is ignored for this level. This can only be set for the level that has the highest value for `levels[].level.`
* `false`: The entitlement level does not correspond to unlimited units of the feature.
 */
  is_unlimited: boolean;
}

export type Layout = (typeof Layout)[keyof typeof Layout];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Layout = {
  in_app: "in_app",
  full_page: "full_page",
} as const;

export type ItemType = (typeof ItemType)[keyof typeof ItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * Accounting integration details. The values are typically dependent on the \[accounting integration\](https://www.chargebee.com/docs/finance-integration-index.html) used.

 */
export type ItemPriceAccountingDetail = {
  /** This maps to the sku or product name in the accounting integration.
   */
  sku?: string;
  /** The identifier of the chart of accounts under which the item price falls in the accounting system.
   */
  accounting_code?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, provide the category name and option. Use the format: `<category-name>: <option>`. For example:`Location: Singapore.`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Classes, provide the class name here. Use the following format: `<parent class>:<sub-class-1>:<sub-class-2>...`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Classes, provide the class name here. Use the following format: `<parent class>: <sub-class-1>: <sub-class2>....` For example: `Services: Plan.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Locations, provide the name of the Location here.

 */
  accounting_category1?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**Xero:**](https://www.chargebee.com/docs/2.0/xero.html )If you've categorized your products in Xero, then provide the second category name and option here. Use the format: `<category-name>: <option>....` For example, `Region: South`
* [**QuickBooks:**](https://www.chargebee.com/docs/2.0/quickbooks.html )If you've categorized your product sales in QuickBooks according to Location, provide the Location name here. Use the following format: `<parent-location>:<sub-location-1>:<sub-location-2>....` For example: `Location: North America: Canada`
* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Locations, provide the location name here. Use the following format `<parent-location> : <sub-location-1>: <sub-location-2>....` For example: `NA:US:CA`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under Dimensions, provide the value of the Dimension here.

 */
  accounting_category2?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/2.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )If you've categorized your products in NetSuite under Departments, pass the department name here. Use the following format: `<parent-department> : <sub-department-1>: <sub-department-2>....` For example: `Production: Assembly.`
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you've classified your products in Intacct under multiple Dimensions, provide the value of the second Dimension here.
 */
  accounting_category3?: string;
  /** Used exclusively with the following [accounting integrations](https://www.chargebee.com/docs/1.0/finance-integration-index.html )

* [**NetSuite:**](https://www.chargebee.com/docs/2.0/netsuite.html )Provide the "Revenue Recognition Rule Id" for the product from NetSuite.
* [**Intacct:**](https://www.chargebee.com/docs/2.0/intacct.html )If you have configured "Revenue Recognition Templates" for products in Intacct, provide the template ID for the product.
 */
  accounting_category4?: string;
};

/**
 * Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user

 */
export type ItemPriceTaxDetailAvalaraSaleType =
  (typeof ItemPriceTaxDetailAvalaraSaleType)[keyof typeof ItemPriceTaxDetailAvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceTaxDetailAvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

/**
 * The tax details for the item price. Includes those details relevant for third-party integrations.

 */
export type ItemPriceTaxDetail = {
  /** The tax profile of the item price.
   */
  tax_profile_id?: string;
  /** Indicates the [Avalara sale type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html). \* vendor_use - Transaction is for an item that is subject to vendor use tax \* consumed - Transaction is for an item that is consumed directly \* wholesale - Transaction is a sale to another company that will resell your product or service to another consumer \* retail - Transaction is a sale to an end user
   */
  avalara_sale_type?: ItemPriceTaxDetailAvalaraSaleType;
  /** Indicates the [Avalara transaction type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_transaction_type?: number;
  /** Indicates the [Avalara service type](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/transaction-information/#lineitem) for the item price. Applicable only if you use the [AvaTax for Communications integration](https://www.chargebee.com/docs/2.0/avatax-for-communication.html).
   */
  avalara_service_type?: number;
  /** The [Avalara tax codes](https://taxcode.avatax.avalara.com) for the item price. Applicable only if you use [AvaTax for Sales integration](https://www.chargebee.com/docs/2.0/avalara-for-sales.html).
   */
  avalara_tax_code?: string;
  /** The [HSN code](https://cbic-gst.gov.in/gst-goods-services-rates.html) to which the item is mapped for calculating the customer's tax in India. Applicable only when both of the following conditions are true:

* **[India](https://www.chargebee.com/docs/indian-gst.html#configuring-indian-gst)** has been enabled as a **Tax Region**. (An error is returned when this condition is not true.)
* The [**AvaTax for Sales** integration](\"https://www.chargebee.com/docs/avalara.html\") has been enabled in Chargebee.
 */
  hsn_code?: string;
  /** The [TaxJar product code](https://developers.taxjar.com/api/reference/#get-list-tax-categories) for the item price. Applicable only if you use [TaxJar integration](https://www.chargebee.com/docs/2.0/taxjar.html).
   */
  taxjar_product_code?: string;
};

export type ItemPriceTiersItem = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`; the total cost for the item price when the `pricing_model` is `stairstep`. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price: number;
  starting_unit_in_decimal?: string;
  ending_unit_in_decimal?: string;
  price_in_decimal?: string;
};

/**
 * Type of item. \* addon - A recurring component that can be added to a subscription in addition to its plan. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription.

 */
export type ItemPriceItemType =
  (typeof ItemPriceItemType)[keyof typeof ItemPriceItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * A set of key-value pairs stored as additional information for the item price. \[Learn more\](./#meta_data).

 */
export type ItemPriceMetadata = { [key: string]: any };

/**
 * The subscription channel this object originated from and is maintained in. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ItemPriceChannel =
  (typeof ItemPriceChannel)[keyof typeof ItemPriceChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * Defines the shipping frequency in association with shipping period. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month.

 */
export type ItemPriceShippingPeriodUnit =
  (typeof ItemPriceShippingPeriodUnit)[keyof typeof ItemPriceShippingPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceShippingPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.

 */
export type ItemPriceTrialEndAction =
  (typeof ItemPriceTrialEndAction)[keyof typeof ItemPriceTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceTrialEndAction = {
  site_default: "site_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.

 */
export type ItemPriceTrialPeriodUnit =
  (typeof ItemPriceTrialPeriodUnit)[keyof typeof ItemPriceTrialPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceTrialPeriodUnit = {
  day: "day",
  month: "month",
} as const;

/**
 * The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon` \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.

 */
export type ItemPricePeriodUnit =
  (typeof ItemPricePeriodUnit)[keyof typeof ItemPricePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPricePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type ItemPricePricingModel =
  (typeof ItemPricePricingModel)[keyof typeof ItemPricePricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPricePricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

/**
 * The status of the item price. \* archived - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* active - The item price can be used in subscriptions. \* deleted - Indicates that the item price has been deleted. The `id` and `name` can be reused.

 */
export type ItemPriceStatus =
  (typeof ItemPriceStatus)[keyof typeof ItemPriceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemPriceStatus = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * An item price is a price point for an item. It defines the currency, pricing model, price, billing period and other attributes for an [item](./items?prod_cat_ver=2). For example, consider a cloud storage service as an item. Then each of the following defines an item price:

* The cloud storage sold at USD 10 per month.
* The same service sold at AUD 100 per year.
* The service sold at a monthly rate determined by the following [stairstep](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) pricing model:
  * 1--10 users for EUR 10
  * 11--25 users for EUR 20
  * 26--50 users for EUR 45
  * 51 and above for EUR 100

The **billing period** of an item price (only applies to plan-item prices and addon-item prices), is the `period` of the item price in `period_unit`s. An item can have only one item price for a given currency and billing period.

Types of item prices {#types}
-----------------------------

The type of an item price corresponds to the [type of the item](./items?prod_cat_ver=2) that the item price belongs to. In other words, item prices can be of the following types:

* Plan-item prices
* Addon-item prices
* Charge-item prices

 */
export interface ItemPrice {
  /** The identifier for the item price. It is unique and immutable.
   */
  id: string;
  /** A unique display name for the item price in the Chargebee UI. If `external_name` is not provided, this is also used in customer-facing pages and documents such as [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2).
   */
  name: string;
  /** Id of the item_family
   */
  item_family_id?: string;
  /** Identifier of the product
   */
  product_id?: string;
  /** The id of the item that the item price belongs to.
   */
  item_id?: string;
  /** Description of the item price.
   */
  description?: string;
  /** The status of the item price. \* archived - The item price is no longer active and cannot be used in new subscriptions or added to existing ones. Existing subscriptions that already have this item price will continue to renew with the item price. \* active - The item price can be used in subscriptions. \* deleted - Indicates that the item price has been deleted. The `id` and `name` can be reused.
   */
  status?: ItemPriceStatus;
  /** The name of the item price used in customer-facing pages and documents. These include [invoices](./invoices?prod_cat_ver=2) and [hosted pages](hosted_pages?prod_cat_ver=2). If not provided, then `name` is used
   */
  external_name?: string;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `pricing_model` cannot be changed.
\* tiered - The per unit price is based on the tier that the total quantity falls in.
\* per_unit - A fixed price per unit quantity.
\* flat_fee - A fixed price that is not quantity-based.
\* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
\* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
 */
  pricing_model: ItemPricePricingModel;
  /** The cost of the item price when the pricing model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** 

* When the item `type` is `plan`: The billing period of the plan in `period_unit`s. For example, create a 6 month plan by providing `period` as 6 and `period_unit` as month.
* When item `type` is `addon`: The period of the addon in `period_unit`s. For example, create an addon with a 2 month `period` by providing period as 2 and `period_unit` as `month`. The period of an addon is the duration for which its `price` applies. When attached to a plan, the addon is billed for the billing period of the plan. [Learn more.](https://www.chargebee.com/docs/2.0/addons-billingcycle.html)



If subscriptions or invoices exist for this item price, `period` cannot be changed. The `period` is mandatory when the item `type` is `plan` or `addon`
 */
  period?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/2.0/supported-currencies.html)) for the item price. If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `currency_code` cannot be changed.
   */
  currency_code: string;
  /** The unit of time for `period`. If subscriptions or invoices exist for this item price, `period_unit` cannot be changed. The `period_unit` is mandatory when the item `type` is `plan` or `addon` \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.
   */
  period_unit?: ItemPricePeriodUnit;
  /** The trial period of the plan in `trial_period_unit`s. You can also set [trial periods for addons](https://www.chargebee.com/docs/2.0/addons-trial.html); contact [Support](https://chargebee.freshdesk.com/support/home) to enable that feature.
   */
  trial_period?: number;
  /** The unit of time for `trial_period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours.
   */
  trial_period_unit?: ItemPriceTrialPeriodUnit;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Specifies the operation to be carried out for the subscription once the trial ends. Whenever the `item.type` is `plan` and a trial period is defined for this item price, this attribute (parameter) is returned (required). This can be overridden at the [subscription-level](subscriptions?prod_cat_ver=2#subscription_trial_end_action). \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect.
   */
  trial_end_action?: ItemPriceTrialEndAction;
  /** Defines the shipping frequency. Example: to bill customer every 2 weeks, provide "2" here.
   */
  shipping_period?: number;
  /** Defines the shipping frequency in association with shipping period. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month.
   */
  shipping_period_unit?: ItemPriceShippingPeriodUnit;
  /** The default number of billing cycles a subscription to the plan must run. Can be [overridden](./subscriptions?prod_cat_ver=2) for a subscription.

Addons can also [have billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html). However, you must contact [Support](https://chargebee.freshdesk.com/support/home) to enable that. Also, for addons, you can [override this](./attached_items?prod_cat_ver=2) while attaching it to a plan. However, if you provide the value while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items_item_type), then that value takes still higher precedence.
If subscriptions, invoices or [differential prices](./differential_prices?prod_cat_ver=2) exist for this item price, `billing_cycles` cannot be changed.
 */
  billing_cycles?: number;
  /** Free quantity the subscriptions of this item_price will have. Only the quantity more than this will be charged for the subscription.
   */
  free_quantity: number;
  /** The quantity of the item that is available free-of-charge, represented in decimal. When a subscription is created for this plan or when the plan of a subscription is changed to this one, only the quantity above this number is charged for. Applicable for quantity-based plans and only when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  free_quantity_in_decimal?: string;
  /** The subscription channel this object originated from and is maintained in. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  channel?: ItemPriceChannel;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this item price was last updated
   */
  updated_at?: number;
  /** Timestamp indicating when this item price was created
   */
  created_at: number;
  /** Timestamp indicating when this item price was archived.
   */
  archived_at?: number;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** Specifies whether taxes apply to this item price. This value is set and returned even if [Taxes](https://www.chargebee.com/docs/tax.html) have been disabled in Chargebee. However, the value is effective only while Taxes are enabled.
   */
  is_taxable?: boolean;
  /** A set of key-value pairs stored as additional information for the item price. \[Learn more\](./#meta_data).
   */
  metadata?: ItemPriceMetadata;
  /** Type of item. \* addon - A recurring component that can be added to a subscription in addition to its plan. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription.
   */
  item_type?: ItemPriceItemType;
  /** Whether the item price's description should be shown on [invoice PDFs](/docs/api/invoices#retrieve_invoice_as_pdf). If this Boolean is changed, only invoices generated (or [regenerated](https://www.chargebee.com/docs/invoice-operations.html#actions-for-payment-due-not-paid-invoices_regenerate-invoice)) after the change are affected; past invoices are not.
   */
  show_description_in_invoices?: boolean;
  /** Whether the item price's description should be shown on [quote PDFs](/docs/api/quotes#retrieve_quote_as_pdf). If this Boolean is changed, only quotes created after the change are affected; past quotes are not.
   */
  show_description_in_quotes?: boolean;
  /** List of quantity-based pricing tiers for the item price. Applicable only for `tiered`, `volume`, and `stairstep` ` pricing_models`.
   */
  tiers?: ItemPriceTiersItem[];
  /** The tax details for the item price. Includes those details relevant for third-party integrations.
   */
  tax_detail?: ItemPriceTaxDetail;
  /** Accounting integration details. The values are typically dependent on the \[accounting integration\](https://www.chargebee.com/docs/finance-integration-index.html) used.
   */
  accounting_detail?: ItemPriceAccountingDetail;
  [key: string]: any;
}

/**
 * The subscription channel this object originated from and is maintained in. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI.

 */
export type ItemFamilyChannel =
  (typeof ItemFamilyChannel)[keyof typeof ItemFamilyChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemFamilyChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * Status of the item family. \* active - The item family is active and can be used to create new items. \* deleted - The item family has been deleted and cannot be used to create new items. The `id` and `name` can be reused to create a new item family.

 */
export type ItemFamilyStatus =
  (typeof ItemFamilyStatus)[keyof typeof ItemFamilyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemFamilyStatus = {
  active: "active",
  deleted: "deleted",
} as const;

/**
 * If you're a company that sells multiple product lines then each product line or service is an item family in the Chargebee API. For example, if you are a SaaS company that offers separate products for project management, content collaboration, and customer support. Each of those can be an item family under which the various plans, addons and charges can be the [items](items?prod_cat_ver=2).
Item families compartmentalize items such that only items belonging to the same family can be part of any given subscription.


 */
export interface ItemFamily {
  /** The identifier for the item family. It is unique and immutable.
   */
  id: string;
  /** A unique display name for the item family. This is visible only in Chargebee and not to customers.
   */
  name: string;
  /** Description of the item family. This is visible only in Chargebee and not to customers.
   */
  description?: string;
  /** Status of the item family. \* active - The item family is active and can be used to create new items. \* deleted - The item family has been deleted and cannot be used to create new items. The `id` and `name` can be reused to create a new item family.
   */
  status?: ItemFamilyStatus;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  resource_version?: number;
  /** When the item family was last updated.
   */
  updated_at?: number;
  /** The subscription channel this object originated from and is maintained in. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI.
   */
  channel?: ItemFamilyChannel;
  [key: string]: any;
}

/**
 * The `type` of the `item` to which this entitlement belongs. \* charge - Charge \* item - Item \* subscription - Subscription \* addon - Addon \* plan - Plan

 */
export type ItemEntitlementItemType =
  (typeof ItemEntitlementItemType)[keyof typeof ItemEntitlementItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemEntitlementItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
  subscription: "subscription",
  item: "item",
} as const;

/**
 * [Items](/docs/api/items) represent the products or services that you offer to your customers. Items often differ from each other in the product [features](/docs/api/features) that are available in them. An item entitlement object represents the entitlement an item has towards a feature. An item can have multiple such entitlements, each corresponding to a unique feature it is entitled to.

Item entitlements can be created while [creating a feature](/docs/api/features#create_a_feature). All subscriptions containing an item also [inherit](/docs/api/subscription_entitlements#inheritance) its entitlements.

 */
export interface ItemEntitlement {
  /** A unique identifier for the `item_entitlement`. This is auto-generated.
   */
  id: string;
  /** The `id` of the `item` to which this entitlement belongs.
   */
  item_id?: string;
  /** The `type` of the `item` to which this entitlement belongs. \* charge - Charge \* item - Item \* subscription - Subscription \* addon - Addon \* plan - Plan
   */
  item_type?: ItemEntitlementItemType;
  /** The `id` of the feature towards which this entitlement has been granted.
   */
  feature_id?: string;
  /** The `name` of the `feature` towards which this entitlement has been granted.
   */
  feature_name?: string;
  /** The level of entitlement that the item has towards the feature. The possible values depend on the value of `feature.type`:

* When `feature.type` is `quantity` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any one of `feature.levels[value][]`.
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can also be:
    * any one of `feature.levels[value][]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `range` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any whole number between `levels[value][0]` and `levels[value][1]` (inclusive).
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can be:
    * any whole number equal to or greater than `levels[value][0]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `custom`, then the value can be any one of `feature.levels[value][]`.
* When `type` is `switch`, then the value is set as `available` or `true`.
 */
  value?: string;
  /** The display name for the entitlement level. The default values are auto-generated based on `feature.type` as follows:

* When `feature.type` is `quantity` or `range`, then `name` is the space-separated concatenation of `value` and the pluralized version of `feature.unit`. For example, if `value` is `20` and `feature.unit` is `user`, then `name` becomes `20 users`.
* When `feature.type` is `custom`, then `name` is the same as `value`.a
 */
  name?: string;
}

export type ItemApplicableItemsItem = {
  /** Id of the addon-item or plan-item that can be applied to the plan-item.
   */
  id?: string;
};

/**
 * A set of key-value pairs stored as additional information for the item. \[Learn more\](./#meta_data).

 */
export type ItemMetadata = { [key: string]: any };

/**
 * The subscription channel this object originated from and is maintained in. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.

 */
export type ItemChannel = (typeof ItemChannel)[keyof typeof ItemChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is `metered`. This value overrides the one [set at the site level](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing). \* sum_of_usages - the net quantity is the sum of the `quantity` of all usages for the current term. \* last_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* max_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.

 */
export type ItemUsageCalculation =
  (typeof ItemUsageCalculation)[keyof typeof ItemUsageCalculation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemUsageCalculation = {
  sum_of_usages: "sum_of_usages",
  last_usage: "last_usage",
  max_usage: "max_usage",
} as const;

/**
 * Indicates which addon-items and charge-items can be applied to the item. Only meant for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.

 */
export type ItemItemApplicability =
  (typeof ItemItemApplicability)[keyof typeof ItemItemApplicability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemItemApplicability = {
  all: "all",
  restricted: "restricted",
} as const;

/**
 * The type of the item. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* addon - A recurring component that can be added to a subscription in addition to its plan.

 */
export type ItemTypeProperty =
  (typeof ItemTypeProperty)[keyof typeof ItemTypeProperty];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemTypeProperty = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

/**
 * The status of the item. \* archived - The item is no longer active and no new item prices can be created \* active - The item can be used to create new item prices. \* deleted - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).

 */
export type ItemStatus = (typeof ItemStatus)[keyof typeof ItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemStatus = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * When offering subscriptions of products or services, each entity that is made available for sale is represented by an "item" object. Items therefore represent the various plans, addons or charges that you offer as part of your product catalog. Non-`metered` items are charged upfront in Chargebee, while `metered` items are charged at the end of the billing cycle, based on usage.

### Types of Items

There are three types of items and they're listed and explained here. Examples for each type are provided in the table that follows.

#### Plan-items or Plans

Plan-items are items that have a recurring charge and are an essential component of any [subscription](./subscriptions?prod_cat_ver=2). Typically, plans represent a principal or key product or service in your catalog. They are charged at recurring intervals and often have other products or services offered along with them as addons and charges.

#### Addon-items or Addons {#addon-items}

Addon-items are items that are sold along with a plan and are charged for at recurring intervals.

#### Charge-items or Charges

Charge-items are items that are sold along with a plan but charged once (or each time) a specified event occurs. A charge can also be [applied to a customer](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without attaching to a subscription.

#### Examples

To help understand each type of item better, listed below are some examples of items from different business domains:

##### Non-Metered (SaaS)

* **Item Family:** A project management solution.
* **Plans:**
  * A "basic" plan offering a small set of features.
  * A "business" plan offering a larger set of features.
* **Addons:**
  * An analytics plugin that is available only with the "business" plan.
  * A reporting plugin, available with both the above plans.
* **Charges:**
  * Implementation charges.
  * Trial charges.



##### Non-Metered (E-commerce)

* **Item Family:** A printed news magazine.
* **Plans:**
  * Periodic issues of the magazine.
  * Periodic issues of the magazine, with digital content.
* **Addons:**
  * Supplementary online content.
  * Access to a year's worth of back issues.
  * Searchable access to all back issues.
* **Charges:**
  * Special edition books that are published every so often.



##### Metered

* **Item Family:** SMS delivery services.
* **Plans:**
  * A basic plan of up to 100K messages @ $0.03 per message.
  * A volume plan of 2M messages @ $0.01 per message.
* **Addons:**
  * An addon of 50K MMS messages @ $0.1 per message.
  * Instant messaging.
* **Charges:**
  * Automated Metered Billing is not applicable for charges.




 */
export interface Item {
  /** The identifier for the item. It is unique and immutable.
   */
  id: string;
  /** A unique display name for the item. This is visible only in Chargebee and not to customers.
   */
  name: string;
  /** A unique display name for the item.
   */
  external_name?: string;
  /** Description of the item. This is visible only in Chargebee and not to customers.
   */
  description?: string;
  /** The status of the item. \* archived - The item is no longer active and no new item prices can be created \* active - The item can be used to create new item prices. \* deleted - Indicates that the item has been [deleted](./items?prod_cat_ver=2#delete_an_item). The `id` and `name` can be reused. Deleted items can be retrieved using [List items](./items?prod_cat_ver=2#list_items).
   */
  status?: ItemStatus;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  resource_version?: number;
  /** Timestamp indicating when the item was last updated.
   */
  updated_at?: number;
  /** The `id` of the [Item family](./item_families?prod_cat_ver=2) that the item belongs to. Is mandatory when [Product Families](https://www.chargebee.com/docs/2.0/product-families.html) have been enabled.
   */
  item_family_id?: string;
  /** The type of the item. \* plan - An essential component of a subscription. Every subscription has exactly one plan. It has a recurring charge and its period defines the billing period of the subscription. \* charge - A non-recurring component that can be added to a subscription in addition to its plan. An charge can also be applied to a customer [directly](./invoices?prod_cat_ver=2#create_invoice_for_a_charge-item) without being applied to a subscription. \* addon - A recurring component that can be added to a subscription in addition to its plan.
   */
  type: ItemTypeProperty;
  /** Indicates that the item is a physical product. If Orders are enabled in Chargebee, subscriptions created for this item will have orders associated with them.
   */
  is_shippable?: boolean;
  /** Specifies if gift subscriptions can be created for this item.
   */
  is_giftable: boolean;
  /** If `enabled_for_checkout`, then the URL to be redirected to once the checkout is complete. This attribute is only available for plan-items.
   */
  redirect_url?: string;
  /** Allow the plan to subscribed to via Checkout. Applies only for plan-items.
   **Note:** Only the in-app version of Checkout is supported for Product Catalog v2.
   */
  enabled_for_checkout: boolean;
  /** Allow customers to change their subscription to this plan via the [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html). Applies only for plan-items. This requires the Portal configuration to [allow changing subscriptions](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription).
   */
  enabled_in_portal: boolean;
  /** The item is included in MRR calculations for your site. This attribute is only applicable for items of `type = charge` and when the feature is enabled in Chargebee. Note: If the site-level setting is to exclude charge-items from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr?: boolean;
  /** Indicates which addon-items and charge-items can be applied to the item. Only meant for plan-items. Other details of attaching items such as whether to attach as a mandatory item or to attach on a certain event, can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API. \* all - all addon-items and charge-items are applicable to this plan-item. \* restricted - only the addon-items or charge-items provided in `applicable_items` can be applied to this plan-item.
   */
  item_applicability: ItemItemApplicability;
  /** The URL to redirect to once the gift has been claimed by the receiver.
   */
  gift_claim_redirect_url?: string;
  /** The unit of measure for a quantity-based item. This is displayed on the Chargebee UI and on customer facing documents/pages. The latter includes [hosted pages](./hosted_pages?prod_cat_ver=2), [invoices](./invoices?prod_cat_ver=2) and [quotes](./quotes?prod_cat_ver=2#). Examples follow:  

* "user" for a cloud-collaboration platform.
* "GB" for a data service.
* "issue" for a magazine.

**Note:** `unit` is only exposed via the API to quantity-based addons; it is however NOT exposed to quantity-based plans.
 */
  unit?: string;
  /** Specifies whether the item undergoes metered billing. When `true`, the quantity is calculated from [usage records](/docs/api/usages?prod_cat_ver=2). When `false`, the `quantity` is as determined while adding an item price to the subscription. Applicable only for items of `type` `plan` or `addon` and when [Metered Billing](https://www.chargebee.com/docs/2.0/metered_billing.html) is enabled. The value of this attribute cannot be changed.
   */
  metered: boolean;
  /** How the quantity is calculated from usage data for the item prices belonging to this item. Only applicable when the item is `metered`. This value overrides the one [set at the site level](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing). \* sum_of_usages - the net quantity is the sum of the `quantity` of all usages for the current term. \* last_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the most recent `usage_date` is taken as the net quantity consumed. \* max_usage - from among the usage records for the [item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) with `usage_date` within the relevant billing period, the `quantity` of the usage record with the maximum value is taken as the net quantity consumed.
   */
  usage_calculation?: ItemUsageCalculation;
  /** Timestamp indicating when this item was archived.
   */
  archived_at?: number;
  /** The subscription channel this object originated from and is maintained in. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
 */
  channel?: ItemChannel;
  /** A set of key-value pairs stored as additional information for the item. \[Learn more\](./#meta_data).
   */
  metadata?: ItemMetadata;
  /** The list of addons and charges that are allowed to be applied to the plan. This attribute is applicable only for plan-items and that too when `item_applicability` is `restricted`.  

Other details of attaching items can be specified using the [Create](./attached_items?prod_cat_ver=2#create_an_attached_item) or [Update an attached item](./attached_items?prod_cat_ver=2#update_an_attached_item) API.
 */
  applicable_items?: ItemApplicableItemsItem[];
  [key: string]: any;
}

export type InvoiceEstimateLineItemDiscountsItemDiscountType =
  (typeof InvoiceEstimateLineItemDiscountsItemDiscountType)[keyof typeof InvoiceEstimateLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type InvoiceEstimateLineItemDiscountsItem = {
  line_item_id: string;
  discount_type: InvoiceEstimateLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  entity_id?: string;
  discount_amount: number;
};

export type InvoiceEstimateLineItemTiersItem = {
  line_item_id?: string;
  starting_unit: number;
  ending_unit?: number;
  quantity_used: number;
  unit_amount: number;
  starting_unit_in_decimal?: string;
  ending_unit_in_decimal?: string;
  quantity_used_in_decimal?: string;
  unit_amount_in_decimal?: string;
};

export type InvoiceEstimateLineItemTaxesItemTaxJurisType =
  (typeof InvoiceEstimateLineItemTaxesItemTaxJurisType)[keyof typeof InvoiceEstimateLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type InvoiceEstimateLineItemTaxesItem = {
  line_item_id?: string;
  tax_name: string;
  tax_rate: number;
  is_partial_tax_applied?: boolean;
  is_non_compliance_tax?: boolean;
  taxable_amount: number;
  tax_amount: number;
  tax_juris_type?: InvoiceEstimateLineItemTaxesItemTaxJurisType;
  tax_juris_name?: string;
  tax_juris_code?: string;
  tax_amount_in_local_currency?: number;
  local_currency_code?: string;
};

export type InvoiceEstimateTaxesItem = {
  name: string;
  amount: number;
  description?: string;
};

export type InvoiceEstimateDiscountsItemDiscountType =
  (typeof InvoiceEstimateDiscountsItemDiscountType)[keyof typeof InvoiceEstimateDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type InvoiceEstimateDiscountsItemEntityType =
  (typeof InvoiceEstimateDiscountsItemEntityType)[keyof typeof InvoiceEstimateDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type InvoiceEstimateDiscountsItem = {
  amount: number;
  description?: string;
  line_item_id?: string;
  entity_type: InvoiceEstimateDiscountsItemEntityType;
  discount_type?: InvoiceEstimateDiscountsItemDiscountType;
  entity_id?: string;
  coupon_set_code?: string;
};

export interface InvoiceEstimate {
  recurring: boolean;
  price_type: InvoiceEstimatePriceType;
  currency_code: string;
  sub_total: number;
  total?: number;
  credits_applied?: number;
  amount_paid?: number;
  amount_due?: number;
  round_off_amount?: number;
  customer_id?: string;
  line_items?: InvoiceEstimateLineItemsItem[];
  discounts?: InvoiceEstimateDiscountsItem[];
  taxes?: InvoiceEstimateTaxesItem[];
  line_item_taxes?: InvoiceEstimateLineItemTaxesItem[];
  line_item_tiers?: InvoiceEstimateLineItemTiersItem[];
  line_item_discounts?: InvoiceEstimateLineItemDiscountsItem[];
}

export type InvoiceEstimateLineItemsItemTaxExemptReason =
  (typeof InvoiceEstimateLineItemsItemTaxExemptReason)[keyof typeof InvoiceEstimateLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

export type InvoiceEstimateLineItemsItemEntityType =
  (typeof InvoiceEstimateLineItemsItemEntityType)[keyof typeof InvoiceEstimateLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

export type InvoiceEstimateLineItemsItemPricingModel =
  (typeof InvoiceEstimateLineItemsItemPricingModel)[keyof typeof InvoiceEstimateLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimateLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type InvoiceEstimateLineItemsItem = {
  id?: string;
  subscription_id?: string;
  date_from: number;
  date_to: number;
  unit_amount: number;
  quantity?: number;
  amount?: number;
  pricing_model?: InvoiceEstimateLineItemsItemPricingModel;
  is_taxed: boolean;
  tax_amount?: number;
  tax_rate?: number;
  unit_amount_in_decimal?: string;
  quantity_in_decimal?: string;
  amount_in_decimal?: string;
  discount_amount?: number;
  item_level_discount_amount?: number;
  reference_line_item_id?: string;
  description: string;
  entity_description?: string;
  entity_type: InvoiceEstimateLineItemsItemEntityType;
  tax_exempt_reason?: InvoiceEstimateLineItemsItemTaxExemptReason;
  entity_id?: string;
  customer_id?: string;
};

export type InvoiceEstimatePriceType =
  (typeof InvoiceEstimatePriceType)[keyof typeof InvoiceEstimatePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEstimatePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

export type InvoiceDunningHandling =
  (typeof InvoiceDunningHandling)[keyof typeof InvoiceDunningHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceDunningHandling = {
  continue: "continue",
  stop: "stop",
} as const;

export type InvoiceLinkedTaxesWithheldItem = {
  /** An auto-generated unique identifier for the tax withheld. The value starts with the prefix `tax_wh_`. For example, `tax_wh_16BdDXSlbu4uV1Ee6`.
   */
  id: string;
  /** The amount withheld by the customer as tax from the invoice. The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  amount?: number;
  /** The description for this tax withheld.
   */
  description?: string;
  /** Date or time associated with the tax withheld.
   */
  date?: number;
  /** A unique external reference number for the tax withheld. Typically, this is the reference number used by the system you are integrating the API with. Depending on your integration, this could be the reference number issued by the taxation authority to identify the customer or the specific tax transaction.
   */
  reference_number?: string;
};

/**
 * The status of processing the e-invoice. To obtain detailed information about the current `status`, see `message`. \* scheduled - Sending the e-invoice to the customer has been scheduled. \* skipped - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* success - The e-invoice has been successfully delivered to the customer. \* failed - The e-invoice was sent and there was an error due to which it was not delivered. \* in_progress - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* registered - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.

 */
export type InvoiceEinvoiceStatus =
  (typeof InvoiceEinvoiceStatus)[keyof typeof InvoiceEinvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceEinvoiceStatus = {
  scheduled: "scheduled",
  skipped: "skipped",
  in_progress: "in_progress",
  success: "success",
  failed: "failed",
  registered: "registered",
} as const;

/**
 * An e-invoice or electronic invoice is a structured representation of an invoice that is interoperable between computerized invoicing systems. Depending on the country, e-invoicing can be necessary to meet financial/taxation authority regulations.

 */
export type InvoiceEinvoice = {
  /** The unique `id` for the e-invoice. This is auto-generated by Chargebee.
   */
  id: string;
  /** This attribute is used to populate the unique reference number assigned to an invoice on the Invoice Registration Portal (IRP) network. It is essential for identifying and tracking invoices that are processed through the IRP network. In the future, this field may be used to store similar reference numbers for other networks.
   */
  reference_number?: string;
  /** The status of processing the e-invoice. To obtain detailed information about the current `status`, see `message`. \* scheduled - Sending the e-invoice to the customer has been scheduled. \* skipped - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* success - The e-invoice has been successfully delivered to the customer. \* failed - The e-invoice was sent and there was an error due to which it was not delivered. \* in_progress - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* registered - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.
   */
  status: InvoiceEinvoiceStatus;
  /** Detailed information about the status of the e-invoice. When `status` is `skipped` or `failed`, this contains the reason or error details. The following are some valid examples:

* Invoice successfully sent to customer via the e-invoicing network 9090:123456
* Invoice successfully sent to customer via email id abc@acme.com
 */
  message?: string;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type InvoiceBillingAddressValidationStatus =
  (typeof InvoiceBillingAddressValidationStatus)[keyof typeof InvoiceBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Billing address for the invoice.

 */
export type InvoiceBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: InvoiceBillingAddressValidationStatus;
};

/**
 * The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.

 */
export type InvoiceShippingAddressValidationStatus =
  (typeof InvoiceShippingAddressValidationStatus)[keyof typeof InvoiceShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Shipping address for the invoice.

 */
export type InvoiceShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.
   */
  validation_status?: InvoiceShippingAddressValidationStatus;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * Type of entity to which the note belongs. \* subscription - Entity that represents a subscription of customer. \* plan_item_price - Indicates that this line item is based on plan Item Price \* customer - Entity that represents a customer. \* plan - Entity that represents a plan. \* coupon - Entity that represents a coupon. \* tax - The note is configured as part of the [tax configuration](https://www.chargebee.com/docs/tax.html) in Chargebee Billing. \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Entity that represents an addon.

 */
export type InvoiceNotesItemEntityType =
  (typeof InvoiceNotesItemEntityType)[keyof typeof InvoiceNotesItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceNotesItemEntityType = {
  coupon: "coupon",
  subscription: "subscription",
  customer: "customer",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
  tax: "tax",
} as const;

export type InvoiceNotesItem = {
  /** Type of entity to which the note belongs. \* subscription - Entity that represents a subscription of customer. \* plan_item_price - Indicates that this line item is based on plan Item Price \* customer - Entity that represents a customer. \* plan - Entity that represents a plan. \* coupon - Entity that represents a coupon. \* tax - The note is configured as part of the [tax configuration](https://www.chargebee.com/docs/tax.html) in Chargebee Billing. \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Entity that represents an addon.
   */
  entity_type: InvoiceNotesItemEntityType;
  /** Actual note.
   */
  note: string;
  /** Unique identifier of the entity.
   */
  entity_id?: string;
};

/**
 * Order type \* manual - The order has been created by the the user using Chargebee's legacy order management system. \* system_generated - The order has been created by Chargebee automatically based on the preferences set by the user.

 */
export type InvoiceLinkedOrdersItemOrderType =
  (typeof InvoiceLinkedOrdersItemOrderType)[keyof typeof InvoiceLinkedOrdersItemOrderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLinkedOrdersItemOrderType = {
  manual: "manual",
  system_generated: "system_generated",
} as const;

/**
 * The status of this order. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* shipped - The order has moved from order management system to a shipping system. \* on_hold - The order is paused from being processed. \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* returned - The order has been returned after delivery. \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* delivered - The order has been delivered to the customer. \* partially_delivered - The order has been partially delivered to the customer. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system

 */
export type InvoiceLinkedOrdersItemStatus =
  (typeof InvoiceLinkedOrdersItemStatus)[keyof typeof InvoiceLinkedOrdersItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLinkedOrdersItemStatus = {
  new: "new",
  processing: "processing",
  complete: "complete",
  cancelled: "cancelled",
  voided: "voided",
  queued: "queued",
  awaiting_shipment: "awaiting_shipment",
  on_hold: "on_hold",
  delivered: "delivered",
  shipped: "shipped",
  partially_delivered: "partially_delivered",
  returned: "returned",
} as const;

export type InvoiceLinkedOrdersItem = {
  /** Uniquely identifies the order. It is the api identifier for the order
   */
  id: string;
  /** The order's serial number
   */
  document_number?: string;
  /** The status of this order. \* awaiting_shipment - The order has been picked up by an integration system, and synced to a shipping management platform \* new - Order has been created. Applicable only if you are using Chargebee's legacy order management system. \* shipped - The order has moved from order management system to a shipping system. \* on_hold - The order is paused from being processed. \* queued - Order is yet to be processed by any system, these are scheduled orders created by Chargebee \* returned - The order has been returned after delivery. \* complete - Order has been processed successfully. Applicable only if you are using Chargebee's legacy order management system \* cancelled - Order has been cancelled. Applicable only if you are using Chargebee's legacy order management system \* delivered - The order has been delivered to the customer. \* partially_delivered - The order has been partially delivered to the customer. \* voided - Order has been voided. Applicable only if you are using Chargebee's legacy order management system \* processing - Order is being processed. Applicable only if you are using Chargebee's legacy order management system
   */
  status?: InvoiceLinkedOrdersItemStatus;
  /** Order type \* manual - The order has been created by the the user using Chargebee's legacy order management system. \* system_generated - The order has been created by Chargebee automatically based on the preferences set by the user.
   */
  order_type?: InvoiceLinkedOrdersItemOrderType;
  /** Reference id can be used to map the orders in the shipping/order management application to the orders in ChargeBee. The reference_id generally is same as the order id in the third party application.
   */
  reference_id?: string;
  /** The fulfillment status of an order as reflected in the shipping/order management application. Typical statuses include Shipped,Awaiting Shipment,Not fulfilled etc;
   */
  fulfillment_status?: string;
  /** Unique id to identify a group of orders.
   */
  batch_id?: string;
  /** The time at which the order was created
   */
  created_at: number;
};

/**
 * Credit note status. \* refund_due - When the credits are yet to be used, or have been partially used. \* adjusted - When the Credit Note has been adjusted against an invoice. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* voided - When the Credit Note has been cancelled.

 */
export type InvoiceIssuedCreditNotesItemCnStatus =
  (typeof InvoiceIssuedCreditNotesItemCnStatus)[keyof typeof InvoiceIssuedCreditNotesItemCnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceIssuedCreditNotesItemCnStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * Credit note reason code. Deprecated; use the cn_create_reason_code parameter instead \* fraudulent - FRAUDULENT \* product_unsatisfactory - Product Unsatisfactory \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* service_unsatisfactory - Service Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* order_change - Order Change \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* order_cancellation - Order Cancellation \* other - Can be set when none of the above reason codes are applicable

 */
export type InvoiceIssuedCreditNotesItemCnReasonCode =
  (typeof InvoiceIssuedCreditNotesItemCnReasonCode)[keyof typeof InvoiceIssuedCreditNotesItemCnReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceIssuedCreditNotesItemCnReasonCode = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

export type InvoiceIssuedCreditNotesItem = {
  /** Credit-note id
   */
  cn_id: string;
  /** Credit note reason code. Deprecated; use the cn_create_reason_code parameter instead \* fraudulent - FRAUDULENT \* product_unsatisfactory - Product Unsatisfactory \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* service_unsatisfactory - Service Unsatisfactory \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* order_change - Order Change \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* order_cancellation - Order Cancellation \* other - Can be set when none of the above reason codes are applicable
   */
  cn_reason_code?: InvoiceIssuedCreditNotesItemCnReasonCode;
  /** Credit note reason code
   */
  cn_create_reason_code?: string;
  /** Indicates the date at which this credit note is created
   */
  cn_date?: number;
  /** Total amount of the credit note.
   */
  cn_total?: number;
  /** Credit note status. \* refund_due - When the credits are yet to be used, or have been partially used. \* adjusted - When the Credit Note has been adjusted against an invoice. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* voided - When the Credit Note has been cancelled.
   */
  cn_status: InvoiceIssuedCreditNotesItemCnStatus;
};

/**
 * An invoice is a commercial document representing a sale of products/services offered by you to a customer. It enumerates all the charges, adjustments, payments, discounts and taxes associated with the sale.

An invoice is said to be a recurring one when it is has at least one charge for [a plan or an addon item price](./items?prod_cat_ver=2). It is a non-recurring one when it has charges for only charge-item prices or [one-time charges](https://www.chargebee.com/docs/2.0/charges.html).

The item prices for any given billing term of a subscription are billed via an invoice at the beginning of the term (unless the charges are left unbilled). However, item prices that belong to `metered` items are billed at the end of the term via a `pending` invoice that can [close automatically](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) or via [an API call](/docs/api/invoices?prod_cat_ver=2#close_a_pending_invoice). Moreover, when there are no `metered` items in the subscription, the invoices can still be generated as `pending` while [creating](/docs/api/subscriptions?prod_cat_ver=2#create_subscription_for_items) or [updating](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items) a subscription.

#### Auto-collection

If [auto-collection](https://www.chargebee.com/docs/2.0/customers.html#auto-collection-status) is enabled, then immediately on invoice generation (or, in case of subscriptions that have `create_pending_invoices` as `true`, on [invoice closure](/docs/api/invoices?prod_cat_ver=2#close_a_pending_invoice)), the [payment method](./customers?prod_cat_ver=2#customer_payment_method) on file is charged:

* If the payment succeeds, the invoice is marked as `paid`.
* On payment failure, the invoice is marked as `payment_due` and [dunning settings](https://www.chargebee.com/docs/2.0/dunning-v2.html) are taken into account for payment retries.
* If no retry attempts are configured, or when retries are exhausted, the invoice is marked as `not_paid`.
* the amount due is zero or negative, the invoice is immediately marked as `paid` and the balance, if any, is added to [excess payments](https://www.chargebee.com/docs/2.0/customers.html#excess-payments) for the customer.

 */
export interface Invoice {
  /** The invoice number. Acts as a identifier for invoice and typically generated sequentially.
   */
  id: string;
  /** Purchase Order Number for this invoice
   */
  po_number?: string;
  /** The identifier of the customer this invoice belongs to.
   */
  customer_id: string;
  /** The identifier of the subscription this invoice belongs to.
   **Note** : When consolidated invoicing is enabled, you have to refer to [line_item\`s](https://apidocs.chargebee.com/docs/api/invoices#invoice_line_items) `subscription_id` to identify the subscriptions associated with this invoice. However, it is important to avoid using this attribute if the invoice includes charges from multiple subscriptions, as it will be null in such cases.
   */
  subscription_id?: string;
  /** Boolean indicating whether this invoice belongs to a subscription
   */
  recurring: boolean;
  /** Current status of this invoice. \* not_paid - Indicates the payment is not made and all attempts to collect is failed. \* voided - Indicates a voided invoice. \* paid - Indicates a paid invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings.
 */
  status: InvoiceStatus;
  /** VAT/ Tax registration number of the customer. [Learn more](https://www.chargebee.com/docs/tax.html#capture-tax-registration-number)
   */
  vat_number?: string;
  /** The price type of the invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: InvoicePriceType;
  /** The document date displayed on the invoice PDF. By default, it has the same value as the effective date of the action that created the invoice (subscription creation, update, or invoice creation). This date can be backdated (set to a value in the past) while performing the actions. Backdating an invoice is done for reasons such as booking revenue for a previous date or when the subscription or non-recurring charge is effective as of a past date. However, if the invoice is created as `pending`, and if the site is configured to set invoice dates to the date of closing, then upon invoice closure, this date is changed to the invoice closing date.
   */
  date?: number;
  /** Due date of the invoice
   */
  due_date?: number;
  /** Number of days within which the invoice has to be paid
   */
  net_term_days?: number;
  /** Exchange rate used for base currency conversion.

Note that when converting foreign currency invoices to local currency for VAT purposes, the exchange rates used differ from the base currency exchange rate provided in this field. This is due to regulations set by tax authorities, which require the use of official sources such as European Central Bank rates for local currency conversion. To calculate the exchange rate utilized for VAT in local currency, you may use the following formula.  
**Exchange rate** = tax_amount_in_local_currency / tax_amount
 */
  exchange_rate?: number;
  /** The currency code (ISO 4217 format) for the invoice
   */
  currency_code: string;
  /** Invoiced amount displayed in cents; that is, a decimal point is not present between the whole number and the decimal part. For example, $499.99 is displayed as 49999, and so on.
   */
  total?: number;
  /** Payments collected successfully for the invoice. This is the sum of [linked_payments[]](invoices#invoice_linked_payments)`.txn_amount` for all `linked_payments[]` that have `txn_status` as `success`.
   */
  amount_paid?: number;
  /** Total adjustments made against this invoice.
   */
  amount_adjusted?: number;
  /** Amount written off against this invoice.
   */
  write_off_amount?: number;
  /** Total credits applied against this invoice.
   */
  credits_applied?: number;
  /** The unpaid amount that is due on the invoice. This is calculated as: [total](invoices#invoice_total) - [amount_paid](invoices#invoice_amount_paid) - sum of [applied_credits](invoices#invoice_applied_credits)`.applied_amount` - sum of [adjustment_credit_notes](invoices#invoice_adjustment_credit_notes)`.cn_total` - sum of [linked_taxes_withheld](invoices#invoice_linked_taxes_withheld)`.amount`.
   */
  amount_due?: number;
  /** Timestamp indicating the date \& time this invoice got paid.
   */
  paid_at?: number;
  /** Current dunning status of the invoice. \* exhausted - Maximum number of attempts have been made. \* stopped - Dunning has stopped for this invoice. \* success - Payment successfully collected during dunning process. \* in_progress - Dunning is still in progress.
   */
  dunning_status?: InvoiceDunningStatus;
  /** Timestamp indicating when will the next attempt to collect payment for this invoice occur.
   */
  next_retry_at?: number;
  /** Timestamp indicating the date \& time this invoice got voided.
   */
  voided_at?: number;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  resource_version?: number;
  /** Timestamp indicating when this invoice was last updated. This attribute will be present only if the resource has been updated after 2016-09-28.
   **Note** : This value does not change when the following attributes are changed: *next_retry_at, dunning_status, has_advance_charges*
   */
  updated_at?: number;
  /** The sum of all the line item amounts minus the sum of all line item discounts. In other words, this is the sum of all [line_items[]](invoices#invoice_line_items)`.amount` - the sum of all [line_item_discounts[]](invoices#invoice_line_item_discounts)`.discount_amount`.
   */
  sub_total: number;
  /** Invoice subtotal in the currency of the place of supply.
   */
  sub_total_in_local_currency?: number;
  /** Total invoice amount in the currency of the place of supply.
   */
  total_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed.
   */
  local_currency_code?: string;
  /** Total tax amount for this invoice
   */
  tax: number;
  /** This parameter represents the exchange rate as a relative price of the base currency that appears as local currency in invoices and credit notes. The local currency exchange rate specifically refers to the exchange rate of a country's currency when converting it to another currency. For example, if you want to convert US dollars to euros, the local currency exchange rate would be the rate at which you can convert US dollars to euros.
   */
  local_currency_exchange_rate?: number;
  /** Boolean indicating the first invoice raised for the subscription. In the case of a non-recurring invoice, it indicates the first invoice raised for the customer.
   */
  first_invoice?: boolean;
  /** The share of the invoice total due to new sales. When `first_invoice` is `true`, this attribute is the same as total. However, when the invoice is a [consolidated](https://www.chargebee.com/docs/2.0/consolidated-invoicing.html )one, then it is the sum of all `line_items.amount` belonging to a new.
   */
  new_sales_amount?: number;
  /** Boolean indicating any advance charge is present in this invoice.
   */
  has_advance_charges?: boolean;
  /** Boolean indicating this invoice line_items terms are finalized or not.
   */
  term_finalized: boolean;
  /** Boolean indicating this invoice is gifted or not.
   */
  is_gifted: boolean;
  /** The date when the invoice is finalized. This is the date in the invoice lifecycle when its `status` becomes any one of the following for the first time: `payment_due`, `posted`, or `paid`. For an invoice with `status` as `pending`, this happens when it gets closed.
   */
  generated_at?: number;
  /** Expected payment date recorded for this invoice.
   */
  expected_payment_date?: number;
  /** Payments that are yet to be collected for the invoice. This is the same value as [amount_due](invoices#invoice_amount_due) - the sum of [linked_payments[]](invoices#invoice_linked_payments)`.txn_amount` for all `linked_payments[]` that have `txn_status` as `in_progress`.
   */
  amount_to_collect?: number;
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** Payment owner of an invoice
   */
  payment_owner?: string;
  /** Reason code for voiding the invoice. Select from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Invoices \> Void invoice**. Must be passed if set as mandatory in the app. The codes are case-sensitive
   */
  void_reason_code?: string;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** Specifies the customer's category for the Goods and Services Tax (GST). This field is returned only if you've configured GST for the India region.
   */
  tax_category?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
\* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.
 */
  channel?: InvoiceChannel;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this invoice. Depending on whether the invoice was created directly for a customer or for a subscription, this is the business entity of the [customer](/docs/api/invoices?prod_cat_ver=2#invoice_customer_id) or the [subscription](/docs/api/invoices?prod_cat_ver=2#invoice_subscription_id) respectively.
   */
  business_entity_id?: string;
  /** The list of line items for this invoice
   */
  line_items?: InvoiceLineItemsItem[];
  /** The list of all deductions applied to the invoice.
   */
  discounts?: InvoiceDiscountsItem[];
  /** The list of deduction(s) applied for each line item of this invoice
   */
  line_item_discounts?: InvoiceLineItemDiscountsItem[];
  /** The list of taxes applied for this invoice
   */
  taxes?: InvoiceTaxesItem[];
  /** The list of taxes applied on line items
   */
  line_item_taxes?: InvoiceLineItemTaxesItem[];
  /** The list of tiers applicable for this line item
   */
  line_item_tiers?: InvoiceLineItemTiersItem[];
  /** The list of transactions for this invoice
   */
  linked_payments?: InvoiceLinkedPaymentsItem[];
  /** The list of dunning_attempts for this invoice
   */
  dunning_attempts?: InvoiceDunningAttemptsItem[];
  /** Refundable Credits applied on this invoice.
   */
  applied_credits?: InvoiceAppliedCreditsItem[];
  /** Adjustments created for this invoice
   */
  adjustment_credit_notes?: InvoiceAdjustmentCreditNotesItem[];
  /** Credit notes issued for this invoice
   */
  issued_credit_notes?: InvoiceIssuedCreditNotesItem[];
  /** The list of orders for this invoice
   */
  linked_orders?: InvoiceLinkedOrdersItem[];
  /** The list of [notes](https://www.chargebee.com/docs/2.0/invoice_notes.html) that appear on the invoice PDF sent to the customer. Notes that come from a specific resource related to the invoice have `entity_type` and `entity_id` defined. There can be up to two notes in this array for which `entity_type` and `entity_id` are not defined:

* **Invoice-specific note:** It is the note provided via the `invoice_note` parameter for various endpoints in the API that also create invoices. For example, [creating a subscription](https://apidocs.chargebee.com/docs/api/subscriptions?prod_cat_ver=2#create_subscription_for_items_invoice_notes), [creating an invoice](https://apidocs.chargebee.com/docs/api/invoices?prod_cat_ver=2&lang=curl#create_invoice_for_items_and_one_time_charges_invoice_note), and [closing a pending invoice](https://apidocs.chargebee.com/docs/api/invoices?prod_cat_ver=2&lang=curl#close_a_pending_invoice_invoice_note).
* **General note:** This note is added to all invoices of the Chargebee site. You can [add/edit](https://www.chargebee.com/docs/invoice_notes.html#adding-general-notes) this note in the Chargebee admin console.
 */
  notes?: InvoiceNotesItem[];
  /** Shipping address for the invoice.
   */
  shipping_address?: InvoiceShippingAddress;
  /** Billing address for the invoice.
   */
  billing_address?: InvoiceBillingAddress;
  /** An e-invoice or electronic invoice is a structured representation of an invoice that is interoperable between computerized invoicing systems. Depending on the country, e-invoicing can be necessary to meet financial/taxation authority regulations.
   */
  einvoice?: InvoiceEinvoice;
  /** Details of `tax_withheld` against this invoice.
   */
  linked_taxes_withheld?: InvoiceLinkedTaxesWithheldItem[];
}

/**
 * Credit note status. \* voided - When the Credit Note has been cancelled. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice.

 */
export type InvoiceAdjustmentCreditNotesItemCnStatus =
  (typeof InvoiceAdjustmentCreditNotesItemCnStatus)[keyof typeof InvoiceAdjustmentCreditNotesItemCnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceAdjustmentCreditNotesItemCnStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * Credit note reason code. Deprecated; use the cn_create_reason_code parameter instead \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* waiver - Waiver \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* service_unsatisfactory - Service Unsatisfactory \* order_cancellation - Order Cancellation \* fraudulent - FRAUDULENT \* product_unsatisfactory - Product Unsatisfactory \* other - Can be set when none of the above reason codes are applicable \* chargeback - Can be set when you are recording your customer Chargebacks \* order_change - Order Change \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation.

 */
export type InvoiceAdjustmentCreditNotesItemCnReasonCode =
  (typeof InvoiceAdjustmentCreditNotesItemCnReasonCode)[keyof typeof InvoiceAdjustmentCreditNotesItemCnReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceAdjustmentCreditNotesItemCnReasonCode = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

export type InvoiceAdjustmentCreditNotesItem = {
  /** Credit-note id
   */
  cn_id: string;
  /** Credit note reason code. Deprecated; use the cn_create_reason_code parameter instead \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* waiver - Waiver \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* service_unsatisfactory - Service Unsatisfactory \* order_cancellation - Order Cancellation \* fraudulent - FRAUDULENT \* product_unsatisfactory - Product Unsatisfactory \* other - Can be set when none of the above reason codes are applicable \* chargeback - Can be set when you are recording your customer Chargebacks \* order_change - Order Change \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation.
   */
  cn_reason_code?: InvoiceAdjustmentCreditNotesItemCnReasonCode;
  /** Credit note reason code
   */
  cn_create_reason_code?: string;
  /** Indicates the date at which this credit note is created
   */
  cn_date?: number;
  /** Total amount of the credit note.
   */
  cn_total?: number;
  /** Credit note status. \* voided - When the Credit Note has been cancelled. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice.
   */
  cn_status: InvoiceAdjustmentCreditNotesItemCnStatus;
};

/**
 * Credit note status. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* voided - When the Credit Note has been cancelled. \* adjusted - When the Credit Note has been adjusted against an invoice. \* refund_due - When the credits are yet to be used, or have been partially used.

 */
export type InvoiceAppliedCreditsItemCnStatus =
  (typeof InvoiceAppliedCreditsItemCnStatus)[keyof typeof InvoiceAppliedCreditsItemCnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceAppliedCreditsItemCnStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * Credit note reason code. Deprecated; use the cn_create_reason_code parameter instead \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* other - Can be set when none of the above reason codes are applicable \* order_cancellation - Order Cancellation \* order_change - Order Change \* product_unsatisfactory - Product Unsatisfactory \* waiver - Waiver \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* fraudulent - FRAUDULENT \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* service_unsatisfactory - Service Unsatisfactory

 */
export type InvoiceAppliedCreditsItemCnReasonCode =
  (typeof InvoiceAppliedCreditsItemCnReasonCode)[keyof typeof InvoiceAppliedCreditsItemCnReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceAppliedCreditsItemCnReasonCode = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

export type InvoiceAppliedCreditsItem = {
  /** Credit applied on the credit note ID.
   */
  cn_id: string;
  /** Total credit amount applied to this invoice.
   */
  applied_amount: number;
  /** Timestamp when the credit amount was applied to this invoice.
   */
  applied_at: number;
  /** Credit note reason code. Deprecated; use the cn_create_reason_code parameter instead \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* other - Can be set when none of the above reason codes are applicable \* order_cancellation - Order Cancellation \* order_change - Order Change \* product_unsatisfactory - Product Unsatisfactory \* waiver - Waiver \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* fraudulent - FRAUDULENT \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* service_unsatisfactory - Service Unsatisfactory
   */
  cn_reason_code?: InvoiceAppliedCreditsItemCnReasonCode;
  /** Credit note reason code
   */
  cn_create_reason_code?: string;
  /** Indicates the date at which this credit note is created
   */
  cn_date?: number;
  /** Credit note status. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* voided - When the Credit Note has been cancelled. \* adjusted - When the Credit Note has been adjusted against an invoice. \* refund_due - When the credits are yet to be used, or have been partially used.
   */
  cn_status: InvoiceAppliedCreditsItemCnStatus;
};

/**
 * The status of this transaction. \* success - The transaction is successful. \* voided - The transaction got voided or authorization expired at gateway. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* timeout - Transaction failed because of Gateway not accepting the connection.

 */
export type InvoiceDunningAttemptsItemTxnStatus =
  (typeof InvoiceDunningAttemptsItemTxnStatus)[keyof typeof InvoiceDunningAttemptsItemTxnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceDunningAttemptsItemTxnStatus = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

/**
 * Types of dunning \* offline - Dunning type is offline. \* direct_debit - Dunning type is direct debit. \* auto_collect - Dunning type is auto collection.

 */
export type InvoiceDunningAttemptsItemDunningType =
  (typeof InvoiceDunningAttemptsItemDunningType)[keyof typeof InvoiceDunningAttemptsItemDunningType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceDunningAttemptsItemDunningType = {
  auto_collect: "auto_collect",
  offline: "offline",
  direct_debit: "direct_debit",
} as const;

export type InvoiceDunningAttemptsItem = {
  /** Dunning attempt number.
   */
  attempt: number;
  /** Transaction associated with attempt.
   */
  transaction_id?: string;
  /** Types of dunning \* offline - Dunning type is offline. \* direct_debit - Dunning type is direct debit. \* auto_collect - Dunning type is auto collection.
   */
  dunning_type: InvoiceDunningAttemptsItemDunningType;
  /** Timestamp at which the attempt was made.
   */
  created_at?: number;
  /** The status of this transaction. \* success - The transaction is successful. \* voided - The transaction got voided or authorization expired at gateway. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* timeout - Transaction failed because of Gateway not accepting the connection.
   */
  txn_status?: InvoiceDunningAttemptsItemTxnStatus;
  /** Total amount of the transaction
   */
  txn_amount?: number;
};

/**
 * The status of this transaction. \* timeout - Transaction failed because of Gateway not accepting the connection. \* voided - The transaction got voided or authorization expired at gateway. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* success - The transaction is successful.

 */
export type InvoiceLinkedPaymentsItemTxnStatus =
  (typeof InvoiceLinkedPaymentsItemTxnStatus)[keyof typeof InvoiceLinkedPaymentsItemTxnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLinkedPaymentsItemTxnStatus = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

export type InvoiceLinkedPaymentsItem = {
  /** Uniquely identifies the transaction.
   */
  txn_id: string;
  /** The transaction amount applied to this invoice
   */
  applied_amount: number;
  /** Timestamp at which the transaction is applied.
   */
  applied_at: number;
  /** The status of this transaction. \* timeout - Transaction failed because of Gateway not accepting the connection. \* voided - The transaction got voided or authorization expired at gateway. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method. \* success - The transaction is successful.
   */
  txn_status?: InvoiceLinkedPaymentsItemTxnStatus;
  /** Indicates when this transaction occurred.
   */
  txn_date?: number;
  /** Total amount of the transaction
   */
  txn_amount?: number;
};

export type InvoiceLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * The type of tax jurisdiction \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* other - Jurisdictions other than the ones listed above.

 */
export type InvoiceLineItemTaxesItemTaxJurisType =
  (typeof InvoiceLineItemTaxesItemTaxJurisType)[keyof typeof InvoiceLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type InvoiceLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* other - Jurisdictions other than the ones listed above.
   */
  tax_juris_type?: InvoiceLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type InvoiceTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`.

 */
export type InvoiceLineItemDiscountsItemDiscountType =
  (typeof InvoiceLineItemDiscountsItemDiscountType)[keyof typeof InvoiceLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type InvoiceLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`.
   */
  discount_type: InvoiceLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount

 */
export type InvoiceDiscountsItemDiscountType =
  (typeof InvoiceDiscountsItemDiscountType)[keyof typeof InvoiceDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type InvoiceDiscountsItemEntityType =
  (typeof InvoiceDiscountsItemEntityType)[keyof typeof InvoiceDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type InvoiceDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.
   */
  entity_type: InvoiceDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount
   */
  discount_type?: InvoiceDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively

 */
export type InvoiceLineItemsItemTaxExemptReason =
  (typeof InvoiceLineItemsItemTaxExemptReason)[keyof typeof InvoiceLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id

 */
export type InvoiceLineItemsItemEntityType =
  (typeof InvoiceLineItemsItemEntityType)[keyof typeof InvoiceLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.

 */
export type InvoiceLineItemsItemPricingModel =
  (typeof InvoiceLineItemsItemPricingModel)[keyof typeof InvoiceLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type InvoiceLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](https://apidocs.chargebee.com/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) represented by this line item.

For metered line items, this value is updated from [usages](https://apidocs.chargebee.com/docs/api/usages) when:

* the invoice is generated as pending

* the invoice is [closed](https://apidocs.chargebee.com/docs/api/invoices#close_a_pending_invoice)

* the sync usages API is called

 */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
   */
  pricing_model?: InvoiceLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** The unique identifier of the invoice line item to which this credit note line item is related. This is the same as [invoice.line_items.id](https://apidocs.chargebee.com/docs/api/invoices#invoice_line_items_id ).
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id
   */
  entity_type: InvoiceLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively
   */
  tax_exempt_reason?: InvoiceLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
\* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.

 */
export type InvoiceChannel =
  (typeof InvoiceChannel)[keyof typeof InvoiceChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * Current dunning status of the invoice. \* exhausted - Maximum number of attempts have been made. \* stopped - Dunning has stopped for this invoice. \* success - Payment successfully collected during dunning process. \* in_progress - Dunning is still in progress.

 */
export type InvoiceDunningStatus =
  (typeof InvoiceDunningStatus)[keyof typeof InvoiceDunningStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceDunningStatus = {
  in_progress: "in_progress",
  exhausted: "exhausted",
  stopped: "stopped",
  success: "success",
} as const;

/**
 * The price type of the invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type InvoicePriceType =
  (typeof InvoicePriceType)[keyof typeof InvoicePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoicePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * Current status of this invoice. \* not_paid - Indicates the payment is not made and all attempts to collect is failed. \* voided - Indicates a voided invoice. \* paid - Indicates a paid invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings.

 */
export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvoiceStatus = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

/**
 * The status of the subscription for the store \* paused - When the subscription is paused. \* in_trial - When the subscription is in trial. \* active - When the subscription is active. \* cancelled - When the subscription is cancelled.

 */
export type InAppSubscriptionStoreStatus =
  (typeof InAppSubscriptionStoreStatus)[keyof typeof InAppSubscriptionStoreStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InAppSubscriptionStoreStatus = {
  in_trial: "in_trial",
  active: "active",
  cancelled: "cancelled",
  paused: "paused",
} as const;

/**
 * Using In-app Subscriptions, you can track subscriptions you sell and service via in-app purchase channels such as
Apple's App Store and Google's Play Store. Call [this
API](/docs/api/in_app_subscriptions#process_purchase_command) to notify Chargebee of new subscription purchases. Chargebee responds by creating corresponding
subscriptions. You can make the API call directly from the client-side application or from your server. In the case of the Apple App Store and Google Play Store integration, you can also configure Chargebee to receive server notifications from [Apple](https://developer.apple.com/documentation/appstoreservernotifications) and [Google](https://developer.android.com/google/play/billing/rtdn-reference#sub) to keep subscriptions up-to-date.  
**Note:**



* Only **one** app can be connected to any given Chargebee site via Chargebee's user interface. To connect multiple apps [contact support](https://support.chargebee.com/support/home) .
* After creating a subscription in Chargebee using the [process purchase command](https://apidocs.chargebee.com/docs/api/in_app_subscriptions#process_purchase_command)API, Chargebee manages it in real-time using notification events from [Apple](https://apidocs.chargebee.com/docs/api/in_app_purchase_events#app_store_notifications) or [Google](https://apidocs.chargebee.com/docs/api/in_app_purchase_events#play_store_notifications). To enable these notifications, generate a notification URL using these links - [Apple](https://www.chargebee.com/docs/2.0/mobile-app-store-product-iap.html#connection-keys_notification-url) and [Google](https://www.chargebee.com/docs/2.0/mobile-playstore-notifications.html) and configure it in their respective stores.  
**In-app subscriptions are read-only**

The subscriptions created via the [Process
Purchase Command API](/docs/api/in_app_subscriptions#process_purchase_command) are managed by Apple or Google in response to actions taken by your subscribers via
their respective accounts. Chargebee only keeps track of these subscriptions: creating and modifying them in
response to events happening against the original subscriptions. Consequently, these subscriptions cannot be
modified by you via the Chargebee admin console or the [Subscriptions API](/docs/api/subscriptions).

 */
export interface InAppSubscription {
  /** The `id` of the [subscription](subscriptions#subscription_id) for which the receipt was sent.
   */
  subscription_id: string;
  /** The `id` of the [customer](customers#customer_id) object to which the subscription belongs.
   */
  customer_id?: string;
  /** The `id` of the plan-item price of the subscription.
   */
  plan_id?: string;
  /** The status of the subscription for the store \* paused - When the subscription is paused. \* in_trial - When the subscription is in trial. \* active - When the subscription is active. \* cancelled - When the subscription is cancelled.
   */
  store_status?: InAppSubscriptionStoreStatus;
  /** The `id` of the invoice generated in Chargebee
   */
  invoice_id?: string;
}

/**
 * The \[download\](/docs/api/downloads) resource containing all the impacted subscription IDs. The list of IDs is available as a JSON array in the file at \`download.url\` until \`download.valid_till\`.

 */
export type ImpactedSubscriptionDownload = {
  /** The URL at which the file is available for download.
   */
  download_url: string;
  /** The time until which the `download_url` is valid.
   */
  valid_till: number;
  /** The [media type](https://en.wikipedia.org/wiki/Media_type) of the file.
   */
  mime_type?: string;
};

/**
 * [Subscription entitlements](/docs/api/subscription_entitlements) can change due to certain [events](/docs/api/events) in Chargebee. The `impacted_subscriptions` represents the subscriptions whose entitlements have changed owing to an event. It is returned as part of the `content` attribute of the webhook triggered by the event. The following events can contain the `impacted_subscriptions` resource:

* A `feature` is [created](/docs/api/events#feature_created), [activated](/docs/api/events#feature_activated), or [deleted](/docs/api/events#feature_deleted).
* An `item_entitlement` is [updated](/docs/api/events#item_entitlements_updated) or [removed](/docs/api/events#item_entitlements_removed).
* An `entitlement_override` is [updated](/docs/api/events#entitlement_overrides_updated), [removed](/docs/api/events#item_entitlements_removed), or [auto-removed](/docs/api/events#entitlement_overrides_auto_removed).

**Note**   
`impacted_subscriptions` cannot be retrieved via API; the resource is sent to you only via webhooks.

 */
export interface ImpactedSubscription {
  /** The total number of subscriptions that have been impacted.
   */
  count?: number;
  /** The list of IDs of the subscriptions that have been impacted. This list can contain a maximum of 1,000 IDs. The full list of subscription IDs is available in `download`.
   */
  subscription_ids?: unknown[];
  /** The \[download\](/docs/api/downloads) resource containing all the impacted subscription IDs. The list of IDs is available as a JSON array in the file at \`download.url\` until \`download.valid_till\`.
   */
  download?: ImpactedSubscriptionDownload;
}

/**
 * The \[download\](/docs/api/downloads) resource containing all the impacted items. The list of items is available as a JSON array in the file at \`download.url\` until \`download.valid_till\`.

 */
export type ImpactedItemDownload = {
  /** The URL at which the file is available for download.
   */
  download_url: string;
  /** The time until which the `download_url` is valid.
   */
  valid_till: number;
  /** The [media type](https://en.wikipedia.org/wiki/Media_type) of the file.
   */
  mime_type?: string;
};

/**
 * Item entitlements can change due to certain events in Chargebee. The impacted_items represents the items whose entitlements have changed owing to an event. It is returned as part of the content attribute of the webhook triggered by the event. The following events can contain the impacted_items resource:

* A feature is created, activated, or deleted.
* An item_entitlement is updated or removed.
* An entitlement_override is auto-removed.

**Note**   
impacted_items cannot be retrieved via API; the resource is sent to you only via webhooks.

 */
export interface ImpactedItem {
  /** The total number of items that have been impacted.
   */
  count?: number;
  /** The list of items that have been impacted. The objects in this array have the following keys:

* `id`: (string, max chars = 100) The [unique identifier](/docs/api/items#item_id) for the item.
* `type`: (enumerated string) The [type](/docs/api/items#item_type) of the item.

This list can contain a maximum of 1,000 items. The full list of items is available in `download`.
 */
  items?: unknown[];
  /** The \[download\](/docs/api/downloads) resource containing all the impacted items. The list of items is available as a JSON array in the file at \`download.url\` until \`download.valid_till\`.
   */
  download?: ImpactedItemDownload;
}

/**
 * Customer Info (email, first name and last name) given in the checkout page used for tracking abandoned carts. \[Learn more\](https://www.chargebee.com/docs/abandoned-carts.html)

 */
export type HostedPageCheckoutInfo = { [key: string]: any };

/**
 * This attribute will be returned only during retrieve hosted page API call and also the retrieved hosted page resource state should be either in "succeeded" or "cancelled" state. If hosted page state is "succeeded", then the subscription, customer, card \\\& invoice(optional) resources during checkout can be obtained. If hosted page is state is "cancelled", then it will be empty i.e no information about checkout.

 */
export type HostedPageContent = { [key: string]: any };

/**
 * Indicating the current state of the hosted page resource. \* acknowledged - Indicates the succeeded hosted page is acknowledged. \* created - Indicates the hosted page is just created. \* requested - Indicates the hosted page is requested by the website \* cancelled - Indicates the page is cancelled by the end user after requesting it. \* succeeded - Indicates the hosted page is successfully submitted by the user and response is sent to the return url.

 */
export type HostedPageState =
  (typeof HostedPageState)[keyof typeof HostedPageState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HostedPageState = {
  created: "created",
  requested: "requested",
  succeeded: "succeeded",
  cancelled: "cancelled",
  acknowledged: "acknowledged",
} as const;

/**
 * Type of the requested hosted page. \* collect_now - Collect Unpaid Invoices for a Customer \* checkout_gift - Checkout a gift subscription \* checkout_new - Checkout new Subscription \* extend_subscription - To extend a Subscription period \* checkout_one_time - Checkout one time \* update_payment_method - Update Payment Method for a Customer \* view_voucher - View Details of a voucher \* pre_cancel - This hosted page is used to help retain customers when they attempt to cancel their account or subscription. \* manage_payment_sources - Manage Payments for a customer \* checkout_existing - Checkout existing Subscription \* claim_gift - Claim a gift subscription

 */
export type HostedPageType =
  (typeof HostedPageType)[keyof typeof HostedPageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HostedPageType = {
  checkout_new: "checkout_new",
  checkout_existing: "checkout_existing",
  update_payment_method: "update_payment_method",
  manage_payment_sources: "manage_payment_sources",
  collect_now: "collect_now",
  extend_subscription: "extend_subscription",
  checkout_one_time: "checkout_one_time",
  pre_cancel: "pre_cancel",
  view_voucher: "view_voucher",
} as const;

/**
 * Hosted pages are the easiest way to integrate Chargebee with your website. For card payment methods, they help meet most of your PCI DSS compliance requirements. Chargebee offers hosted pages where your customers can perform the following actions:

* [Checkout a new subscription](./hosted_pages?prod_cat_ver=2#create_checkout_for_a_new_subscription)
* [Checkout changes to an existing subscription](./hosted_pages?prod_cat_ver=2#create_checkout_to_update_a_subscription)
* [Update a payment method](./hosted_pages?prod_cat_ver=2#update_payment_method)
* [Make payments for all due invoices](./hosted_pages?prod_cat_ver=2#collect_now)
* [Extending a subscription](./hosted_pages?prod_cat_ver=2#extend_subscription)

When you create a hosted page, it is available at a secure and unique URL. This URL can then be provided to your customer on your website or by other means such as email. On successful completion of the hosted page workflow by the customer, they are redirected to the `redirect_url` with the hosted page `id` and `state` passed as query string parameters. As soon as the redirection happens, [retrieve the hosted page](./hosted_pages?prod_cat_ver=2#retrieve_a_hosted_page) to get details of the customer, subscription, invoice etc.




 */
export interface HostedPage {
  /** Unique identifier generated for each hosted page requested.
   */
  id?: string;
  /** Type of the requested hosted page. \* collect_now - Collect Unpaid Invoices for a Customer \* checkout_gift - Checkout a gift subscription \* checkout_new - Checkout new Subscription \* extend_subscription - To extend a Subscription period \* checkout_one_time - Checkout one time \* update_payment_method - Update Payment Method for a Customer \* view_voucher - View Details of a voucher \* pre_cancel - This hosted page is used to help retain customers when they attempt to cancel their account or subscription. \* manage_payment_sources - Manage Payments for a customer \* checkout_existing - Checkout existing Subscription \* claim_gift - Claim a gift subscription
   */
  type?: HostedPageType;
  /** Unique URL for the hosted page that will be included in your website.
   */
  url?: string;
  /** Indicating the current state of the hosted page resource. \* acknowledged - Indicates the succeeded hosted page is acknowledged. \* created - Indicates the hosted page is just created. \* requested - Indicates the hosted page is requested by the website \* cancelled - Indicates the page is cancelled by the end user after requesting it. \* succeeded - Indicates the hosted page is successfully submitted by the user and response is sent to the return url.
   */
  state?: HostedPageState;
  /** You can pass through any content specific to the hosted page request and get it back after user had submitted the hosted page.
   */
  pass_thru_content?: string;
  /** Indicates when this hosted page url is generated.
   */
  created_at?: number;
  /** Indicates when this hosted page url will expire. After this, the hosted page cannot be accessed.
   */
  expires_at?: number;
  /** This attribute will be returned only during retrieve hosted page API call and also the retrieved hosted page resource state should be either in "succeeded" or "cancelled" state. If hosted page state is "succeeded", then the subscription, customer, card \\\& invoice(optional) resources during checkout can be obtained. If hosted page is state is "cancelled", then it will be empty i.e no information about checkout.
   */
  content: HostedPageContent;
  /** Timestamp indicating when this hosted page was last updated.
   */
  updated_at?: number;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  resource_version?: number;
  /** Customer Info (email, first name and last name) given in the checkout page used for tracking abandoned carts. \[Learn more\](https://www.chargebee.com/docs/abandoned-carts.html)
   */
  checkout_info?: HostedPageCheckoutInfo;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this `hosted_page`.
   */
  business_entity_id?: string;
}

export type HierarchyOperationType =
  (typeof HierarchyOperationType)[keyof typeof HierarchyOperationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HierarchyOperationType = {
  complete_hierarchy: "complete_hierarchy",
  subordinates: "subordinates",
  path_to_root: "path_to_root",
} as const;

/**
 * Represents the hierarchical relationship between a customer (given by `customer_id`) and other customers who are its parent and child/children.

 */
export interface Hierarchy {
  /** The `id` of the customer
   */
  customer_id: string;
  /** The `id` of the customer who is the immediate parent.
   */
  parent_id?: string;
  /** The `id` of the customer who pays the invoices for this customer. Can be the customer itself or the `invoice_owner_id`
   */
  payment_owner_id: string;
  /** The `id` of the customer who is invoiced for charges incurred. Can be the customer itself or any parent in its hierarchy.
   */
  invoice_owner_id: string;
  /** The list of immediate children of the customer
   */
  children_ids?: string[];
}

/**
 * Status of the gift. \* cancelled - Gift is cancelled. \* expired - Gift is expired. \* scheduled - Gift has been scheduled. \* claimed - Gift is claimed. \* unclaimed - Gift is not yet claimed and is ready to be claimed.

 */
export type GiftGiftTimelinesItemStatus =
  (typeof GiftGiftTimelinesItemStatus)[keyof typeof GiftGiftTimelinesItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftGiftTimelinesItemStatus = {
  scheduled: "scheduled",
  unclaimed: "unclaimed",
  claimed: "claimed",
  cancelled: "cancelled",
  expired: "expired",
} as const;

export type GiftGiftTimelinesItem = {
  /** Status of the gift. \* cancelled - Gift is cancelled. \* expired - Gift is expired. \* scheduled - Gift has been scheduled. \* claimed - Gift is claimed. \* unclaimed - Gift is not yet claimed and is ready to be claimed.
   */
  status: GiftGiftTimelinesItemStatus;
  /** Timestamp indicating when this event occurred.
   */
  occurred_at?: number;
};

/**
 * Receiver details

 */
export type GiftGiftReceiver = {
  /** Receiver customer id.
   */
  customer_id: string;
  /** Subscription created for the gift.
   */
  subscription_id: string;
  /** First name of the receiver as given by the gifter.
   */
  first_name?: string;
  /** Last name of the receiver as given by the gifter,
   */
  last_name?: string;
  /** Email of the receiver. All gift related emails are sent to this email.
   */
  email?: string;
};

/**
 * Gifter details

 */
export type GiftGifter = {
  /** Gifter customer id.
   */
  customer_id: string;
  /** Invoice raised on the gifter.
   */
  invoice_id?: string;
  /** Gifter sign-off name
   */
  signature?: string;
  /** Personalized message for the gift.
   */
  note?: string;
};

/**
 * Status of the gift. \* claimed - Gift is claimed. \* cancelled - Gift is cancelled. \* unclaimed - Gift is not yet claimed and is ready to be claimed. \* scheduled - Gift has been scheduled. \* expired - Gift is expired.

 */
export type GiftStatus = (typeof GiftStatus)[keyof typeof GiftStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GiftStatus = {
  scheduled: "scheduled",
  unclaimed: "unclaimed",
  claimed: "claimed",
  cancelled: "cancelled",
  expired: "expired",
} as const;

/**
 * Gift represents a subscription of a customer(**recipient** ) to a 'gift plan' which has been gifted by another customer(**gifter**). It may also have addons and coupons. Gift will be created only on immediate successful payment collection from the gifter's payment method.

Gift is initially created in '**scheduled** ' state. The gift can be scheduled to be notified on a particular date to the recipient by passing 'scheduled_at'. If not, the recipient is notified immediately. Gift will be moved to '**unclaimed** ' state on the date of notification. If you pass auto_claim as true, gift status will be moved to '**claimed**' immediately, otherwise, the gift will remain 'unclaimed' till the recipient claims the gift.

If the gift is not claimed before the claim_expiry_date, it will be moved to the '**expired**' state.

#### GIFT SUBSCRIPTION

Gift subscriptions will be created in '**future** ' state. Once the gift is claimed, the subscription will be moved to '**non-renewing**' state.

#### INVOICE

Gift subscriptions will be invoiced immediately. The invoice created has **is_gifted** as 'true' and **term_finalized** as 'false'. This is because initially the invoice term_start and term_end are set as the subscription's start_date till the end of the plan period. Once the gift is claimed, the invoice's term_finalized will be marked as 'true'. The term_start will be changed to the actual invoice's term, which is the gift-claim date and the term_end will be changed till plan's period.

 */
export interface Gift {
  /** Uniquely identifies a gift
   */
  id: string;
  /** Status of the gift. \* claimed - Gift is claimed. \* cancelled - Gift is cancelled. \* unclaimed - Gift is not yet claimed and is ready to be claimed. \* scheduled - Gift has been scheduled. \* expired - Gift is expired.
   */
  status: GiftStatus;
  /** Indicates the date on which the gift notification is sent to the receiver. If not passed, the receiver is notified immediately.
   */
  scheduled_at?: number;
  /** When `true`, the claim happens automatically. When not passed, the default value in the site settings is used.
   */
  auto_claim: boolean;
  /** When `true`, indicates that the gift does not expire. Do not pass or pass as `false` when `auto_claim` is set.
   */
  no_expiry: boolean;
  /** The date until which the gift can be claimed. Must be set to a value after `scheduled_at`. If the gift is not claimed within `claim_expiry_date`, it will expire and the subscription will move to `cancelled` state. When not passed, the value specified in the site settings will be used. Pass as `NULL` or do not pass when `auto_claim` or `no_expiry` are set.
   */
  claim_expiry_date?: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this gift resource was last updated.
   */
  updated_at?: number;
  /** Gifter details
   */
  gifter: GiftGifter;
  /** Receiver details
   */
  gift_receiver: GiftGiftReceiver;
  /** Gift timeline details
   */
  gift_timelines?: GiftGiftTimelinesItem[];
}

export type Gateway = (typeof Gateway)[keyof typeof Gateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Gateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

export type FullExportDownload = {
  download_url: string;
  valid_till: number;
  mime_type?: string;
};

export type FullExportStatus =
  (typeof FullExportStatus)[keyof typeof FullExportStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FullExportStatus = {
  in_process: "in_process",
  completed: "completed",
  failed: "failed",
} as const;

export interface FullExport {
  table: string;
  status: FullExportStatus;
  export_date: string;
  created_at: number;
  download?: FullExportDownload;
}

export type FriendOfferType =
  (typeof FriendOfferType)[keyof typeof FriendOfferType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FriendOfferType = {
  none: "none",
  coupon: "coupon",
  coupon_code: "coupon_code",
} as const;

export type FreePeriodUnit =
  (typeof FreePeriodUnit)[keyof typeof FreePeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FreePeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

export type FeatureLevelsItem = {
  /** A case-sensitive display name for the entitlement level. Provide a name that helps you clearly identify the entitlement level. For example: a feature such as `Email Support` can have entitlement levels named as `All weekdays`, `All days`, `40 hours per week` and so on. When not provided for `feature.type` `quantity` or `range`, this name is auto-generated as the space-separated concatenation of `levels[].value` and the pluralized version of `unit`. For example, if `levels[].value` is `20` and `unit` is `user`, then `levels[].name` becomes `20 users`.
   */
  name?: string;
  /** The value denoting the entitlement level granted.

* **When `type` is `quantity`:** this attribute denotes the quantity of units of the feature for this entitlement level. For example, a feature such as `number of users` can have `levels[].value` as `5`, `20`, `50`, and `100`. `levels[].is_unlimited` is used to set the entitlement level to "unlimited".
* **When `type` is `range`:** there can be be only two elements in the `levels[]` array; one corresponding to the minimum value (`levels[0]`) and the other to the maximum value (`levels[1]`) of the range of possible entitlement levels. For example, a feature such as `number of users` may have `levels[0].value` = `5` and `levels[1].value` = `50000`. When the upper limit is "unlimited", then `levels[1].value` is not set and `levels[1].is_unlimited` is `true`.
* **When `type` is `custom`:** this attribute denotes the value of this custom entitlement level. For example, a feature `Email Support` can have `levels[].value` as one of say, `24√ó7` and `24√ó5`.
 */
  value: string;
  /** This attribute represents the order of the entitlement levels from lowest to highest.  

* When `type` is `quantity` or `custom`: The lowest entitlement level has the value `0`, the next higher level has the value `1`, followed by `2`, and so on.
* When `type` is `range`: This attribute is `0` for the minimum value and `1` for the maximum value in the range.

When not defined, it is assumed as the index of the `levels[]` array.
 */
  level: number;
  /** When `type` is `quantity` or `range`, this attribute indicates whether the entitlement level corresponds to unlimited units of the feature. Possible values:

* `true`: The entitlement level corresponds to unlimited units of the feature. `levels[].value` is ignored for this level. This can only be set for the level that has the highest value for `levels[].level.`
* `false`: The entitlement level does not correspond to unlimited units of the feature.
 */
  is_unlimited: boolean;
};

/**
 * The type of feature. \* quantity - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* range - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* switch - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* custom - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`.

 */
export type FeatureType = (typeof FeatureType)[keyof typeof FeatureType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FeatureType = {
  switch: "switch",
  custom: "custom",
  quantity: "quantity",
  range: "range",
} as const;

/**
 * The current status of the feature. \* active - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* draft - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`. \* archived - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective.

 */
export type FeatureStatus = (typeof FeatureStatus)[keyof typeof FeatureStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FeatureStatus = {
  active: "active",
  archived: "archived",
  draft: "draft",
} as const;

/**
 * Subscriptions are created in Chargebee using items. Items represent the products or services that you offer to your customers. Items often differ in the number of product features that are available to them. The Features API helps you define the various features offered as part of your product line. It also defines the entitlements that items and subscriptions can have towards said features.  
**Note**

The maximum number of features a site can have is 400.

Features of this API {#features}
--------------------------------

The Features API enables you to:

* Define the set of features provided by your product.
* Specify the entitlements that items have towards said features.
* For a given subscription, modify the entitlements inherited from items in the subscription.
* Offer additional feature entitlements to subscriptions than those inherited from items in the subscription.
* Serve as a source of truth to your provisioning systems for subscription entitlements.
* Use entitlement information to understand which features drive value and revenue.



**See also**

* [Item Entitlements](/docs/api/item_entitlements)
* [Subscription Entitlements](/docs/api/subscription_entitlements)
* [Entitlement Overrides](/docs/api/entitlement_overrides)

 */
export interface Feature {
  /** A unique and immutable identifier for the feature. You can set it yourself, in which case it is recommended that a human-readable format (or slug) be used. For example, `number-of-users-ccjht01`. When not provided, a random value is automatically set.
   */
  id: string;
  /** A case-sensitive unique name for the feature. For example: `user license`, `data storage`, `Salesforce Integration`, `devices`, `UHD Streaming`, and so on.
   **Note:** This name is not displayed on any customer-facing documents or pages such as [invoice PDFs](invoices#retrieve_invoice_as_pdf) or [hosted pages](hosted_pages). However, in the future, it is likely to be introduced on the [Self-Serve Portal](portal_sessions).
   */
  name: string;
  /** A brief description of the feature. For example: `Access to 10TB cloud storage`.
   */
  description?: string;
  /** The current status of the feature. \* active - A `draft` or an `archived` feature can be changed to `active`. Any [item](item_entitlements) or [subscription entitlements](subscription_entitlements) defined for the feature take effect immediately. \* draft - The feature is in an unpublished state. [Item](item_entitlements) and [subscription entitlements](subscription_entitlements) can be created for a draft feature but they are not effective until the feature is active. A feature `status` cannot be changed back to `draft` once it is in `active` or `archived` `status`. \* archived - An `active` feature can be changed to `archived`. Once `archived`, no **new** [item](item_entitlements) or [subscription entitlements](subscription_entitlements) can be created for the feature. However, any pre-existing item or subscription entitlements from the time that the feature was `active`, remain effective.
   */
  status?: FeatureStatus;
  /** The type of feature. \* quantity - The feature is quantity-based and entitlement levels available for it are a set of predefined number of quantity units. For example, a feature with `name` such as `number of users` can have entitlement levels of say, `5`, `20`, `50`, and `100`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* range - The feature is quantity-based and the entitlement levels available for it are the set of whole numbers within a range. The range is defined by a minimum and a maximum value. For example, a feature such as `number of users` can have entitlement levels starting at `5` users and go up to `50000`. `levels[is_unlimited]` is used for specifying the "unlimited" entitlement level. \* switch - A switch or toggle is a feature that an item or subscription can be either fully entitled to or not entitled to at all. \* custom - The entitlement levels available for this feature are defined as a set of custom values. For example, a feature `Email Support` can have entitlement levels as `24√ó7` and `24√ó5`.
   */
  type?: FeatureType;
  /** For features of `type` `quantity` or `range`, this specifies the unit of measure. The value is expected in the singular form and when used by the system, it is pluralized automatically as needed. For example, for a feature such as `user licenses`, the `unit` can be `license`.
   */
  unit?: string;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  resource_version?: number;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  updated_at?: number;
  /** When the feature was created.
   */
  created_at: number;
  /** An ordered list of entitlement levels available for the feature. This is only applicable when `type` is other than `switch`.
   **Note:** When the `type` of the feature is `switch`, this is not applicable. This is because any given item (or subscription) can be either fully entitled to a `switch` feature or not entitled at all; there are no intermediate entitlement levels.
   */
  levels?: FeatureLevelsItem[];
}

export type ExportType = (typeof ExportType)[keyof typeof ExportType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportType = {
  data: "data",
  import_friendly_data: "import_friendly_data",
} as const;

/**
 * Returns the download_url for the export. The download URL is valid upto a specific date.

 */
export type ExportDownload = {
  /** The URL at which the file is available for download.
   */
  download_url: string;
  /** The time until which the `download_url` is valid.
   */
  valid_till: number;
  /** The [media type](https://en.wikipedia.org/wiki/Media_type) of the file.
   */
  mime_type?: string;
};

/**
 * Current status of the export operation \* completed - Completed \* failed - Failed \* in_process - In Process

 */
export type ExportStatus = (typeof ExportStatus)[keyof typeof ExportStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportStatus = {
  in_process: "in_process",
  completed: "completed",
  failed: "failed",
} as const;

/**
 * Describes the mime type of download file \* pdf - PDF \* zip - ZIP

 */
export type ExportMimeType =
  (typeof ExportMimeType)[keyof typeof ExportMimeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExportMimeType = {
  pdf: "pdf",
  zip: "zip",
} as const;

/**
 * Export resource represents an export job and contains the status of the job and the download URL, if the job is successfully completed.

Export operations are asynchronous and will return "Export" resource in response . The export resource will contain the status of the export job (like in-process, completed...) . If the status is completed, it will contain the download url pointing to the zip/pdf containing the exported data.

**Note:** At any given point, only 5 export jobs can be processed. Beyond that, an error stating that the API request limit has been reached will be returned.

 */
export interface Export {
  /** A unique identifier to identify the export
   */
  id: string;
  /** Describes the type of export
   */
  operation_type: string;
  /** Describes the mime type of download file \* pdf - PDF \* zip - ZIP
   */
  mime_type: ExportMimeType;
  /** Current status of the export operation \* completed - Completed \* failed - Failed \* in_process - In Process
   */
  status: ExportStatus;
  /** Export created time
   */
  created_at: number;
  /** Returns the download_url for the export. The download URL is valid upto a specific date.
   */
  download?: ExportDownload;
}

export type EventType = (typeof EventType)[keyof typeof EventType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventType = {
  plan_created: "plan_created",
  plan_updated: "plan_updated",
  plan_deleted: "plan_deleted",
  addon_created: "addon_created",
  addon_updated: "addon_updated",
  addon_deleted: "addon_deleted",
  coupon_created: "coupon_created",
  coupon_updated: "coupon_updated",
  coupon_deleted: "coupon_deleted",
  coupon_set_created: "coupon_set_created",
  coupon_set_updated: "coupon_set_updated",
  coupon_set_deleted: "coupon_set_deleted",
  coupon_codes_added: "coupon_codes_added",
  coupon_codes_deleted: "coupon_codes_deleted",
  coupon_codes_updated: "coupon_codes_updated",
  customer_created: "customer_created",
  customer_changed: "customer_changed",
  customer_deleted: "customer_deleted",
  customer_moved_out: "customer_moved_out",
  customer_moved_in: "customer_moved_in",
  promotional_credits_added: "promotional_credits_added",
  promotional_credits_deducted: "promotional_credits_deducted",
  subscription_created: "subscription_created",
  subscription_created_with_backdating: "subscription_created_with_backdating",
  subscription_started: "subscription_started",
  subscription_trial_end_reminder: "subscription_trial_end_reminder",
  subscription_activated: "subscription_activated",
  subscription_activated_with_backdating:
    "subscription_activated_with_backdating",
  subscription_changed: "subscription_changed",
  subscription_trial_extended: "subscription_trial_extended",
  mrr_updated: "mrr_updated",
  subscription_changed_with_backdating: "subscription_changed_with_backdating",
  subscription_cancellation_scheduled: "subscription_cancellation_scheduled",
  subscription_cancellation_reminder: "subscription_cancellation_reminder",
  subscription_cancelled: "subscription_cancelled",
  subscription_canceled_with_backdating:
    "subscription_canceled_with_backdating",
  subscription_reactivated: "subscription_reactivated",
  subscription_reactivated_with_backdating:
    "subscription_reactivated_with_backdating",
  subscription_renewed: "subscription_renewed",
  subscription_scheduled_cancellation_removed:
    "subscription_scheduled_cancellation_removed",
  subscription_changes_scheduled: "subscription_changes_scheduled",
  subscription_scheduled_changes_removed:
    "subscription_scheduled_changes_removed",
  subscription_shipping_address_updated:
    "subscription_shipping_address_updated",
  subscription_deleted: "subscription_deleted",
  subscription_paused: "subscription_paused",
  subscription_pause_scheduled: "subscription_pause_scheduled",
  subscription_scheduled_pause_removed: "subscription_scheduled_pause_removed",
  subscription_resumed: "subscription_resumed",
  subscription_resumption_scheduled: "subscription_resumption_scheduled",
  subscription_scheduled_resumption_removed:
    "subscription_scheduled_resumption_removed",
  subscription_advance_invoice_schedule_added:
    "subscription_advance_invoice_schedule_added",
  subscription_advance_invoice_schedule_updated:
    "subscription_advance_invoice_schedule_updated",
  subscription_advance_invoice_schedule_removed:
    "subscription_advance_invoice_schedule_removed",
  pending_invoice_created: "pending_invoice_created",
  pending_invoice_updated: "pending_invoice_updated",
  invoice_generated: "invoice_generated",
  invoice_generated_with_backdating: "invoice_generated_with_backdating",
  invoice_updated: "invoice_updated",
  invoice_deleted: "invoice_deleted",
  credit_note_created: "credit_note_created",
  credit_note_created_with_backdating: "credit_note_created_with_backdating",
  credit_note_updated: "credit_note_updated",
  credit_note_deleted: "credit_note_deleted",
  subscription_renewal_reminder: "subscription_renewal_reminder",
  add_usages_reminder: "add_usages_reminder",
  transaction_created: "transaction_created",
  transaction_updated: "transaction_updated",
  transaction_deleted: "transaction_deleted",
  payment_succeeded: "payment_succeeded",
  payment_failed: "payment_failed",
  payment_refunded: "payment_refunded",
  payment_initiated: "payment_initiated",
  refund_initiated: "refund_initiated",
  authorization_succeeded: "authorization_succeeded",
  authorization_voided: "authorization_voided",
  card_added: "card_added",
  card_updated: "card_updated",
  card_expiry_reminder: "card_expiry_reminder",
  card_expired: "card_expired",
  card_deleted: "card_deleted",
  payment_source_added: "payment_source_added",
  payment_source_updated: "payment_source_updated",
  payment_source_deleted: "payment_source_deleted",
  payment_source_expiring: "payment_source_expiring",
  payment_source_expired: "payment_source_expired",
  payment_source_locally_deleted: "payment_source_locally_deleted",
  virtual_bank_account_added: "virtual_bank_account_added",
  virtual_bank_account_updated: "virtual_bank_account_updated",
  virtual_bank_account_deleted: "virtual_bank_account_deleted",
  token_created: "token_created",
  token_consumed: "token_consumed",
  token_expired: "token_expired",
  unbilled_charges_created: "unbilled_charges_created",
  unbilled_charges_voided: "unbilled_charges_voided",
  unbilled_charges_deleted: "unbilled_charges_deleted",
  unbilled_charges_invoiced: "unbilled_charges_invoiced",
  order_created: "order_created",
  order_updated: "order_updated",
  order_cancelled: "order_cancelled",
  order_delivered: "order_delivered",
  order_returned: "order_returned",
  order_ready_to_process: "order_ready_to_process",
  order_ready_to_ship: "order_ready_to_ship",
  order_deleted: "order_deleted",
  order_resent: "order_resent",
  quote_created: "quote_created",
  quote_updated: "quote_updated",
  quote_deleted: "quote_deleted",
  tax_withheld_recorded: "tax_withheld_recorded",
  tax_withheld_deleted: "tax_withheld_deleted",
  tax_withheld_refunded: "tax_withheld_refunded",
  gift_scheduled: "gift_scheduled",
  gift_unclaimed: "gift_unclaimed",
  gift_claimed: "gift_claimed",
  gift_expired: "gift_expired",
  gift_cancelled: "gift_cancelled",
  gift_updated: "gift_updated",
  hierarchy_created: "hierarchy_created",
  hierarchy_deleted: "hierarchy_deleted",
  payment_intent_created: "payment_intent_created",
  payment_intent_updated: "payment_intent_updated",
  contract_term_created: "contract_term_created",
  contract_term_renewed: "contract_term_renewed",
  contract_term_terminated: "contract_term_terminated",
  contract_term_completed: "contract_term_completed",
  contract_term_cancelled: "contract_term_cancelled",
  item_family_created: "item_family_created",
  item_family_updated: "item_family_updated",
  item_family_deleted: "item_family_deleted",
  item_created: "item_created",
  item_updated: "item_updated",
  item_deleted: "item_deleted",
  item_price_created: "item_price_created",
  item_price_updated: "item_price_updated",
  item_price_deleted: "item_price_deleted",
  attached_item_created: "attached_item_created",
  attached_item_updated: "attached_item_updated",
  attached_item_deleted: "attached_item_deleted",
  differential_price_created: "differential_price_created",
  differential_price_updated: "differential_price_updated",
  differential_price_deleted: "differential_price_deleted",
  feature_created: "feature_created",
  feature_updated: "feature_updated",
  feature_deleted: "feature_deleted",
  feature_activated: "feature_activated",
  feature_reactivated: "feature_reactivated",
  feature_archived: "feature_archived",
  item_entitlements_updated: "item_entitlements_updated",
  entitlement_overrides_updated: "entitlement_overrides_updated",
  entitlement_overrides_removed: "entitlement_overrides_removed",
  item_entitlements_removed: "item_entitlements_removed",
  entitlement_overrides_auto_removed: "entitlement_overrides_auto_removed",
  subscription_entitlements_created: "subscription_entitlements_created",
  business_entity_created: "business_entity_created",
  business_entity_updated: "business_entity_updated",
  business_entity_deleted: "business_entity_deleted",
  purchase_created: "purchase_created",
  voucher_created: "voucher_created",
  voucher_expired: "voucher_expired",
  voucher_create_failed: "voucher_create_failed",
  product_created: "product_created",
  product_updated: "product_updated",
  product_deleted: "product_deleted",
  variant_created: "variant_created",
  variant_updated: "variant_updated",
  variant_deleted: "variant_deleted",
} as const;

export type EventName = (typeof EventName)[keyof typeof EventName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventName = {
  cancellation_page_loaded: "cancellation_page_loaded",
} as const;

/**
 * * **When the event resource is retrieved via API:** Represents the status of the webhook call made to this webhook.
* **When the event resource is passed as part of a webhook call:** The `webhooks` object is unavailable on the first webhook call for the event. For subsequent calls, this attribute holds the status from after the last retry.
\* failed - Webhook call has been suspended after the all retries have resulted in failure. \* succeeded - Webhook call was successful. \* scheduled - Webhook call has been scheduled. \* re_scheduled - Webhook call has been rescheduled due failure(s) in previous call(s) \* not_applicable - Webhook call is not applicable for this event. \* skipped - Skipped as specified in request \* not_configured - Webhook was not configured when this event occurred

 */
export type EventWebhooksItemWebhookStatus =
  (typeof EventWebhooksItemWebhookStatus)[keyof typeof EventWebhooksItemWebhookStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventWebhooksItemWebhookStatus = {
  not_configured: "not_configured",
  scheduled: "scheduled",
  succeeded: "succeeded",
  re_scheduled: "re_scheduled",
  failed: "failed",
  skipped: "skipped",
  not_applicable: "not_applicable",
} as const;

export type EventWebhooksItem = {
  /** Uniquely identifies a webhook
   */
  id: string;
  /** * **When the event resource is retrieved via API:** Represents the status of the webhook call made to this webhook.
* **When the event resource is passed as part of a webhook call:** The `webhooks` object is unavailable on the first webhook call for the event. For subsequent calls, this attribute holds the status from after the last retry.
\* failed - Webhook call has been suspended after the all retries have resulted in failure. \* succeeded - Webhook call was successful. \* scheduled - Webhook call has been scheduled. \* re_scheduled - Webhook call has been rescheduled due failure(s) in previous call(s) \* not_applicable - Webhook call is not applicable for this event. \* skipped - Skipped as specified in request \* not_configured - Webhook was not configured when this event occurred
 */
  webhook_status: EventWebhooksItemWebhookStatus;
};

/**
 * The JSON data associated with this event. Has resources (\*subscription\* , \*invoice\* etc) based on the \[event type\](#event_types). These resources are structured based on the Chargebee API version indicated by the \*api_version\* attribute.

 */
export type EventContent = { [key: string]: any };

/**
 * The Chargebee API Version used for rendering this event content. While processing webhooks, ensure this version is same as the API version used by your webhook server's client library. \* v1 - Chargebee API version V1 \* v2 - Chargebee API version V2

 */
export type EventApiVersion =
  (typeof EventApiVersion)[keyof typeof EventApiVersion];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventApiVersion = {
  v1: "v1",
  v2: "v2",
} as const;

/**
 * The types of event provided by chargebee. Refer [event types](#event_types) for all the event types provided by us currently. \* card_deleted - Sent when a card is deleted for a customer \* subscription_cancelled - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* customer_changed - Sent when a customer is changed \* invoice_deleted - Event triggered when an invoice is deleted. \* subscription_shipping_address_updated - Triggered when shipping address is added or updated for a subscription. \* differential_price_created - Triggered when a differential price is created \* subscription_created - Sent when a new subscription is created. \* payment_initiated - Sent when a payment is initiated via direct debit \* quote_updated - Triggered when quote is updated \* payment_source_added - Sent when a payment source is added for a customer. \* contract_term_created - Triggered when new contract term is created \* subscription_deleted - Sent when a subscription has been deleted \* differential_price_deleted - Triggered when a differential price is deleted \* voucher_created - Triggered when a payment voucher is created \* transaction_deleted - Triggered when a transaction is deleted. \* item_family_deleted - Triggered when an item family is deleted \* product_updated - Triggered when the product update is completed successfully \* payment_failed - Sent when attempt to charge customer's credit card fails \* subscription_reactivated_with_backdating - Sent when the subscription is moved from cancelled state to active or in_trial state with past date \* payment_source_expiring - Sent when the customer's payment source is expiring soon. Sent 30 days before the expiry date. \* item_price_updated - Triggered when an item price is updated \* order_ready_to_process - Triggered when order reaches it's order date \* entitlement_overrides_updated - Triggered when an override entitlement is updated \* item_updated - Triggered when an item is updated \* coupon_set_updated - Sent when a coupon set is changed \* subscription_reactivated - Sent when the subscription is moved from cancelled state to active or in_trial state \* variant_created - Triggered when product variant create completed successfully \* addon_updated - Sent when a addon is changed. \* subscription_scheduled_changes_removed - Sent when scheduled change for the subscription is removed. \* payment_refunded - Sent when a payment refund is made \* subscription_started - Sent when a 'future' subscription gets started at the scheduled date. \* attached_item_created - Triggered when an Attached item is created \* token_created - Sent when a Token is created \* item_family_created - Triggered when an item family is created \* subscription_created_with_backdating - Sent when a new subscription is created with backdating. \* unbilled_charges_deleted - Triggered when unbilled charges are deleted \* promotional_credits_added - Sent when a customer prmotion credits added \* subscription_canceled_with_backdating - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* item_entitlements_updated - Triggered when item entitlements are updated to a feature \* card_expired - Sent when a card for a customer is expired \* payment_intent_created - Sent when a Payment intent is created \* subscription_changed_with_backdating - Sent after the subscription's recurring items have been changed with backdated date \* subscription_scheduled_cancellation_removed - Sent when scheduled cancellation is removed for the subscription. \* feature_updated - Triggered when an feature is updated \* plan_deleted - Sent when a plan is deleted. \* tax_withheld_refunded - Sent when a tax withheld refund is made \* unbilled_charges_voided - Triggered when unbilled charges are voided \* customer_moved_out - Sent when a customer is copied to another site \* feature_created - Triggered when a feature is created. \* coupon_codes_deleted - Sent when coupon codes are deleted in coupon set \* subscription_paused - Sent when the subscription is paused. \* order_updated - Triggered when order is updated \* unbilled_charges_created - Triggered when unbilled charges are created \* feature_archived - Triggered when an feature is archived \* payment_succeeded - Sent when the payment is successfully collected \* voucher_expired - Triggered when a payment voucher is expired \* mrr_updated - Sent when either of MRR or CMRR of a subscription changes \* subscription_scheduled_resumption_removed - Triggered when scheduled resumption is removed for the subscription. \* subscription_changes_scheduled - Sent when subscription changes are scheduled for later. Changes will be applied at the end of current term. \* order_ready_to_ship - Triggered when order reaches it's shipping date \* purchase_created - Triggered when purchase action completed successfully \* variant_updated - Triggered when product variant update completed successfully \* variant_deleted - Triggered when product variant delete completed successfully \* subscription_trial_end_reminder - Sent when the customer's trial period is about to end. \* feature_activated - Triggered when a feature \`status\` transitions to \`active\` for the first time. \* subscription_renewed - Sent when the subscription is renewed from the current term. \* plan_created - Sent when a plan is created. \* item_created - Triggered when an item is created \* coupon_codes_updated - Sent when coupon codes are updated \* gift_unclaimed - Triggered when a new gift is unclaimed and is ready to be claimed \* subscription_entitlements_created - Triggered when subscription entitlements are created for a new subscription \* virtual_bank_account_added - Sent when a virtual bank account is added for a customer. \* contract_term_completed - Triggered when contract term is completed \* feature_deleted - Triggered when a feature is deleted \* subscription_renewal_reminder - Sent before each subscription's renewal based on plan's period \* coupon_updated - Sent when a coupon is changed. \* token_consumed - Sent when a Token is consumed \* transaction_created - Triggered when a transaction is recorded \* customer_deleted - Sent when a customer is deleted \* coupon_deleted - Sent when a coupon is deleted. \* quote_deleted - Triggered when quote is deleted \* card_updated - Sent when the card is updated for a customer. \* coupon_created - Sent when a coupon is created. \* quote_created - Triggered when quote is created \* add_usages_reminder - Sent every month day before renewal date of plan's period \* business_entity_updated - Sent when a business entity is updated. \* subscription_changed - Sent after the subscription's recurring items have been changed \* customer_created - Sent when a customer is created. This event happens when only a new customer is created or when a customer is automatically created during new subscription creation. \* coupon_set_deleted - Sent when a coupon set is deleted \* refund_initiated - Sent when a refund is initiated via direct debit \* order_cancelled - Triggered when order is cancelled \* entitlement_overrides_removed - Triggered when an override entitlement is removed \* coupon_codes_added - Sent when coupon codes are added in coupon set \* card_added - Sent when a card is added for a customer. \* gift_cancelled - Triggered when a gift is cancelled. \* entitlement_overrides_auto_removed - Triggered when Subscription entitlements overrides for a feature are auto removed after expiry \* payment_source_deleted - Sent when a payment source is deleted for a customer \* credit_note_created - Sent when a credit note is created \* subscription_resumption_scheduled - Triggered when the subscription resumption is scheduled. \* item_price_deleted - Triggered when an item price is deleted \* subscription_advance_invoice_schedule_updated - Triggered when scheduled advance invoice is updated for a subscription. \* item_deleted - Triggered when an item is deleted \* gift_claimed - Triggered when a gift is claimed \* feature_reactivated - Triggered when a feature \`status\` transitions to \`active\` for the second time or more. \* subscription_activated - Sent after the subscription has been moved from trial to active state \* subscription_resumed - Sent when the subscription is moved from paused state to active state \* credit_note_deleted - Sent when a credit note is deleted \* subscription_advance_invoice_schedule_added - Triggered when advance invoice is scheduled for a subscription. \* differential_price_updated - Triggered when a differential price is updated \* order_deleted - Triggered when order is deleted \* token_expired - Sent when a Token is expired \* transaction_updated - Triggered when a transaction is updated. E.g. (1) When a transaction is removed, (2) or when an excess payment is applied on an invoice, (3) or when amount_capturable gets updated. \* subscription_cancellation_reminder - Sent when the customer's subscription is nearing it's scheduled cancellation date. \* product_deleted - Triggered when the product delete is completed successfully \* invoice_generated - Event triggered when a new invoice is generated. In case of metered billing, this event is triggered when a "Pending" invoice is closed. \* order_delivered - Triggered when order is marked as delivered \* pending_invoice_created - Event triggered (in the case of metered billing) when a "Pending" invoice is created that has usage related charges or line items to be added, before being closed. This is triggered only when the "Notify for Pending Invoices" option is enabled. \* authorization_succeeded - Triggered when a authorization transaction is created. \* invoice_generated_with_backdating - Event triggered when a new invoice is generated with past date as invoice date. \* subscription_cancellation_scheduled - Sent when subscription is scheduled to cancel at end of current term \* order_created - Triggered when order is created \* hierarchy_deleted - Triggered when a hierarchy is deleted \* subscription_activated_with_backdating - Sent after the subscription changes to \`active\` from another \`status\`, while the change is backdated. \* plan_updated - Sent when a plan is changed. \* tax_withheld_recorded - Triggered when a tax withheld is recorded for an invoice \* credit_note_created_with_backdating - Sent when a credit note is created with past date as credit note date \* gift_updated - Triggered when a gift is updated \* order_resent - Triggered when order is resent \* hierarchy_created - Triggered when a hierarchy is created \* addon_deleted - Sent when a addon is deleted. \* voucher_create_failed - Triggered when a payment voucher creation is failed \* customer_moved_in - Sent when a customer is copied from another site \* attached_item_deleted - Triggered when an Attached item is deleted \* unbilled_charges_invoiced - Triggered when unbilled charges are invoiced \* subscription_pause_scheduled - Sent when the subscription is scheduled to pause. \* order_returned - Triggered when order is marked as returned \* payment_source_expired - Sent when a payment source for a customer is expired \* contract_term_terminated - Triggered when contract term is terminated \* product_created - Triggered when the product create is completed successfully \* payment_source_updated - Sent when the payment source is updated for a customer or when role is assigned to the payment source. \* pending_invoice_updated - Event triggered when the option "Notify and wait to close invoices" is enabled, and the 'Pending' invoice is updated. \* subscription_advance_invoice_schedule_removed - Triggered when scheduled advance invoice is removed for a subscription. \* tax_withheld_deleted - Triggered when a tax withheld is deleted \* business_entity_created - Sent when a business entity is created. \* item_price_created - Triggered when an item price is created \* virtual_bank_account_updated - Sent when the virtual bank account is updated for a customer. \* credit_note_updated - Sent when a credit note is updated \* subscription_scheduled_pause_removed - Triggered when scheduled pause is removed for the subscription. \* card_expiry_reminder - Sent when the customer's credit card is expiring soon. Sent 30 days before the expiry date. \* coupon_set_created - Sent when a coupon set is created \* virtual_bank_account_deleted - Sent when a virtual bank account is deleted for a customer. \* gift_scheduled - Triggered when a new gift is created \* business_entity_deleted - Sent when a business entity is deleted. \* promotional_credits_deducted - Sent when a customer prmotion credits deducted \* contract_term_renewed - Triggered when new contract term is renewed \* subscription_trial_extended - Trial Extension \* item_entitlements_removed - Triggered when item entitlements are removed for a feature \* gift_expired - Triggered when a gift expires \* contract_term_cancelled - Triggered when contract term is cancelled \* authorization_voided - Triggered when a authorization transaction is voided. Authorization can be voided either manually or when blocked funds are released by the gateway after a certain period of time. \* item_family_updated - Triggered when an item family is updated \* addon_created - Sent when a addon is created. \* attached_item_updated - Triggered when an Attached item is updated \* invoice_updated - Triggered when the invoice's shipping/billing address is updated, if the invoice is voided, or when the amount due is modified due to payments applied/removed. \* payment_intent_updated - Sent when a Payment intent is updated \* payment_source_locally_deleted - Sent when a payment source for a customer removed from Chargebee

 */
export type EventEventType =
  (typeof EventEventType)[keyof typeof EventEventType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventEventType = {
  plan_created: "plan_created",
  plan_updated: "plan_updated",
  plan_deleted: "plan_deleted",
  addon_created: "addon_created",
  addon_updated: "addon_updated",
  addon_deleted: "addon_deleted",
  coupon_created: "coupon_created",
  coupon_updated: "coupon_updated",
  coupon_deleted: "coupon_deleted",
  coupon_set_created: "coupon_set_created",
  coupon_set_updated: "coupon_set_updated",
  coupon_set_deleted: "coupon_set_deleted",
  coupon_codes_added: "coupon_codes_added",
  coupon_codes_deleted: "coupon_codes_deleted",
  coupon_codes_updated: "coupon_codes_updated",
  customer_created: "customer_created",
  customer_changed: "customer_changed",
  customer_deleted: "customer_deleted",
  customer_moved_out: "customer_moved_out",
  customer_moved_in: "customer_moved_in",
  promotional_credits_added: "promotional_credits_added",
  promotional_credits_deducted: "promotional_credits_deducted",
  subscription_created: "subscription_created",
  subscription_created_with_backdating: "subscription_created_with_backdating",
  subscription_started: "subscription_started",
  subscription_trial_end_reminder: "subscription_trial_end_reminder",
  subscription_activated: "subscription_activated",
  subscription_activated_with_backdating:
    "subscription_activated_with_backdating",
  subscription_changed: "subscription_changed",
  subscription_trial_extended: "subscription_trial_extended",
  mrr_updated: "mrr_updated",
  subscription_changed_with_backdating: "subscription_changed_with_backdating",
  subscription_cancellation_scheduled: "subscription_cancellation_scheduled",
  subscription_cancellation_reminder: "subscription_cancellation_reminder",
  subscription_cancelled: "subscription_cancelled",
  subscription_canceled_with_backdating:
    "subscription_canceled_with_backdating",
  subscription_reactivated: "subscription_reactivated",
  subscription_reactivated_with_backdating:
    "subscription_reactivated_with_backdating",
  subscription_renewed: "subscription_renewed",
  subscription_scheduled_cancellation_removed:
    "subscription_scheduled_cancellation_removed",
  subscription_changes_scheduled: "subscription_changes_scheduled",
  subscription_scheduled_changes_removed:
    "subscription_scheduled_changes_removed",
  subscription_shipping_address_updated:
    "subscription_shipping_address_updated",
  subscription_deleted: "subscription_deleted",
  subscription_paused: "subscription_paused",
  subscription_pause_scheduled: "subscription_pause_scheduled",
  subscription_scheduled_pause_removed: "subscription_scheduled_pause_removed",
  subscription_resumed: "subscription_resumed",
  subscription_resumption_scheduled: "subscription_resumption_scheduled",
  subscription_scheduled_resumption_removed:
    "subscription_scheduled_resumption_removed",
  subscription_advance_invoice_schedule_added:
    "subscription_advance_invoice_schedule_added",
  subscription_advance_invoice_schedule_updated:
    "subscription_advance_invoice_schedule_updated",
  subscription_advance_invoice_schedule_removed:
    "subscription_advance_invoice_schedule_removed",
  pending_invoice_created: "pending_invoice_created",
  pending_invoice_updated: "pending_invoice_updated",
  invoice_generated: "invoice_generated",
  invoice_generated_with_backdating: "invoice_generated_with_backdating",
  invoice_updated: "invoice_updated",
  invoice_deleted: "invoice_deleted",
  credit_note_created: "credit_note_created",
  credit_note_created_with_backdating: "credit_note_created_with_backdating",
  credit_note_updated: "credit_note_updated",
  credit_note_deleted: "credit_note_deleted",
  subscription_renewal_reminder: "subscription_renewal_reminder",
  add_usages_reminder: "add_usages_reminder",
  transaction_created: "transaction_created",
  transaction_updated: "transaction_updated",
  transaction_deleted: "transaction_deleted",
  payment_succeeded: "payment_succeeded",
  payment_failed: "payment_failed",
  payment_refunded: "payment_refunded",
  payment_initiated: "payment_initiated",
  refund_initiated: "refund_initiated",
  authorization_succeeded: "authorization_succeeded",
  authorization_voided: "authorization_voided",
  card_added: "card_added",
  card_updated: "card_updated",
  card_expiry_reminder: "card_expiry_reminder",
  card_expired: "card_expired",
  card_deleted: "card_deleted",
  payment_source_added: "payment_source_added",
  payment_source_updated: "payment_source_updated",
  payment_source_deleted: "payment_source_deleted",
  payment_source_expiring: "payment_source_expiring",
  payment_source_expired: "payment_source_expired",
  payment_source_locally_deleted: "payment_source_locally_deleted",
  virtual_bank_account_added: "virtual_bank_account_added",
  virtual_bank_account_updated: "virtual_bank_account_updated",
  virtual_bank_account_deleted: "virtual_bank_account_deleted",
  token_created: "token_created",
  token_consumed: "token_consumed",
  token_expired: "token_expired",
  unbilled_charges_created: "unbilled_charges_created",
  unbilled_charges_voided: "unbilled_charges_voided",
  unbilled_charges_deleted: "unbilled_charges_deleted",
  unbilled_charges_invoiced: "unbilled_charges_invoiced",
  order_created: "order_created",
  order_updated: "order_updated",
  order_cancelled: "order_cancelled",
  order_delivered: "order_delivered",
  order_returned: "order_returned",
  order_ready_to_process: "order_ready_to_process",
  order_ready_to_ship: "order_ready_to_ship",
  order_deleted: "order_deleted",
  order_resent: "order_resent",
  quote_created: "quote_created",
  quote_updated: "quote_updated",
  quote_deleted: "quote_deleted",
  tax_withheld_recorded: "tax_withheld_recorded",
  tax_withheld_deleted: "tax_withheld_deleted",
  tax_withheld_refunded: "tax_withheld_refunded",
  gift_scheduled: "gift_scheduled",
  gift_unclaimed: "gift_unclaimed",
  gift_claimed: "gift_claimed",
  gift_expired: "gift_expired",
  gift_cancelled: "gift_cancelled",
  gift_updated: "gift_updated",
  hierarchy_created: "hierarchy_created",
  hierarchy_deleted: "hierarchy_deleted",
  payment_intent_created: "payment_intent_created",
  payment_intent_updated: "payment_intent_updated",
  contract_term_created: "contract_term_created",
  contract_term_renewed: "contract_term_renewed",
  contract_term_terminated: "contract_term_terminated",
  contract_term_completed: "contract_term_completed",
  contract_term_cancelled: "contract_term_cancelled",
  item_family_created: "item_family_created",
  item_family_updated: "item_family_updated",
  item_family_deleted: "item_family_deleted",
  item_created: "item_created",
  item_updated: "item_updated",
  item_deleted: "item_deleted",
  item_price_created: "item_price_created",
  item_price_updated: "item_price_updated",
  item_price_deleted: "item_price_deleted",
  attached_item_created: "attached_item_created",
  attached_item_updated: "attached_item_updated",
  attached_item_deleted: "attached_item_deleted",
  differential_price_created: "differential_price_created",
  differential_price_updated: "differential_price_updated",
  differential_price_deleted: "differential_price_deleted",
  feature_created: "feature_created",
  feature_updated: "feature_updated",
  feature_deleted: "feature_deleted",
  feature_activated: "feature_activated",
  feature_reactivated: "feature_reactivated",
  feature_archived: "feature_archived",
  item_entitlements_updated: "item_entitlements_updated",
  entitlement_overrides_updated: "entitlement_overrides_updated",
  entitlement_overrides_removed: "entitlement_overrides_removed",
  item_entitlements_removed: "item_entitlements_removed",
  entitlement_overrides_auto_removed: "entitlement_overrides_auto_removed",
  subscription_entitlements_created: "subscription_entitlements_created",
  business_entity_created: "business_entity_created",
  business_entity_updated: "business_entity_updated",
  business_entity_deleted: "business_entity_deleted",
  purchase_created: "purchase_created",
  voucher_created: "voucher_created",
  voucher_expired: "voucher_expired",
  voucher_create_failed: "voucher_create_failed",
  product_created: "product_created",
  product_updated: "product_updated",
  product_deleted: "product_deleted",
  variant_created: "variant_created",
  variant_updated: "variant_updated",
  variant_deleted: "variant_deleted",
} as const;

/**
 * Source of the event \* admin_console - Operation made through the Chargebee admin UI \* external_service - Operation that are triggered via webhook \* scheduled_job - Operation made through the Scheduled Jobs \* bulk_operation - Operation that are triggerd through bulk operation. \* hosted_page - Operation made through the Hosted Pages \* portal - Operation made through [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html) \* system - Operation that are triggered by ChargeBee System \* migration - Deprecated \* none - If no source can be identified for an operation \* api - Operation made through the API \* js_api - Operation made through the JS API

 */
export type EventSource = (typeof EventSource)[keyof typeof EventSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSource = {
  admin_console: "admin_console",
  api: "api",
  scheduled_job: "scheduled_job",
  hosted_page: "hosted_page",
  portal: "portal",
  system: "system",
  none: "none",
  js_api: "js_api",
  migration: "migration",
  bulk_operation: "bulk_operation",
  external_service: "external_service",
} as const;

/**
 * ### Introduction

Whenever any important changes happen in your Chargebee site, they are recorded as events. An event contains data about affected resources and additional details such as when the change occurred. For example, when a subscription is cancelled due to non payment, an event `subscription_cancelled` is recorded.

### Webhooks {#webhooks_pcv2}

If webhooks have been [configured](https://www.chargebee.com/docs/webhook_settings.html#configure-webhooks) in Chargebee, events trigger those webhooks. If multiple webhooks have been configured, for every event, each webhook is called one after another. If a webhook call for an event fails or times out, it is retried based on a [fixed schedule](https://www.chargebee.com/docs/webhook_settings.html#automatic-retries). The webhook call is an HTTP POST with content type `application/json`.

 */
export interface Event {
  /** Uniquely identifies a event
   */
  id: string;
  /** Timestamp indicating when this event had occurred.
   */
  occurred_at: number;
  /** Source of the event \* admin_console - Operation made through the Chargebee admin UI \* external_service - Operation that are triggered via webhook \* scheduled_job - Operation made through the Scheduled Jobs \* bulk_operation - Operation that are triggerd through bulk operation. \* hosted_page - Operation made through the Hosted Pages \* portal - Operation made through [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html) \* system - Operation that are triggered by ChargeBee System \* migration - Deprecated \* none - If no source can be identified for an operation \* api - Operation made through the API \* js_api - Operation made through the JS API
   */
  source: EventSource;
  /** The "user" that triggered the event. The value depends on the `source` attribute:  

* When `source` is `admin_console`: the email address of the user that triggered the event.
* When `source` is `api`, `js_api` or `bulk_operation`: the [name](https://www.chargebee.com/docs/api_keys.html#create-an-api-key) of the API key that was used to trigger the event.
* When the `source` is `external_service`: the name of the service that called our webhook. Eg. `ADYEN`, `STRIPE`, `AMAZON_PAYMENTS` etc.
* When the `source` is `hosted_page` or `portal`: the `user` attribute is not passed.
 */
  user?: string;
  /** The types of event provided by chargebee. Refer [event types](#event_types) for all the event types provided by us currently. \* card_deleted - Sent when a card is deleted for a customer \* subscription_cancelled - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* customer_changed - Sent when a customer is changed \* invoice_deleted - Event triggered when an invoice is deleted. \* subscription_shipping_address_updated - Triggered when shipping address is added or updated for a subscription. \* differential_price_created - Triggered when a differential price is created \* subscription_created - Sent when a new subscription is created. \* payment_initiated - Sent when a payment is initiated via direct debit \* quote_updated - Triggered when quote is updated \* payment_source_added - Sent when a payment source is added for a customer. \* contract_term_created - Triggered when new contract term is created \* subscription_deleted - Sent when a subscription has been deleted \* differential_price_deleted - Triggered when a differential price is deleted \* voucher_created - Triggered when a payment voucher is created \* transaction_deleted - Triggered when a transaction is deleted. \* item_family_deleted - Triggered when an item family is deleted \* product_updated - Triggered when the product update is completed successfully \* payment_failed - Sent when attempt to charge customer's credit card fails \* subscription_reactivated_with_backdating - Sent when the subscription is moved from cancelled state to active or in_trial state with past date \* payment_source_expiring - Sent when the customer's payment source is expiring soon. Sent 30 days before the expiry date. \* item_price_updated - Triggered when an item price is updated \* order_ready_to_process - Triggered when order reaches it's order date \* entitlement_overrides_updated - Triggered when an override entitlement is updated \* item_updated - Triggered when an item is updated \* coupon_set_updated - Sent when a coupon set is changed \* subscription_reactivated - Sent when the subscription is moved from cancelled state to active or in_trial state \* variant_created - Triggered when product variant create completed successfully \* addon_updated - Sent when a addon is changed. \* subscription_scheduled_changes_removed - Sent when scheduled change for the subscription is removed. \* payment_refunded - Sent when a payment refund is made \* subscription_started - Sent when a 'future' subscription gets started at the scheduled date. \* attached_item_created - Triggered when an Attached item is created \* token_created - Sent when a Token is created \* item_family_created - Triggered when an item family is created \* subscription_created_with_backdating - Sent when a new subscription is created with backdating. \* unbilled_charges_deleted - Triggered when unbilled charges are deleted \* promotional_credits_added - Sent when a customer prmotion credits added \* subscription_canceled_with_backdating - Sent when the subscription gets cancelled. If cancelled due to non payment or card not present, the subscription will have the possible reason as 'cancel_reason'. \* item_entitlements_updated - Triggered when item entitlements are updated to a feature \* card_expired - Sent when a card for a customer is expired \* payment_intent_created - Sent when a Payment intent is created \* subscription_changed_with_backdating - Sent after the subscription's recurring items have been changed with backdated date \* subscription_scheduled_cancellation_removed - Sent when scheduled cancellation is removed for the subscription. \* feature_updated - Triggered when an feature is updated \* plan_deleted - Sent when a plan is deleted. \* tax_withheld_refunded - Sent when a tax withheld refund is made \* unbilled_charges_voided - Triggered when unbilled charges are voided \* customer_moved_out - Sent when a customer is copied to another site \* feature_created - Triggered when a feature is created. \* coupon_codes_deleted - Sent when coupon codes are deleted in coupon set \* subscription_paused - Sent when the subscription is paused. \* order_updated - Triggered when order is updated \* unbilled_charges_created - Triggered when unbilled charges are created \* feature_archived - Triggered when an feature is archived \* payment_succeeded - Sent when the payment is successfully collected \* voucher_expired - Triggered when a payment voucher is expired \* mrr_updated - Sent when either of MRR or CMRR of a subscription changes \* subscription_scheduled_resumption_removed - Triggered when scheduled resumption is removed for the subscription. \* subscription_changes_scheduled - Sent when subscription changes are scheduled for later. Changes will be applied at the end of current term. \* order_ready_to_ship - Triggered when order reaches it's shipping date \* purchase_created - Triggered when purchase action completed successfully \* variant_updated - Triggered when product variant update completed successfully \* variant_deleted - Triggered when product variant delete completed successfully \* subscription_trial_end_reminder - Sent when the customer's trial period is about to end. \* feature_activated - Triggered when a feature \`status\` transitions to \`active\` for the first time. \* subscription_renewed - Sent when the subscription is renewed from the current term. \* plan_created - Sent when a plan is created. \* item_created - Triggered when an item is created \* coupon_codes_updated - Sent when coupon codes are updated \* gift_unclaimed - Triggered when a new gift is unclaimed and is ready to be claimed \* subscription_entitlements_created - Triggered when subscription entitlements are created for a new subscription \* virtual_bank_account_added - Sent when a virtual bank account is added for a customer. \* contract_term_completed - Triggered when contract term is completed \* feature_deleted - Triggered when a feature is deleted \* subscription_renewal_reminder - Sent before each subscription's renewal based on plan's period \* coupon_updated - Sent when a coupon is changed. \* token_consumed - Sent when a Token is consumed \* transaction_created - Triggered when a transaction is recorded \* customer_deleted - Sent when a customer is deleted \* coupon_deleted - Sent when a coupon is deleted. \* quote_deleted - Triggered when quote is deleted \* card_updated - Sent when the card is updated for a customer. \* coupon_created - Sent when a coupon is created. \* quote_created - Triggered when quote is created \* add_usages_reminder - Sent every month day before renewal date of plan's period \* business_entity_updated - Sent when a business entity is updated. \* subscription_changed - Sent after the subscription's recurring items have been changed \* customer_created - Sent when a customer is created. This event happens when only a new customer is created or when a customer is automatically created during new subscription creation. \* coupon_set_deleted - Sent when a coupon set is deleted \* refund_initiated - Sent when a refund is initiated via direct debit \* order_cancelled - Triggered when order is cancelled \* entitlement_overrides_removed - Triggered when an override entitlement is removed \* coupon_codes_added - Sent when coupon codes are added in coupon set \* card_added - Sent when a card is added for a customer. \* gift_cancelled - Triggered when a gift is cancelled. \* entitlement_overrides_auto_removed - Triggered when Subscription entitlements overrides for a feature are auto removed after expiry \* payment_source_deleted - Sent when a payment source is deleted for a customer \* credit_note_created - Sent when a credit note is created \* subscription_resumption_scheduled - Triggered when the subscription resumption is scheduled. \* item_price_deleted - Triggered when an item price is deleted \* subscription_advance_invoice_schedule_updated - Triggered when scheduled advance invoice is updated for a subscription. \* item_deleted - Triggered when an item is deleted \* gift_claimed - Triggered when a gift is claimed \* feature_reactivated - Triggered when a feature \`status\` transitions to \`active\` for the second time or more. \* subscription_activated - Sent after the subscription has been moved from trial to active state \* subscription_resumed - Sent when the subscription is moved from paused state to active state \* credit_note_deleted - Sent when a credit note is deleted \* subscription_advance_invoice_schedule_added - Triggered when advance invoice is scheduled for a subscription. \* differential_price_updated - Triggered when a differential price is updated \* order_deleted - Triggered when order is deleted \* token_expired - Sent when a Token is expired \* transaction_updated - Triggered when a transaction is updated. E.g. (1) When a transaction is removed, (2) or when an excess payment is applied on an invoice, (3) or when amount_capturable gets updated. \* subscription_cancellation_reminder - Sent when the customer's subscription is nearing it's scheduled cancellation date. \* product_deleted - Triggered when the product delete is completed successfully \* invoice_generated - Event triggered when a new invoice is generated. In case of metered billing, this event is triggered when a "Pending" invoice is closed. \* order_delivered - Triggered when order is marked as delivered \* pending_invoice_created - Event triggered (in the case of metered billing) when a "Pending" invoice is created that has usage related charges or line items to be added, before being closed. This is triggered only when the "Notify for Pending Invoices" option is enabled. \* authorization_succeeded - Triggered when a authorization transaction is created. \* invoice_generated_with_backdating - Event triggered when a new invoice is generated with past date as invoice date. \* subscription_cancellation_scheduled - Sent when subscription is scheduled to cancel at end of current term \* order_created - Triggered when order is created \* hierarchy_deleted - Triggered when a hierarchy is deleted \* subscription_activated_with_backdating - Sent after the subscription changes to \`active\` from another \`status\`, while the change is backdated. \* plan_updated - Sent when a plan is changed. \* tax_withheld_recorded - Triggered when a tax withheld is recorded for an invoice \* credit_note_created_with_backdating - Sent when a credit note is created with past date as credit note date \* gift_updated - Triggered when a gift is updated \* order_resent - Triggered when order is resent \* hierarchy_created - Triggered when a hierarchy is created \* addon_deleted - Sent when a addon is deleted. \* voucher_create_failed - Triggered when a payment voucher creation is failed \* customer_moved_in - Sent when a customer is copied from another site \* attached_item_deleted - Triggered when an Attached item is deleted \* unbilled_charges_invoiced - Triggered when unbilled charges are invoiced \* subscription_pause_scheduled - Sent when the subscription is scheduled to pause. \* order_returned - Triggered when order is marked as returned \* payment_source_expired - Sent when a payment source for a customer is expired \* contract_term_terminated - Triggered when contract term is terminated \* product_created - Triggered when the product create is completed successfully \* payment_source_updated - Sent when the payment source is updated for a customer or when role is assigned to the payment source. \* pending_invoice_updated - Event triggered when the option "Notify and wait to close invoices" is enabled, and the 'Pending' invoice is updated. \* subscription_advance_invoice_schedule_removed - Triggered when scheduled advance invoice is removed for a subscription. \* tax_withheld_deleted - Triggered when a tax withheld is deleted \* business_entity_created - Sent when a business entity is created. \* item_price_created - Triggered when an item price is created \* virtual_bank_account_updated - Sent when the virtual bank account is updated for a customer. \* credit_note_updated - Sent when a credit note is updated \* subscription_scheduled_pause_removed - Triggered when scheduled pause is removed for the subscription. \* card_expiry_reminder - Sent when the customer's credit card is expiring soon. Sent 30 days before the expiry date. \* coupon_set_created - Sent when a coupon set is created \* virtual_bank_account_deleted - Sent when a virtual bank account is deleted for a customer. \* gift_scheduled - Triggered when a new gift is created \* business_entity_deleted - Sent when a business entity is deleted. \* promotional_credits_deducted - Sent when a customer prmotion credits deducted \* contract_term_renewed - Triggered when new contract term is renewed \* subscription_trial_extended - Trial Extension \* item_entitlements_removed - Triggered when item entitlements are removed for a feature \* gift_expired - Triggered when a gift expires \* contract_term_cancelled - Triggered when contract term is cancelled \* authorization_voided - Triggered when a authorization transaction is voided. Authorization can be voided either manually or when blocked funds are released by the gateway after a certain period of time. \* item_family_updated - Triggered when an item family is updated \* addon_created - Sent when a addon is created. \* attached_item_updated - Triggered when an Attached item is updated \* invoice_updated - Triggered when the invoice's shipping/billing address is updated, if the invoice is voided, or when the amount due is modified due to payments applied/removed. \* payment_intent_updated - Sent when a Payment intent is updated \* payment_source_locally_deleted - Sent when a payment source for a customer removed from Chargebee
   */
  event_type?: EventEventType;
  /** The Chargebee API Version used for rendering this event content. While processing webhooks, ensure this version is same as the API version used by your webhook server's client library. \* v1 - Chargebee API version V1 \* v2 - Chargebee API version V2
   */
  api_version?: EventApiVersion;
  /** The JSON data associated with this event. Has resources (\*subscription\* , \*invoice\* etc) based on the \[event type\](#event_types). These resources are structured based on the Chargebee API version indicated by the \*api_version\* attribute.
   */
  content: EventContent;
  /** Array of webhook call statuses: one for each of the webhooks configured for the site. This object is only available after the first webhook call for the event has completed or timed out. Also, creation/updation of the `webhook` object data is a queued operation and hence there can be an additional delay of up to 5 seconds.
   */
  webhooks?: EventWebhooksItem[];
}

export type EstimateUnbilledChargeEstimatesItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_item_price - Indicates that this line item is based on plan Item Price

 */
export type EstimateUnbilledChargeEstimatesItemEntityType =
  (typeof EstimateUnbilledChargeEstimatesItemEntityType)[keyof typeof EstimateUnbilledChargeEstimatesItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateUnbilledChargeEstimatesItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The pricing scheme for this line item. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* per_unit - A fixed price per unit quantity. \* flat_fee - A fixed price that is not quantity-based.

 */
export type EstimateUnbilledChargeEstimatesItemPricingModel =
  (typeof EstimateUnbilledChargeEstimatesItemPricingModel)[keyof typeof EstimateUnbilledChargeEstimatesItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateUnbilledChargeEstimatesItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type EstimateUnbilledChargeEstimatesItem = {
  /** Uniquely identifies an unbilled charge.
   */
  id?: string;
  /** A unique identifier for the customer being charged.
   */
  customer_id?: string;
  /** A unique identifier for the subscription this charge belongs to.
   */
  subscription_id?: string;
  /** Start date of this charge.
   */
  date_from?: number;
  /** End date of this charge.
   */
  date_to?: number;
  /** Unit amount of the charge item.
   */
  unit_amount?: number;
  /** The pricing scheme for this line item. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* per_unit - A fixed price per unit quantity. \* flat_fee - A fixed price that is not quantity-based.
   */
  pricing_model?: EstimateUnbilledChargeEstimatesItemPricingModel;
  /** Quantity of the item which is represented by this charge.
   */
  quantity?: number;
  /** Total amount of this charge. Typically equals to unit amount x quantity.
   */
  amount?: number;
  /** The currency code (ISO 4217 format) for the charge.
   */
  currency_code: string;
  /** Total discounts for this charge.
   */
  discount_amount?: number;
  /** Detailed description about this charge.
   */
  description?: string;
  /** Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_item_price - Indicates that this line item is based on plan Item Price
   */
  entity_type: EstimateUnbilledChargeEstimatesItemEntityType;
  /** The identifier of the modelled entity this charge is based on. Will be null for 'adhoc' entity type.
   */
  entity_id?: string;
  /** Will be true if the charge has been voided. Usually the unbilled charge will be voided and revised to different charges(s) during proration.
   */
  is_voided: boolean;
  /** Timestamp indicating the date and time this charge got voided.
   */
  voided_at?: number;
  /** The decimal representation of the amount for the charge, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this entity. Returned when the entity is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the unit amount for the entity. The value is in major units of the currency. Returned when the entity is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Timestamp indicating when the unbilled charge was last updated
   */
  updated_at: number;
  /** The list of tiers applicable for this line item
   */
  tiers?: EstimateUnbilledChargeEstimatesItemTiersItem[];
  /** The value of this parameter will be true if it is a recurring unbilled charge for a future term.
   */
  is_advance_charge?: boolean;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
};

/**
 * During the process of signing up customers to subscriptions, use the Estimates API to evaluate the details of the purchase before actually signing them up. The details returned by the API include the invoice amounts, next billing date and unbilled charges.

For example, consider that you are creating a new subscription or update an existing one. Use the Estimates API before that to deduce the details such as the amount the customer would be charged, the state the subscription would be in after creation or updation, and so on.

 */
export interface Estimate {
  /** The time at which this estimate got generated
   */
  created_at: number;
  /** Represents the subscription details when the 'estimate' operations are invoked.
   */
  subscription_estimate?: EstimateSubscriptionEstimate;
  /** Is a list of estimated subscriptions i.e., an array of *subscription_estimate* objects. It is generated when 'Create an estimate for purchase' operation is invoked
   */
  subscription_estimates?: EstimateSubscriptionEstimatesItem[];
  /** Represents the preview of the invoice generated immediately when the 'estimate' operations are invoked.
   */
  invoice_estimate?: EstimateInvoiceEstimate;
  /** Is a list of estimated invoices i.e., an array of *invoice_estimate* objects. It is generated when 'Create an estimate for unbilled charges' operation is invoked
   */
  invoice_estimates?: EstimateInvoiceEstimatesItem[];
  /** Represents the preview of the invoice generated at term end when the 'estimate' operations are invoked.
   */
  next_invoice_estimate?: EstimateNextInvoiceEstimate;
  /** Represents the preview of the credit-notes generated during 'estimate' operation. Currently applicable only for the 'Update Subscription Estimate' operation.
   */
  credit_note_estimates?: EstimateCreditNoteEstimatesItem[];
  /** Represents the preview of the unbilled charges generated during 'estimate' operation. Currently not applicable for the 'Subscription renewal estimate' operation.
   */
  unbilled_charge_estimates?: EstimateUnbilledChargeEstimatesItem[];
}

export type EstimateCreditNoteEstimatesItemLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type EstimateCreditNoteEstimatesItemLineItemDiscountsItemDiscountType =
  (typeof EstimateCreditNoteEstimatesItemLineItemDiscountsItemDiscountType)[keyof typeof EstimateCreditNoteEstimatesItemLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemLineItemDiscountsItemDiscountType =
  {
    item_level_coupon: "item_level_coupon",
    document_level_coupon: "document_level_coupon",
    promotional_credits: "promotional_credits",
    prorated_credits: "prorated_credits",
    item_level_discount: "item_level_discount",
    document_level_discount: "document_level_discount",
  } as const;

export type EstimateCreditNoteEstimatesItemLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.
   */
  discount_type: EstimateCreditNoteEstimatesItemLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

/**
 * The type of tax jurisdiction \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* unincorporated - Combined tax of state and county. \* city - The tax jurisdiction is a city \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* other - Jurisdictions other than the ones listed above. \* special - Special tax jurisdiction.

 */
export type EstimateCreditNoteEstimatesItemLineItemTaxesItemTaxJurisType =
  (typeof EstimateCreditNoteEstimatesItemLineItemTaxesItemTaxJurisType)[keyof typeof EstimateCreditNoteEstimatesItemLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type EstimateCreditNoteEstimatesItemLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* unincorporated - Combined tax of state and county. \* city - The tax jurisdiction is a city \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* other - Jurisdictions other than the ones listed above. \* special - Special tax jurisdiction.
   */
  tax_juris_type?: EstimateCreditNoteEstimatesItemLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type EstimateCreditNoteEstimatesItemTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount

 */
export type EstimateCreditNoteEstimatesItemDiscountsItemDiscountType =
  (typeof EstimateCreditNoteEstimatesItemDiscountsItemDiscountType)[keyof typeof EstimateCreditNoteEstimatesItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`.

 */
export type EstimateCreditNoteEstimatesItemDiscountsItemEntityType =
  (typeof EstimateCreditNoteEstimatesItemDiscountsItemEntityType)[keyof typeof EstimateCreditNoteEstimatesItemDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateCreditNoteEstimatesItemDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`.
   */
  entity_type: EstimateCreditNoteEstimatesItemDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount
   */
  discount_type?: EstimateCreditNoteEstimatesItemDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* tax_not_configured - If tax is not enabled for the site \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* product_exempt - If the Plan or Addon is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* customer_exempt - If the Customer is marked as Tax exempt

 */
export type EstimateCreditNoteEstimatesItemLineItemsItemTaxExemptReason =
  (typeof EstimateCreditNoteEstimatesItemLineItemsItemTaxExemptReason)[keyof typeof EstimateCreditNoteEstimatesItemLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case

 */
export type EstimateCreditNoteEstimatesItemLineItemsItemEntityType =
  (typeof EstimateCreditNoteEstimatesItemLineItemsItemEntityType)[keyof typeof EstimateCreditNoteEstimatesItemLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based.

 */
export type EstimateCreditNoteEstimatesItemLineItemsItemPricingModel =
  (typeof EstimateCreditNoteEstimatesItemLineItemsItemPricingModel)[keyof typeof EstimateCreditNoteEstimatesItemLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type EstimateCreditNoteEstimatesItemLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based.
   */
  pricing_model?: EstimateCreditNoteEstimatesItemLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case
   */
  entity_type: EstimateCreditNoteEstimatesItemLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* tax_not_configured - If tax is not enabled for the site \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* product_exempt - If the Plan or Addon is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* customer_exempt - If the Customer is marked as Tax exempt
   */
  tax_exempt_reason?: EstimateCreditNoteEstimatesItemLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The price type of this credit note. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type EstimateCreditNoteEstimatesItemPriceType =
  (typeof EstimateCreditNoteEstimatesItemPriceType)[keyof typeof EstimateCreditNoteEstimatesItemPriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemPriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * Credit note type \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note

 */
export type EstimateCreditNoteEstimatesItemType =
  (typeof EstimateCreditNoteEstimatesItemType)[keyof typeof EstimateCreditNoteEstimatesItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateCreditNoteEstimatesItemType = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

export type EstimateCreditNoteEstimatesItem = {
  /** The reference invoice id
   */
  reference_invoice_id: string;
  /** Credit note type \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note
   */
  type: EstimateCreditNoteEstimatesItemType;
  /** The price type of this credit note. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: EstimateCreditNoteEstimatesItemPriceType;
  /** The currency code (ISO 4217 format) of the credit note.
   */
  currency_code: string;
  /** Invoice sub-total in cents.
   */
  sub_total: number;
  /** Credit note total in cents.
   */
  total: number;
  /** Allocated credits in cents.
   */
  amount_allocated: number;
  /** Remaining credits in cents
   */
  amount_available: number;
  /** The list of items in this estimate
   */
  line_items?: EstimateCreditNoteEstimatesItemLineItemsItem[];
  /** The list of discounts applied to this estimate
   */
  discounts?: EstimateCreditNoteEstimatesItemDiscountsItem[];
  /** The list of taxes applied to this estimate
   */
  taxes?: EstimateCreditNoteEstimatesItemTaxesItem[];
  /** The list of taxes applied on line items
   */
  line_item_taxes?: EstimateCreditNoteEstimatesItemLineItemTaxesItem[];
  /** The list of discount(s) applied for each line item of this invoice.
   */
  line_item_discounts?: EstimateCreditNoteEstimatesItemLineItemDiscountsItem[];
  /** The list of tiers applicable for this line item
   */
  line_item_tiers?: EstimateCreditNoteEstimatesItemLineItemTiersItem[];
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** A unique identifier for the customer this credit note belongs to
   */
  customer_id?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type EstimateNextInvoiceEstimateLineItemDiscountsItemDiscountType =
  (typeof EstimateNextInvoiceEstimateLineItemDiscountsItemDiscountType)[keyof typeof EstimateNextInvoiceEstimateLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateNextInvoiceEstimateLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.
   */
  discount_type: EstimateNextInvoiceEstimateLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

export type EstimateNextInvoiceEstimateLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * The type of tax jurisdiction \* state - The tax jurisdiction is a state \* federal - The tax jurisdiction is a federal \* county - The tax jurisdiction is a county \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* country - The tax jurisdiction is a country \* other - Jurisdictions other than the ones listed above. \* city - The tax jurisdiction is a city

 */
export type EstimateNextInvoiceEstimateLineItemTaxesItemTaxJurisType =
  (typeof EstimateNextInvoiceEstimateLineItemTaxesItemTaxJurisType)[keyof typeof EstimateNextInvoiceEstimateLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type EstimateNextInvoiceEstimateLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* state - The tax jurisdiction is a state \* federal - The tax jurisdiction is a federal \* county - The tax jurisdiction is a county \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* country - The tax jurisdiction is a country \* other - Jurisdictions other than the ones listed above. \* city - The tax jurisdiction is a city
   */
  tax_juris_type?: EstimateNextInvoiceEstimateLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type EstimateNextInvoiceEstimateTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* fixed_amount - when amount is applied as discount \* percentage - when percentage is applied as discount

 */
export type EstimateNextInvoiceEstimateDiscountsItemDiscountType =
  (typeof EstimateNextInvoiceEstimateDiscountsItemDiscountType)[keyof typeof EstimateNextInvoiceEstimateDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`.

 */
export type EstimateNextInvoiceEstimateDiscountsItemEntityType =
  (typeof EstimateNextInvoiceEstimateDiscountsItemEntityType)[keyof typeof EstimateNextInvoiceEstimateDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateNextInvoiceEstimateDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`.
   */
  entity_type: EstimateNextInvoiceEstimateDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* fixed_amount - when amount is applied as discount \* percentage - when percentage is applied as discount
   */
  discount_type?: EstimateNextInvoiceEstimateDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * Represents the preview of the invoice generated at term end when the 'estimate' operations are invoked.

 */
export type EstimateNextInvoiceEstimate = {
  /** Whether or not the estimate for the invoice is recurring. Will be 'true' or 'false' for subscription related estimates.
   */
  recurring: boolean;
  /** The price type of this invoice. \* tax_exclusive - All amounts in the document are exclusive of tax. \* tax_inclusive - All amounts in the document are inclusive of tax.
   */
  price_type: EstimateNextInvoiceEstimatePriceType;
  /** The currency code (ISO 4217 format) of the invoice.
   */
  currency_code: string;
  /** Invoice sub-total in cents.
   */
  sub_total: number;
  /** Invoice total in cents.
   */
  total?: number;
  /** credits applied to this invoice in cents.
   */
  credits_applied?: number;
  /** Existing outstanding payments if any, applied to this invoice in cents.
   */
  amount_paid?: number;
  /** Invoice amount due in cents
   */
  amount_due?: number;
  /** The details of the line items in this invoice estimate.  
**Note**

Line items that meet **both** the following conditions are **not** returned:

* The line item belongs to an item price whose parent item is [metered](items?prod_cat_ver=2#item_metered).
* The `line_item.amount` is `0`.
 */
  line_items?: EstimateNextInvoiceEstimateLineItemsItem[];
  /** The list of discounts applied to this estimate
   */
  discounts?: EstimateNextInvoiceEstimateDiscountsItem[];
  /** The list of taxes applied to this estimate
   */
  taxes?: EstimateNextInvoiceEstimateTaxesItem[];
  /** The list of taxes applied on line items
   */
  line_item_taxes?: EstimateNextInvoiceEstimateLineItemTaxesItem[];
  /** The list of tiers applicable for this line item
   */
  line_item_tiers?: EstimateNextInvoiceEstimateLineItemTiersItem[];
  /** The list of discount(s) applied for each line item of this invoice.
   */
  line_item_discounts?: EstimateNextInvoiceEstimateLineItemDiscountsItem[];
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** A unique identifier for the customer this invoice belongs to
   */
  customer_id?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* product_exempt - If the Plan or Addon is marked as Tax exempt \* customer_exempt - If the Customer is marked as Tax exempt

 */
export type EstimateNextInvoiceEstimateLineItemsItemTaxExemptReason =
  (typeof EstimateNextInvoiceEstimateLineItemsItemTaxExemptReason)[keyof typeof EstimateNextInvoiceEstimateLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price \* plan_item_price - Indicates that this line item is based on plan Item Price

 */
export type EstimateNextInvoiceEstimateLineItemsItemEntityType =
  (typeof EstimateNextInvoiceEstimateLineItemsItemEntityType)[keyof typeof EstimateNextInvoiceEstimateLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* per_unit - A fixed price per unit quantity. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based.

 */
export type EstimateNextInvoiceEstimateLineItemsItemPricingModel =
  (typeof EstimateNextInvoiceEstimateLineItemsItemPricingModel)[keyof typeof EstimateNextInvoiceEstimateLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimateLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type EstimateNextInvoiceEstimateLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* per_unit - A fixed price per unit quantity. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based.
   */
  pricing_model?: EstimateNextInvoiceEstimateLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* charge_item_price - Indicates that this line item is based on charge Item Price \* plan_item_price - Indicates that this line item is based on plan Item Price
   */
  entity_type: EstimateNextInvoiceEstimateLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* product_exempt - If the Plan or Addon is marked as Tax exempt \* customer_exempt - If the Customer is marked as Tax exempt
   */
  tax_exempt_reason?: EstimateNextInvoiceEstimateLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The price type of this invoice. \* tax_exclusive - All amounts in the document are exclusive of tax. \* tax_inclusive - All amounts in the document are inclusive of tax.

 */
export type EstimateNextInvoiceEstimatePriceType =
  (typeof EstimateNextInvoiceEstimatePriceType)[keyof typeof EstimateNextInvoiceEstimatePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateNextInvoiceEstimatePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes).

 */
export type EstimateInvoiceEstimatesItemLineItemDiscountsItemDiscountType =
  (typeof EstimateInvoiceEstimatesItemLineItemDiscountsItemDiscountType)[keyof typeof EstimateInvoiceEstimatesItemLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateInvoiceEstimatesItemLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes).
   */
  discount_type: EstimateInvoiceEstimatesItemLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

export type EstimateInvoiceEstimatesItemLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * The type of tax jurisdiction \* other - Jurisdictions other than the ones listed above. \* federal - The tax jurisdiction is a federal \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* county - The tax jurisdiction is a county \* state - The tax jurisdiction is a state

 */
export type EstimateInvoiceEstimatesItemLineItemTaxesItemTaxJurisType =
  (typeof EstimateInvoiceEstimatesItemLineItemTaxesItemTaxJurisType)[keyof typeof EstimateInvoiceEstimatesItemLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type EstimateInvoiceEstimatesItemLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* other - Jurisdictions other than the ones listed above. \* federal - The tax jurisdiction is a federal \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* county - The tax jurisdiction is a county \* state - The tax jurisdiction is a state
   */
  tax_juris_type?: EstimateInvoiceEstimatesItemLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type EstimateInvoiceEstimatesItemTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* fixed_amount - when amount is applied as discount \* percentage - when percentage is applied as discount

 */
export type EstimateInvoiceEstimatesItemDiscountsItemDiscountType =
  (typeof EstimateInvoiceEstimatesItemDiscountsItemDiscountType)[keyof typeof EstimateInvoiceEstimatesItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`.

 */
export type EstimateInvoiceEstimatesItemDiscountsItemEntityType =
  (typeof EstimateInvoiceEstimatesItemDiscountsItemEntityType)[keyof typeof EstimateInvoiceEstimatesItemDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateInvoiceEstimatesItemDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`.
   */
  entity_type: EstimateInvoiceEstimatesItemDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* fixed_amount - when amount is applied as discount \* percentage - when percentage is applied as discount
   */
  discount_type?: EstimateInvoiceEstimatesItemDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* tax_not_configured - If tax is not enabled for the site \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item

 */
export type EstimateInvoiceEstimatesItemLineItemsItemTaxExemptReason =
  (typeof EstimateInvoiceEstimatesItemLineItemsItemTaxExemptReason)[keyof typeof EstimateInvoiceEstimatesItemLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case

 */
export type EstimateInvoiceEstimatesItemLineItemsItemEntityType =
  (typeof EstimateInvoiceEstimatesItemLineItemsItemEntityType)[keyof typeof EstimateInvoiceEstimatesItemLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* per_unit - A fixed price per unit quantity. \* flat_fee - A fixed price that is not quantity-based. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.

 */
export type EstimateInvoiceEstimatesItemLineItemsItemPricingModel =
  (typeof EstimateInvoiceEstimatesItemLineItemsItemPricingModel)[keyof typeof EstimateInvoiceEstimatesItemLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type EstimateInvoiceEstimatesItemLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* per_unit - A fixed price per unit quantity. \* flat_fee - A fixed price that is not quantity-based. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in.
   */
  pricing_model?: EstimateInvoiceEstimatesItemLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case
   */
  entity_type: EstimateInvoiceEstimatesItemLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* tax_not_configured - If tax is not enabled for the site \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item
   */
  tax_exempt_reason?: EstimateInvoiceEstimatesItemLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The price type of this invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type EstimateInvoiceEstimatesItemPriceType =
  (typeof EstimateInvoiceEstimatesItemPriceType)[keyof typeof EstimateInvoiceEstimatesItemPriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatesItemPriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

export type EstimateInvoiceEstimatesItem = {
  /** Whether or not the estimate for the invoice is recurring. Will be 'true' or 'false' for subscription related estimates.
   */
  recurring: boolean;
  /** The price type of this invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: EstimateInvoiceEstimatesItemPriceType;
  /** The currency code (ISO 4217 format) of the invoice.
   */
  currency_code: string;
  /** Invoice sub-total in cents.
   */
  sub_total: number;
  /** Invoice total in cents.
   */
  total?: number;
  /** credits applied to this invoice in cents.
   */
  credits_applied?: number;
  /** Existing outstanding payments if any, applied to this invoice in cents.
   */
  amount_paid?: number;
  /** Invoice amount due in cents
   */
  amount_due?: number;
  /** The details of the line items in this invoice estimate.  
**Note**

Line items that meet **both** the following conditions are **not** returned:

* The line item belongs to an item price whose parent item is [metered](items?prod_cat_ver=2#item_metered).
* The `line_item.amount` is `0`.
 */
  line_items?: EstimateInvoiceEstimatesItemLineItemsItem[];
  /** The list of discounts applied to this estimate
   */
  discounts?: EstimateInvoiceEstimatesItemDiscountsItem[];
  /** The list of taxes applied to this estimate
   */
  taxes?: EstimateInvoiceEstimatesItemTaxesItem[];
  /** The list of taxes applied on line items
   */
  line_item_taxes?: EstimateInvoiceEstimatesItemLineItemTaxesItem[];
  /** The list of tiers applicable for this line item
   */
  line_item_tiers?: EstimateInvoiceEstimatesItemLineItemTiersItem[];
  /** The list of discount(s) applied for each line item of this invoice.
   */
  line_item_discounts?: EstimateInvoiceEstimatesItemLineItemDiscountsItem[];
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** A unique identifier for the customer this invoice belongs to
   */
  customer_id?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case.

 */
export type EstimateInvoiceEstimateLineItemDiscountsItemDiscountType =
  (typeof EstimateInvoiceEstimateLineItemDiscountsItemDiscountType)[keyof typeof EstimateInvoiceEstimateLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateInvoiceEstimateLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case.
   */
  discount_type: EstimateInvoiceEstimateLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

export type EstimateInvoiceEstimateLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * Represents the preview of the invoice generated immediately when the 'estimate' operations are invoked.

 */
export type EstimateInvoiceEstimate = {
  /** Whether or not the estimate for the invoice is recurring. Will be 'true' or 'false' for subscription related estimates.
   */
  recurring: boolean;
  /** The price type of this invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: EstimateInvoiceEstimatePriceType;
  /** The currency code (ISO 4217 format) of the invoice.
   */
  currency_code: string;
  /** Invoice sub-total in cents.
   */
  sub_total: number;
  /** Invoice total in cents.
   */
  total?: number;
  /** credits applied to this invoice in cents.
   */
  credits_applied?: number;
  /** Existing outstanding payments if any, applied to this invoice in cents.
   */
  amount_paid?: number;
  /** Invoice amount due in cents
   */
  amount_due?: number;
  /** The details of the line items in this invoice estimate.  
**Note**

Line items that meet **both** the following conditions are **not** returned:

* The line item belongs to an item price whose parent item is [metered](items?prod_cat_ver=2#item_metered).
* The `line_item.amount` is `0`.
 */
  line_items?: EstimateInvoiceEstimateLineItemsItem[];
  /** The list of discounts applied to this estimate
   */
  discounts?: EstimateInvoiceEstimateDiscountsItem[];
  /** The list of taxes applied to this estimate
   */
  taxes?: EstimateInvoiceEstimateTaxesItem[];
  /** The list of taxes applied on line items
   */
  line_item_taxes?: EstimateInvoiceEstimateLineItemTaxesItem[];
  /** The list of tiers applicable for this line item
   */
  line_item_tiers?: EstimateInvoiceEstimateLineItemTiersItem[];
  /** The list of discount(s) applied for each line item of this invoice.
   */
  line_item_discounts?: EstimateInvoiceEstimateLineItemDiscountsItem[];
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** A unique identifier for the customer this invoice belongs to
   */
  customer_id?: string;
};

/**
 * The type of tax jurisdiction \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* county - The tax jurisdiction is a county \* city - The tax jurisdiction is a city \* federal - The tax jurisdiction is a federal \* country - The tax jurisdiction is a country \* other - Jurisdictions other than the ones listed above. \* state - The tax jurisdiction is a state

 */
export type EstimateInvoiceEstimateLineItemTaxesItemTaxJurisType =
  (typeof EstimateInvoiceEstimateLineItemTaxesItemTaxJurisType)[keyof typeof EstimateInvoiceEstimateLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type EstimateInvoiceEstimateLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* county - The tax jurisdiction is a county \* city - The tax jurisdiction is a city \* federal - The tax jurisdiction is a federal \* country - The tax jurisdiction is a country \* other - Jurisdictions other than the ones listed above. \* state - The tax jurisdiction is a state
   */
  tax_juris_type?: EstimateInvoiceEstimateLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type EstimateInvoiceEstimateTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* fixed_amount - when amount is applied as discount \* percentage - when percentage is applied as discount

 */
export type EstimateInvoiceEstimateDiscountsItemDiscountType =
  (typeof EstimateInvoiceEstimateDiscountsItemDiscountType)[keyof typeof EstimateInvoiceEstimateDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice.

 */
export type EstimateInvoiceEstimateDiscountsItemEntityType =
  (typeof EstimateInvoiceEstimateDiscountsItemEntityType)[keyof typeof EstimateInvoiceEstimateDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type EstimateInvoiceEstimateDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice.
   */
  entity_type: EstimateInvoiceEstimateDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* fixed_amount - when amount is applied as discount \* percentage - when percentage is applied as discount
   */
  discount_type?: EstimateInvoiceEstimateDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* customer_exempt - If the Customer is marked as Tax exempt

 */
export type EstimateInvoiceEstimateLineItemsItemTaxExemptReason =
  (typeof EstimateInvoiceEstimateLineItemsItemTaxExemptReason)[keyof typeof EstimateInvoiceEstimateLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id

 */
export type EstimateInvoiceEstimateLineItemsItemEntityType =
  (typeof EstimateInvoiceEstimateLineItemsItemEntityType)[keyof typeof EstimateInvoiceEstimateLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity.

 */
export type EstimateInvoiceEstimateLineItemsItemPricingModel =
  (typeof EstimateInvoiceEstimateLineItemsItemPricingModel)[keyof typeof EstimateInvoiceEstimateLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimateLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type EstimateInvoiceEstimateLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity.
   */
  pricing_model?: EstimateInvoiceEstimateLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* addon_item_price - Indicates that this line item is based on addon Item Price \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* charge_item_price - Indicates that this line item is based on charge Item Price \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id
   */
  entity_type: EstimateInvoiceEstimateLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively \* customer_exempt - If the Customer is marked as Tax exempt
   */
  tax_exempt_reason?: EstimateInvoiceEstimateLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The price type of this invoice. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type EstimateInvoiceEstimatePriceType =
  (typeof EstimateInvoiceEstimatePriceType)[keyof typeof EstimateInvoiceEstimatePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateInvoiceEstimatePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

export type EstimateSubscriptionEstimatesItem = {
  /** The identifier of the subscription
   */
  id?: string;
  /** The currency code (ISO 4217 format) of the subscription.
   */
  currency_code: string;
  /** The status of the subscription. \* future - The subscription is scheduled to start at a future date. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* in_trial - The subscription is in trial. \* active - The subscription is active and will be charged for automatically based on the items in it. \* non_renewing - The subscription will be canceled at the end of the current term. \* cancelled - The subscription has been canceled and is no longer in service.
   */
  status?: EstimateSubscriptionEstimatesItemStatus;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items.
   */
  trial_end_action?: EstimateSubscriptionEstimatesItemTrialEndAction;
  /** Date on which the next billing happens. This will be null for non-renewing and cancelled subscriptions.
   */
  next_billing_at?: number;
  /** The date on which subscription will be paused. Applicable only to paused or scheduled pause subscriptions
   */
  pause_date?: number;
  /** The date on which subscription will be resumed. Applicable only to paused or scheduled pause subscriptions
   */
  resume_date?: number;
  /** Represents the shipping address when the 'estimate' operations are invoked.
   */
  shipping_address?: EstimateSubscriptionEstimatesItemShippingAddress;
  /** Represents the contract terms when the 'estimate' operations are invoked.
   */
  contract_term?: EstimateSubscriptionEstimatesItemContractTerm;
};

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* cancel - Contract term completes and subscription is canceled. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.


 */
export type EstimateSubscriptionEstimatesItemContractTermActionAtTermEnd =
  (typeof EstimateSubscriptionEstimatesItemContractTermActionAtTermEnd)[keyof typeof EstimateSubscriptionEstimatesItemContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimatesItemContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Current status of contract \* completed - The contract term has run its full duration. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* active - An actively running contract term. \* terminated - The contract term was terminated ahead of completion.

 */
export type EstimateSubscriptionEstimatesItemContractTermStatus =
  (typeof EstimateSubscriptionEstimatesItemContractTermStatus)[keyof typeof EstimateSubscriptionEstimatesItemContractTermStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimatesItemContractTermStatus = {
  active: "active",
  completed: "completed",
  cancelled: "cancelled",
  terminated: "terminated",
} as const;

/**
 * Represents the contract terms when the 'estimate' operations are invoked.

 */
export type EstimateSubscriptionEstimatesItemContractTerm = {
  /** Id that uniquely identifies the contract term in the site.
   */
  id: string;
  /** Current status of contract \* completed - The contract term has run its full duration. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* active - An actively running contract term. \* terminated - The contract term was terminated ahead of completion.
 */
  status: EstimateSubscriptionEstimatesItemContractTermStatus;
  /** The start date of the contract term
   */
  contract_start: number;
  /** The end date of the contract term
   */
  contract_end: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle: number;
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* cancel - Contract term completes and subscription is canceled. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.

 */
  action_at_term_end: EstimateSubscriptionEstimatesItemContractTermActionAtTermEnd;
  /** The sum of the [totals](invoices#invoice_total) of all the invoices raised as part of the contract term. For `active` contract terms, this is a predicted value. The value depends on the [type of currency](./#handling_currency_units). If the subscription was [imported](#import_a_subscription) with the contract term, then this value includes the value passed for `total_amount_raised`.
   */
  total_contract_value: number;
  /** It refers to the total amount of revenue that is expected to be generated from a specific contract term, calculated as the sum of all invoices raised during the term, regardless of payment status. It is based on past performance and the specified currency in the contract. If the subscription was imported, the value for `total_amount_raised_before_tax` is included in the calculation of the total contract value before tax. It's important to note that this value excludes any applicable taxes.
   */
  total_contract_value_before_tax: number;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
  /** The date when the contract term was created.
   */
  created_at: number;
  /** The [Id](subscriptions#subscription_id) of the subscription that this contract term is for.
   */
  subscription_id: string;
  /** The number of subscription billing cycles remaining after the current one for the contract term. This attribute is only returned for `active` contract terms.
   */
  remaining_billing_cycles?: number;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* not_validated - Address is not yet validated. \* invalid - Address is invalid. \* partially_valid - The address is valid for taxability but has not been validated for shipping.

 */
export type EstimateSubscriptionEstimatesItemShippingAddressValidationStatus =
  (typeof EstimateSubscriptionEstimatesItemShippingAddressValidationStatus)[keyof typeof EstimateSubscriptionEstimatesItemShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimatesItemShippingAddressValidationStatus =
  {
    not_validated: "not_validated",
    valid: "valid",
    partially_valid: "partially_valid",
    invalid: "invalid",
  } as const;

/**
 * Represents the shipping address when the 'estimate' operations are invoked.

 */
export type EstimateSubscriptionEstimatesItemShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* not_validated - Address is not yet validated. \* invalid - Address is invalid. \* partially_valid - The address is valid for taxability but has not been validated for shipping.
   */
  validation_status?: EstimateSubscriptionEstimatesItemShippingAddressValidationStatus;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* cancel_subscription - The subscription cancels. \* activate_subscription - The subscription activates and charges are raised for non-metered items.

 */
export type EstimateSubscriptionEstimatesItemTrialEndAction =
  (typeof EstimateSubscriptionEstimatesItemTrialEndAction)[keyof typeof EstimateSubscriptionEstimatesItemTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimatesItemTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The status of the subscription. \* future - The subscription is scheduled to start at a future date. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* in_trial - The subscription is in trial. \* active - The subscription is active and will be charged for automatically based on the items in it. \* non_renewing - The subscription will be canceled at the end of the current term. \* cancelled - The subscription has been canceled and is no longer in service.

 */
export type EstimateSubscriptionEstimatesItemStatus =
  (typeof EstimateSubscriptionEstimatesItemStatus)[keyof typeof EstimateSubscriptionEstimatesItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimatesItemStatus = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type EstimateSubscriptionEstimateContractTermActionAtTermEnd =
  (typeof EstimateSubscriptionEstimateContractTermActionAtTermEnd)[keyof typeof EstimateSubscriptionEstimateContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimateContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Current status of contract \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* terminated - The contract term was terminated ahead of completion. \* active - An actively running contract term. \* completed - The contract term has run its full duration.

 */
export type EstimateSubscriptionEstimateContractTermStatus =
  (typeof EstimateSubscriptionEstimateContractTermStatus)[keyof typeof EstimateSubscriptionEstimateContractTermStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimateContractTermStatus = {
  active: "active",
  completed: "completed",
  cancelled: "cancelled",
  terminated: "terminated",
} as const;

/**
 * Represents the contract terms when the 'estimate' operations are invoked.

 */
export type EstimateSubscriptionEstimateContractTerm = {
  /** Id that uniquely identifies the contract term in the site.
   */
  id: string;
  /** Current status of contract \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* terminated - The contract term was terminated ahead of completion. \* active - An actively running contract term. \* completed - The contract term has run its full duration.
 */
  status: EstimateSubscriptionEstimateContractTermStatus;
  /** The start date of the contract term
   */
  contract_start: number;
  /** The end date of the contract term
   */
  contract_end: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle: number;
  /** Action to be taken when the contract term completes. \* evergreen - Contract term completes and the subscription renews. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end: EstimateSubscriptionEstimateContractTermActionAtTermEnd;
  /** The sum of the [totals](invoices#invoice_total) of all the invoices raised as part of the contract term. For `active` contract terms, this is a predicted value. The value depends on the [type of currency](./#handling_currency_units). If the subscription was [imported](#import_a_subscription) with the contract term, then this value includes the value passed for `total_amount_raised`.
   */
  total_contract_value: number;
  /** It refers to the total amount of revenue that is expected to be generated from a specific contract term, calculated as the sum of all invoices raised during the term, regardless of payment status. It is based on past performance and the specified currency in the contract. If the subscription was imported, the value for `total_amount_raised_before_tax` is included in the calculation of the total contract value before tax. It's important to note that this value excludes any applicable taxes.
   */
  total_contract_value_before_tax: number;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
  /** The date when the contract term was created.
   */
  created_at: number;
  /** The [Id](subscriptions#subscription_id) of the subscription that this contract term is for.
   */
  subscription_id: string;
  /** The number of subscription billing cycles remaining after the current one for the contract term. This attribute is only returned for `active` contract terms.
   */
  remaining_billing_cycles?: number;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* partially_valid - The address is valid for taxability but has not been validated for shipping.

 */
export type EstimateSubscriptionEstimateShippingAddressValidationStatus =
  (typeof EstimateSubscriptionEstimateShippingAddressValidationStatus)[keyof typeof EstimateSubscriptionEstimateShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimateShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Represents the shipping address when the 'estimate' operations are invoked.

 */
export type EstimateSubscriptionEstimateShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* invalid - Address is invalid. \* not_validated - Address is not yet validated. \* partially_valid - The address is valid for taxability but has not been validated for shipping.
   */
  validation_status?: EstimateSubscriptionEstimateShippingAddressValidationStatus;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
};

/**
 * Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* cancel_subscription - The subscription cancels. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* activate_subscription - The subscription activates and charges are raised for non-metered items.

 */
export type EstimateSubscriptionEstimateTrialEndAction =
  (typeof EstimateSubscriptionEstimateTrialEndAction)[keyof typeof EstimateSubscriptionEstimateTrialEndAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimateTrialEndAction = {
  site_default: "site_default",
  plan_default: "plan_default",
  activate_subscription: "activate_subscription",
  cancel_subscription: "cancel_subscription",
} as const;

/**
 * The status of the subscription. \* in_trial - The subscription is in trial. \* non_renewing - The subscription will be canceled at the end of the current term. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* future - The subscription is scheduled to start at a future date. \* active - The subscription is active and will be charged for automatically based on the items in it. \* cancelled - The subscription has been canceled and is no longer in service.

 */
export type EstimateSubscriptionEstimateStatus =
  (typeof EstimateSubscriptionEstimateStatus)[keyof typeof EstimateSubscriptionEstimateStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EstimateSubscriptionEstimateStatus = {
  future: "future",
  in_trial: "in_trial",
  active: "active",
  non_renewing: "non_renewing",
  paused: "paused",
  cancelled: "cancelled",
} as const;

/**
 * Represents the subscription details when the 'estimate' operations are invoked.

 */
export type EstimateSubscriptionEstimate = {
  /** The identifier of the subscription
   */
  id?: string;
  /** The currency code (ISO 4217 format) of the subscription.
   */
  currency_code: string;
  /** The status of the subscription. \* in_trial - The subscription is in trial. \* non_renewing - The subscription will be canceled at the end of the current term. \* paused - The subscription is [paused](https://www.chargebee.com/docs/2.0/pause-subscription.html). The subscription will not renew while in this state. \* future - The subscription is scheduled to start at a future date. \* active - The subscription is active and will be charged for automatically based on the items in it. \* cancelled - The subscription has been canceled and is no longer in service.
   */
  status?: EstimateSubscriptionEstimateStatus;
  /** Applicable only when [End-of-trial Action](https://www.chargebee.com/docs/2.0/trial_periods_hidden.html#how-to-define-the-end-of-trial-actions-for-subscriptions) has been enabled for the site. Whenever the subscription has a trial period, this attribute (parameter) is returned (required) and specifies the operation to be carried out for the subscription once the trial ends. \* cancel_subscription - The subscription cancels. \* site_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is **not** defined for the plan. \* plan_default - The action [configured for the site](https://www.chargebee.com/docs/trial_periods.html#how-to-define-the-end-of-trial-actions-for-subscriptions) at the time when the trial ends, takes effect. This is the default value when `trial_end_action` is defined for the plan. \* activate_subscription - The subscription activates and charges are raised for non-metered items.
   */
  trial_end_action?: EstimateSubscriptionEstimateTrialEndAction;
  /** Date on which the next billing happens. This will be null for non-renewing and cancelled subscriptions.
   */
  next_billing_at?: number;
  /** The date on which subscription will be paused. Applicable only to paused or scheduled pause subscriptions
   */
  pause_date?: number;
  /** The date on which subscription will be resumed. Applicable only to paused or scheduled pause subscriptions
   */
  resume_date?: number;
  /** Represents the shipping address when the 'estimate' operations are invoked.
   */
  shipping_address?: EstimateSubscriptionEstimateShippingAddress;
  /** Represents the contract terms when the 'estimate' operations are invoked.
   */
  contract_term?: EstimateSubscriptionEstimateContractTerm;
};

export type EntityType = (typeof EntityType)[keyof typeof EntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  quote: "quote",
  credit_note: "credit_note",
  transaction: "transaction",
  plan: "plan",
  addon: "addon",
  coupon: "coupon",
  order: "order",
  business_entity: "business_entity",
  item_family: "item_family",
  item: "item",
  item_price: "item_price",
  product: "product",
  variant: "variant",
} as const;

export type EntityCode = (typeof EntityCode)[keyof typeof EntityCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EntityCode = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
  f: "f",
  g: "g",
  h: "h",
  i: "i",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "n",
  p: "p",
  q: "q",
  r: "r",
  med1: "med1",
  med2: "med2",
} as const;

export interface EntitlementSetting {
  name?: string;
  value?: string;
}

/**
 * `subscriptions` inherit `item_entitlements` from `item`s that are in them. Even so, there are many reasons why you may want to override the inherited entitlements on a subscription:

* A customer wants access to a `feature` that the `item`s on their `subscription` are not entitled to.
* A customer wants a higher `feature.level` without having to pay more.
* A customer does not want to see or access a `feature` because it is irrelevant to them.
* You offer customized `feature` bundles for each `subscription` instead of grouping `feature`s into a product catalog of `item`s.

This API helps you implement each of the above use cases by providing you a way to specify the `entitlement_overrides` `component` for any `subscription_entitlement`. Such an override, when present, becomes the effective entitlement, thereby overriding any `inherited_entitlements` for the `subscription`.  
**`entitlement_override` expiry**

If [expires_at](/docs/api/entitlement_overrides#entitlement_override_expires_at) has been set, then the `entitlement_override` object is no longer returned after `expires_at` has passed. The expiration of an `entitlement_override` does not trigger any event immediately. However, after expiry, the `entitlement_override `record gets deleted within 12 hours. This deletion triggers the `entitlement_overrides_auto_removed `event which can be considered as a notification, albeit delayed, for one or more `entitlement_overrides `having expired.

 */
export interface EntitlementOverride {
  /** Unique identifier for the entitlement override. This is always auto-generated.
   */
  id: string;
  /** The `id` of the subscription to which this entitlement override belongs.
   */
  entity_id?: string;
  /** The name of Chargebee resource that this entitlement override is associated with. The value is always `subscription`.
   */
  entity_type?: string;
  /** The `id` of the `feature` towards which this entitlement override has been granted.
   */
  feature_id?: string;
  /** The `name` of the `feature` towards which this entitlement override has been granted.
   */
  feature_name?: string;
  /** The level of entitlement that the item has towards the feature. The possible values depend on the value of `feature.type`:

* When `feature.type` is `quantity` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any one of `feature.levels[value][]`.
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can also be:
    * any one of `feature.levels[value][]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `range` and:
  * If `feature.levels[is_unlimited]` is not `true` for any one of `feature.levels[]`, then the value can be any whole number between `levels[value][0]` and `levels[value][1]` (inclusive).
  * If `feature.levels[is_unlimited]` is `true` for one of the `feature.levels[]`, then the value can be:
    * any whole number equal to or greater than `levels[value][0]`
    * or it can be `unlimited` (case-insensitive), indicating unlimited entitlement.
* When `type` is `custom`, then the value can be any one of `feature.levels[value][]`.
* When `type` is `switch`, then the value is set as `true` if the feature is available; it is set as `false` when the feature is unavailable.
 */
  value?: string;
  /** The display name for the entitlement level. The default values are auto-generated based on `feature.type` as follows:

* When `feature.type` is `quantity` or `range`, then `name` is the space-separated concatenation of `value` and the pluralized version of `feature.unit`. For example, if `value` is `20` and `feature.unit` is `user`, then `name` becomes `20 users`.
* When `feature.type` is `custom`, then `name` is the same as `value`
 */
  name?: string;
  /** The expiry date for the `entitlement_override`. Once expired, the `entitlement_override` object is no longer returned.
   */
  expires_at?: number;
}

export type EndScheduleOn = (typeof EndScheduleOn)[keyof typeof EndScheduleOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EndScheduleOn = {
  after_number_of_intervals: "after_number_of_intervals",
  specific_date: "specific_date",
  subscription_end: "subscription_end",
} as const;

export type EinvoicingMethod =
  (typeof EinvoicingMethod)[keyof typeof EinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EinvoicingMethod = {
  automatic: "automatic",
  manual: "manual",
  site_default: "site_default",
} as const;

export type EcheckType = (typeof EcheckType)[keyof typeof EcheckType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EcheckType = {
  web: "web",
  ppd: "ppd",
  ccd: "ccd",
} as const;

export type DurationType = (typeof DurationType)[keyof typeof DurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

export type DunningType = (typeof DunningType)[keyof typeof DunningType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DunningType = {
  auto_collect: "auto_collect",
  offline: "offline",
  direct_debit: "direct_debit",
} as const;

/**
 * Requesting to download a file through this API will return the `download_url` attribute as the response. This attribute will contain a URL that will allow the requested content to be downloaded.

 */
export interface Download {
  /** The URL at which the file is available for download.
   */
  download_url: string;
  /** The time until which the `download_url` is valid.
   */
  valid_till: number;
  /** The [media type](https://en.wikipedia.org/wiki/Media_type) of the file.
   */
  mime_type?: string;
}

export type DispositionType =
  (typeof DispositionType)[keyof typeof DispositionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DispositionType = {
  attachment: "attachment",
  inline: "inline",
} as const;

/**
 * The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type DiscountApplyOn =
  (typeof DiscountApplyOn)[keyof typeof DiscountApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscountApplyOn = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

/**
 * The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month. \* week - A period of 7 days. \* day - A period of 24 hours.

 */
export type DiscountPeriodUnit =
  (typeof DiscountPeriodUnit)[keyof typeof DiscountPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscountPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.

 */
export type DiscountDurationType =
  (typeof DiscountDurationType)[keyof typeof DiscountDurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscountDurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The type of discount. Possible value are: \* percentage - The specified percentage will be given as discount. \* fixed_amount - The specified amount will be given as discount.

 */
export type DiscountType = (typeof DiscountType)[keyof typeof DiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * A `discount`, just like [coupons](/docs/api/coupons), represents a deduction from the amounts in an `invoice`. While coupons are typically used by your customers, `discount`s can be directly applied to subscriptions by your sales team while negotiating new deals or upgrades. If the negotiations are on the price itself, the [price override](https://www.chargebee.com/docs/price-override.html#api) feature helps adjust the price further.

Although a `discount` appears as a deduction on an invoice, it is applied to a `subscription` while creating or updating the `subscription`. Every `discount` in Chargebee is attached to only one `subscription`.  
**Note:**

* The sum of the line-item-level and invoice-level coupons together for a subscription, cannot exceed 10.
* When discounts are enabled in Chargebee, the [multi-coupons feature](https://www.chargebee.com/docs/coupons.html#applying-multiple-coupons-to-a-subscription) is automatically activated.



Adding a discount
-----------------

### Subscriptions

A `discount` can be added to a `subscription` by calling either [Create subscription](/docs/api/subscriptions?prod_cat_ver=2#create_subscription_for_items) or [Update subscription](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items). Once added, the `discount` is applied to all subsequent invoices if `apply_on` is set to `invoice_amount`. When `apply_on` = `specific_item_price`, the discount is applied (as a `discount.line_item_discount`) in each invoice of the subscription that contains the specified item.

### Invoices

A `discount` can be added to an `invoice` using [Create invoice for items and one-time charges](/docs/api/invoices?prod_cat_ver=2#create_invoice_for_items_and_one-time_charges) using the `discounts` parameter.

### Quotes

A `discount` can be added to a `quote` using the following operations:

* [Create a quote for new subscription](/docs/api/quotes?prod_cat_ver=2#create_a_quote_for_a_new_subscription_items)
* [Create a quote for updating a subscription](/docs/api/quotes?prod_cat_ver=2#create_a_quote_for_update_subscription_items)
* [Create a quote for charge and charge item](/docs/api/quotes?prod_cat_ver=2#create_a_quote_for_charge_and_charge_items)
* [Edit a quote for a new subscription](/docs/api/quotes?prod_cat_ver=2#edit_create_subscription_quote_for_items)
* [Edit a quote for updating a subscription](/docs/api/quotes?prod_cat_ver=2#edit_update_subscription_quote_for_items)
* [Edit a quote for charge items and charges](/docs/api/quotes?prod_cat_ver=2#edit_quote_for_charge_items_and_charges)

### Estimates

A discount can be added to an estimate using the following endpoints:

* [Estimate for creating a subscription.](/docs/api/estimates?prod_cat_ver=2#estimate_for_creating_a_subscription)
* [Estimate for creating a customer and subscription](/docs/api/estimates?prod_cat_ver=2#estimate_for_creating_a_customer_and_subscription)
* [Estimate for updating a subscription](/docs/api/estimates?prod_cat_ver=2#estimate_for_updating_a_subscription)

Removing a discount
-------------------

### Subscriptions

A `discount` can be removed by calling [Update subscription](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items) with the relevant `discounts[operation_type][]` set to `remove`. Also, discounts that have `duration_type` as `one_time` or `limited_period` are removed automatically upon expiry.

### Quotes

A discount can be removed from a quote using the following operations:

* [Edit a quote for a new subscription](/docs/api/quotes?prod_cat_ver=2#edit_create_subscription_quote_for_items)
* [Edit a quote for updating a subscription](/docs/api/quotes?prod_cat_ver=2#edit_update_subscription_quote_for_items)

### Estimates

A discount can be removed from an estimate using the following operation:

* [Estimate for updating a subscription](/docs/api/estimates?prod_cat_ver=2#estimate_for_updating_a_subscription)

Listing discounts
-----------------

A discount is associated with exactly one subscription. You can fetch all the discounts currently attached to a subscription by calling the [List discounts for a subscription API](/docs/api/subscriptions?prod_cat_ver=2#list_discounts_for_a_subscription) or by passing `include_discounts` as `true` while creating, importing, updating or retrieving a subscription.

Order of application of coupons and discounts {#precedence}
-----------------------------------------------------------

When both <coupons> and <discounts> are applied simultaneously to a [subscription](subscriptions) or [one-time invoice](invoices?prod_cat_ver=2#create_invoice_for_items_and_one-time_charges), they're applied in the following order:  
{#c8112732-82d8-406d-adad-a832fcb071a5}

|---|---------------------------------------|--------------------------------------------------------------------------------------------------------------------|
|   | **Summary**                           | **Description**                                                                                                    |
| 1 | Line-level, fixed amount coupons      | `coupon` with apply_on{#a9499b7a-8534-4a0c-b4d4-e66ab1dc88d9} = `each_specified_item` and `discount_type` = `flat` |
| 2 | Line-level, fixed amount discounts    | `discount` with `apply_on` = `specific_item_price` and `type` = `fixed_amount`                                     |
| 3 | Line-level, percentage coupons        | `coupon` with `apply_on` = `each_specified_item` and `discount_type` = `percentage`                                |
| 4 | Line-level, percentage discounts      | `discount` with `apply_on` = `specific_item_price` and `type` = `percentage`                                       |
| 5 | Invoice-level, fixed amount coupons   | `coupon` with `apply_on` = `invoice_amount` and `discount_type` = `flat`                                           |
| 6 | Invoice-level, fixed amount discounts | `discount` with `apply_on` = `invoice_amount` and `type` = `fixed_amount`                                          |
| 7 | Invoice-level, percentage coupons     | `coupon` with `apply_on` = `invoice_amount` and `discount_type` = `percentage`                                     |
| 8 | Invoice-level, percentage discounts   | `discount` with `apply_on` = `invoice_amount` and `type` = `percentage`                                            |



For example, consider the following scenario:

A subscription is created with:

* a plan price of $200 per month
* an addon price of $20 per month
* a flat $5 invoice discount
* a 1% off coupon on the addon
* a flat $2 coupon on the invoice

The above coupons and discount are applied in the following order:  

|---|---------------------------------------------|-----------------------------------------------|
|   | **Discount or coupon applied**              | **Subtotal at each step**                     |
| 1 | Initial subtotal (plan price + addon price) | $200 + $20 = $220                             |
| 2 | 1% off coupon on the addon                  | $200 + $(20 - 0.02) = $200 + $19.98 = $219.98 |
| 3 | Flat $2 coupon on the invoice               | $219.98 - $2 = $217.98                        |
| 4 | Flat $5 invoice discount                    | $217.98 - $5 = **$212.98**                    |


 */
export interface Discount {
  /** An immutable unique id for the discount. It is always auto-generated.
   */
  id: string;
  /** The name of the discount as it should appear on customer-facing pages and documents such as [invoices](/docs/api/invoices?prod_cat_ver=2) and [hosted pages](/docs/api/hosted_pages?prod_cat_ver=2). This is auto-generated based on the `type`, `amount`, and `currency_code` of the discount. For example, it can be `10% off` or `10$ off`.
   */
  invoice_name?: string;
  /** The type of discount. Possible value are: \* percentage - The specified percentage will be given as discount. \* fixed_amount - The specified amount will be given as discount.
   */
  type: DiscountType;
  /** The percentage of the original amount that should be deducted from it. Only applicable when `discount.type` is percentage.
   */
  percentage?: number;
  /** The value of the discount. [The format of this value](https://apidocs.chargebee.com/docs/api?prod_cat_ver=2#currencies) depends on the kind of currency. This is only applicable when `discount.type` is `fixed_amount`.
   */
  amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the discount. This is only applicable when `discount.type` is `fixed_amount`.
   */
  currency_code?: string;
  /** Specifies the time duration for which this discount is attached to the subscription. \* forever - The discount is attached to the subscription and applied on the invoices till it is [explicitly removed](/docs/api/subscriptions?prod_cat_ver=2#update_subscription_for_items_discounts_operation_type). \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`. \* one_time - The discount stays attached to the subscription till it is applied on an invoice **once**. It is removed after that from the subscription.
   */
  duration_type: DiscountDurationType;
  /** The duration of time for which the discount is attached to the subscription, in `period_units`. Applicable only when `duration_type` is `limited_period`.
   */
  period?: number;
  /** The unit of time for `period`. Applicable only when `duration_type` is `limited_period`. \* year - A period of 1 calendar year. \* month - A period of 1 calendar month. \* week - A period of 7 days. \* day - A period of 24 hours.
   */
  period_unit?: DiscountPeriodUnit;
  /** The discount is included in MRR calculations for your site. This attribute is only applicable when `duration_type` is `one_time` and when the [feature is enabled](https://www.chargebee.com/docs/reporting.html#dashboards_flexible-mrr-calculation) in Chargebee. Also, If the [site-level setting](https://www.chargebee.com/docs/reporting.html#chart_flexible-mrr-calculation) is to exclude one-time discounts from MRR calculations, this value is always returned `false`.
   */
  included_in_mrr: boolean;
  /** The amount on the invoice to which the discount is applied. \* invoice_amount - The discount is applied to the invoice `sub_total`. \* specific_item_price - The discount is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.
   */
  apply_on: DiscountApplyOn;
  /** The [id of the item price](/docs/api/subscriptions?prod_cat_ver=2#subscription_subscription_items_item_price_id) in the subscription to which the discount is to be applied. Relevant only when `apply_on` = `specific_item_price`.
   */
  item_price_id?: string;
  /** Timestamp indicating when this discount is created.
   */
  created_at: number;
  /** Specifies till when the limited period discount is applicable. This attribute will be sent in the response only for `limited_period` duration type discount.
   */
  apply_till?: number;
  /** Specifies the number of times the discount has been applied.
   */
  applied_count?: number;
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.  
**Note:**


When the coupon ID contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
 */
  coupon_id: string;
  /** The index number of the subscription to which the item price is added. Provide a unique number between `0` and `4` (inclusive) for each subscription that is to be created.
   */
  index: number;
}

export type DirectDebitScheme =
  (typeof DirectDebitScheme)[keyof typeof DirectDebitScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DirectDebitScheme = {
  ach: "ach",
  bacs: "bacs",
  sepa_core: "sepa_core",
  autogiro: "autogiro",
  becs: "becs",
  becs_nz: "becs_nz",
  pad: "pad",
  not_applicable: "not_applicable",
} as const;

/**
 * The unit of time for `period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year.

 */
export type DifferentialPriceParentPeriodsItemPeriodUnit =
  (typeof DifferentialPriceParentPeriodsItemPeriodUnit)[keyof typeof DifferentialPriceParentPeriodsItemPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DifferentialPriceParentPeriodsItemPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

export type DifferentialPriceParentPeriodsItem = {
  /** The unit of time for `period`. \* month - A period of 1 calendar month. \* day - A period of 24 hours. \* week - A period of 7 days. \* year - A period of 1 calendar year.
   */
  period_unit: DifferentialPriceParentPeriodsItemPeriodUnit;
  /** The billing period of the plan in `period_unit`s. For example, a 6 month plan has `period` as 6 and `period_unit` as `month`.
   */
  period?: unknown[];
};

export type DifferentialPriceTiersItem = {
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The per-unit price for the tier when the `pricing_model` is `tiered` or `volume`; the total cost for the item price when the `pricing_model` is `stairstep`. The value is in the [minor unit of the currency](https://apidocs.chargebee.com/docs/api#handling_currency_units).
   */
  price: number;
  starting_unit_in_decimal?: string;
  ending_unit_in_decimal?: string;
  price_in_decimal?: string;
};

/**
 * The item family state. \* active - New items can be created with the item family. \* deleted - No items allowed for the item family.

 */
export type DifferentialPriceStatus =
  (typeof DifferentialPriceStatus)[keyof typeof DifferentialPriceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DifferentialPriceStatus = {
  active: "active",
  deleted: "deleted",
} as const;

/**
 * Differential pricing helps implement a pricing strategy for addons and charges based on the plans they're purchased with. A differential price a specific price for an addon- or charge-[item price](./item_prices?prod_cat_ver=2) when purchased along with a particular plan.

Differential pricing for addons
-------------------------------

Consider an addon called 24x7 Customer Support provided with a cloud storage service. You can configure differential prices for each of the addon-item prices based on the plan they are purchased with, as follows:

|---|-----------------------------------------------------|-----------------------------------------------|-----------------------------------------------------|
|   | **Addon item price**                                | **Price when applied to *Standard*** **Plan** | **Price when applied to** ***Enterprise*** **Plan** |
| 1 | 24x7 Customer Support, USD, Monthly, Flat fee, $100 | $90                                           | $150                                                |
| 2 | 24x7 Customer Support, USD, Yearly, Flat fee, $1000 | $900                                          | $1500                                               |

Differential pricing for charges
--------------------------------

Consider a charge, called Setup fee, for installing and configuring a cloud-based project management platform. There are two modes in which you can set up differential pricing for a charge:

#### Mode A: One charge differential price per plan-item

This mode is used to specify one differential price for the charge-item price per [plan-item](./items?prod_cat_ver=2) it is applied to.

|-------------------------------|---------------------------------------------------|-----------------------------------------------------|
| **Charge-item price**         | **Price when applied to** ***Standard*** **plan** | **Price when applied to** ***Enterprise*** **plan** |
| Setup fee, USD, Flat fee $500 | $400                                              | $700                                                |

#### Mode B: Multiple charge differential prices per plan item

This mode is used to specify multiple differential prices for the charge per plan-item, based on the plan period.

|-------------------------------|-------------------------------------------------------------|-----------------------------------------------------------|
| **Charge-item price**         | **Price when applied to** ***Standard*** **plan, 6 months** | **Price when applied to** ***Standard*** **plan, yearly** |
| Setup fee, USD, Flat fee $500 | $400                                                        | $300                                                      |




 */
export interface DifferentialPrice {
  /** A unique and immutable ID for the differential price. It is auto-generated when the differential price is created.
   */
  id: string;
  /** The ID of the item price (`addon` or `charge`) whose price should change according to the plan-item it is applied to.
   */
  item_price_id: string;
  /** The ID of the plan-item, in relation to which, the differential pricing for the addon or charge is defined. For example, this would be the id of the *Standard* or *Enterprise* plans-items mentioned in the [examples above](./differential_prices?prod_cat_ver=2).
   */
  parent_item_id: string;
  /** The differential price. If the pricing model of the `item_price_id` is `tiered`, `volume`, or `stairstep`, pass `tiers` instead of this.
   */
  price?: number;
  /** The price of the item when the pricing_model is `flat_fee`. When the pricing model is `per_unit`, it is the price per unit quantity of the item. Not applicable for the other pricing models. The value is in decimal and in major units of the currency. Also, this is only applicable when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  price_in_decimal?: string;
  /** The item family state. \* active - New items can be created with the item family. \* deleted - No items allowed for the item family.
   */
  status?: DifferentialPriceStatus;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp when this differential price was last updated.
   */
  updated_at?: number;
  /** Timestamp at which this differential price was created.
   */
  created_at: number;
  /** Timestamp at which this differential price was last modified.
   */
  modified_at: number;
  /** The currency code (ISO 4217 format) of the plan
   */
  currency_code: string;
  /** List of quantity-based pricing tiers for the differential price. Applicable only for `tiered`, `volume`, and `stairstep` `pricing_model` s. The tiers are exactly the same as those set for the item price. Only the `price` attribute for the various tiers can be overridden for the differential price.
   */
  tiers?: DifferentialPriceTiersItem[];
  /** When `item_price_id` is a charge-item, you can specify the plan period for which the price applies. Although an array, currently you can specify only one period. In other words, only index `0` is allowed. Create another differential price to specify another period. Is permitted only when `item_price_id` is a charge-item.
   */
  parent_periods?: DifferentialPriceParentPeriodsItem[];
}

/**
 * @deprecated
 */
export type DedupeOption = (typeof DedupeOption)[keyof typeof DedupeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DedupeOption = {
  skip: "skip",
  update_existing: "update_existing",
} as const;

export type CustomerType = (typeof CustomerType)[keyof typeof CustomerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerType = {
  residential: "residential",
  business: "business",
  senior_citizen: "senior_citizen",
  industrial: "industrial",
} as const;

/**
 * Sets the child's level of access to its own invoices on the Self-Serve Portal. \* view_only - The child account can only view its invoices and not download them. \* yes - The child account can view and download its own invoices. \* no - The child account can neither view nor download its own invoices.

 */
export type CustomerChildAccountAccessPortalDownloadInvoices =
  (typeof CustomerChildAccountAccessPortalDownloadInvoices)[keyof typeof CustomerChildAccountAccessPortalDownloadInvoices];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerChildAccountAccessPortalDownloadInvoices = {
  yes: "yes",
  view_only: "view_only",
  no: "no",
} as const;

/**
 * Sets the child's level of access to its own subscriptions on the Self-Serve Portal. \* yes - The child account can view and edit its own subscriptions. \* view_only - The child account can only view its own subscriptions.

 */
export type CustomerChildAccountAccessPortalEditSubscriptions =
  (typeof CustomerChildAccountAccessPortalEditSubscriptions)[keyof typeof CustomerChildAccountAccessPortalEditSubscriptions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerChildAccountAccessPortalEditSubscriptions = {
  yes: "yes",
  view_only: "view_only",
} as const;

/**
 * Defines the level of access that the customer has to its own information.

 */
export type CustomerChildAccountAccess = {
  /** Sets the child's level of access to its own subscriptions on the Self-Serve Portal. \* yes - The child account can view and edit its own subscriptions. \* view_only - The child account can only view its own subscriptions.
   */
  portal_edit_subscriptions?: CustomerChildAccountAccessPortalEditSubscriptions;
  /** Sets the child's level of access to its own invoices on the Self-Serve Portal. \* view_only - The child account can only view its invoices and not download them. \* yes - The child account can view and download its own invoices. \* no - The child account can neither view nor download its own invoices.
   */
  portal_download_invoices?: CustomerChildAccountAccessPortalDownloadInvoices;
  /** If `true`, the child account will receive subscription-related emails for its own subscriptions.
   */
  send_subscription_emails: boolean;
  /** If `true`, the child account will receive invoice-related emails for its own invoices.
   */
  send_invoice_emails: boolean;
  /** If `true`, the child account will receive payment-related emails for its own invoices.
   */
  send_payment_emails: boolean;
};

/**
 * Represents a customer. [Subscriptions](/docs/api/subscriptions?prod_cat_ver=2#subscription_attributes), [Card](/docs/api/cards?prod_cat_ver=2#card_attributes) and Billing Address are associated with the customer resource. Customer resource will be created along with subscription via "[Create a Subscription](/docs/api/subscriptions?prod_cat_ver=2#create_a_subscription)" API. The **id** of the customer will be same as that of associated subscription id if not explicitly set.

**Legacy behavior:**

* **For [sites](https://www.chargebee.com/docs/2.0/sites-intro.html) created before March 1st, 2014:** Whenever the [`card` is updated](/docs/api/cards?prod_cat_ver=2#update_card_for_a_customer), the `billing_address` and `vat_number` of the customer are **deleted** and replaced by the values sent with the request.
* **For [sites](https://www.chargebee.com/docs/2.0/sites-intro.html) created on or after March 1st, 2014:** The `billing_address` and `vat_number` are not changed when the associated card is updated.




 */
export interface Customer {
  /** Identifier of the customer.
   */
  id: string;
  /** First name of the customer
   */
  first_name?: string;
  /** Last name of the customer
   */
  last_name?: string;
  /** Email of the customer. Configured email notifications will be sent to this email.
   */
  email?: string;
  /** Phone number of the customer
   */
  phone?: string;
  /** Company name of the customer.
   */
  company?: string;
  /** The VAT/tax registration number for the customer. For customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ), the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number) can be overridden by setting [vat_number_prefix](customers#customer_vat_number_prefix).
 */
  vat_number?: string;
  /** Whether payments needs to be collected automatically for this customer \* on - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* off - Automatic collection of charges will not be made. All payments must be recorded offline.
   */
  auto_collection: CustomerAutoCollection;
  /** The preferred offline payment method for the customer. \* sepa_credit - SEPA Credit \* cash - Cash \* no_preference - No Preference \* bank_transfer - Bank Transfer \* check - Check \* boleto - Boleto \* ach_credit - ACH Credit
   */
  offline_payment_method?: CustomerOfflinePaymentMethod;
  /** The number of days within which the customer has to make payment for the invoice.
   */
  net_term_days: number;
  /** Returns the recent VAT number validation time.
   */
  vat_number_validated_time?: number;
  /** Represents the VAT validation status. This is applicable if you have configured EU, UK or Australian taxes and the [VAT number validation](https://www.chargebee.com/docs/2.0/uk-vat.html#uk-vat-validation) is enabled. \* not_validated - This status is only applicable for countries in European Zone. This is applicable when both the customer's billing address and the organization's address should be of the same European Zone and EU tax should be configured with the "'Also validate VAT Number for Country of Business'" option in the disabled status. \* undetermined - When Chargebee is not able to validate the VAT number it is stored as 'undetermined'. This can occur due to reasons like service outage etc. VAT numbers with 'undetermined' status will be in queue for validation on daily basis. \* valid - If the given VAT number is valid. \* invalid - If the given VAT number is invalid.
   */
  vat_number_status?: CustomerVatNumberStatus;
  /** Whether the customer can pay via Direct Debit
   */
  allow_direct_debit: boolean;
  /** Customer location is validated based on IP address and Card issuing country. If the location is valid, it returns True. If not, it returns False. Applicable only for EU, New Zealand and Australia.
   */
  is_location_valid?: boolean;
  /** Timestamp indicating when this customer resource is created.
   */
  created_at: number;
  /** The IP address of the customer. Used primarily for [referral integrations](https://www.chargebee.com/docs/marketing-integration-index.html) and EU/UK VAT validation.
   */
  created_from_ip?: string;
  /** Indicates the exemption information. You can customize customer exemption based on specific Location, Tax level (Federal, State, County and Local), Category of Tax or specific Tax Name. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.  
To know more about what values you need to provide, refer to this [Avalara's API document](https://developer.avalara.com/communications/dev-guide_rest_v2/customizing-transactions/sample-transactions/exemption/).
 */
  exemption_details?: unknown[];
  /** Specifies if the customer is liable for tax \* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.
 */
  taxability?: CustomerTaxability;
  /** The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* l - Other or custom \* m - Educational organization \* n - Local government \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* j - Direct pay permit \* k - Direct mail \* p - Commercial aquaculture \* q - Commercial Fishery \* r - Non-resident \* d - Foreign diplomat \* e - Charitable or benevolent organization \* f - Religious organization \* g - Resale \* a - Federal government \* b - State government \* c - Tribe/Status Indian/Indian Band \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax
   */
  entity_code?: CustomerEntityCode;
  /** Any string value that will cause the sale to be exempted. Use this if your finance team manually verifies and tracks exemption certificates. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption).
   */
  exempt_number?: string;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this customer was last updated. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  updated_at?: number;
  /** Determines which region-specific language Chargebee uses to communicate with the customer. In the absence of the locale attribute, Chargebee will use your site's default language for customer communication.
   */
  locale?: string;
  /** Applicable when *calendar billing* (with customer specific billing date support) is enabled. When set, renewals of all the monthly and yearly subscriptions of this customer will be aligned to this date.
   */
  billing_date?: number;
  /** `billing_month`, together with `billing_date`, specify, for this customer, the day of the year when the renewals of all the year-based subscriptions take place.

For example, the renewals happen on 15th July when `billing_month` is `7` and `billing_date` is `15`.  
**Note**

Applicable when [Calendar Billing](https://www.chargebee.com/docs/calendar-billing.html) (with customer-specific billing date support) is enabled and `billing_date_mode` is `manually_set`.
 */
  billing_month?: number;
  /** Indicates whether this customer's *billing_date* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_date* will not be reset even when all of the monthly/yearly subscriptions are cancelled. \* manually_set - Billing date is specifically set (default configuration is overridden) \* using_defaults - Billing date is set based on defaults configured.
   */
  billing_date_mode?: CustomerBillingDateMode;
  /** Applicable when *calendar billing* (with customer specific billing date support) is enabled. When set, renewals of all the weekly subscriptions of this customer will be aligned to this week day. \* saturday - Saturday \* monday - Monday \* friday - Friday \* sunday - Sunday \* wednesday - Wednesday \* thursday - Thursday \* tuesday - Tuesday
   */
  billing_day_of_week?: CustomerBillingDayOfWeek;
  /** Indicates whether this customer's *billing_day_of_week* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_day_of_week* will not be reset even when all of the weekly subscriptions are cancelled. \* using_defaults - Billing date is set based on defaults configured. \* manually_set - Billing date is specifically set (default configuration is overridden)
   */
  billing_day_of_week_mode?: CustomerBillingDayOfWeekMode;
  /** Indicates whether this customer's personal information has been cleared \* cleared - Cleared \* scheduled_for_clear - Scheduled For Clear \* active - Active
   */
  pii_cleared?: CustomerPiiCleared;
  /** Override for this customer, the [site-level setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing) for auto-closing invoices. Only applicable when auto-closing invoices has been enabled for the site. This attribute is also available at the [subscription level](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) which takes precedence.
   */
  auto_close_invoices?: boolean;
  /** The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
\* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.
 */
  channel?: CustomerChannel;
  /** Indicates whether or not the customer has been identified as fraudulent. \* suspicious - The customer has been identified as potentially fraudulent by the gateway \* safe - The customer has been marked as safe \* fraudulent - The customer has been marked as fraudulent
   */
  fraud_flag?: CustomerFraudFlag;
  /** Primary payment source for the customer.
   */
  primary_payment_source_id?: string;
  /** Backup payment source for the customer. Used to collect payment if primary payment source fails.
   */
  backup_payment_source_id?: string;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** The unique ID of the [business entity](https://apidocs.chargebee.com/docs/api/advanced-features?prod_cat_ver=2#mbe) of this subscription. This is always the same as the [business entity](/docs/api/subscriptions?prod_cat_ver=2#subscription_customer_id) of the customer.
   */
  business_entity_id?: string;
  /** The currency code of the customer's preferred currency (ISO 4217 format). Applicable if the Multicurrency feature is enabled.
   */
  preferred_currency_code?: string;
  /** Promotional credits balance of this customer
   */
  promotional_credits: number;
  /** Total unbilled charges for this customer
   */
  unbilled_charges: number;
  /** Refundable credits balance of this customer
   */
  refundable_credits: number;
  /** Total unused payments associated with the customer
   */
  excess_payments: number;
  /** Determines whether the customer is e-invoiced. When set to `true` or not set to any value, the customer is e-invoiced so long as e-invoicing is enabled for their country (`billing_address.country`). When set to `false`, the customer is not e-invoiced even if e-invoicing is enabled for their country.  
**Tip:**


It is possible to set a value for this flag even when E-Invoicing is disabled. However, it comes into effect only when E-Invoicing is enabled.
 */
  is_einvoice_enabled?: boolean;
  /** Determines whether to send e-invoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.
   */
  einvoicing_method?: CustomerEinvoicingMethod;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** Confirms that a customer is registered under GST. If set to `true` then the [Reverse Charge Mechanism](https://www.chargebee.com/docs/australian-gst.html#reverse-charge-mechanism) is applicable. This field is applicable only when Australian GST is configured for your site.
   */
  registered_for_gst?: boolean;
  /** Indicates whether invoices raised on the same day for the `customer` are consolidated. When present, this value overrides the default configuration at the [site-level](https://www.chargebee.com/docs/consolidated-invoicing.html#configuring-consolidated-invoicing). This attribute is applicable only when [Consolidated Invoicing](https://www.chargebee.com/docs/consolidated-invoicing.html) is enabled.  
**Note:**


Any invoices raised when a subscription activates from `in_trial` or `future` `status`, are not consolidated by default. [Contact Support](https://chargebee.freshdesk.com/support/home) to enable consolidation for such invoices.
 */
  consolidated_invoicing?: boolean;
  /** Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* industrial - When the purchase is made by an industrial business \* residential - When the purchase is made by a customer for home use \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks \* business - When the purchase is made at a place of business
   */
  customer_type?: CustomerCustomerType;
  /** Confirms that a customer is a valid business without an EU/UK VAT number.
   */
  business_customer_without_vat_number?: boolean;
  /** Indicates the Client profile id for the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration.
   */
  client_profile_id?: string;
  /** Indicates whether the site-default settings are being used for controlling access to the customer's information.
The level of access is for data falling into two categories:

* **Self-Serve Portal data:** subscriptions and invoices of the customer.
* **Email Notifications:** subscription-, invoice- and payment-related notifications for the customer.
 */
  use_default_hierarchy_settings?: boolean;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_scheme?: string;
  /** The standard used for specifying the `entity_identifier_scheme`. Currently only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there are additional entity identifiers for the customer not associated with the `vat_number`, they can be provided as the `entity_identifiers[]` array.
 */
  entity_identifier_standard?: string;
  /** Billing address for a customer.
   */
  billing_address?: CustomerBillingAddress;
  /** List of referral urls for the customer (if applicable)
   */
  referral_urls?: CustomerReferralUrlsItem[];
  /** contacts
   */
  contacts?: CustomerContactsItem[];
  /** Primary Payment Source of the customer.
   */
  payment_method?: CustomerPaymentMethod;
  /** The list of balances for this customer
   */
  balances?: CustomerBalancesItem[];
  /** Each element of the `entity_identifiers[]` array identifies a specific customer entity with the e-invoicing system. If the customer has only one entity identifier whose `value` is the `vat_number`, then this array is not needed as the `scheme` can be provided via `entity_identifier_scheme`. This array holds any additional entity identifiers that the customer may have.
   */
  entity_identifiers?: CustomerEntityIdentifiersItem[];
  /** The \[Account Hierarchy\](https://www.chargebee.com/docs/account-hierarchy.html) relationship that the customer is part of.
   */
  relationship?: CustomerRelationship;
  /** Defines the level of access that the parent account has to the customer's information. \*\*Note:\*\* the 'parent' is the customer whose id is \[payment_owner_id\](/docs/api/customers#customer_relationship_payment_owner_id). However, if the \`payment_owner_id\` is the customer itself, then the parent is \[parent_id\](/docs/api/customers#customer_relationship_parent_id).
   */
  parent_account_access?: CustomerParentAccountAccess;
  /** Defines the level of access that the customer has to its own information.
   */
  child_account_access?: CustomerChildAccountAccess;
  [key: string]: any;
}

/**
 * Sets parent's level of access to child invoices on the Self-Serve Portal. \* no - The parent account can neither view nor download the invoices of the child account. \* yes - The parent account can view and download the invoices of the child account. \* view_only - The parent account can only view the invoices of the child account.

 */
export type CustomerParentAccountAccessPortalDownloadChildInvoices =
  (typeof CustomerParentAccountAccessPortalDownloadChildInvoices)[keyof typeof CustomerParentAccountAccessPortalDownloadChildInvoices];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerParentAccountAccessPortalDownloadChildInvoices = {
  yes: "yes",
  view_only: "view_only",
  no: "no",
} as const;

/**
 * Sets parent's level of access to child subscriptions on the Self-Serve Portal. \* no - The parent account cannot view or edit the subscriptions of the child account. \* view_only - The parent account can only view the subscriptions of the child account. \* yes - The parent account can view and edit the subscriptions of the child account.

 */
export type CustomerParentAccountAccessPortalEditChildSubscriptions =
  (typeof CustomerParentAccountAccessPortalEditChildSubscriptions)[keyof typeof CustomerParentAccountAccessPortalEditChildSubscriptions];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerParentAccountAccessPortalEditChildSubscriptions = {
  yes: "yes",
  view_only: "view_only",
  no: "no",
} as const;

/**
 * Defines the level of access that the parent account has to the customer's information. \*\*Note:\*\* the 'parent' is the customer whose id is \[payment_owner_id\](/docs/api/customers#customer_relationship_payment_owner_id). However, if the \`payment_owner_id\` is the customer itself, then the parent is \[parent_id\](/docs/api/customers#customer_relationship_parent_id).

 */
export type CustomerParentAccountAccess = {
  /** Sets parent's level of access to child subscriptions on the Self-Serve Portal. \* no - The parent account cannot view or edit the subscriptions of the child account. \* view_only - The parent account can only view the subscriptions of the child account. \* yes - The parent account can view and edit the subscriptions of the child account.
   */
  portal_edit_child_subscriptions?: CustomerParentAccountAccessPortalEditChildSubscriptions;
  /** Sets parent's level of access to child invoices on the Self-Serve Portal. \* no - The parent account can neither view nor download the invoices of the child account. \* yes - The parent account can view and download the invoices of the child account. \* view_only - The parent account can only view the invoices of the child account.
   */
  portal_download_child_invoices?: CustomerParentAccountAccessPortalDownloadChildInvoices;
  /** If `true`, the parent account will receive subscription-related emails sent to the child account.
   */
  send_subscription_emails: boolean;
  /** If `true`, the parent account will receive invoice-related emails sent to the child account.
   */
  send_invoice_emails: boolean;
  /** If `true`, the parent account will receive payment-related emails sent to the child account.
   */
  send_payment_emails: boolean;
};

/**
 * The \[Account Hierarchy\](https://www.chargebee.com/docs/account-hierarchy.html) relationship that the customer is part of.

 */
export type CustomerRelationship = {
  /** The `id` of the customer who is the immediate parent.
   */
  parent_id?: string;
  /** The `id` of the customer who pays the invoices for this customer. Can be the customer itself or the `invoice_owner_id`
   */
  payment_owner_id: string;
  /** The `id` of the customer who is invoiced for charges incurred. Can be the customer itself or any parent in its hierarchy.
   */
  invoice_owner_id: string;
};

export type CustomerEntityIdentifiersItem = {
  /** The unique id for the `entity_identifier` in Chargebee. When not provided, it is autogenerated.
   */
  id: string;
  /** The value of the `entity_identifier`. This identifies the customer entity on the Peppol network. For example: `10101010-STO-10`.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  value?: string;
  /** The Peppol BIS scheme associated with the [vat_number](customers#customer_vat_number) of the customer. This helps identify the specific type of customer entity. For example, `DE:VAT` is used for a German business entity while `DE:LWID45` is used for a German government entity. The value must be from the list of possible values and must correspond to the country provided under `billing_address.country`. See [list of possible values](https://www.chargebee.com/docs/e-invoicing.html#supported-countries).  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  scheme: string;
  /** The standard used for specifying the `entity_identifier` `scheme`. Currently, only `iso6523-actorid-upis` is supported and is used by default when not provided.  
**Tip:**


If there is only one entity identifier for the customer and the value is the same as `vat_number`, then there is no need to provide the `entity_identifiers[]` array. See [description for `entity_identifiers[]`](customers#customer_entity_identifiers).
 */
  standard?: string;
};

export type CustomerBalancesItem = {
  /** Promotional credits balance of this customer.
   */
  promotional_credits: number;
  /** Total unused payments associated with the customer.
   */
  excess_payments: number;
  /** Refundable credits balance of this customer
   */
  refundable_credits: number;
  /** Total unbilled charges for this customer.
   */
  unbilled_charges: number;
  /** The currency code (ISO 4217 format) for balance
   */
  currency_code: string;
};

/**
 * Current status of the payment source. \* expired - A payment source that has expired \* invalid - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* valid - A payment source that is valid and active. \* pending_verification - The payment source needs to be verified \* expiring - A payment source that is expiring (like card's status based on its expiry date).

 */
export type CustomerPaymentMethodStatus =
  (typeof CustomerPaymentMethodStatus)[keyof typeof CustomerPaymentMethodStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerPaymentMethodStatus = {
  valid: "valid",
  expiring: "expiring",
  expired: "expired",
  invalid: "invalid",
  pending_verification: "pending_verification",
} as const;

/**
 * Name of the gateway the payment method is associated with. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* sage_pay - Sage Pay is a payment gateway. \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* migs - MasterCard Internet Gateway Service payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* adyen - Adyen is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* chargebee_payments - Chargebee Payments gateway \* bluepay - BluePay is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* bank_of_america - Bank of America is a payment gateway. \* paypal_pro - PayPal Pro Account is a payment gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* moneris_us - Moneris USA is a payment gateway. \* exact - Exact Payments is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* tco - 2Checkout is a payment gateway. \* chargebee - Chargebee test gateway. \* stripe - Stripe is a payment gateway. \* eway - eWAY Account is a payment gateway. \* authorize_net - Authorize.net is a payment gateway \* moneris - Moneris is a payment gateway. \* worldpay - WorldPay is a payment gateway \* pin - Pin is a payment gateway \* gocardless - GoCardless is a payment service provider. \* elavon - Elavon Virtual Merchant is a payment solution. \* cybersource - CyberSource is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* amazon_payments - Amazon Payments is a payment service provider. \* global_payments - Global Payments is a payment service provider. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* checkout_com - Checkout.com is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* mollie - Mollie is a payment gateway. \* bluesnap - BlueSnap is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* hdfc - HDFC Account is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* ingenico_direct - Worldline Online Payments is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US.

 */
export type CustomerPaymentMethodGateway =
  (typeof CustomerPaymentMethodGateway)[keyof typeof CustomerPaymentMethodGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerPaymentMethodGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Type of payment source \* google_pay - Payments made via Google Pay. \* sofort - Payments made via Sofort. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay. \* dotpay - Payments made via Dotpay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource.

 */
export type CustomerPaymentMethodType =
  (typeof CustomerPaymentMethodType)[keyof typeof CustomerPaymentMethodType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerPaymentMethodType = {
  card: "card",
  paypal_express_checkout: "paypal_express_checkout",
  amazon_payments: "amazon_payments",
  direct_debit: "direct_debit",
  generic: "generic",
  alipay: "alipay",
  unionpay: "unionpay",
  apple_pay: "apple_pay",
  wechat_pay: "wechat_pay",
  ideal: "ideal",
  google_pay: "google_pay",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  dotpay: "dotpay",
  upi: "upi",
  netbanking_emandates: "netbanking_emandates",
  venmo: "venmo",
  pay_to: "pay_to",
  faster_payments: "faster_payments",
  sepa_instant_transfer: "sepa_instant_transfer",
} as const;

/**
 * Primary Payment Source of the customer.

 */
export type CustomerPaymentMethod = {
  /** Type of payment source \* google_pay - Payments made via Google Pay. \* sofort - Payments made via Sofort. \* netbanking_emandates - Netbanking (eMandates) Payments. \* apple_pay - Payments made via Apple Pay. \* unionpay - Payments made via UnionPay. \* giropay - Payments made via giropay. \* direct_debit - Represents bank account for which the direct debit or ACH agreement/mandate is created. \* bancontact - Payments made via Bancontact Card. \* upi - UPI Payments. \* alipay - Payments made via Alipay. \* wechat_pay - Payments made via WeChat Pay. \* dotpay - Payments made via Dotpay. \* paypal_express_checkout - Payments made via PayPal Express Checkout. \* ideal - Payments made via iDEAL. \* generic - Payments made via Generic Payment Method. \* amazon_payments - Payments made via Amazon Payments. \* card - Card based payment including credit cards and debit cards. Details about the card can be obtained from the card resource.
   */
  type: CustomerPaymentMethodType;
  /** Name of the gateway the payment method is associated with. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* sage_pay - Sage Pay is a payment gateway. \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* migs - MasterCard Internet Gateway Service payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* adyen - Adyen is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* chargebee_payments - Chargebee Payments gateway \* bluepay - BluePay is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* bank_of_america - Bank of America is a payment gateway. \* paypal_pro - PayPal Pro Account is a payment gateway. \* eway_rapid - eWAY Rapid is a payment gateway. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* moneris_us - Moneris USA is a payment gateway. \* exact - Exact Payments is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* tco - 2Checkout is a payment gateway. \* chargebee - Chargebee test gateway. \* stripe - Stripe is a payment gateway. \* eway - eWAY Account is a payment gateway. \* authorize_net - Authorize.net is a payment gateway \* moneris - Moneris is a payment gateway. \* worldpay - WorldPay is a payment gateway \* pin - Pin is a payment gateway \* gocardless - GoCardless is a payment service provider. \* elavon - Elavon Virtual Merchant is a payment solution. \* cybersource - CyberSource is a payment gateway. \* vantiv - Vantiv is a payment gateway. \* amazon_payments - Amazon Payments is a payment service provider. \* global_payments - Global Payments is a payment service provider. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* checkout_com - Checkout.com is a payment gateway. \* quickbooks - Intuit QuickBooks Payments gateway \* mollie - Mollie is a payment gateway. \* bluesnap - BlueSnap is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* hdfc - HDFC Account is a payment gateway. \* balanced_payments - Balanced is a payment gateway \* ingenico_direct - Worldline Online Payments is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US.
   */
  gateway: CustomerPaymentMethodGateway;
  /** The gateway account this payment method is stored with.
   */
  gateway_account_id?: string;
  /** Current status of the payment source. \* expired - A payment source that has expired \* invalid - The billing agreement cannot be used. It might become valid again either automatically or due to customer action. \* valid - A payment source that is valid and active. \* pending_verification - The payment source needs to be verified \* expiring - A payment source that is expiring (like card's status based on its expiry date).
   */
  status: CustomerPaymentMethodStatus;
  /** The reference id. In the case of Amazon and PayPal this will be the 'billing agreement id'. For GoCardless direct debit this will be 'mandate id'. In the case of card payments this will be the identifier provided by the gateway/card vault for the specific payment method resource.
   **Note:** This is not the one time temporary token provided by gateways like Stripe.
   */
  reference_id: string;
};

export type CustomerContactsItem = {
  /** Unique reference ID provided for the contact.
   */
  id: string;
  /** First name of the contact.
   */
  first_name?: string;
  /** Last name of the contact.
   */
  last_name?: string;
  /** Email of the contact.
   */
  email: string;
  /** Phone number of the contact.
   */
  phone?: string;
  /** Label/Tag provided for contact.
   */
  label?: string;
  /** Contact enabled / disabled
   */
  enabled: boolean;
  /** Whether Account Emails option is enabled for the contact.
   */
  send_account_email: boolean;
  /** Whether Billing Emails option is enabled for the contact.
   */
  send_billing_email: boolean;
};

/**
 * Url for the referral system account \* referral_saasquatch - Referral Saasquatch \* friendbuy - Friendbuy \* referral_candy - Referral Candy

 */
export type CustomerReferralUrlsItemReferralSystem =
  (typeof CustomerReferralUrlsItemReferralSystem)[keyof typeof CustomerReferralUrlsItemReferralSystem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerReferralUrlsItemReferralSystem = {
  referral_candy: "referral_candy",
  referral_saasquatch: "referral_saasquatch",
  friendbuy: "friendbuy",
} as const;

export type CustomerReferralUrlsItem = {
  /** External customer id in the referral system
   */
  external_customer_id?: string;
  /** Referral sharing url for the customer
   */
  referral_sharing_url: string;
  /** The referral url creation time
   */
  created_at: number;
  /** The referral url updation time
   */
  updated_at: number;
  /** Referral campaign id
   */
  referral_campaign_id: string;
  /** Referral account id
   */
  referral_account_id: string;
  /** Referral external campaign id
   */
  referral_external_campaign_id?: string;
  /** Url for the referral system account \* referral_saasquatch - Referral Saasquatch \* friendbuy - Friendbuy \* referral_candy - Referral Candy
   */
  referral_system: CustomerReferralUrlsItemReferralSystem;
};

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CustomerBillingAddressValidationStatus =
  (typeof CustomerBillingAddressValidationStatus)[keyof typeof CustomerBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Billing address for a customer.

 */
export type CustomerBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: CustomerBillingAddressValidationStatus;
};

/**
 * Indicates the type of the customer. This is applicable only if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. \* industrial - When the purchase is made by an industrial business \* residential - When the purchase is made by a customer for home use \* senior_citizen - When the purchase is made by a customer who meets the jurisdiction requirements to be considered a senior citizen and qualifies for senior citizen tax breaks \* business - When the purchase is made at a place of business

 */
export type CustomerCustomerType =
  (typeof CustomerCustomerType)[keyof typeof CustomerCustomerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerCustomerType = {
  residential: "residential",
  business: "business",
  senior_citizen: "senior_citizen",
  industrial: "industrial",
} as const;

/**
 * Determines whether to send e-invoice manually or automatic. \* automatic - Use this value to send e-invoice every time an invoice or credit note is created. \* manual - When manual is selected the automatic e-invoice sending is disabled. Use this value to send e-invoice manually through UI or API. \* site_default - The default value of the site which can be overridden at the customer level.

 */
export type CustomerEinvoicingMethod =
  (typeof CustomerEinvoicingMethod)[keyof typeof CustomerEinvoicingMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerEinvoicingMethod = {
  automatic: "automatic",
  manual: "manual",
  site_default: "site_default",
} as const;

/**
 * Indicates whether or not the customer has been identified as fraudulent. \* suspicious - The customer has been identified as potentially fraudulent by the gateway \* safe - The customer has been marked as safe \* fraudulent - The customer has been marked as fraudulent

 */
export type CustomerFraudFlag =
  (typeof CustomerFraudFlag)[keyof typeof CustomerFraudFlag];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerFraudFlag = {
  safe: "safe",
  suspicious: "suspicious",
  fraudulent: "fraudulent",
} as const;

/**
 * The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
\* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.

 */
export type CustomerChannel =
  (typeof CustomerChannel)[keyof typeof CustomerChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * Indicates whether this customer's personal information has been cleared \* cleared - Cleared \* scheduled_for_clear - Scheduled For Clear \* active - Active

 */
export type CustomerPiiCleared =
  (typeof CustomerPiiCleared)[keyof typeof CustomerPiiCleared];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerPiiCleared = {
  active: "active",
  scheduled_for_clear: "scheduled_for_clear",
  cleared: "cleared",
} as const;

/**
 * Indicates whether this customer's *billing_day_of_week* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_day_of_week* will not be reset even when all of the weekly subscriptions are cancelled. \* using_defaults - Billing date is set based on defaults configured. \* manually_set - Billing date is specifically set (default configuration is overridden)

 */
export type CustomerBillingDayOfWeekMode =
  (typeof CustomerBillingDayOfWeekMode)[keyof typeof CustomerBillingDayOfWeekMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerBillingDayOfWeekMode = {
  using_defaults: "using_defaults",
  manually_set: "manually_set",
} as const;

/**
 * Applicable when *calendar billing* (with customer specific billing date support) is enabled. When set, renewals of all the weekly subscriptions of this customer will be aligned to this week day. \* saturday - Saturday \* monday - Monday \* friday - Friday \* sunday - Sunday \* wednesday - Wednesday \* thursday - Thursday \* tuesday - Tuesday

 */
export type CustomerBillingDayOfWeek =
  (typeof CustomerBillingDayOfWeek)[keyof typeof CustomerBillingDayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerBillingDayOfWeek = {
  sunday: "sunday",
  monday: "monday",
  tuesday: "tuesday",
  wednesday: "wednesday",
  thursday: "thursday",
  friday: "friday",
  saturday: "saturday",
} as const;

/**
 * Indicates whether this customer's *billing_date* value is derived as per configurations or its specifically set (overriden). When specifically set, the *billing_date* will not be reset even when all of the monthly/yearly subscriptions are cancelled. \* manually_set - Billing date is specifically set (default configuration is overridden) \* using_defaults - Billing date is set based on defaults configured.

 */
export type CustomerBillingDateMode =
  (typeof CustomerBillingDateMode)[keyof typeof CustomerBillingDateMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerBillingDateMode = {
  using_defaults: "using_defaults",
  manually_set: "manually_set",
} as const;

/**
 * The exemption category of the customer, for USA and Canada. Applicable if you use Chargebee's [AvaTax for Sales integration](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption). \* l - Other or custom \* m - Educational organization \* n - Local government \* h - Commercial agricultural production \* i - Industrial production/manufacturer \* j - Direct pay permit \* k - Direct mail \* p - Commercial aquaculture \* q - Commercial Fishery \* r - Non-resident \* d - Foreign diplomat \* e - Charitable or benevolent organization \* f - Religious organization \* g - Resale \* a - Federal government \* b - State government \* c - Tribe/Status Indian/Indian Band \* med2 - US Medical Device Excise Tax with taxable sales tax \* med1 - US Medical Device Excise Tax with exempt sales tax

 */
export type CustomerEntityCode =
  (typeof CustomerEntityCode)[keyof typeof CustomerEntityCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerEntityCode = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
  f: "f",
  g: "g",
  h: "h",
  i: "i",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "n",
  p: "p",
  q: "q",
  r: "r",
  med1: "med1",
  med2: "med2",
} as const;

/**
 * Specifies if the customer is liable for tax \* taxable - Computes tax for the customer based on the [site configuration](https://www.chargebee.com/docs/tax.html). In some cases, depending on the region, shipping_address is needed. If not provided, then billing_address is used to compute tax. If that's not available either, the tax is taken as zero. \* exempt -

* Customer is exempted from tax. When using Chargebee's native [Taxes](https://www.chargebee.com/docs/tax.html) feature or when using the [TaxJar integration](https://www.chargebee.com/docs/taxjar.html), no other action is needed.
* However, when using our [Avalara integration](https://www.chargebee.com/docs/avalara.html), optionally, specify `entity_code` or `exempt_number` attributes if you use Chargebee's [AvaTax for Sales](https://www.chargebee.com/docs/avalara.html#configuring-tax-exemption) or specify `exemption_details` attribute if you use [Chargebee's AvaTax for Communications](https://www.chargebee.com/docs/avatax-for-communication.html) integration. Tax may still be applied by Avalara for certain values of `entity_code`/`exempt_number`/`exemption_details` based on the state/region/province of the taxable address.

 */
export type CustomerTaxability =
  (typeof CustomerTaxability)[keyof typeof CustomerTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerTaxability = {
  taxable: "taxable",
  exempt: "exempt",
} as const;

/**
 * Represents the VAT validation status. This is applicable if you have configured EU, UK or Australian taxes and the [VAT number validation](https://www.chargebee.com/docs/2.0/uk-vat.html#uk-vat-validation) is enabled. \* not_validated - This status is only applicable for countries in European Zone. This is applicable when both the customer's billing address and the organization's address should be of the same European Zone and EU tax should be configured with the "'Also validate VAT Number for Country of Business'" option in the disabled status. \* undetermined - When Chargebee is not able to validate the VAT number it is stored as 'undetermined'. This can occur due to reasons like service outage etc. VAT numbers with 'undetermined' status will be in queue for validation on daily basis. \* valid - If the given VAT number is valid. \* invalid - If the given VAT number is invalid.

 */
export type CustomerVatNumberStatus =
  (typeof CustomerVatNumberStatus)[keyof typeof CustomerVatNumberStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerVatNumberStatus = {
  valid: "valid",
  invalid: "invalid",
  not_validated: "not_validated",
  undetermined: "undetermined",
} as const;

/**
 * The preferred offline payment method for the customer. \* sepa_credit - SEPA Credit \* cash - Cash \* no_preference - No Preference \* bank_transfer - Bank Transfer \* check - Check \* boleto - Boleto \* ach_credit - ACH Credit

 */
export type CustomerOfflinePaymentMethod =
  (typeof CustomerOfflinePaymentMethod)[keyof typeof CustomerOfflinePaymentMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerOfflinePaymentMethod = {
  no_preference: "no_preference",
  cash: "cash",
  check: "check",
  bank_transfer: "bank_transfer",
  ach_credit: "ach_credit",
  sepa_credit: "sepa_credit",
  boleto: "boleto",
} as const;

/**
 * Whether payments needs to be collected automatically for this customer \* on - Whenever an invoice is created, an automatic attempt to charge the customer's payment method is made. \* off - Automatic collection of charges will not be made. All payments must be recorded offline.

 */
export type CustomerAutoCollection =
  (typeof CustomerAutoCollection)[keyof typeof CustomerAutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomerAutoCollection = {
  on: "on",
  off: "off",
} as const;

/**
 * Publishing status of this custom field. \* new - New \* draft - Draft \* published - Published

 */
export type CustomFieldConfigPublishedStatus =
  (typeof CustomFieldConfigPublishedStatus)[keyof typeof CustomFieldConfigPublishedStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomFieldConfigPublishedStatus = {
  new: "new",
  published: "published",
  draft: "draft",
} as const;

/**
 * Status of this custom field. \* archived - Only available in index list page / Soft deleted. \* active - Visible and ready to use.

 */
export type CustomFieldConfigStatus =
  (typeof CustomFieldConfigStatus)[keyof typeof CustomFieldConfigStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomFieldConfigStatus = {
  active: "active",
  archived: "archived",
} as const;

/**
 * Type of user interface input options. \* radio_button_horizontal - RADIO_BUTTON_HORIZONTAL \* radio_button_vertical - RADIO_BUTTON_VERTICAL \* text_area - TEXT_AREA \* text - TEXT \* date_field - DATE_FIELD \* date_time_field - DATE_TIME_FIELD \* password - PASSWORD \* drop_down - DROP_DOWN \* check_box - CHECK_BOX \* file - FILE

 */
export type CustomFieldConfigEditUi =
  (typeof CustomFieldConfigEditUi)[keyof typeof CustomFieldConfigEditUi];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomFieldConfigEditUi = {
  text: "text",
  text_area: "text_area",
  date_time_field: "date_time_field",
  drop_down: "drop_down",
  radio_button_horizontal: "radio_button_horizontal",
  radio_button_vertical: "radio_button_vertical",
  date_field: "date_field",
  check_box: "check_box",
  file: "file",
  password: "password",
} as const;

/**
 * Datatype of custom field. \* double - Double \* long - Long \* timestamp - Timestamp \* date - Date \* email - Email \* url - URL \* string - String

 */
export type CustomFieldConfigFieldDatatype =
  (typeof CustomFieldConfigFieldDatatype)[keyof typeof CustomFieldConfigFieldDatatype];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomFieldConfigFieldDatatype = {
  string: "string",
  long: "long",
  double: "double",
  timestamp: "timestamp",
  email: "email",
  url: "url",
  date: "date",
} as const;

/**
 * Type of entities. \* item - Entity that represents item \* invoice - Invoice description \* subscription_entitlement - Entity that represents an Subscription Entitlement \* plan - Entity that represents a subscription plan \* transaction - Entity that represents a transaction. \* quote - Entity that represents a quote \* plan_price - Entity that represents plan price \* customer - Entity that represents a customer \* differential_price - Entity that represents a differential price \* attached_item - Entity that represents an attached item \* coupon - Entity that represents a discount coupon \* subscription - Entity that represents a subscription of a customer \* addon - Entity that represents an addon \* addon_price - Entity that represents addon price \* charge_item - Entity that represents item of type charge \* feature - Entity that represents an feature \* item_entitlement - Entity that represents an Item Entitlement \* addon_item - Entity that represents item of type addon \* charge_price - Entity that represents charge price \* item_family - Entity that represents item family \* plan_item - Entity that represents item of type plan \* order - Entity that represents an order \* item_price - Entity that represents item price \* business_entity - Entity that represents item of type business entity \* credit_note - Credit note description

 */
export type CustomFieldConfigEntityType =
  (typeof CustomFieldConfigEntityType)[keyof typeof CustomFieldConfigEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomFieldConfigEntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  quote: "quote",
  credit_note: "credit_note",
  transaction: "transaction",
  plan: "plan",
  addon: "addon",
  coupon: "coupon",
  order: "order",
  item_family: "item_family",
  item: "item",
  item_price: "item_price",
  plan_item: "plan_item",
  addon_item: "addon_item",
  charge_item: "charge_item",
  plan_price: "plan_price",
  addon_price: "addon_price",
  charge_price: "charge_price",
  differential_price: "differential_price",
  attached_item: "attached_item",
  feature: "feature",
  subscription_entitlement: "subscription_entitlement",
  item_entitlement: "item_entitlement",
  business_entity: "business_entity",
  product: "product",
  variant: "variant",
} as const;

/**
 * This resource returns the custom field configuration of an entity.

 */
export interface CustomFieldConfig {
  /** Type of entities. \* item - Entity that represents item \* invoice - Invoice description \* subscription_entitlement - Entity that represents an Subscription Entitlement \* plan - Entity that represents a subscription plan \* transaction - Entity that represents a transaction. \* quote - Entity that represents a quote \* plan_price - Entity that represents plan price \* customer - Entity that represents a customer \* differential_price - Entity that represents a differential price \* attached_item - Entity that represents an attached item \* coupon - Entity that represents a discount coupon \* subscription - Entity that represents a subscription of a customer \* addon - Entity that represents an addon \* addon_price - Entity that represents addon price \* charge_item - Entity that represents item of type charge \* feature - Entity that represents an feature \* item_entitlement - Entity that represents an Item Entitlement \* addon_item - Entity that represents item of type addon \* charge_price - Entity that represents charge price \* item_family - Entity that represents item family \* plan_item - Entity that represents item of type plan \* order - Entity that represents an order \* item_price - Entity that represents item price \* business_entity - Entity that represents item of type business entity \* credit_note - Credit note description
   */
  entity_type: CustomFieldConfigEntityType;
  /** Custom field identifier.
   */
  api_name: string;
  /** Field name that appears on the user interface.
   */
  display_name: string;
  /** Datatype of custom field. \* double - Double \* long - Long \* timestamp - Timestamp \* date - Date \* email - Email \* url - URL \* string - String
   */
  field_datatype: CustomFieldConfigFieldDatatype;
  /** Type of user interface input options. \* radio_button_horizontal - RADIO_BUTTON_HORIZONTAL \* radio_button_vertical - RADIO_BUTTON_VERTICAL \* text_area - TEXT_AREA \* text - TEXT \* date_field - DATE_FIELD \* date_time_field - DATE_TIME_FIELD \* password - PASSWORD \* drop_down - DROP_DOWN \* check_box - CHECK_BOX \* file - FILE
   */
  edit_ui?: CustomFieldConfigEditUi;
  /** Detailed information about this custom field.
   */
  description?: string;
  /** Decides if the this custom field is mandatory or optional.
   */
  required: boolean;
  /** Properties of this custom field.
   */
  props: string;
  /** Order of this custom field when it appears in the user interface.
   */
  field_order?: number;
  /** Status of this custom field. \* archived - Only available in index list page / Soft deleted. \* active - Visible and ready to use.
   */
  status: CustomFieldConfigStatus;
  /** Publishing status of this custom field. \* new - New \* draft - Draft \* published - Published
   */
  published_status: CustomFieldConfigPublishedStatus;
  /** Timestamp to indicate when this custom field was created.
   */
  created_at: number;
  /** Timestamp to indicate when this custom field was updated.
   */
  modified_at: number;
}

export type CsvTaxRuleServiceType =
  (typeof CsvTaxRuleServiceType)[keyof typeof CsvTaxRuleServiceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CsvTaxRuleServiceType = {
  digital: "digital",
  other: "other",
  not_applicable: "not_applicable",
} as const;

export type CsvTaxRuleStatus =
  (typeof CsvTaxRuleStatus)[keyof typeof CsvTaxRuleStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CsvTaxRuleStatus = {
  active: "active",
  expired: "expired",
  scheduled: "scheduled",
} as const;

export type CsvTaxRuleTax4JurisType =
  (typeof CsvTaxRuleTax4JurisType)[keyof typeof CsvTaxRuleTax4JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CsvTaxRuleTax4JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type CsvTaxRuleTax3JurisType =
  (typeof CsvTaxRuleTax3JurisType)[keyof typeof CsvTaxRuleTax3JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CsvTaxRuleTax3JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type CsvTaxRuleTax2JurisType =
  (typeof CsvTaxRuleTax2JurisType)[keyof typeof CsvTaxRuleTax2JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CsvTaxRuleTax2JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type CsvTaxRuleTax1JurisType =
  (typeof CsvTaxRuleTax1JurisType)[keyof typeof CsvTaxRuleTax1JurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CsvTaxRuleTax1JurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export interface CsvTaxRule {
  tax_profile_name?: string;
  country?: string;
  state?: string;
  zip_code?: string;
  zip_code_start?: number;
  zip_code_end?: number;
  tax1_name: string;
  tax1_rate: number;
  tax1_juris_type?: CsvTaxRuleTax1JurisType;
  tax1_juris_name?: string;
  tax1_juris_code?: string;
  tax2_name?: string;
  tax2_rate?: number;
  tax2_juris_type?: CsvTaxRuleTax2JurisType;
  tax2_juris_name?: string;
  tax2_juris_code?: string;
  tax3_name?: string;
  tax3_rate?: number;
  tax3_juris_type?: CsvTaxRuleTax3JurisType;
  tax3_juris_name?: string;
  tax3_juris_code?: string;
  tax4_name?: string;
  tax4_rate?: number;
  tax4_juris_type?: CsvTaxRuleTax4JurisType;
  tax4_juris_name?: string;
  tax4_juris_code?: string;
  status?: CsvTaxRuleStatus;
  time_zone?: string;
  valid_from?: number;
  valid_till?: number;
  service_type?: CsvTaxRuleServiceType;
  rule_weight?: number;
  overwrite: boolean;
}

export type CreditType = (typeof CreditType)[keyof typeof CreditType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditType = {
  loyalty_credits: "loyalty_credits",
  referral_rewards: "referral_rewards",
  general: "general",
} as const;

export type CreditOptionForCurrentTermCharges =
  (typeof CreditOptionForCurrentTermCharges)[keyof typeof CreditOptionForCurrentTermCharges];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditOptionForCurrentTermCharges = {
  none: "none",
  prorate: "prorate",
  full: "full",
} as const;

export type CreditOption = (typeof CreditOption)[keyof typeof CreditOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditOption = {
  none: "none",
  prorate: "prorate",
  full: "full",
} as const;

export type CreditNoteEstimateLineItemTiersItem = {
  line_item_id?: string;
  starting_unit: number;
  ending_unit?: number;
  quantity_used: number;
  unit_amount: number;
  starting_unit_in_decimal?: string;
  ending_unit_in_decimal?: string;
  quantity_used_in_decimal?: string;
  unit_amount_in_decimal?: string;
};

export interface CreditNoteEstimate {
  reference_invoice_id: string;
  type: CreditNoteEstimateType;
  price_type: CreditNoteEstimatePriceType;
  currency_code: string;
  sub_total: number;
  total: number;
  amount_allocated: number;
  amount_available: number;
  round_off_amount?: number;
  customer_id?: string;
  line_items?: CreditNoteEstimateLineItemsItem[];
  discounts?: CreditNoteEstimateDiscountsItem[];
  taxes?: CreditNoteEstimateTaxesItem[];
  line_item_taxes?: CreditNoteEstimateLineItemTaxesItem[];
  line_item_discounts?: CreditNoteEstimateLineItemDiscountsItem[];
  line_item_tiers?: CreditNoteEstimateLineItemTiersItem[];
}

export type CreditNoteEstimateLineItemDiscountsItemDiscountType =
  (typeof CreditNoteEstimateLineItemDiscountsItemDiscountType)[keyof typeof CreditNoteEstimateLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type CreditNoteEstimateLineItemDiscountsItem = {
  line_item_id: string;
  discount_type: CreditNoteEstimateLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  entity_id?: string;
  discount_amount: number;
};

export type CreditNoteEstimateLineItemTaxesItemTaxJurisType =
  (typeof CreditNoteEstimateLineItemTaxesItemTaxJurisType)[keyof typeof CreditNoteEstimateLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type CreditNoteEstimateLineItemTaxesItem = {
  line_item_id?: string;
  tax_name: string;
  tax_rate: number;
  is_partial_tax_applied?: boolean;
  is_non_compliance_tax?: boolean;
  taxable_amount: number;
  tax_amount: number;
  tax_juris_type?: CreditNoteEstimateLineItemTaxesItemTaxJurisType;
  tax_juris_name?: string;
  tax_juris_code?: string;
  tax_amount_in_local_currency?: number;
  local_currency_code?: string;
};

export type CreditNoteEstimateTaxesItem = {
  name: string;
  amount: number;
  description?: string;
};

export type CreditNoteEstimateDiscountsItemDiscountType =
  (typeof CreditNoteEstimateDiscountsItemDiscountType)[keyof typeof CreditNoteEstimateDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

export type CreditNoteEstimateDiscountsItemEntityType =
  (typeof CreditNoteEstimateDiscountsItemEntityType)[keyof typeof CreditNoteEstimateDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type CreditNoteEstimateDiscountsItem = {
  amount: number;
  description?: string;
  line_item_id?: string;
  entity_type: CreditNoteEstimateDiscountsItemEntityType;
  discount_type?: CreditNoteEstimateDiscountsItemDiscountType;
  entity_id?: string;
  coupon_set_code?: string;
};

export type CreditNoteEstimateLineItemsItemTaxExemptReason =
  (typeof CreditNoteEstimateLineItemsItemTaxExemptReason)[keyof typeof CreditNoteEstimateLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

export type CreditNoteEstimateLineItemsItemEntityType =
  (typeof CreditNoteEstimateLineItemsItemEntityType)[keyof typeof CreditNoteEstimateLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

export type CreditNoteEstimateLineItemsItemPricingModel =
  (typeof CreditNoteEstimateLineItemsItemPricingModel)[keyof typeof CreditNoteEstimateLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type CreditNoteEstimateLineItemsItem = {
  id?: string;
  subscription_id?: string;
  date_from: number;
  date_to: number;
  unit_amount: number;
  quantity?: number;
  amount?: number;
  pricing_model?: CreditNoteEstimateLineItemsItemPricingModel;
  is_taxed: boolean;
  tax_amount?: number;
  tax_rate?: number;
  unit_amount_in_decimal?: string;
  quantity_in_decimal?: string;
  amount_in_decimal?: string;
  discount_amount?: number;
  item_level_discount_amount?: number;
  reference_line_item_id?: string;
  description: string;
  entity_description?: string;
  entity_type: CreditNoteEstimateLineItemsItemEntityType;
  tax_exempt_reason?: CreditNoteEstimateLineItemsItemTaxExemptReason;
  entity_id?: string;
  customer_id?: string;
};

export type CreditNoteEstimatePriceType =
  (typeof CreditNoteEstimatePriceType)[keyof typeof CreditNoteEstimatePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimatePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

export type CreditNoteEstimateType =
  (typeof CreditNoteEstimateType)[keyof typeof CreditNoteEstimateType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEstimateType = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

/**
 * The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.

 */
export type CreditNoteBillingAddressValidationStatus =
  (typeof CreditNoteBillingAddressValidationStatus)[keyof typeof CreditNoteBillingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteBillingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Billing address for the quote.

 */
export type CreditNoteBillingAddress = {
  /** The first name of the billing contact.
   */
  first_name?: string;
  /** The last name of the billing contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://i18napis.appspot.com/address).
   */
  zip?: string;
  /** The address verification status. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid. \* not_validated - Address is not yet validated.
   */
  validation_status?: CreditNoteBillingAddressValidationStatus;
};

/**
 * The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.

 */
export type CreditNoteShippingAddressValidationStatus =
  (typeof CreditNoteShippingAddressValidationStatus)[keyof typeof CreditNoteShippingAddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteShippingAddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Shipping address for the quote.

 */
export type CreditNoteShippingAddress = {
  /** The first name of the contact.
   */
  first_name?: string;
  /** The last name of the contact.
   */
  last_name?: string;
  /** The email address.
   */
  email?: string;
  /** The company name.
   */
  company?: string;
  /** The phone number.
   */
  phone?: string;
  /** Address line 1
   */
  line1?: string;
  /** Address line 2
   */
  line2?: string;
  /** Address line 3
   */
  line3?: string;
  /** The name of the city.
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** The state/province name.
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://i18napis.appspot.com/address).
   */
  zip?: string;
  /** The address verification status. \* not_validated - Address is not yet validated. \* valid - Address was validated successfully. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* invalid - Address is invalid.
   */
  validation_status?: CreditNoteShippingAddressValidationStatus;
  /** The index number of the subscription/one-time group to which the item price is added. Provide a unique number between `0` and `9` (inclusive) for each group that is to be created. To increase this limit, contact Chargebee Support
   */
  index: number;
};

/**
 * Current status of the invoice. \* not_paid - Indicates the payment is not made and all attempts to collect is failed. \* paid - Indicates a paid invoice. \* voided - Indicates a voided invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings.

 */
export type CreditNoteAllocationsItemInvoiceStatus =
  (typeof CreditNoteAllocationsItemInvoiceStatus)[keyof typeof CreditNoteAllocationsItemInvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteAllocationsItemInvoiceStatus = {
  paid: "paid",
  posted: "posted",
  payment_due: "payment_due",
  not_paid: "not_paid",
  voided: "voided",
  pending: "pending",
} as const;

export type CreditNoteAllocationsItem = {
  /** Unique identifier of the invoice.
   */
  invoice_id: string;
  /** Amount of this refund transaction.
   */
  allocated_amount: number;
  /** Indicates when this refund occured.
   */
  allocated_at: number;
  /** Closing date of the invoice. Typically this is the date on which invoice is generated
   */
  invoice_date?: number;
  /** Current status of the invoice. \* not_paid - Indicates the payment is not made and all attempts to collect is failed. \* paid - Indicates a paid invoice. \* voided - Indicates a voided invoice. \* posted - Indicates the payment is not yet collected and will be in this state till the due date to indicate the due period \* pending -  
The [invoice](/docs/api/invoices?prod_cat_ver=2#invoice_status) is yet to be closed (sent for payment collection). An invoice is generated with this `status` when it has line items that belong to items that are `metered` or when the `subscription.create_pending_invoices`attribute is set to `true`.  
The [invoice](/docs/api/invoices?prod_cat_ver=1#invoice_status) is yet to be closed (sent for payment collection). All invoices are generated with this `status` when [Metered Billing](https://www.chargebee.com/docs/1.0/metered_billing.html) is enabled for the site. \* payment_due - Indicates the payment is not yet collected and is being retried as per retry settings.
 */
  invoice_status: CreditNoteAllocationsItemInvoiceStatus;
};

export type CreditNoteLinkedTaxWithheldRefundsItem = {
  /** An auto-generated unique identifier for the tax withheld. The value starts with the prefix `tax_wh_`. For example, `tax_wh_16BdDXSlbu4uV1Ee6`.
   */
  id: string;
  /** The amount withheld by the customer as tax from the invoice. The unit depends on the [type of currency](/docs/api#md_disabled).
   */
  amount?: number;
  /** The description for this tax withheld.
   */
  description?: string;
  /** Date or time associated with the tax withheld.
   */
  date?: number;
  /** A unique external reference number for the tax withheld. Typically, this is the reference number used by the system you are integrating the API with. Depending on your integration, this could be the reference number issued by the taxation authority to identify the customer or the specific tax transaction.
   */
  reference_number?: string;
};

/**
 * A [Credit Note](https://www.chargebee.com/docs/credit-notes.html) is a document that specifies the money owed by a business to its customer. The seller usually issues a Credit Note for the same or lower amount than the invoice, and then repays the money to the customer or set it off against other 'due' invoices.

Chargebee supports two types of Credit Notes - [Adjustment Credit Note](https://www.chargebee.com/docs/credit-notes.html#adjustment-credit-note) and [Refundable Credit Note](https://www.chargebee.com/docs/credit-notes.html#refundable-credit-note).

* Adjustment Credit Notes are created for the 'unpaid' component of the invoice and it can have [statuses](https://www.chargebee.com/docs/credit-notes.html#statuses-of-a-credit-note) - *Adjusted* and *Voided*.
* Refundable Credit Notes are created for 'paid' component of the invoice and it can have [statuses](https://www.chargebee.com/docs/credit-notes.html#statuses-of-a-credit-note) - *Refunded* , *Refund Due* and *Voided*.



The credits available in the Refundable Credit Notes will be automatically applied when a new invoice gets generated for the customer.

**Note:** If you have enabled *consolidated invoicing* , to know the subscriptions attached with a credit note you have to refer [line_item's](/docs/api/credit_notes#credit_note_line_items) *subscription_id* . The credit note's *subscription_id* should **not** be used (which will be *null* if the credit note has lines from multiple subscriptions).

 */
export interface CreditNote {
  /** Credit-note id.
   */
  id: string;
  /** The identifier of the customer this Credit Note belongs to.
   */
  customer_id: string;
  /** The identifier of the subscription this Credit Note belongs to.
   **Note:** If *consolidated invoicing* is enabled, to know the subscriptions attached with this Credit Note you have to refer [line_item's](/docs/api/credit_notes#credit_note_line_items) *subscription_id* . This attribute should **not** be used (which will be *null* if this credit note has lines from multiple subscriptions).
   */
  subscription_id?: string;
  /** The identifier of the invoice against which this Credit Note is issued
   */
  reference_invoice_id: string;
  /** The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note
   */
  type: CreditNoteType;
  /** The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* order_change - Order Change \* other - Can be set when none of the above reason codes are applicable \* fraudulent - FRAUDULENT \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* product_unsatisfactory - Product Unsatisfactory \* order_cancellation - Order Cancellation \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* service_unsatisfactory - Service Unsatisfactory
   */
  reason_code?: CreditNoteReasonCode;
  /** The credit note status. \* voided - When the Credit Note has been cancelled. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice.
   */
  status: CreditNoteStatus;
  /** VAT number of the customer for whom this Credit Note is raised.
   */
  vat_number?: string;
  /** The date the Credit Note is issued.
   */
  date?: number;
  /** The price type of the Credit Note. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.
   */
  price_type: CreditNotePriceType;
  /** The currency code (ISO 4217 format) for the credit note
   */
  currency_code: string;
  /** Credit Note amount in cents.
   */
  total?: number;
  /** The amount allocated to the invoices.
   */
  amount_allocated?: number;
  /** The refunds issued from this Credit Note.
   */
  amount_refunded?: number;
  /** The yet to be used credits of this Credit Note.
   */
  amount_available?: number;
  /** The time this Credit Note gets fully used. Please note that this field is not present when partial refunds are issued.
   */
  refunded_at?: number;
  /** Timestamp indicating the date and time this Credit Note gets voided.
   */
  voided_at?: number;
  /** The date/time when the credit note was raised. This date/time can be backdated, which means that the date/time can be earlier than the date/time the credit note was created.
   */
  generated_at?: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this Credit Note was last updated. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  updated_at?: number;
  /** The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
\* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.
 */
  channel?: CreditNoteChannel;
  /** The Credit Note sub-total
   */
  sub_total: number;
  /** Invoice subtotal in the currency of the place of supply.
   */
  sub_total_in_local_currency?: number;
  /** Total invoice amount in the currency of the place of supply.
   */
  total_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed.
   */
  local_currency_code?: string;
  /** Indicates the rounded-off amount. For example, if your invoice amount is $99.99, and the amount is rounded off to $100.00, in this case, $100.00 is your invoice amount, $0.01 is the `round_off_amount`. If there is no `round-off amount`, it will display `0`.
   */
  round_off_amount?: number;
  /** Indicates the fractional correction amount.
   */
  fractional_correction?: number;
  /** Indicates that this resource has been deleted.
   */
  deleted: boolean;
  /** Specifies the customer's category for the Goods and Services Tax (GST). This field is returned only if you've configured GST for the India region.
   */
  tax_category?: string;
  /** This parameter represents the exchange rate as a relative price of the base currency that appears as local currency in invoices and credit notes. The local currency exchange rate specifically refers to the exchange rate of a country's currency when converting it to another currency. For example, if you want to convert US dollars to euros, the local currency exchange rate would be the rate at which you can convert US dollars to euros.
   */
  local_currency_exchange_rate?: number;
  /** Reason code for creating the credit note. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Create Credit Note**. Must be passed if set as mandatory in the app. The codes are case-sensitive
   */
  create_reason_code?: string;
  /** An overridden value for the first two characters of the [full VAT
number](https://en.wikipedia.org/wiki/VAT_identification_number). Only applicable specifically for customers with [billing_address](customers#customer_billing_address) `country` as `XI` (which is **United Kingdom - Northern Ireland** ).  

When you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or have [manually
enabled](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, you have the option of setting [billing_address](customers#customer_billing_address) `country` as `XI`. That's the code for **United Kingdom - Northern
Ireland** . The first two characters of the VAT number in such a case is `XI` by default. However, if the VAT number was registered in UK, the value should be `GB`. Set `vat_number_prefix` to `GB` for such cases.
 */
  vat_number_prefix?: string;
  /** The unique ID of the [business entity](/docs/api/advanced-features?prod_cat_ver=2#mbe) of this credit_note. This is always the same as the business entity of the invoice referred to by [reference_invoice_id](/docs/api/credit_notes?prod_cat_ver=2#credit_note_reference_invoice_id).
   */
  business_entity_id: string;
  /** An e-invoice or electronic invoice is a structured representation of an invoice that is interoperable between computerized invoicing systems. Depending on the country, e-invoicing can be necessary to meet financial/taxation authority regulations.
   */
  einvoice?: CreditNoteEinvoice;
  /** The line items of this Credit Note
   */
  line_items?: CreditNoteLineItemsItem[];
  /** The list of discounts applied to this Credit Note
   */
  discounts?: CreditNoteDiscountsItem[];
  /** The list of discount(s) applied for each line item of this invoice.
   */
  line_item_discounts?: CreditNoteLineItemDiscountsItem[];
  /** The list of tiers applicable for this line item
   */
  line_item_tiers?: CreditNoteLineItemTiersItem[];
  /** The tax-lines of this Credit Note
   */
  taxes?: CreditNoteTaxesItem[];
  /** The list of taxes applied on line items
   */
  line_item_taxes?: CreditNoteLineItemTaxesItem[];
  /** Payment Refunds issued from this Credit Note
   */
  linked_refunds?: CreditNoteLinkedRefundsItem[];
  /** The details of refunds recorded against the [invoice.linked_taxes_withheld](/docs/api/invoices#invoice_linked_taxes_withheld) component of the `invoice` [associated](/docs/api/credit_notes#credit_note_reference_invoice_id) with this `credit_note`.
   */
  linked_tax_withheld_refunds?: CreditNoteLinkedTaxWithheldRefundsItem[];
  /** Invoice allocations made from this Credit Note.
   */
  allocations?: CreditNoteAllocationsItem[];
  /** Shipping address for the quote.
   */
  shipping_address?: CreditNoteShippingAddress;
  /** Billing address for the quote.
   */
  billing_address?: CreditNoteBillingAddress;
}

/**
 * The status of this transaction. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* voided - The transaction got voided or authorization expired at gateway. \* timeout - Transaction failed because of Gateway not accepting the connection. \* success - The transaction is successful. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method.

 */
export type CreditNoteLinkedRefundsItemTxnStatus =
  (typeof CreditNoteLinkedRefundsItemTxnStatus)[keyof typeof CreditNoteLinkedRefundsItemTxnStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteLinkedRefundsItemTxnStatus = {
  in_progress: "in_progress",
  success: "success",
  voided: "voided",
  failure: "failure",
  timeout: "timeout",
  needs_attention: "needs_attention",
} as const;

export type CreditNoteLinkedRefundsItem = {
  /** Uniquely identifies the transaction.
   */
  txn_id: string;
  /** The transaction amount applied to this invoice
   */
  applied_amount: number;
  /** Time when the transaction amount applied to this invoice.
   */
  applied_at: number;
  /** The status of this transaction. \* needs_attention - Connection with Gateway got terminated abruptly. So, status of this transaction needs to be resolved manually \* voided - The transaction got voided or authorization expired at gateway. \* timeout - Transaction failed because of Gateway not accepting the connection. \* success - The transaction is successful. \* failure - Transaction failed. Refer the 'error_code' and 'error_text' fields to know the reason for failure \* in_progress - Transaction is being processed by the gateway. This typically happens for [direct debit transactions](https://www.chargebee.com/docs/direct-debit-payments.html) or, in case of cards, refund transactions. Such transactions can take 2-7 days to complete, depending on the gateway and payment method.
   */
  txn_status?: CreditNoteLinkedRefundsItemTxnStatus;
  /** Indicates when this transaction occurred.
   */
  txn_date?: number;
  /** Total amount of the transaction
   */
  txn_amount?: number;
  /** Reason code for the refund. Must be one from a list of reason codes set in the Chargebee app in **Settings \> Configure Chargebee \> Reason Codes \> Credit Notes \> Refund Credit Note**. Must be passed if set as mandatory in the app. The codes are case-sensitive
   */
  refund_reason_code?: string;
};

/**
 * The type of tax jurisdiction \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* other - Jurisdictions other than the ones listed above.

 */
export type CreditNoteLineItemTaxesItemTaxJurisType =
  (typeof CreditNoteLineItemTaxesItemTaxJurisType)[keyof typeof CreditNoteLineItemTaxesItemTaxJurisType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteLineItemTaxesItemTaxJurisType = {
  country: "country",
  federal: "federal",
  state: "state",
  county: "county",
  city: "city",
  special: "special",
  unincorporated: "unincorporated",
  other: "other",
} as const;

export type CreditNoteLineItemTaxesItem = {
  /** The unique reference id of the line item for which the tax is applicable
   */
  line_item_id?: string;
  /** The name of the tax applied
   */
  tax_name: string;
  /** The rate of tax used to calculate tax amount
   */
  tax_rate: number;
  /** Indicates if tax is applied only on a portion of the line item amount.
   */
  is_partial_tax_applied?: boolean;
  /** Indicates the non-compliance tax that should not be reported to the jurisdiction.
   */
  is_non_compliance_tax?: boolean;
  /** Indicates the actual portion of the line item amount that is taxable.
   */
  taxable_amount: number;
  /** The tax amount
   */
  tax_amount: number;
  /** The type of tax jurisdiction \* federal - The tax jurisdiction is a federal \* state - The tax jurisdiction is a state \* county - The tax jurisdiction is a county \* country - The tax jurisdiction is a country \* city - The tax jurisdiction is a city \* special - Special tax jurisdiction. \* unincorporated - Combined tax of state and county. \* other - Jurisdictions other than the ones listed above.
   */
  tax_juris_type?: CreditNoteLineItemTaxesItemTaxJurisType;
  /** The name of the tax jurisdiction
   */
  tax_juris_name?: string;
  /** The tax jurisdiction code
   */
  tax_juris_code?: string;
  /** Total tax amount in the currency of the place of supply. This is applicable only for Invoice and Credit Notes API.
   */
  tax_amount_in_local_currency?: number;
  /** The currency code (ISO 4217 format) of the place of supply in which VAT needs to be converted and displayed. This is applicable only for Invoice and Credit Notes API.
   */
  local_currency_code?: string;
};

export type CreditNoteTaxesItem = {
  /** The name of the tax applied. E.g. GST.
   */
  name: string;
  /** The tax amount.
   */
  amount: number;
  /** Description of the tax item.
   */
  description?: string;
};

export type CreditNoteLineItemTiersItem = {
  /** Uniquely identifies a line_item
   */
  line_item_id?: string;
  /** The lower limit of a range of units for the tier
   */
  starting_unit: number;
  /** The upper limit of a range of units for the tier
   */
  ending_unit?: number;
  /** The number of units purchased in a range.
   */
  quantity_used: number;
  /** The price of the tier if the charge model is a `stairtstep` pricing , or the price of each unit in the tier if the charge model is `tiered`/`volume` pricing.
   */
  unit_amount: number;
  /** The decimal representation of the the lowest value of quantity in this tier. This is zero for the lowest tier. For all other tiers, it is the same as `ending_unit_in_decimal` of the next lower tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or `stairstep` and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  starting_unit_in_decimal?: string;
  /** The decimal representation of the highest value of quantity in this tier. This attribute is not applicable for the highest tier. For all other tiers, it must be equal to the `starting_unit_in_decimal` of the next higher tier. Returned only when the `line_items.pricing_model` is `tiered`, `volume` or stairstep and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  ending_unit_in_decimal?: string;
  /** The decimal representation of the quantity purchased from this tier. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_used_in_decimal?: string;
  /** The decimal representation of the per-unit price for the tier when the `pricing_model` is `tiered` or `volume`. When the `pricing_model` is `stairstep`, it is the decimal representation of the total price for `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
};

/**
 * The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`.

 */
export type CreditNoteLineItemDiscountsItemDiscountType =
  (typeof CreditNoteLineItemDiscountsItemDiscountType)[keyof typeof CreditNoteLineItemDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteLineItemDiscountsItemDiscountType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type CreditNoteLineItemDiscountsItem = {
  /** The unique id of the line item that this deduction is for.
   */
  line_item_id: string;
  /** The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon `id` is available as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits) applied to the invoice. The `entity_id` is `null` in this case. \* item_level_coupon - The deduction is due to a coupon applied to a line item of the invoice. The coupon `id` is available as `entity_id`. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`.
   */
  discount_type: CreditNoteLineItemDiscountsItemDiscountType;
  coupon_id?: string;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount: number;
};

/**
 * The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount

 */
export type CreditNoteDiscountsItemDiscountType =
  (typeof CreditNoteDiscountsItemDiscountType)[keyof typeof CreditNoteDiscountsItemDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteDiscountsItemDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.

 */
export type CreditNoteDiscountsItemEntityType =
  (typeof CreditNoteDiscountsItemEntityType)[keyof typeof CreditNoteDiscountsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteDiscountsItemEntityType = {
  item_level_coupon: "item_level_coupon",
  document_level_coupon: "document_level_coupon",
  promotional_credits: "promotional_credits",
  prorated_credits: "prorated_credits",
  item_level_discount: "item_level_discount",
  document_level_discount: "document_level_discount",
} as const;

export type CreditNoteDiscountsItem = {
  /** The amount deducted. The format of this value depends on the [kind of currency](/docs/api?prod_cat_ver=2#currencies).
   */
  amount: number;
  /** Description for this deduction.
   */
  description?: string;
  /** The unique id of the line item that this deduction is for. Is required when `discounts[entity_type]` is `item_level_coupon` or `document_level_coupon`.
   */
  line_item_id?: string;
  /** The type of deduction and the amount to which it is applied. \* prorated_credits - The deduction is due to a legacy adjustment credit applied to the invoice. The `entity_id` is `null` in this case. The legacy credits feature is superseded by [adjustment_credit_notes](/docs/api/invoices?prod_cat_ver=2#invoice_adjustment_credit_notes). \* item_level_coupon - The deduction is due to a coupon applied to line item. The coupon `id` is passed as `entity_id`. \* item_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to a line item of the invoice. The discount `id` is available as the `entity_id`. \* document_level_coupon - The deduction is due to a coupon applied to the invoice `sub_total`. The coupon id is passed as `entity_id`. \* promotional_credits - The deduction is due to a [promotional credit](/docs/api/promotional_credits?prod_cat_ver=2) applied to the invoice. \* document_level_discount - The deduction is due to a [discount](/docs/api/discounts?prod_cat_ver=2) applied to the invoice `sub_total`. The discount `id` is available as the `entity_id`.
   */
  entity_type: CreditNoteDiscountsItemEntityType;
  /** The type of discount that is applied to the line item. Relevant only when `discounts[entity_type]` is one of `item_level_discount` , `item_level_coupon`, `document_level_discount`, or `document_level_coupon` \* percentage - when percentage is applied as discount \* fixed_amount - when amount is applied as discount
   */
  discount_type?: CreditNoteDiscountsItemDiscountType;
  /** When the deduction is due to a `coupon` or a [discount](discounts), then this is the `id` of the coupon or discount.
   */
  entity_id?: string;
  /** The [coupon code](/docs/api/coupon_codes#coupon_code_code), if applicable, used to provide the discount. The [coupon.id](/docs/api/coupons#coupon_id) is available in `entity_id`.
   */
  coupon_set_code?: string;
};

/**
 * The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively

 */
export type CreditNoteLineItemsItemTaxExemptReason =
  (typeof CreditNoteLineItemsItemTaxExemptReason)[keyof typeof CreditNoteLineItemsItemTaxExemptReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteLineItemsItemTaxExemptReason = {
  tax_not_configured: "tax_not_configured",
  region_non_taxable: "region_non_taxable",
  export: "export",
  customer_exempt: "customer_exempt",
  product_exempt: "product_exempt",
  zero_rated: "zero_rated",
  reverse_charge: "reverse_charge",
  high_value_physical_goods: "high_value_physical_goods",
  zero_value_item: "zero_value_item",
} as const;

/**
 * Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id

 */
export type CreditNoteLineItemsItemEntityType =
  (typeof CreditNoteLineItemsItemEntityType)[keyof typeof CreditNoteLineItemsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteLineItemsItemEntityType = {
  adhoc: "adhoc",
  plan_item_price: "plan_item_price",
  addon_item_price: "addon_item_price",
  charge_item_price: "charge_item_price",
} as const;

/**
 * The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.

 */
export type CreditNoteLineItemsItemPricingModel =
  (typeof CreditNoteLineItemsItemPricingModel)[keyof typeof CreditNoteLineItemsItemPricingModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteLineItemsItemPricingModel = {
  flat_fee: "flat_fee",
  per_unit: "per_unit",
  tiered: "tiered",
  volume: "volume",
  stairstep: "stairstep",
} as const;

export type CreditNoteLineItemsItem = {
  /** Uniquely identifies a line_item
   */
  id?: string;
  /** A unique identifier for the subscription this line item belongs to.
   */
  subscription_id?: string;
  /** Start date of this line item.
   */
  date_from: number;
  /** End date of this line item.
   */
  date_to: number;
  /** Unit amount of the line item.
   */
  unit_amount: number;
  /** [Quantity of the recurring item](/docs/api/invoices?prod_cat_ver=2#invoice_line_items_quantity) which is represented by this line item. For `metered` line items, this value is updated from [usages](/docs/api/usages) once when the invoice is generated as `pending` and finally when the invoice is [closed](/docs/api/invoices#close_a_pending_invoice).
   */
  quantity?: number;
  /** Total amount of this line item. Typically equals to unit amount x quantity
   */
  amount?: number;
  /** The [pricing scheme](https://www.chargebee.com/docs/2.0/plans.html#pricing-models) for this item price. \* stairstep - A quantity-based pricing scheme. The item is charged a fixed price based on the tier that the total quantity falls in. \* flat_fee - A fixed price that is not quantity-based. \* tiered - The per unit price is based on the tier that the total quantity falls in. \* per_unit - A fixed price per unit quantity. \* volume - There are quantity tiers for which per unit prices are set. Quantities are purchased from successive tiers.
   */
  pricing_model?: CreditNoteLineItemsItemPricingModel;
  /** Specifies whether this line item is taxed or not
   */
  is_taxed: boolean;
  /** The tax amount charged for this item
   */
  tax_amount?: number;
  /** Rate of tax used to calculate tax for this lineitem
   */
  tax_rate?: number;
  /** The decimal representation of the unit amount of the `line_item`. The value is in major units of the currency. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  unit_amount_in_decimal?: string;
  /** The decimal representation of the quantity of this line_item. Returned when the `line_item` is quantity-based and [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  quantity_in_decimal?: string;
  /** The decimal representation of the amount for the `line_item`, in major units of the currency. Typically equals to `unit_amount_in_decimal` x `quantity_in_decimal`. Returned when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units ) is enabled.
   */
  amount_in_decimal?: string;
  /** Total discounts for this line
   */
  discount_amount?: number;
  /** Line Item-level discounts for this line.
   */
  item_level_discount_amount?: number;
  /** Invoice Reference Line Item ID
   */
  reference_line_item_id?: string;
  /** Detailed description about this line item.
   */
  description: string;
  /** Detailed description about this item.
   */
  entity_description?: string;
  /** Specifies the modelled entity this line item is based on. \* addon - Indicates that this lineitem is based on 'Addon' entity. The 'entity_id' attribute specifies the [addon](/docs/api/addons#addon_attributes) id \* plan - Indicates that this lineitem is based on 'Plan' entity. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id \* plan_item_price - Indicates that this line item is based on plan Item Price \* addon_item_price - Indicates that this line item is based on addon Item Price \* charge_item_price - Indicates that this line item is based on charge Item Price \* adhoc - Indicates that this lineitem is not modelled. i.e created adhoc. So the 'entity_id' attribute will be null in this case \* plan_setup - Indicates that this lineitem is based on 'Plan Setup' charge. The 'entity_id' attribute specifies the [plan](/docs/api/plans#plan_attributes) id
   */
  entity_type: CreditNoteLineItemsItemEntityType;
  /** The reason due to which the line item price/amount is exempted from tax. \* zero_value_item - If the total invoice value/amount is equal to zero. E.g., If the total order value is $10 and a $10 coupon has been applied against that order, the total order value becomes $0. Hence the invoice value also becomes $0. \* reverse_charge - If the Customer is identified as B2B customer (when VAT Number is entered), applicable for EU only \* tax_not_configured - If tax is not enabled for the site \* high_value_physical_goods - If physical goods are sold from outside Australia to customers in Australia, and the price of all the physical good line items is greater than AUD 1000, then tax will not be applied \* customer_exempt - If the Customer is marked as Tax exempt \* region_non_taxable - If the product sold is not taxable in this region, but it is taxable in other regions, hence this region is not part of the Taxable jurisdiction \* product_exempt - If the Plan or Addon is marked as Tax exempt \* zero_rated - If the rate of tax is 0% and no Sales/ GST tax is collectable for that line item \* export - You are not registered for tax in the customer's region. This is also the reason code when both `billing_address` and `shipping_address` have not been provided for the customer and subscription respectively
   */
  tax_exempt_reason?: CreditNoteLineItemsItemTaxExemptReason;
  /** The identifier of the modelled entity this line item is based on. Will be null for 'adhoc' entity type
   */
  entity_id?: string;
  /** A unique identifier for the customer this line item belongs to
   */
  customer_id?: string;
};

/**
 * The status of processing the e-invoice. To obtain detailed information about the current `status`, see `message`. \* scheduled - Sending the e-invoice to the customer has been scheduled. \* skipped - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* success - The e-invoice has been successfully delivered to the customer. \* failed - The e-invoice was sent and there was an error due to which it was not delivered. \* in_progress - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* registered - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.

 */
export type CreditNoteEinvoiceStatus =
  (typeof CreditNoteEinvoiceStatus)[keyof typeof CreditNoteEinvoiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteEinvoiceStatus = {
  scheduled: "scheduled",
  skipped: "skipped",
  in_progress: "in_progress",
  success: "success",
  failed: "failed",
  registered: "registered",
} as const;

/**
 * An e-invoice or electronic invoice is a structured representation of an invoice that is interoperable between computerized invoicing systems. Depending on the country, e-invoicing can be necessary to meet financial/taxation authority regulations.

 */
export type CreditNoteEinvoice = {
  /** The unique `id` for the e-invoice. This is auto-generated by Chargebee.
   */
  id: string;
  /** This attribute is used to populate the unique reference number assigned to an invoice on the Invoice Registration Portal (IRP) network. It is essential for identifying and tracking invoices that are processed through the IRP network. In the future, this field may be used to store similar reference numbers for other networks.
   */
  reference_number?: string;
  /** The status of processing the e-invoice. To obtain detailed information about the current `status`, see `message`. \* scheduled - Sending the e-invoice to the customer has been scheduled. \* skipped - The e-invoice was not sent. This could be due to missing information or because the `entity_identifier` is not registered on the e-invoicing network. \* success - The e-invoice has been successfully delivered to the customer. \* failed - The e-invoice was sent and there was an error due to which it was not delivered. \* in_progress - The e-invoice has been sent and Chargebee is waiting for confirmation from the receiving entity. \* registered - The e-invoice was sent and there was an error due to which it was not delivered but got cleared in the IRP.
   */
  status: CreditNoteEinvoiceStatus;
  /** Detailed information about the status of the e-invoice. When `status` is `skipped` or `failed`, this contains the reason or error details. The following are some valid examples:

* Invoice successfully sent to customer via the e-invoicing network 9090:123456
* Invoice successfully sent to customer via email id abc@acme.com
 */
  message?: string;
};

/**
 * The subscription channel this object originated from and is maintained in. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.  

In-App Subscriptions is currently in early access. Contact [eap@chargebee.com](mailto:eap@chargebee.com) for more information.
\* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed.

 */
export type CreditNoteChannel =
  (typeof CreditNoteChannel)[keyof typeof CreditNoteChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * The price type of the Credit Note. \* tax_inclusive - All amounts in the document are inclusive of tax. \* tax_exclusive - All amounts in the document are exclusive of tax.

 */
export type CreditNotePriceType =
  (typeof CreditNotePriceType)[keyof typeof CreditNotePriceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNotePriceType = {
  tax_exclusive: "tax_exclusive",
  tax_inclusive: "tax_inclusive",
} as const;

/**
 * The credit note status. \* voided - When the Credit Note has been cancelled. \* refund_due - When the credits are yet to be used, or have been partially used. \* refunded - When the entire credits (Credit Note amount) have been used (i.e either allocated to invoices or refunded). \* adjusted - When the Credit Note has been adjusted against an invoice.

 */
export type CreditNoteStatus =
  (typeof CreditNoteStatus)[keyof typeof CreditNoteStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteStatus = {
  adjusted: "adjusted",
  refunded: "refunded",
  refund_due: "refund_due",
  voided: "voided",
} as const;

/**
 * The reason for issuing this Credit Note. The following reason codes are supported now\[Deprecated; use the [create_reason_code](/docs/api/credit_notes#credit_note_create_reason_code) parameter instead\] \* subscription_change - This reason will be set automatically for Credit Notes created during Change Subscription operation when [proration](https://www.chargebee.com/docs/proration.html) is enabled \* order_change - Order Change \* other - Can be set when none of the above reason codes are applicable \* fraudulent - FRAUDULENT \* chargeback - Can be set when you are recording your customer Chargebacks \* subscription_pause - This reason will be automatically set to credit notes created during pause/resume subscription operation. \* waiver - Waiver \* subscription_cancellation - This reason will be set automatically for Credit Notes created during cancel subscription operation \* product_unsatisfactory - Product Unsatisfactory \* order_cancellation - Order Cancellation \* write_off - This reason will be set automatically for the Credit Notes created during invoice [Write Off](https://www.chargebee.com/docs/invoice-operations.html#write-off) operation. \* service_unsatisfactory - Service Unsatisfactory

 */
export type CreditNoteReasonCode =
  (typeof CreditNoteReasonCode)[keyof typeof CreditNoteReasonCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteReasonCode = {
  write_off: "write_off",
  subscription_change: "subscription_change",
  subscription_cancellation: "subscription_cancellation",
  subscription_pause: "subscription_pause",
  chargeback: "chargeback",
  product_unsatisfactory: "product_unsatisfactory",
  service_unsatisfactory: "service_unsatisfactory",
  order_change: "order_change",
  order_cancellation: "order_cancellation",
  waiver: "waiver",
  other: "other",
  fraudulent: "fraudulent",
} as const;

/**
 * The credit note type. \* refundable - Refundable Credit Note \* adjustment - Adjustment Credit Note

 */
export type CreditNoteType =
  (typeof CreditNoteType)[keyof typeof CreditNoteType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreditNoteType = {
  adjustment: "adjustment",
  refundable: "refundable",
} as const;

/**
 * A coupon set contains a bunch of coupon codes that can be redeemed by your customers when they are checking out. It belongs to an existing coupon and will usually be combined with other coupons that share similar promotion or discount offers. Using this resource, you can create, update, retrieve, delete coupon sets and add coupon codes to a coupon set.

 */
export interface CouponSet {
  /** Uniquely identifies a coupon_set
   */
  id: string;
  /** Coupon id linked to coupon set
   */
  coupon_id: string;
  /** Name of the coupon set
   */
  name: string;
  /** No of coupon codes present in coupon set
   */
  total_count?: number;
  /** No of redeemed codes
   */
  redeemed_count?: number;
  /** No of archived codes
   */
  archived_count?: number;
}

/**
 * Status of the coupon code. \* not_redeemed - Can be applied to a subscription. \* redeemed - Cannot be applied to a subscription as the coupon code has been already used. \* archived - Cannot be applied to a subscription as it has been made inactive.

 */
export type CouponCodeStatus =
  (typeof CouponCodeStatus)[keyof typeof CouponCodeStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponCodeStatus = {
  not_redeemed: "not_redeemed",
  redeemed: "redeemed",
  archived: "archived",
} as const;

/**
 * Coupon codes are used along with existing coupons in Chargebee. You can create a coupon set using a bunch of coupon codes and this coupon set will be associated with an existing coupon. A coupon code can only be applied to a single subscription and cannot be re-used.

Using coupon codes you can distribute several unique codes for a single main coupon, when you are running promotions.

 */
export interface CouponCode {
  /** Unique coupon code that can be redeemed only once.
   */
  code: string;
  /** Status of the coupon code. \* not_redeemed - Can be applied to a subscription. \* redeemed - Cannot be applied to a subscription as the coupon code has been already used. \* archived - Cannot be applied to a subscription as it has been made inactive.
   */
  status: CouponCodeStatus;
  /** Id of the main coupon resource.
   */
  coupon_id: string;
  /** Uniquely identifies a coupon_set
   */
  coupon_set_id: string;
  /** Coupon set name to which this coupon code would be grouped under. If the coupon set with the passed name is not present, a new coupon set will be created.
   */
  coupon_set_name: string;
}

/**
 * Type of coupon constraints \* unique_by - Indicates - when `entity_type` is `customer` - that the coupon can be redeemed only once for every unique value of a specified `customer` attribute. The `customer` attribute is specified using `value`. For example, if `value` is `email`, then the coupon can be redeemed only once for every unique value of `customer.email`. In other words, when there are multiple `customer` records with the same value for `email`, once the coupon has been redeemed for one of those customer records, no further redemptions of the coupon are allowed for any of those `customer` records. \* max_redemptions - The coupon can be redeemed up to a set number of times for a specific resource type. The maximum redemptions are specified using `value`, and the resource type is specified using `entity_type`. For example, if `entity_type` is `customer` and `value` is `10` then the coupon can only be redeemed up to 10 times for any particular `customer` record.

 */
export type CouponCouponConstraintsItemType =
  (typeof CouponCouponConstraintsItemType)[keyof typeof CouponCouponConstraintsItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponCouponConstraintsItemType = {
  max_redemptions: "max_redemptions",
  unique_by: "unique_by",
} as const;

/**
 * The resource type for the constraint. This, along with `type` and `value`, helps define the specific rule applied. \* customer - The constraint is based on `customer` records.

 */
export type CouponCouponConstraintsItemEntityType =
  (typeof CouponCouponConstraintsItemEntityType)[keyof typeof CouponCouponConstraintsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponCouponConstraintsItemEntityType = {
  customer: "customer",
} as const;

export type CouponCouponConstraintsItem = {
  /** The resource type for the constraint. This, along with `type` and `value`, helps define the specific rule applied. \* customer - The constraint is based on `customer` records.
   */
  entity_type: CouponCouponConstraintsItemEntityType;
  /** Type of coupon constraints \* unique_by - Indicates - when `entity_type` is `customer` - that the coupon can be redeemed only once for every unique value of a specified `customer` attribute. The `customer` attribute is specified using `value`. For example, if `value` is `email`, then the coupon can be redeemed only once for every unique value of `customer.email`. In other words, when there are multiple `customer` records with the same value for `email`, once the coupon has been redeemed for one of those customer records, no further redemptions of the coupon are allowed for any of those `customer` records. \* max_redemptions - The coupon can be redeemed up to a set number of times for a specific resource type. The maximum redemptions are specified using `value`, and the resource type is specified using `entity_type`. For example, if `entity_type` is `customer` and `value` is `10` then the coupon can only be redeemed up to 10 times for any particular `customer` record.
   */
  type: CouponCouponConstraintsItemType;
  /** The value of the coupon constraint. The possible values depend on the value of `constraints[type]`:

* When `type` is `unique_by`, then `value` can be `email` or `id`.

* When `type` is `max_redemptions`, then `value` can be any integer in the range `1` `coupon.max_redemptions`, inclusive.

 */
  value?: string;
};

/**
 * Item type for which this criteria is applicable for. \* charge - Charge is a type of item \* plan - Plan is a type of item \* addon - Addon is a type of item

 */
export type CouponItemConstraintCriteriaItemItemType =
  (typeof CouponItemConstraintCriteriaItemItemType)[keyof typeof CouponItemConstraintCriteriaItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponItemConstraintCriteriaItemItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

export type CouponItemConstraintCriteriaItem = {
  /** Item type for which this criteria is applicable for. \* charge - Charge is a type of item \* plan - Plan is a type of item \* addon - Addon is a type of item
   */
  item_type: CouponItemConstraintCriteriaItemItemType;
  /** List of currencies ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) for which this coupon is applicable.
   */
  currencies?: unknown[];
  /** List of families for which this coupon is applicable.
   */
  item_family_ids?: unknown[];
  /** List of frequencies for which this coupon is applicable. Allowed frequencies are \[day, week, month, year\].
   */
  item_price_periods?: unknown[];
};

/**
 * Constraint applicable for the item \* specific - Coupon applicable to specific items. \* all - Coupon applicable to all items. \* criteria - Coupon applicable based on criteria. \* none - Coupon not applicable to any items.

 */
export type CouponItemConstraintsItemConstraint =
  (typeof CouponItemConstraintsItemConstraint)[keyof typeof CouponItemConstraintsItemConstraint];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponItemConstraintsItemConstraint = {
  none: "none",
  all: "all",
  specific: "specific",
  criteria: "criteria",
} as const;

/**
 * Item type for which this criteria is applicable for. \* charge - Charge \* plan - Plan \* addon - Addon

 */
export type CouponItemConstraintsItemItemType =
  (typeof CouponItemConstraintsItemItemType)[keyof typeof CouponItemConstraintsItemItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponItemConstraintsItemItemType = {
  plan: "plan",
  addon: "addon",
  charge: "charge",
} as const;

export type CouponItemConstraintsItem = {
  /** Item type for which this criteria is applicable for. \* charge - Charge \* plan - Plan \* addon - Addon
   */
  item_type: CouponItemConstraintsItemItemType;
  /** Constraint applicable for the item \* specific - Coupon applicable to specific items. \* all - Coupon applicable to all items. \* criteria - Coupon applicable based on criteria. \* none - Coupon not applicable to any items.
   */
  constraint: CouponItemConstraintsItemConstraint;
  /** List of item price ids for which this coupon is applicable.
   */
  item_price_ids?: unknown[];
};

/**
 * The unit of time for period. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type). \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.

 */
export type CouponPeriodUnit =
  (typeof CouponPeriodUnit)[keyof typeof CouponPeriodUnit];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponPeriodUnit = {
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

/**
 * The amount on the invoice to which the coupon is applied. \* invoice_amount - The coupon is applied to the invoice `sub_total`. \* each_specified_item - The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.

 */
export type CouponApplyOn = (typeof CouponApplyOn)[keyof typeof CouponApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponApplyOn = {
  invoice_amount: "invoice_amount",
  each_specified_item: "each_specified_item",
} as const;

/**
 * Status of the coupon. \* expired - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* archived - Cannot be applied to a subscription. Existing associations remain unaffected. \* active - Can be applied to a subscription. \* deleted - Indicates the coupon has been deleted.

 */
export type CouponStatus = (typeof CouponStatus)[keyof typeof CouponStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponStatus = {
  active: "active",
  expired: "expired",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * Specifies the time duration for which this coupon is attached to the subscription. \* forever - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* one_time - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.

 */
export type CouponDurationType =
  (typeof CouponDurationType)[keyof typeof CouponDurationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponDurationType = {
  one_time: "one_time",
  forever: "forever",
  limited_period: "limited_period",
} as const;

/**
 * The type of deduction \* percentage - The specified percentage will be deducted. \* fixed_amount - The specified amount will be deducted.

 */
export type CouponDiscountType =
  (typeof CouponDiscountType)[keyof typeof CouponDiscountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CouponDiscountType = {
  fixed_amount: "fixed_amount",
  percentage: "percentage",
} as const;

/**
 * Overview {#overview}
--------------------

Coupons are deductions applied to invoices or invoice line items. They're designed to be consumed by your customers directly. A coupon deduction can either be for a fixed amount or for a percentage of the amount of the invoice or line item.  
**Note:**

If you wish to provide discounts to your customers via API or the Chargebee app, see [Discounts API](/docs/api/discounts)

Order of application of coupons and discounts {#precedence}
-----------------------------------------------------------

When both <coupons> and <discounts> are applied simultaneously to a [subscription](subscriptions) or [one-time invoice](invoices?prod_cat_ver=2#create_invoice_for_items_and_one-time_charges), they're applied in the following order:  
{#c8112732-82d8-406d-adad-a832fcb071a5}

|---|---------------------------------------|--------------------------------------------------------------------------------------------------------------------|
|   | **Summary**                           | **Description**                                                                                                    |
| 1 | Line-level, fixed amount coupons      | `coupon` with apply_on{#a9499b7a-8534-4a0c-b4d4-e66ab1dc88d9} = `each_specified_item` and `discount_type` = `flat` |
| 2 | Line-level, fixed amount discounts    | `discount` with `apply_on` = `specific_item_price` and `type` = `fixed_amount`                                     |
| 3 | Line-level, percentage coupons        | `coupon` with `apply_on` = `each_specified_item` and `discount_type` = `percentage`                                |
| 4 | Line-level, percentage discounts      | `discount` with `apply_on` = `specific_item_price` and `type` = `percentage`                                       |
| 5 | Invoice-level, fixed amount coupons   | `coupon` with `apply_on` = `invoice_amount` and `discount_type` = `flat`                                           |
| 6 | Invoice-level, fixed amount discounts | `discount` with `apply_on` = `invoice_amount` and `type` = `fixed_amount`                                          |
| 7 | Invoice-level, percentage coupons     | `coupon` with `apply_on` = `invoice_amount` and `discount_type` = `percentage`                                     |
| 8 | Invoice-level, percentage discounts   | `discount` with `apply_on` = `invoice_amount` and `type` = `percentage`                                            |



For example, consider the following scenario:

A subscription is created with:

* a plan price of $200 per month
* an addon price of $20 per month
* a flat $5 invoice discount
* a 1% off coupon on the addon
* a flat $2 coupon on the invoice

The above coupons and discount are applied in the following order:  

|---|---------------------------------------------|-----------------------------------------------|
|   | **Discount or coupon applied**              | **Subtotal at each step**                     |
| 1 | Initial subtotal (plan price + addon price) | $200 + $20 = $220                             |
| 2 | 1% off coupon on the addon                  | $200 + $(20 - 0.02) = $200 + $19.98 = $219.98 |
| 3 | Flat $2 coupon on the invoice               | $219.98 - $2 = $217.98                        |
| 4 | Flat $5 invoice discount                    | $217.98 - $5 = **$212.98**                    |


 */
export interface Coupon {
  /** Used to uniquely identify the coupon in your website/application and to integrate with Chargebee.  
**Note:**


When the coupon ID contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the coupon ID in the path parameter before making an API call.
 */
  id: string;
  /** The display name used in web interface for identifying the coupon.  
**Note:**


When the name of the coupon set contains a special character; for example: `#`, the API returns an error.
Make sure that you [encode](https://www.urlencoder.org/) the name of the coupon set in the path parameter before making an API call.
 */
  name: string;
  /** Display name used in invoice. If it is not configured then name is used in invoice.
   */
  invoice_name?: string;
  /** The type of deduction \* percentage - The specified percentage will be deducted. \* fixed_amount - The specified amount will be deducted.
   */
  discount_type: CouponDiscountType;
  /** The percentage of the original amount that should be deducted from it.
   */
  discount_percentage?: number;
  /** The value of the deduction. The format of this value depends on the [kind of currency](/docs/api#currencies).
   */
  discount_amount?: number;
  /** The currency code ([ISO 4217 format](https://www.chargebee.com/docs/supported-currencies.html)) of the coupon. Applicable for *fixed_amount* coupons alone.
   */
  currency_code?: string;
  /** Specifies the time duration for which this coupon is attached to the subscription. \* forever - The coupon is attached to the subscription and applied on the invoices until explicitly removed. \* one_time - The coupon stays attached to the subscription till it is applied on an invoice **once** . It is removed after that from the subscription. \* limited_period - The discount is attached to the subscription and applied on the invoices for a limited duration. This duration starts from the point it is applied to an invoice for the first time and expires after a period specified by `period` and `period_unit`.
   */
  duration_type: CouponDurationType;
  /** Date upto which the coupon can be applied to new subscriptions.
   */
  valid_till?: number;
  /** Maximum number of times this coupon can be redeemed.  
**Note:**


If not specified, the coupon can be redeemed an indefinite number of times.
 */
  max_redemptions?: number;
  /** Status of the coupon. \* expired - Cannot be applied to a subscription. A coupon may expire due to exceeding [max_redemptions](/docs/api/coupons?#coupon_max_redemptions) or [valid_till](/docs/api/coupons?#coupon_valid_till) date is past. Existing associations remain unaffected. \* archived - Cannot be applied to a subscription. Existing associations remain unaffected. \* active - Can be applied to a subscription. \* deleted - Indicates the coupon has been deleted.
   */
  status?: CouponStatus;
  /** The amount on the invoice to which the coupon is applied. \* invoice_amount - The coupon is applied to the invoice `sub_total`. \* each_specified_item - The coupon is applied to the `invoice.line_item.amount` that corresponds to the item price specified by `item_price_id`.
   */
  apply_on: CouponApplyOn;
  /** Timestamp indicating when this coupon is created.
   */
  created_at: number;
  /** Timestamp indicating when this coupon was archived.
   */
  archived_at?: number;
  /** The version number of this resource. For every change made to the resource, `resource_version` is updated with a new timestamp in milliseconds.
   */
  resource_version?: number;
  /** Timestamp indicating when this coupon was last updated.   
Note that this does not change when the [redemptions](/docs/api/coupons?#coupon_redemptions) attribute is changed. This attribute will be present only if the resource has been updated after 2016-11-09.
 */
  updated_at?: number;
  /** The duration of time for which the coupon is attached to the subscription, in `period_units`. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type).
   */
  period?: number;
  /** The unit of time for period. Applicable only when [duration_type](/docs/api/coupons?#coupon_duration_type) is [limited_period](/docs/api/coupons?#coupon_duration_type). \* month - A period of 1 calendar month. \* week - A period of 7 days. \* year - A period of 1 calendar year. \* day - A period of 24 hours.
   */
  period_unit?: CouponPeriodUnit;
  /** The number of times this coupon has been redeemed.
   */
  redemptions?: number;
  /** A customer-facing note added to all invoices associated with this API resource. This note becomes one among [all the notes](/docs/api/invoices#invoice_notes) displayed on the invoice PDF.
   */
  invoice_notes?: string;
  /** The list of item constraints.
   */
  item_constraints?: CouponItemConstraintsItem[];
  /** The list of item constraint criteria.
   */
  item_constraint_criteria?: CouponItemConstraintCriteriaItem[];
  /** List of constraints applicable on the redemption of this coupon.
   */
  coupon_constraints?: CouponCouponConstraintsItem[];
}

export type ContractTermCancelOption =
  (typeof ContractTermCancelOption)[keyof typeof ContractTermCancelOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractTermCancelOption = {
  terminate_immediately: "terminate_immediately",
  end_of_contract_term: "end_of_contract_term",
} as const;

/**
 * Action to be taken when the contract term completes. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* evergreen - Contract term completes and the subscription renews. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.


 */
export type ContractTermActionAtTermEnd =
  (typeof ContractTermActionAtTermEnd)[keyof typeof ContractTermActionAtTermEnd];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractTermActionAtTermEnd = {
  renew: "renew",
  evergreen: "evergreen",
  cancel: "cancel",
  renew_once: "renew_once",
} as const;

/**
 * Current status of contract \* active - An actively running contract term. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* terminated - The contract term was terminated ahead of completion. \* completed - The contract term has run its full duration.

 */
export type ContractTermStatus =
  (typeof ContractTermStatus)[keyof typeof ContractTermStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractTermStatus = {
  active: "active",
  completed: "completed",
  cancelled: "cancelled",
  terminated: "terminated",
} as const;

/**
 * Subscriptions can run indefinitely or they may run for a fixed number of billing cycles. Subscription can have "contract terms", which define a lock-in period on the subscription for a certain number of billing cycles. This prevents the subscription from being canceled by the customer when it is within the contract term.

The **contract term** resource described below, defines the properties of this lock-in period. This includes the [number of billing cycles](contract_terms#contract_term_remaining_billing_cycles), the [total contract value](contract_terms#contract_term_total_contract_value), the [action to be taken](contract_terms#contract_term_action_at_term_end) at the end of the contract term, and so on. To allow for exceptions, you also have the option of terminating an [`active`](contract_terms#contract_term_status) contract term and charging a [termination fee](contract_terms#termintation_fee).

A contract term starts in the `active` state and ends in the `completed` state. If the contract was canceled due to non-payment or other reasons, it can end in the `canceled` or `terminated` state. A given contract term is always associated with one, and only one subscription. A subscription, however, can be associated with only one `active` contract term. Over time, a subscription can be associated with several non-`active` contract terms. The `active` contract term for a subscription is available as an [object](subscriptions#subscription_contract_term) within the subscription.

To enable and configure contract terms, follow these steps in the Chargebee UI:

1. Click **Settings** on the left navigation.
2. Click **Configure Chargebee**.
3. Under **Billing** , click **Contract Terms**.
4. Enable and configure the feature as needed.

Once contract terms have been configured, the following actions can be performed using the API:

* **Define a contract term** for a subscription and **set renewal options** for the contract term. The following endpoints support this:
  * [Create a subscription](subscriptions#create_a_subscription)
  * [Create subscription for customer](subscriptions#create_subscription_for_customer)
  * [Update a subscription](subscriptions#update_a_subscription)
  * [Reactivate a subscription](subscriptions#reactivate_a_subscription)
* **Retrieving** a historical record of all contract terms for a subscription can be done via the following endpoint:
  * [List contract terms for a subscription](subscriptions#list_contract_terms_for_a_subscription)
* **Canceling a contract term** can be done via the following endpoints:
  * [Update a subscription](subscriptions#update_a_subscription)
  * [Cancel a subscription](subscriptions#cancel_a_subscription)

<!-- -->

#### Including a termination fee

* When a contract is canceled mid-term, you can set a termination fee to be levied. Here's how:
1. [Create the termination fee as a `non_recurring` addon](addons#create_an_addon_charge_type).
2. [Associate this addon with a plan](plans#plan_event_based_addons) or [include the addon to a subscription](subscriptions#subscription_event_based_addons). In either case, set the `event_based_addons[on_event]` parameter to `contract_term_termination`.
* Once the above steps are done, the termination fee will be charged automatically if you [terminate the contract in the middle of its term](subscriptions#cancel_a_subscription_contract_term_cancel_option).

 */
export interface ContractTerm {
  /** Id that uniquely identifies the contract term in the site.
   */
  id: string;
  /** Current status of contract \* active - An actively running contract term. \* cancelled - The contract term was ended because:

* a change in the subscription caused a [subscription term reset](subscriptions#update_a_subscription_force_term_reset).
* the subscription was cancelled due to non-payment.
\* terminated - The contract term was terminated ahead of completion. \* completed - The contract term has run its full duration.
 */
  status: ContractTermStatus;
  /** The start date of the contract term
   */
  contract_start: number;
  /** The end date of the contract term
   */
  contract_end: number;
  /** The number of billing cycles of the subscription that the contract term is for.
   */
  billing_cycle: number;
  /** Action to be taken when the contract term completes. \* renew -
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `renew`.
\* evergreen - Contract term completes and the subscription renews. \* renew_once - Used when you want to renew the contract term just once. Does the following:
* Contract term completes and a new contract term is started for the number of billing cycles specified in [`contract_billing_cycle_on_renewal`](subscriptions#create_subscription_for_customer_contract_term_billing_cycle_on_renewal).
* The `action_at_term_end` for the new contract term is set to `cancel`.
\* cancel - Contract term completes and subscription is canceled.

 */
  action_at_term_end: ContractTermActionAtTermEnd;
  /** The sum of the [totals](invoices#invoice_total) of all the invoices raised as part of the contract term. For `active` contract terms, this is a predicted value. The value depends on the [type of currency](./#handling_currency_units). If the subscription was [imported](#import_a_subscription) with the contract term, then this value includes the value passed for `total_amount_raised`.
   */
  total_contract_value: number;
  /** It refers to the total amount of revenue that is expected to be generated from a specific contract term, calculated as the sum of all invoices raised during the term, regardless of payment status. It is based on past performance and the specified currency in the contract. If the subscription was imported, the value for `total_amount_raised_before_tax` is included in the calculation of the total contract value before tax. It's important to note that this value excludes any applicable taxes.
   */
  total_contract_value_before_tax: number;
  /** The number of days before [`contract_end`](contract_terms#contract_term_contract_end), during which the customer is barred from canceling the contract term. The customer is allowed to cancel the contract term via the Self-Serve Portal only before this period. This allows you to have sufficient time for processing the contract term closure
   */
  cancellation_cutoff_period?: number;
  /** The date when the contract term was created.
   */
  created_at: number;
  /** The [Id](subscriptions#subscription_id) of the subscription that this contract term is for.
   */
  subscription_id: string;
  /** The number of subscription billing cycles remaining after the current one for the contract term. This attribute is only returned for `active` contract terms.
   */
  remaining_billing_cycles?: number;
}

/**
 * Contacts are the list of persons/organizations to whom billing and accounting emails will be sent.

 */
export interface Contact {
  /** Unique reference ID provided for the contact.
   */
  id: string;
  /** First name of the contact.
   */
  first_name?: string;
  /** Last name of the contact.
   */
  last_name?: string;
  /** Email of the contact.
   */
  email: string;
  /** Phone number of the contact.
   */
  phone?: string;
  /** Label/Tag provided for contact.
   */
  label?: string;
  /** Contact enabled / disabled
   */
  enabled: boolean;
  /** Whether Account Emails option is enabled for the contact.
   */
  send_account_email: boolean;
  /** Whether Billing Emails option is enabled for the contact.
   */
  send_billing_email: boolean;
}

/**
 * The Product Catalog version of the site \* v2 - Product Catalog 2.0 \* v1 - Product Catalog 1.0

 */
export type ConfigurationProductCatalogVersion =
  (typeof ConfigurationProductCatalogVersion)[keyof typeof ConfigurationProductCatalogVersion];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConfigurationProductCatalogVersion = {
  v1: "v1",
  v2: "v2",
} as const;

/**
 * This resource returns your domain and product catalog version details.

 */
export interface Configuration {
  /** The Chargebee [site](https://www.chargebee.com/docs/2.0/sites-intro.html) for which the information has been requested. It is the same as the value of `{site}` provided as a path parameter.
   */
  domain?: string;
  /** The Product Catalog version of the site \* v2 - Product Catalog 2.0 \* v1 - Product Catalog 1.0
   */
  product_catalog_version?: ConfigurationProductCatalogVersion;
}

/**
 * Type of comment this is. \* system - Comment generated by Chargebee when any backend changes happen for an entity \* user - Comment generated by user either via API or Admin console.

 */
export type CommentType = (typeof CommentType)[keyof typeof CommentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommentType = {
  user: "user",
  system: "system",
} as const;

/**
 * Type of the entity this comment generated for \* item - Entity that represents item \* invoice - Invoice description \* product - Entity that represents product \* plan - Entity that represents a subscription plan \* item_family - Entity that represents item family \* transaction - Entity that represents a transaction. \* quote - Entity that represents a quote \* order - Entity that represents an order \* item_price - Entity that represents item price \* customer - Entity that represents a customer \* variant - Entity that represents product variants \* business_entity - Entity that represents item of type business entity \* coupon - Entity that represents a discount coupon \* subscription - Entity that represents a subscription of a customer \* addon - Entity that represents an addon \* credit_note - Credit note description

 */
export type CommentEntityType =
  (typeof CommentEntityType)[keyof typeof CommentEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommentEntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  quote: "quote",
  credit_note: "credit_note",
  transaction: "transaction",
  plan: "plan",
  addon: "addon",
  coupon: "coupon",
  order: "order",
  business_entity: "business_entity",
  item_family: "item_family",
  item: "item",
  item_price: "item_price",
  product: "product",
  variant: "variant",
} as const;

/**
 * Comments are additional information that you can add to your resources. Comments can be added to provide context for any operation that was performed.

When you make an API call on any resource, for example, Subscriptions -\> Change term end, you can add more context to that operation by calling the comments API as a follow up call.

Besides the user generated comments, Chargebee also generates "System" comments when a change for a resource happens at the backend. These comments are all read-only.

 */
export interface Comment {
  /** Unique identifier for the comment.
   */
  id: string;
  /** Type of the entity this comment generated for \* item - Entity that represents item \* invoice - Invoice description \* product - Entity that represents product \* plan - Entity that represents a subscription plan \* item_family - Entity that represents item family \* transaction - Entity that represents a transaction. \* quote - Entity that represents a quote \* order - Entity that represents an order \* item_price - Entity that represents item price \* customer - Entity that represents a customer \* variant - Entity that represents product variants \* business_entity - Entity that represents item of type business entity \* coupon - Entity that represents a discount coupon \* subscription - Entity that represents a subscription of a customer \* addon - Entity that represents an addon \* credit_note - Credit note description
   */
  entity_type: CommentEntityType;
  /** The user who created the comment. If created via API, this contains the name given for the API key used.
   */
  added_by?: string;
  /** Actual notes for the comment.
   */
  notes: string;
  /** The time at which this comment was created
   */
  created_at: number;
  /** Type of comment this is. \* system - Comment generated by Chargebee when any backend changes happen for an entity \* user - Comment generated by user either via API or Admin console.
   */
  type: CommentType;
  /** Unique identifier of the entity.
   */
  entity_id: string;
}

export type ChargesHandling =
  (typeof ChargesHandling)[keyof typeof ChargesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargesHandling = {
  invoice_immediately: "invoice_immediately",
  add_to_unbilled_charges: "add_to_unbilled_charges",
} as const;

export type ChargeOnOption =
  (typeof ChargeOnOption)[keyof typeof ChargeOnOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeOnOption = {
  immediately: "immediately",
  on_event: "on_event",
} as const;

export type ChargeOnEvent = (typeof ChargeOnEvent)[keyof typeof ChargeOnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeOnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * @deprecated
 */
export type ChargeModel = (typeof ChargeModel)[keyof typeof ChargeModel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChargeModel = {
  full_charge: "full_charge",
  prorate: "prorate",
} as const;

export type Channel = (typeof Channel)[keyof typeof Channel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Channel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

export type ChangeOption = (typeof ChangeOption)[keyof typeof ChangeOption];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChangeOption = {
  immediately: "immediately",
  specific_date: "specific_date",
} as const;

/**
 * Card is powered by payment method. \* card - card \* ideal - ideal \* sofort - sofort \* bancontact - bancontact \* giropay - giropay \* latam_local_card - latam_local_card \* not_applicable - not_applicable

 */
export type CardPoweredBy = (typeof CardPoweredBy)[keyof typeof CardPoweredBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardPoweredBy = {
  ideal: "ideal",
  sofort: "sofort",
  bancontact: "bancontact",
  giropay: "giropay",
  card: "card",
  latam_local_card: "latam_local_card",
  not_applicable: "not_applicable",
} as const;

/**
 * Card Funding type \* credit - A credit card. \* prepaid - A prepaid card. \* debit - A debit card. \* not_applicable - Used for ACH. Not applicable for cards \* not_known - An unknown card.

 */
export type CardFundingType =
  (typeof CardFundingType)[keyof typeof CardFundingType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardFundingType = {
  credit: "credit",
  debit: "debit",
  prepaid: "prepaid",
  not_known: "not_known",
  not_applicable: "not_applicable",
} as const;

/**
 * Card type \* bancontact - A Bancontact card. \* american_express - An American Express card. \* not_applicable - Used for offline entries in transactions. Not applicable for cards \* diners_club - A Diner's Club card. \* discover - A Discover card. \* other - Card belonging to types other than those listed above. \* mastercard - A MasterCard. \* jcb - A JCB card. \* visa - A Visa card.

 */
export type CardCardType = (typeof CardCardType)[keyof typeof CardCardType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardCardType = {
  visa: "visa",
  mastercard: "mastercard",
  american_express: "american_express",
  discover: "discover",
  jcb: "jcb",
  diners_club: "diners_club",
  bancontact: "bancontact",
  other: "other",
  not_applicable: "not_applicable",
} as const;

/**
 * Name of the gateway this payment source is stored with. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* worldpay - WorldPay is a payment gateway \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* stripe - Stripe is a payment gateway. \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* cybersource - CyberSource is a payment gateway. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* amazon_payments - Amazon Payments is a payment service provider. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* vantiv - Vantiv is a payment gateway. \* bank_of_america - Bank of America Gateway \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway

 */
export type CardGateway = (typeof CardGateway)[keyof typeof CardGateway];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardGateway = {
  chargebee: "chargebee",
  chargebee_payments: "chargebee_payments",
  stripe: "stripe",
  wepay: "wepay",
  braintree: "braintree",
  authorize_net: "authorize_net",
  paypal_pro: "paypal_pro",
  pin: "pin",
  eway: "eway",
  eway_rapid: "eway_rapid",
  worldpay: "worldpay",
  balanced_payments: "balanced_payments",
  beanstream: "beanstream",
  bluepay: "bluepay",
  elavon: "elavon",
  first_data_global: "first_data_global",
  hdfc: "hdfc",
  migs: "migs",
  nmi: "nmi",
  ogone: "ogone",
  paymill: "paymill",
  paypal_payflow_pro: "paypal_payflow_pro",
  sage_pay: "sage_pay",
  tco: "tco",
  wirecard: "wirecard",
  amazon_payments: "amazon_payments",
  paypal_express_checkout: "paypal_express_checkout",
  gocardless: "gocardless",
  adyen: "adyen",
  orbital: "orbital",
  moneris_us: "moneris_us",
  moneris: "moneris",
  bluesnap: "bluesnap",
  cybersource: "cybersource",
  vantiv: "vantiv",
  checkout_com: "checkout_com",
  paypal: "paypal",
  ingenico_direct: "ingenico_direct",
  exact: "exact",
  mollie: "mollie",
  quickbooks: "quickbooks",
  razorpay: "razorpay",
  global_payments: "global_payments",
  bank_of_america: "bank_of_america",
  ecentric: "ecentric",
  metrics_global: "metrics_global",
  windcave: "windcave",
  not_applicable: "not_applicable",
} as const;

/**
 * Current status of the card. \* valid - A valid and active credit card \* expiring - A card which is expiring in the current month. \* expired - An expired card

 */
export type CardStatus = (typeof CardStatus)[keyof typeof CardStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardStatus = {
  valid: "valid",
  expiring: "expiring",
  expired: "expired",
} as const;

/**
 * #### Deprecated

The [Payment Sources API](/docs/api/payment_sources), with its additional options and improvements, obsoletes the Cards APIs. [Learn more](/docs/api#multiple_payment_sources).

The following table lists the Payment Sources API operations alongside the equivalent Card API operations:

|                             API at Card resource                             |                                                                                                                                Use instead                                                                                                                                 |
|------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [Retrieve card for a customer](/docs/api/cards#retrieve_card_for_a_customer) | [Retrieve a payment source](/docs/api/payment_sources#retrieve_a_payment_source)                                                                                                                                                                                           |
| [Update card for a customer](/docs/api/cards#update_card_for_a_customer)     | * [Create using temporary token](/docs/api/payment_sources#create_using_temporary_token) * [Create using permanent token](/docs/api/payment_sources#create_using_permanent_token) * [Create a card payment source](/docs/api/payment_sources#create_a_card_payment_source) |
| [Switch gateway](/docs/api/cards#switch_gateway)                             | [Switch gateway account](/docs/api/payment_sources#switch_gateway_account)                                                                                                                                                                                                 |
| [Copy card](/docs/api/cards#copy_card)                                       | [Export payment source](/docs/api/payment_sources#export_payment_source)                                                                                                                                                                                                   |
| [Delete card for a customer](/docs/api/cards#delete_card_for_a_customer)     | [Delete a payment source](/docs/api/payment_sources#delete_a_payment_source)                                                                                                                                                                                               |


 */
export interface Card {
  /** Identifier of the payment source
   */
  payment_source_id: string;
  /** Current status of the card. \* valid - A valid and active credit card \* expiring - A card which is expiring in the current month. \* expired - An expired card
   */
  status: CardStatus;
  /** Name of the gateway this payment source is stored with. \* bluesnap - BlueSnap is a payment gateway. \* tco - 2Checkout is a payment gateway. \* bluepay - BluePay is a payment gateway. \* paypal_express_checkout - PayPal Express Checkout is a payment gateway. \* paypal_payflow_pro - PayPal Payflow Pro is a payment gateway. \* razorpay - Razorpay is a fast growing payment service provider in India working with all leading banks and support for major local payment methods including Netbanking, UPI etc. \* global_payments - Global Payments is a payment service provider. \* not_applicable - Indicates that payment gateway is not applicable for this resource. \* checkout_com - Checkout.com is a payment gateway. \* adyen - Adyen is a payment gateway. \* braintree - Braintree is a payment gateway. \* nmi - NMI is a payment gateway. \* worldpay - WorldPay is a payment gateway \* moneris_us - Moneris USA is a payment gateway. \* pin - Pin is a payment gateway \* authorize_net - Authorize.net is a payment gateway \* stripe - Stripe is a payment gateway. \* moneris - Moneris is a payment gateway. \* chargebee - Chargebee test gateway. \* cybersource - CyberSource is a payment gateway. \* ecentric - Ecentric provides a seamless payment processing service in South Africa specializing on omnichannel capabilities. \* first_data_global - First Data Global Gateway Virtual Terminal Account \* exact - Exact Payments is a payment gateway. \* eway - eWAY Account is a payment gateway. \* metrics_global - Metrics global is a leading payment service provider providing unified payment services in the US. \* amazon_payments - Amazon Payments is a payment service provider. \* windcave - Windcave provides an end to end payment processing solution in ANZ and other leading global markets. \* quickbooks - Intuit QuickBooks Payments gateway \* wepay - WePay is a payment gateway. \* wirecard - WireCard Account is a payment service provider. \* chargebee_payments - Chargebee Payments gateway \* sage_pay - Sage Pay is a payment gateway. \* elavon - Elavon Virtual Merchant is a payment solution. \* paypal_pro - PayPal Pro Account is a payment gateway. \* orbital - Chase Paymentech(Orbital) is a payment gateway. \* paypal - PayPal Commerce is a payment gateway. \* beanstream - Bambora(formerly known as Beanstream) is a payment gateway. \* hdfc - HDFC Account is a payment gateway. \* ingenico_direct - Worldline Online Payments is a payment gateway. \* ogone - Ingenico ePayments (formerly known as Ogone) is a payment gateway. \* migs - MasterCard Internet Gateway Service payment gateway. \* vantiv - Vantiv is a payment gateway. \* bank_of_america - Bank of America Gateway \* eway_rapid - eWAY Rapid is a payment gateway. \* gocardless - GoCardless is a payment service provider. \* mollie - Mollie is a payment gateway. \* paymill - PAYMILL is a payment gateway. \* balanced_payments - Balanced is a payment gateway
   */
  gateway: CardGateway;
  /** The gateway account to which this payment source is stored with.
   */
  gateway_account_id?: string;
  /** Reference transaction id which used for transactions
   */
  ref_tx_id?: string;
  /** Cardholder's first name
   */
  first_name?: string;
  /** Cardholder's last name
   */
  last_name?: string;
  /** The Issuer Identification Number, i.e. the first six digits of the card number
   */
  iin: string;
  /** Last four digits of the card number
   */
  last4: string;
  /** Card type \* bancontact - A Bancontact card. \* american_express - An American Express card. \* not_applicable - Used for offline entries in transactions. Not applicable for cards \* diners_club - A Diner's Club card. \* discover - A Discover card. \* other - Card belonging to types other than those listed above. \* mastercard - A MasterCard. \* jcb - A JCB card. \* visa - A Visa card.
   */
  card_type?: CardCardType;
  /** Card Funding type \* credit - A credit card. \* prepaid - A prepaid card. \* debit - A debit card. \* not_applicable - Used for ACH. Not applicable for cards \* not_known - An unknown card.
   */
  funding_type: CardFundingType;
  /** Card expiry month.
   */
  expiry_month: number;
  /** Card expiry year.
   */
  expiry_year: number;
  /** [two-letter(alpha2)](https://www.iso.org/iso-3166-country-codes.html) ISO country code.
   */
  issuing_country?: string;
  /** Address line 1, as available in card billing address.
   */
  billing_addr1?: string;
  /** Address line 2, as available in card billing address.
   */
  billing_addr2?: string;
  /** City, as available in card billing address.
   */
  billing_city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  billing_state_code?: string;
  /** The state/province name.
   */
  billing_state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  billing_country?: string;
  /** Postal or Zip code, as available in card billing address.
   */
  billing_zip?: string;
  /** Timestamp indicating when this card resource is created.
   */
  created_at: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** Timestamp indicating when this credit card resource was last updated.
   */
  updated_at?: number;
  /** The IP address of the customer. Used primarily for referral integration and EU VAT validation.
   */
  ip_address?: string;
  /** Card is powered by payment method. \* card - card \* ideal - ideal \* sofort - sofort \* bancontact - bancontact \* giropay - giropay \* latam_local_card - latam_local_card \* not_applicable - not_applicable
   */
  powered_by?: CardPoweredBy;
  /** Identifier of the customer.
   */
  customer_id: string;
  /** Masked credit card number that is safe to show.
   */
  masked_number?: string;
}

/**
 * Current status of the business entity. \* active - When the business entity is Active \* inactive - When the business entity is Inactive

 */
export type BusinessEntityStatus =
  (typeof BusinessEntityStatus)[keyof typeof BusinessEntityStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BusinessEntityStatus = {
  active: "active",
  inactive: "inactive",
} as const;

/**
 * This resource deals with all the business entity related information.

 */
export interface BusinessEntity {
  /** The unique identifier of the business entity.
   */
  id: string;
  /** Name of the business entity.
   */
  name: string;
  /** Current status of the business entity. \* active - When the business entity is Active \* inactive - When the business entity is Inactive
   */
  status: BusinessEntityStatus;
  /** If `true`,then the business entity is deleted and it is only for internal soft deletion management
   */
  deleted: boolean;
  /** Timestamp when this business entity was created.
   */
  created_at: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** The time period when the business entity was updated.
   */
  updated_at?: number;
}

export type BillingDayOfWeekMode =
  (typeof BillingDayOfWeekMode)[keyof typeof BillingDayOfWeekMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BillingDayOfWeekMode = {
  using_defaults: "using_defaults",
  manually_set: "manually_set",
} as const;

export type BillingDateMode =
  (typeof BillingDateMode)[keyof typeof BillingDateMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BillingDateMode = {
  using_defaults: "using_defaults",
  manually_set: "manually_set",
} as const;

export type BillingAlignmentMode =
  (typeof BillingAlignmentMode)[keyof typeof BillingAlignmentMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BillingAlignmentMode = {
  immediate: "immediate",
  delayed: "delayed",
} as const;

export type AvalaraSaleType =
  (typeof AvalaraSaleType)[keyof typeof AvalaraSaleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AvalaraSaleType = {
  wholesale: "wholesale",
  retail: "retail",
  consumed: "consumed",
  vendor_use: "vendor_use",
} as const;

export type AutoCollection =
  (typeof AutoCollection)[keyof typeof AutoCollection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AutoCollection = {
  on: "on",
  off: "off",
} as const;

/**
 * The subscription channel this object originated from and is maintained in. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.

 */
export type AttachedItemChannel =
  (typeof AttachedItemChannel)[keyof typeof AttachedItemChannel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachedItemChannel = {
  web: "web",
  app_store: "app_store",
  play_store: "play_store",
} as const;

/**
 * Indicates when the item is charged. This attribute only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_creation - the time of creation of the subscription. \* subscription_trial_start - the time when the trial period of the subscription begins. \* on_demand - Item can be charged on demand \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions.

 */
export type AttachedItemChargeOnEvent =
  (typeof AttachedItemChargeOnEvent)[keyof typeof AttachedItemChargeOnEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachedItemChargeOnEvent = {
  subscription_creation: "subscription_creation",
  subscription_trial_start: "subscription_trial_start",
  plan_activation: "plan_activation",
  subscription_activation: "subscription_activation",
  contract_termination: "contract_termination",
  on_demand: "on_demand",
} as const;

/**
 * The item state. \* active - New subscriptions can be created with the item. \* deleted - No subscriptions allowed for the item. \* archived - No new subscriptions allowed for the item.

 */
export type AttachedItemStatus =
  (typeof AttachedItemStatus)[keyof typeof AttachedItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachedItemStatus = {
  active: "active",
  archived: "archived",
  deleted: "deleted",
} as const;

/**
 * The type of attachment for the addon. Only applicable for addon-items. \* recommended - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* optional - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan. \* mandatory - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API.

 */
export type AttachedItemType =
  (typeof AttachedItemType)[keyof typeof AttachedItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachedItemType = {
  recommended: "recommended",
  mandatory: "mandatory",
  optional: "optional",
} as const;

/**
 * Addon-item and charge-item prices are purchased with plan-item prices in subscriptions. You can automate this process by configuring certain addons and charges as "attached" to certain plans. This is done at the "item" level. In other words, addon- and charge-items can be attached to plan-items.

Once the attachment is defined, while creating or updating a subscription, the addon- or charge-item prices are selected automatically based on the plan-item price selected . Let's look at the details:

### Addons

Addons can be attached to plans as `recommended`, `mandatory` or `optional`.

* When an addon is attached as `recommended` for a plan, the addon is suggested to be applied to subscriptions for the plan in [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) and [Self-Serve Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). Alternatively, if you build your own payment pages or have a sales team, you can suggest recommended addons to your customers or salespeople on your website or CRM respectively
* When an addon is attached as `mandatory` for a plan, the addon gets applied to subscriptions for the plan compulsorily, unless [removed explicitly](./subscriptions?prod_cat_ver=2). If you do not pass an item price for a mandatory addon when including the plan in a subscription, an addon-item price is automatically applied as explained below.
* Attaching an addon as `optional` neither marks it as recommended or mandatory but allows you a way to set a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan.

How auto-selection of the addon-item price works
------------------------------------------------

Once an addon has been attached as mandatory, the addon-item price to be applied to the plan-item price is selected based on the following rule: The addon-item price with the same currency as that of the plan-item price and the longest compatible period is selected.

Here's an example:

Consider a plan **Standard Cloud Storage** has an addon **Extra Storage** attached to it. Note that each of the two are items. Now consider that they have item prices with the following periods and currencies:

**Item price for "Standard Cloud Storage" plan-item:**

* Standard Cloud Storage, 3 years, AUD.

**Item prices for "Extra Storage" addon-item:**

* Extra Storage, 1 year, EUR.
* Extra Storage, 1 year, USD.
* Extra Storage, 1 year, AUD.
* Extra Storage, 18 months, AUD.
* Extra Storage, 2 years, AUD.
* Extra Storage, 30 months, AUD.

For the plan-item price (Standard Cloud Storage, 3 years, AUD), the addon-item prices with matching currencies are the last 4 from the above list:

* Extra Storage, 1 year, AUD.
* Extra Storage, 18 months, AUD.
* Extra Storage, 2 years, AUD.
* Extra Storage, 30 months, AUD.

From among them, the last two have periods that are incompatible with the plan-item price period of 3 years. From the remaining 2 addon-item prices, the one with the longest period is of 18 months. So, "Extra Storage, 18 months, AUD" is selected for mandatory application to the plan item price.

### Charges

Charges can also be attached to plans. When doing so, you specify [the event](./attached_items?prod_cat_ver=2#attached_item_charge_on_event) at which the charge is to be applied to the subscription. For some events that can occur multiple times in a subscription lifetime, you can also set whether to apply the charge each time the event occurs or just once.

There may be multiple item prices for a given attached charge. The item price that matches the currency of the plan-item price is automatically selected for application.

Here's an example:

Consider a plan **Standard Cloud Storage** has a charge named **Implementation Fee** attached to it. Now consider their item prices below, with the following periods and currencies:

**Item price for "Standard Cloud Storage" plan-item:**

* Standard Cloud Storage, 3 years, AUD.

**Item prices for "Implementation Fee" charge-item:**

* Implementation Fee, USD.
* Implementation Fee, AUD.
* Implementation Fee, EUR.

From among the charge-item prices above, the one compatible with the plan-item price is "Implementation Fee, AUD" since it has the same currency as the plan-item price.


 */
export interface AttachedItem {
  /** The unique id for the attached item. Set to a random, immutable value automatically when the attached item is created.
   */
  id: string;
  /** The id of the plan-item to which the item is attached.
   */
  parent_item_id: string;
  /** The id of the item being attached.
   */
  item_id: string;
  /** The type of attachment for the addon. Only applicable for addon-items. \* recommended - The addon is recommended to go with the plan-item when using [Checkout](https://www.chargebee.com/docs/2.0/configure-inapp.html#fundamental-settings_recommending-addons-in-checkout) or [Portal](https://www.chargebee.com/docs/2.0/inapp-self-serve-portal.html#allow-change-subscription). \* optional - The addon is neither mandatory, nor recommended. This allows you to attach an addon so you can specify a `quantity` and `billing_cycles` for the addon, for when it is applied to subscriptions with the plan. \* mandatory - The addon is attached automatically to the subscription for the plan-item unless [explicitly removed](./subscriptions?prod_cat_ver=2) via API.
   */
  type: AttachedItemType;
  /** The item state. \* active - New subscriptions can be created with the item. \* deleted - No subscriptions allowed for the item. \* archived - No new subscriptions allowed for the item.
   */
  status?: AttachedItemStatus;
  /** The default quantity of the addon to be attached when the quantity is not specified while [creating](subscriptions?prod_cat_ver=2#create_subscription_for_items)/[updating](subscriptions?prod_cat_ver=2#update_subscription_for_items) the subscription.
   */
  quantity?: number;
  /** The decimal representation of the quantity of the addon. Returned for quantity-based addons when [multi-decimal pricing](https://apidocs.chargebee.com/docs/api#handling_currency_units) is enabled.
   */
  quantity_in_decimal?: string;
  /** The number of subscription billing cycles for which this item is attached when applied to a subscription. Applicable only for items of type addon. Requires [addon billing cycles](https://www.chargebee.com/docs/2.0/addons-billingcycle.html) to be enabled for the site.   
The value set explicitly for `billing_cycles` while [applying the addon to a subscription](./subscriptions?prod_cat_ver=2#subscription_subscription_items) takes precedence over this attribute. This attribute, in turn, has a higher precedence than [the value set for the addon-item price](./item_prices?prod_cat_ver=2).
 */
  billing_cycles?: number;
  /** Indicates when the item is charged. This attribute only applies to charge-items. \* contract_termination - when a contract term is [terminated](./subscriptions?prod_cat_ver=2#cancel_subscription_for_items_contract_term_cancel_option). \* subscription_creation - the time of creation of the subscription. \* subscription_trial_start - the time when the trial period of the subscription begins. \* on_demand - Item can be charged on demand \* plan_activation - same as subscription activation, but also includes the case when the plan-item of the subscription is changed. \* subscription_activation - the moment a subscription enters an `active` or `non-renewing` state. Also includes reactivations of canceled subscriptions.
   */
  charge_on_event: AttachedItemChargeOnEvent;
  /** Indicates if the charge-item is to be charged only once or each time the `charge_on_event` occurs. This attribute only applies to charge-items.
   */
  charge_once: boolean;
  /** The time at which this attached item was created.
   */
  created_at: number;
  /** Version number of this resource. The `resource_version` is updated with a new timestamp in milliseconds for every change made to the resource. This attribute will be present only if the resource has been updated after 2016-09-28.
   */
  resource_version?: number;
  /** The time at which this attached item was last updated.
   */
  updated_at?: number;
  /** The subscription channel this object originated from and is maintained in. \* web - The object was created (and is maintained) for the web channel directly in Chargebee via API or UI. \* app_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Apple App Store. Direct manipulation of this object via UI or API is disallowed. \* play_store - The object data is synchronized with data from [in-app subscription(s)](https://apidocs.chargebee.com/docs/api/in_app_subscriptions) created in Google Play Store. Direct manipulation of this object via UI or API is disallowed.
   */
  channel?: AttachedItemChannel;
}

export type AsyncJobResultError = { [key: string]: any };

export type AsyncJobResultContent = { [key: string]: any };

export type AsyncJobResult = {
  content?: AsyncJobResultContent;
  content_list?: unknown[];
  error?: AsyncJobResultError;
};

export type AsyncJobRequest = {
  resource: string;
  action_type: string;
};

export type AsyncJobStatus =
  (typeof AsyncJobStatus)[keyof typeof AsyncJobStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AsyncJobStatus = {
  in_progress: "in_progress",
  completed: "completed",
  failed: "failed",
} as const;

export interface AsyncJob {
  id: string;
  status: AsyncJobStatus;
  created_at: number;
  completed_at?: number;
  request: AsyncJobRequest;
  result?: AsyncJobResult;
}

export type ApplyOn = (typeof ApplyOn)[keyof typeof ApplyOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplyOn = {
  invoice_amount: "invoice_amount",
  specific_item_price: "specific_item_price",
} as const;

export type ApiVersion = (typeof ApiVersion)[keyof typeof ApiVersion];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiVersion = {
  v1: "v1",
  v2: "v2",
} as const;

export type AmendmentAmendmentContentsItemEntityType =
  (typeof AmendmentAmendmentContentsItemEntityType)[keyof typeof AmendmentAmendmentContentsItemEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AmendmentAmendmentContentsItemEntityType = {
  customer: "customer",
  subscription: "subscription",
  invoice: "invoice",
  quote: "quote",
  credit_note: "credit_note",
  transaction: "transaction",
  plan: "plan",
  addon: "addon",
  coupon: "coupon",
  order: "order",
  item_family: "item_family",
  item: "item",
  item_price: "item_price",
  plan_item: "plan_item",
  addon_item: "addon_item",
  charge_item: "charge_item",
  plan_price: "plan_price",
  addon_price: "addon_price",
  charge_price: "charge_price",
  differential_price: "differential_price",
  attached_item: "attached_item",
  feature: "feature",
  subscription_entitlement: "subscription_entitlement",
  item_entitlement: "item_entitlement",
  business_entity: "business_entity",
  product: "product",
  variant: "variant",
} as const;

export type AmendmentAmendmentContentsItemAction =
  (typeof AmendmentAmendmentContentsItemAction)[keyof typeof AmendmentAmendmentContentsItemAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AmendmentAmendmentContentsItemAction = {
  added: "added",
  removed: "removed",
  modified: "modified",
} as const;

export type AmendmentAmendmentContentsItem = {
  id: string;
  subscription_amendment_id: string;
  action: AmendmentAmendmentContentsItemAction;
  entity_id?: string;
  entity_type: AmendmentAmendmentContentsItemEntityType;
  field: string;
  old_value?: string;
  new_value?: string;
  created_at: number;
  updated_at?: number;
};

export type AmendmentSource =
  (typeof AmendmentSource)[keyof typeof AmendmentSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AmendmentSource = {
  admin_console: "admin_console",
  api: "api",
  scheduled_job: "scheduled_job",
  hosted_page: "hosted_page",
  portal: "portal",
  system: "system",
  none: "none",
  js_api: "js_api",
  migration: "migration",
  bulk_operation: "bulk_operation",
  external_service: "external_service",
} as const;

export type AmendmentStatus =
  (typeof AmendmentStatus)[keyof typeof AmendmentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AmendmentStatus = {
  executed: "executed",
  scheduled: "scheduled",
  canceled: "canceled",
} as const;

export type AmendmentType = (typeof AmendmentType)[keyof typeof AmendmentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AmendmentType = {
  subscription_changed: "subscription_changed",
  subscription_created: "subscription_created",
  subscription_cancelled: "subscription_cancelled",
  subscription_reactivated_with_backdating:
    "subscription_reactivated_with_backdating",
  subscription_activated_with_backdating:
    "subscription_activated_with_backdating",
  subscription_created_with_backdating: "subscription_created_with_backdating",
  subscription_resumption_scheduled: "subscription_resumption_scheduled",
  subscription_scheduled_resumption_removed:
    "subscription_scheduled_resumption_removed",
  subscription_canceled_with_backdating:
    "subscription_canceled_with_backdating",
  subscription_changed_with_backdating: "subscription_changed_with_backdating",
  subscription_changes_scheduled: "subscription_changes_scheduled",
  subscription_cancellation_scheduled: "subscription_cancellation_scheduled",
  subscription_pause_scheduled: "subscription_pause_scheduled",
  subscription_scheduled_changes_removed:
    "subscription_scheduled_changes_removed",
  subscription_scheduled_cancellation_removed:
    "subscription_scheduled_cancellation_removed",
  subscription_scheduled_pause_removed: "subscription_scheduled_pause_removed",
  subscription_reactivated: "subscription_reactivated",
} as const;

export interface Amendment {
  id: string;
  subscription_id: string;
  event_id: string;
  type: AmendmentType;
  status: AmendmentStatus;
  sequence_number: number;
  created_at: number;
  updated_at?: number;
  effective_at: number;
  source: AmendmentSource;
  user?: string;
  api_key_name?: string;
  amendment_contents?: AmendmentAmendmentContentsItem[];
}

/**
 * The advance charges occur on specific dates. For each date, \[a fixed number of billing cycles\](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule_terms_to_charge) is charged for. There can be up to 5 dates configured.

 */
export type AdvanceInvoiceScheduleSpecificDatesSchedule = {
  /** The number of billing cycles to charge for, on the date specified. Applicable only when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is specific_dates.
   */
  terms_to_charge?: number;
  /** The unique id of the member of the advance_invoice_schedule array which corresponds to the specific_dates_schedule that you intend to modify. Only applicable when [`schedule_type`](advance_invoice_schedules#advance_invoice_schedule_schedule_type) is `specific_dates`.
   */
  date?: number;
  /** The date when this advance invoicing schedule was created.
   */
  created_at: number;
};

/**
 * Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.

 */
export type AdvanceInvoiceScheduleFixedIntervalScheduleEndScheduleOn =
  (typeof AdvanceInvoiceScheduleFixedIntervalScheduleEndScheduleOn)[keyof typeof AdvanceInvoiceScheduleFixedIntervalScheduleEndScheduleOn];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceScheduleFixedIntervalScheduleEndScheduleOn = {
  after_number_of_intervals: "after_number_of_intervals",
  specific_date: "specific_date",
  subscription_end: "subscription_end",
} as const;

/**
 * When the \`schedule_type\` is \`fixed_intervals\`, this object gives further details of the schedule.

 */
export type AdvanceInvoiceScheduleFixedIntervalSchedule = {
  /** Specifies when the schedule should end. \* after_number_of_intervals - Advance invoices are generated a `specified number of times` \* subscription_end - Advance invoices are generated for as long as the subscription is active. \* specific_date - End the advance invoicing schedule on a `specific date`.
   */
  end_schedule_on?: AdvanceInvoiceScheduleFixedIntervalScheduleEndScheduleOn;
  /** The number of advance invoices to generate. The schedule is created such that the total number of billing cycles in the schedule does not exceed the [`remaining_billing_cycles`](subscriptions#subscription_remaining_billing_cycles) of the subscription. This parameter is applicable only when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `after_number_of_intervals`
   */
  number_of_occurrences?: number;
  /** The number of days before each interval that advance invoices are generated.
   */
  days_before_renewal?: number;
  /** The date when the schedule should end. Advance invoices are not generated beyond this date. It must be at least 1 day before the start of the last billing cycle of the subscription and also within 5 years from the current date. This parameter is only applicable when [`fixed_interval_schedule[end_schedule_on]`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_end_schedule_on) = `specific_date`.
   */
  end_date?: number;
  /** The date when this advance invoicing schedule was created.
   */
  created_at: number;
  /** The number of billing cycles in one interval.
   */
  terms_to_charge?: number;
};

/**
 * The type of advance invoice or advance invoicing schedule. \* specific_dates - The advance charges occur on specific dates. For each date, [a fixed number of billing cycles](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule_terms_to_charge) is charged for. There can be up to 5 dates configured. \* fixed_intervals - The advance charges occur at [fixed intervals of time](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_terms_to_charge).

 */
export type AdvanceInvoiceScheduleScheduleType =
  (typeof AdvanceInvoiceScheduleScheduleType)[keyof typeof AdvanceInvoiceScheduleScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdvanceInvoiceScheduleScheduleType = {
  fixed_intervals: "fixed_intervals",
  specific_dates: "specific_dates",
} as const;

/**
 * The invoice for a subscription in Chargebee is generated at the time of subscription renewal. Invoices can also be [generated in advance](https://www.chargebee.com/docs/advance-invoices.html) for an upcoming renewal or set of renewals. With Advance Invoicing Schedules, you can set up a plan for when such advance invoices are generated for the lifetime of the subscription. This helps you:

* Set up a contract with your customers so that they can be notified of their payment schedules in advance.
* Allow customers who make offline payments to be alerted about their upcoming dues well ahead of actual subscription renewals.
* Prevent post-renewal unpaid usage of your services by customers.

Advance invoices can be scheduled in two ways:  

#### Specific Dates Schedule

Advance invoices for a subscription can be scheduled to be generated on specific [dates](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule_date) in the future. You must specify the [number of billing cycles](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule_terms_to_charge) to be invoiced on each date. A maximum of 5 dates can be specified.  

#### Fixed Interval Schedule

Advance invoices can be scheduled to be generated at fixed intervals of time, where each interval spans the same number of billing cycles of the subscription. The invoice for each interval is generated a specified number of days ([`days_before_interval`](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_days_before_renewal)) before the start of the interval. You can configure the schedule to end on a certain date or after a specified number of advance invoices have been generated.

The start date of the first interval depends on the number of days remaining from current time till the next renewal of the subscription. If this is more than `days_before_interval`, the interval begins at the next renewal. On the other hand, if the number of days remaining before the next renewal is less than `days_before_interval`, the first interval begins at the renewal following the next.

 */
export interface AdvanceInvoiceSchedule {
  /** System-generated and immutable unique Id for the `advance_invoice_schedule`.
   */
  id: string;
  /** The type of advance invoice or advance invoicing schedule. \* specific_dates - The advance charges occur on specific dates. For each date, [a fixed number of billing cycles](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule_terms_to_charge) is charged for. There can be up to 5 dates configured. \* fixed_intervals - The advance charges occur at [fixed intervals of time](advance_invoice_schedules#advance_invoice_schedule_fixed_interval_schedule_terms_to_charge).
   */
  schedule_type?: AdvanceInvoiceScheduleScheduleType;
  /** When the \`schedule_type\` is \`fixed_intervals\`, this object gives further details of the schedule.
   */
  fixed_interval_schedule?: AdvanceInvoiceScheduleFixedIntervalSchedule;
  /** The advance charges occur on specific dates. For each date, \[a fixed number of billing cycles\](advance_invoice_schedules#advance_invoice_schedule_specific_dates_schedule_terms_to_charge) is charged for. There can be up to 5 dates configured.
   */
  specific_dates_schedule?: AdvanceInvoiceScheduleSpecificDatesSchedule;
}

/**
 * The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated. \* invalid - Address is invalid. \* valid - Address was validated successfully.

 */
export type AddressValidationStatus =
  (typeof AddressValidationStatus)[keyof typeof AddressValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddressValidationStatus = {
  not_validated: "not_validated",
  valid: "valid",
  partially_valid: "partially_valid",
  invalid: "invalid",
} as const;

/**
 * Subscriptions can have addresses like "Shipping Address" associated with them. This is apart from the billing address as part of credit card information.

 */
export interface Address {
  /** Label to identify the address. This is unique for all the address for a subscription.
   */
  label: string;
  /** First name
   */
  first_name?: string;
  /** Last name
   */
  last_name?: string;
  /** Email
   */
  email?: string;
  /** Company name
   */
  company?: string;
  /** Phone number
   */
  phone?: string;
  /** Address line 1
   */
  addr?: string;
  /** Address line 2
   */
  extended_addr?: string;
  /** Address line 3
   */
  extended_addr2?: string;
  /** Name of the city
   */
  city?: string;
  /** The [ISO 3166-2 state/province code](https://www.iso.org/obp/ui/#search) without the country prefix. Currently supported for USA, Canada and India. For instance, for Arizona (USA), set `state_code` as `AZ` (not `US-AZ`). For Tamil Nadu (India), set as `TN` (not `IN-TN`). For British Columbia (Canada), set as `BC` (not `CA-BC`).
   */
  state_code?: string;
  /** State or Province
   */
  state?: string;
  /** The billing address country of the customer. Must be one of [ISO 3166 alpha-2 country code](https://www.iso.org/iso-3166-country-codes.html).   

**Note** : If you enter an invalid country code, the system will return an error.  

**Brexit**


If you have enabled [EU VAT](https://www.chargebee.com/docs/eu-vat.html) in 2021 or later, or have [manually enable](https://www.chargebee.com/docs/brexit.html#what-needs-to-be-done-in-chargebee) the Brexit configuration, then `XI` (the code for **United Kingdom -- Northern Ireland**) is available as an option.
 */
  country?: string;
  /** Zip or postal code. The number of characters is validated according to the rules [specified here](https://chromium-i18n.appspot.com/ssl-address).
   */
  zip?: string;
  /** The address verification status. \* partially_valid - The address is valid for taxability but has not been validated for shipping. \* not_validated - Address is not yet validated. \* invalid - Address is invalid. \* valid - Address was validated successfully.
   */
  validation_status?: AddressValidationStatus;
  /** A unique and immutable identifier for the subscription. If not provided, it is autogenerated.
   */
  subscription_id: string;
}

export type Action = (typeof Action)[keyof typeof Action];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Action = {
  upsert: "upsert",
  remove: "remove",
} as const;

export type AccountType = (typeof AccountType)[keyof typeof AccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountType = {
  checking: "checking",
  savings: "savings",
  business_checking: "business_checking",
  current: "current",
} as const;

export type AccountReceivablesHandling =
  (typeof AccountReceivablesHandling)[keyof typeof AccountReceivablesHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountReceivablesHandling = {
  no_action: "no_action",
  schedule_payment_collection: "schedule_payment_collection",
  write_off: "write_off",
} as const;

export type AccountReceivableHandling =
  (typeof AccountReceivableHandling)[keyof typeof AccountReceivableHandling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountReceivableHandling = {
  no_action: "no_action",
  schedule_payment_collection: "schedule_payment_collection",
  write_off: "write_off",
} as const;

export type AccountHolderType =
  (typeof AccountHolderType)[keyof typeof AccountHolderType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountHolderType = {
  individual: "individual",
  company: "company",
} as const;

/**
 * \* \`db_connection_failure\` - Returned when db connection fails. \* \`site_read_only_mode\` - Returned when your site is temporarily unavailable for write operations due to a scheduled maintenance. \* \`site_not_ready\` - Returned when your site is temporarily unavailable due to a scheduled maintenance. \* \`internal_temporary_error\` - Returned when temporary occured in Chargebee side. The request can be re-tried, with exponential backoff in case of repeat failures.

 */
export type N503ApiErrorCode =
  (typeof N503ApiErrorCode)[keyof typeof N503ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N503ApiErrorCode = {
  db_connection_failure: "db_connection_failure",
  site_read_only_mode: "site_read_only_mode",
  site_not_ready: "site_not_ready",
  internal_temporary_error: "internal_temporary_error",
} as const;

export type N503Type = (typeof N503Type)[keyof typeof N503Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N503Type = {
  invalid_request: "invalid_request",
  operation_failed: "operation_failed",
} as const;

export interface N503 {
  message: string;
  param?: string;
  type: N503Type;
  /** \* \`db_connection_failure\` - Returned when db connection fails. \* \`site_read_only_mode\` - Returned when your site is temporarily unavailable for write operations due to a scheduled maintenance. \* \`site_not_ready\` - Returned when your site is temporarily unavailable due to a scheduled maintenance. \* \`internal_temporary_error\` - Returned when temporary occured in Chargebee side. The request can be re-tried, with exponential backoff in case of repeat failures.
   */
  api_error_code: N503ApiErrorCode;
}

/**
 * \* \`internal_error\` - Returned when the request parameters were right but the operation couldn't be completed due to a bug in Chargebee side.

 */
export type N500ApiErrorCode =
  (typeof N500ApiErrorCode)[keyof typeof N500ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N500ApiErrorCode = {
  internal_error: "internal_error",
} as const;

export type N500Type = (typeof N500Type)[keyof typeof N500Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N500Type = {
  operation_failed: "operation_failed",
} as const;

export interface N500 {
  message: string;
  param?: string;
  type: N500Type;
  /** \* \`internal_error\` - Returned when the request parameters were right but the operation couldn't be completed due to a bug in Chargebee side.
   */
  api_error_code: N500ApiErrorCode;
}

/**
 * \* \`third_party_api_request_limit_exceeded\` - Returned when your request is blocked temporarily at a third-party service, due to the request count exceeding their acceptable limits. \* \`api_request_limit_exceeded\` - Returned when requests have been blocked temporarily due to request count exceeding acceptable limits. \* \`lock_timeout\` - Returned when there are multiple concurrent requests to the same resource.

 */
export type N429ApiErrorCode =
  (typeof N429ApiErrorCode)[keyof typeof N429ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N429ApiErrorCode = {
  third_party_api_request_limit_exceeded:
    "third_party_api_request_limit_exceeded",
  api_request_limit_exceeded: "api_request_limit_exceeded",
  lock_timeout: "lock_timeout",
} as const;

export type N429Type = (typeof N429Type)[keyof typeof N429Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N429Type = {
  operation_failed: "operation_failed",
} as const;

export interface N429 {
  message: string;
  param?: string;
  type: N429Type;
  /** \* \`third_party_api_request_limit_exceeded\` - Returned when your request is blocked temporarily at a third-party service, due to the request count exceeding their acceptable limits. \* \`api_request_limit_exceeded\` - Returned when requests have been blocked temporarily due to request count exceeding acceptable limits. \* \`lock_timeout\` - Returned when there are multiple concurrent requests to the same resource.
   */
  api_error_code: N429ApiErrorCode;
}

/**
 * \* \`unable_to_process_request\` - Returned when the HTTP request body contains a well-formed, but semantically erroneous payload. For example this error is returned when a client attempts to reuse an idempotency key with a different request payload.

 */
export type N422ApiErrorCode =
  (typeof N422ApiErrorCode)[keyof typeof N422ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N422ApiErrorCode = {
  unable_to_process_request: "unable_to_process_request",
} as const;

export type N422Type = (typeof N422Type)[keyof typeof N422Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N422Type = {
  invalid_request: "invalid_request",
} as const;

export interface N422 {
  message: string;
  param?: string;
  type: N422Type;
  /** \* \`unable_to_process_request\` - Returned when the HTTP request body contains a well-formed, but semantically erroneous payload. For example this error is returned when a client attempts to reuse an idempotency key with a different request payload.
   */
  api_error_code: N422ApiErrorCode;
}

/**
 * \* \`invalid_state_for_request\` - Returned when the requested operation is not allowed for current state of the resource. This error will occur if the state of the resource has not been checked for the validity of the request. For example this error is returned when we try to schedule subscription changes at 'end of term' for canceled subscriptions.

 */
export type N409ApiErrorCode =
  (typeof N409ApiErrorCode)[keyof typeof N409ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N409ApiErrorCode = {
  invalid_state_for_request: "invalid_state_for_request",
} as const;

export type N409Type = (typeof N409Type)[keyof typeof N409Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N409Type = {
  invalid_request: "invalid_request",
} as const;

export interface N409 {
  message: string;
  param?: string;
  type: N409Type;
  /** \* \`invalid_state_for_request\` - Returned when the requested operation is not allowed for current state of the resource. This error will occur if the state of the resource has not been checked for the validity of the request. For example this error is returned when we try to schedule subscription changes at 'end of term' for canceled subscriptions.
   */
  api_error_code: N409ApiErrorCode;
}

/**
 * \* \`http_method_not_supported\` - Returned when the 'http method', specified in the request, is not allowed for this URL. It should not occur if you are using one of the standard client library.

 */
export type N405ApiErrorCode =
  (typeof N405ApiErrorCode)[keyof typeof N405ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N405ApiErrorCode = {
  http_method_not_supported: "http_method_not_supported",
} as const;

export type N405Type = (typeof N405Type)[keyof typeof N405Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N405Type = {
  invalid_request: "invalid_request",
} as const;

export interface N405 {
  message: string;
  param?: string;
  type: N405Type;
  /** \* \`http_method_not_supported\` - Returned when the 'http method', specified in the request, is not allowed for this URL. It should not occur if you are using one of the standard client library.
   */
  api_error_code: N405ApiErrorCode;
}

/**
 * \* \`resource_not_found\` - Returned when any of resource(s) referred in the request is not found. \* \`site_not_found\` - Returned when the site is not found.

 */
export type N404ApiErrorCode =
  (typeof N404ApiErrorCode)[keyof typeof N404ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N404ApiErrorCode = {
  resource_not_found: "resource_not_found",
  site_not_found: "site_not_found",
} as const;

export type N404Type = (typeof N404Type)[keyof typeof N404Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N404Type = {
  invalid_request: "invalid_request",
  untyped: "untyped",
} as const;

export interface N404 {
  message: string;
  param?: string;
  type: N404Type;
  /** \* \`resource_not_found\` - Returned when any of resource(s) referred in the request is not found. \* \`site_not_found\` - Returned when the site is not found.
   */
  api_error_code: N404ApiErrorCode;
}

/**
 * \* \`request_blocked\` - Returned when request is blocked for your site. The blocking could be only for a specific set of operation(s) . The reason would be provided as part of the message. You would have to contact support for additional details. \* \`api_authorization_failed\` - Returned when the API key does not have sufficient privileges to perform the particular operation.

 */
export type N403ApiErrorCode =
  (typeof N403ApiErrorCode)[keyof typeof N403ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N403ApiErrorCode = {
  request_blocked: "request_blocked",
  api_authorization_failed: "api_authorization_failed",
} as const;

export type N403Type = (typeof N403Type)[keyof typeof N403Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N403Type = {
  untyped: "untyped",
  operation_failed: "operation_failed",
} as const;

export interface N403 {
  message: string;
  param?: string;
  type: N403Type;
  /** \* \`request_blocked\` - Returned when request is blocked for your site. The blocking could be only for a specific set of operation(s) . The reason would be provided as part of the message. You would have to contact support for additional details. \* \`api_authorization_failed\` - Returned when the API key does not have sufficient privileges to perform the particular operation.
   */
  api_error_code: N403ApiErrorCode;
}

/**
 * \* \`api_authentication_failed\` - Returned when authentication failed for the request. The possible reasons could be the api key is invalid or authentication header is not present in the request or the header's format is invalid. \* \`basic_authentication_failed\` - Returned when authentication failed for the request. The possible reasons could be that one or both of the username and password are invalid

 */
export type N401ApiErrorCode =
  (typeof N401ApiErrorCode)[keyof typeof N401ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N401ApiErrorCode = {
  api_authentication_failed: "api_authentication_failed",
  basic_authentication_failed: "basic_authentication_failed",
} as const;

export type N401Type = (typeof N401Type)[keyof typeof N401Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N401Type = {
  untyped: "untyped",
} as const;

export interface N401 {
  message: string;
  param?: string;
  type: N401Type;
  /** \* \`api_authentication_failed\` - Returned when authentication failed for the request. The possible reasons could be the api key is invalid or authentication header is not present in the request or the header's format is invalid. \* \`basic_authentication_failed\` - Returned when authentication failed for the request. The possible reasons could be that one or both of the username and password are invalid
   */
  api_error_code: N401ApiErrorCode;
}

/**
 * \* \`payment_intent_invalid_amount\` - Returned when processing amount is different from payment intent amountFor example if payment intent which is passed has authorized 10$ and if the charges initiated is for 12$. \* \`configuration_incompatible\` - Returned when the request is not compatible with the configuration for the site or the configuration is incomplete. \* \`payment_intent_invalid\` - Returned when validation or verification fails for provided payment intent.For example if payment intent which is passed is in not consumable state. \* \`invalid_request\` - Returned when the request has incompatible values or does not match the API specification. As it is a generic error, handling this error is recommended only in combination with param attribute. \* \`payment_method_verification_failed\` - Returned when validation or verification fails for the provided payment method. For example if the payment method is card, this will include all card parameter validation errors and also verification failures from the gateway. \* \`payment_processing_failed\` - Returned when the payment collection fails. \* \`resource_limit_exhausted\` - Returned when any limit constraint is violated by the request. For example this error is thrown when the coupon provided has already expired or its maximum redemption count has been reached. \* \`duplicate_entry\` - Returned when the request provides a duplicate value for an attribute that is specified as unique for that site. For example in 'create subscription api' if you are passing the subscription id then this error will be thrown if a subscription exists in site with the same id. \* \`param_wrong_value\` - Returned when the value does not meet the required specification for the parameter. For example, wrong email format. It is strongly recommended to do the validation at your end before calling Chargebee's API (other than specific cases like VAT number validation). \* \`payment_method_not_present\` - Returned when the request requires payment collection but the 'payment method' details (such as card) is not present for the customer. This error will not occur if auto-collection is disabled for the customer. \* \`resource_limit_exceeded\` \* \`payment_gateway_currency_incompatible\` - Returned when the payment gateway configured is incompatible with the transactional currency. This error will not occur if auto-collection is disabled for the customer.

 */
export type N400ApiErrorCode =
  (typeof N400ApiErrorCode)[keyof typeof N400ApiErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N400ApiErrorCode = {
  payment_intent_invalid_amount: "payment_intent_invalid_amount",
  configuration_incompatible: "configuration_incompatible",
  payment_intent_invalid: "payment_intent_invalid",
  invalid_request: "invalid_request",
  payment_method_verification_failed: "payment_method_verification_failed",
  payment_processing_failed: "payment_processing_failed",
  resource_limit_exhausted: "resource_limit_exhausted",
  duplicate_entry: "duplicate_entry",
  param_wrong_value: "param_wrong_value",
  payment_method_not_present: "payment_method_not_present",
  resource_limit_exceeded: "resource_limit_exceeded",
  payment_gateway_currency_incompatible:
    "payment_gateway_currency_incompatible",
} as const;

export type N400Type = (typeof N400Type)[keyof typeof N400Type];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const N400Type = {
  invalid_request: "invalid_request",
  untyped: "untyped",
  payment: "payment",
} as const;

export interface N400 {
  message: string;
  param?: string;
  type: N400Type;
  /** \* \`payment_intent_invalid_amount\` - Returned when processing amount is different from payment intent amountFor example if payment intent which is passed has authorized 10$ and if the charges initiated is for 12$. \* \`configuration_incompatible\` - Returned when the request is not compatible with the configuration for the site or the configuration is incomplete. \* \`payment_intent_invalid\` - Returned when validation or verification fails for provided payment intent.For example if payment intent which is passed is in not consumable state. \* \`invalid_request\` - Returned when the request has incompatible values or does not match the API specification. As it is a generic error, handling this error is recommended only in combination with param attribute. \* \`payment_method_verification_failed\` - Returned when validation or verification fails for the provided payment method. For example if the payment method is card, this will include all card parameter validation errors and also verification failures from the gateway. \* \`payment_processing_failed\` - Returned when the payment collection fails. \* \`resource_limit_exhausted\` - Returned when any limit constraint is violated by the request. For example this error is thrown when the coupon provided has already expired or its maximum redemption count has been reached. \* \`duplicate_entry\` - Returned when the request provides a duplicate value for an attribute that is specified as unique for that site. For example in 'create subscription api' if you are passing the subscription id then this error will be thrown if a subscription exists in site with the same id. \* \`param_wrong_value\` - Returned when the value does not meet the required specification for the parameter. For example, wrong email format. It is strongly recommended to do the validation at your end before calling Chargebee's API (other than specific cases like VAT number validation). \* \`payment_method_not_present\` - Returned when the request requires payment collection but the 'payment method' details (such as card) is not present for the customer. This error will not occur if auto-collection is disabled for the customer. \* \`resource_limit_exceeded\` \* \`payment_gateway_currency_incompatible\` - Returned when the payment gateway configured is incompatible with the transactional currency. This error will not occur if auto-collection is disabled for the customer.
   */
  api_error_code: N400ApiErrorCode;
}
