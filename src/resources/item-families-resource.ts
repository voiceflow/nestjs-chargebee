/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  DeleteAnItemFamilyHeaders,
  DeleteAnItemFamily200,
  ListItemFamiliesParams,
  ListItemFamiliesHeaders,
  ListItemFamilies200,
  CreateAnItemFamilyHeaders,
  CreateAnItemFamilyBody,
  CreateAnItemFamily200,
  RetrieveAnItemFamilyHeaders,
  RetrieveAnItemFamily200,
  UpdateAnItemFamilyHeaders,
  UpdateAnItemFamilyBody,
  UpdateAnItemFamily200,
} from "./chargebeeAPI.schemas";

export class ChargebeeItemFamiliesResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Deletes an item family, marking its `status` as `deleted`. This is not allowed if there are `active` items under the item family. Once deleted, the `id` and `name` of the item family can be reused to create a new item family.

 * @summary Delete an item family
 */
  public async deleteAnItemFamily(
    itemFamilyId: string,
    headers?: DeleteAnItemFamilyHeaders,
  ): Promise<AxiosResponse<DeleteAnItemFamily200>> {
    return this.axios.post(`/item_families/${itemFamilyId}/delete`, {
      headers,
    });
  }

  /**
 * Returns a list of item families satisfying **all** the conditions specified in the filter parameters below. The list is sorted by date of creation, in descending order.

 * @summary List item families
 */
  public async listItemFamilies(
    params?: ListItemFamiliesParams,
    headers?: ListItemFamiliesHeaders,
  ): Promise<AxiosResponse<ListItemFamilies200>> {
    return this.axios.get(`/item_families`, {
      params,
      headers,
    });
  }

  /**
 * This endpoint creates an item family for your product line or service.

 * @summary Create an item family
 */
  public async createAnItemFamily(
    createAnItemFamilyBody: CreateAnItemFamilyBody,
    headers?: CreateAnItemFamilyHeaders,
  ): Promise<AxiosResponse<CreateAnItemFamily200>> {
    return this.axios.post(`/item_families`, {
      headers,
      json: createAnItemFamilyBody,
    });
  }

  /**
 * This endpoint retrieves an item family based on the item family id.

 * @summary Retrieve an item family
 */
  public async retrieveAnItemFamily(
    itemFamilyId: string,
    headers?: RetrieveAnItemFamilyHeaders,
  ): Promise<AxiosResponse<RetrieveAnItemFamily200>> {
    return this.axios.get(`/item_families/${itemFamilyId}`, {
      headers,
    });
  }

  /**
 * This endpoint updates the name and/or description of the item family.

 * @summary Update an item family
 */
  public async updateAnItemFamily(
    itemFamilyId: string,
    updateAnItemFamilyBody: UpdateAnItemFamilyBody,
    headers?: UpdateAnItemFamilyHeaders,
  ): Promise<AxiosResponse<UpdateAnItemFamily200>> {
    return this.axios.post(`/item_families/${itemFamilyId}`, {
      headers,
      json: updateAnItemFamilyBody,
    });
  }
}
