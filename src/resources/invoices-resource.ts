/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  DeleteLineItemsHeaders,
  DeleteLineItemsBody,
  DeleteLineItems200,
  RemoveCreditNoteFromAnInvoiceHeaders,
  RemoveCreditNoteFromAnInvoiceBody,
  RemoveCreditNoteFromAnInvoice200,
  RemovePaymentFromAnInvoiceHeaders,
  RemovePaymentFromAnInvoiceBody,
  RemovePaymentFromAnInvoice200,
  StopDunningForInvoiceHeaders,
  StopDunningForInvoiceBody,
  StopDunningForInvoice200,
  ApplyPaymentsForAnInvoiceHeaders,
  ApplyPaymentsForAnInvoiceBody,
  ApplyPaymentsForAnInvoice200,
  VoidAnInvoiceHeaders,
  VoidAnInvoiceBody,
  VoidAnInvoice200,
  AddOneTimeChargeToAPendingInvoiceHeaders,
  AddOneTimeChargeToAPendingInvoiceBody,
  AddOneTimeChargeToAPendingInvoice200,
  SendAnEinvoiceForInvoicesHeaders,
  SendAnEinvoiceForInvoices200,
  WriteOffAnInvoiceHeaders,
  WriteOffAnInvoiceBody,
  WriteOffAnInvoice200,
  AddAChargeItemToAPendingInvoiceHeaders,
  AddAChargeItemToAPendingInvoiceBody,
  AddAChargeItemToAPendingInvoice200,
  ListInvoicesParams,
  ListInvoicesHeaders,
  ListInvoices200,
  CloseAPendingInvoiceHeaders,
  CloseAPendingInvoiceBody,
  CloseAPendingInvoice200,
  ApplyCreditsForAnInvoiceHeaders,
  ApplyCreditsForAnInvoiceBody,
  ApplyCreditsForAnInvoice200,
  RetrieveAnInvoiceHeaders,
  RetrieveAnInvoice200,
  CreateInvoiceForItemsAndOneTimeChargesHeaders,
  CreateInvoiceForItemsAndOneTimeChargesBody,
  CreateInvoiceForItemsAndOneTimeCharges200,
  UpdateInvoiceDetailsHeaders,
  UpdateInvoiceDetailsBody,
  UpdateInvoiceDetails200,
  RecordAnInvoicePaymentHeaders,
  RecordAnInvoicePaymentBody,
  RecordAnInvoicePayment200,
  DeleteAnInvoiceHeaders,
  DeleteAnInvoiceBody,
  DeleteAnInvoice200,
  ImportInvoiceHeaders,
  ImportInvoiceBody,
  ImportInvoice200,
  RecordTaxWithheldForAnInvoiceHeaders,
  RecordTaxWithheldForAnInvoiceBody,
  RecordTaxWithheldForAnInvoice200,
  ResendFailedEinvoiceInInvoicesHeaders,
  ResendFailedEinvoiceInInvoices200,
  RemoveTaxWithheldForAnInvoiceHeaders,
  RemoveTaxWithheldForAnInvoiceBody,
  RemoveTaxWithheldForAnInvoice200,
  ListPaymentReferenceNumbersParams,
  ListPaymentReferenceNumbersHeaders,
  ListPaymentReferenceNumbers200,
  CollectPaymentForAnInvoiceHeaders,
  CollectPaymentForAnInvoiceBody,
  CollectPaymentForAnInvoice200,
  SyncUsagesHeaders,
  SyncUsages200,
  RefundAnInvoiceHeaders,
  RefundAnInvoiceBody,
  RefundAnInvoice200,
  RecordRefundForAnInvoiceHeaders,
  RecordRefundForAnInvoiceBody,
  RecordRefundForAnInvoice200,
  RetrieveInvoiceAsPdfHeaders,
  RetrieveInvoiceAsPdfBody,
  RetrieveInvoiceAsPdf200,
  DownloadEInvoiceHeaders,
  DownloadEInvoice200,
  ListPaymentsForAnInvoiceParams,
  ListPaymentsForAnInvoiceHeaders,
  ListPaymentsForAnInvoice200,
  ListVouchersForAnInvoiceParams,
  ListVouchersForAnInvoiceHeaders,
  ListVouchersForAnInvoice200,
} from "./chargebeeAPI.schemas";

export class ChargebeeInvoicesResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * This endpoint is used to delete line items from "Pending" invoice.

 * @summary Delete Line Items
 */
  public async deleteLineItems(
    invoiceId: string,
    deleteLineItemsBody: DeleteLineItemsBody,
    headers?: DeleteLineItemsHeaders,
  ): Promise<AxiosResponse<DeleteLineItems200>> {
    return this.axios.post(`/invoices/${invoiceId}/delete_line_items`, {
      headers,
      json: deleteLineItemsBody,
    });
  }

  /**
 * This API removes a credit note attached to an invoice. When you remove a credit note from an invoice, the invoice status returns to `not_paid`.

**Note:** You cannot remove a credit note from an invoice if it has already been refunded.

 * @summary Remove credit note from an invoice
 */
  public async removeCreditNoteFromAnInvoice(
    invoiceId: string,
    removeCreditNoteFromAnInvoiceBody: RemoveCreditNoteFromAnInvoiceBody,
    headers?: RemoveCreditNoteFromAnInvoiceHeaders,
  ): Promise<AxiosResponse<RemoveCreditNoteFromAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/remove_credit_note`, {
      headers,
      json: removeCreditNoteFromAnInvoiceBody,
    });
  }

  /**
 * This API [removes payments](https://www.chargebee.com/docs/2.0/invoice-operations.html#actions-for-paid-invoices_remove-payment) applied to an invoice. Once the applied payment is removed, the invoice status returns to `not_paid` or `payment_due`. The removed payment is then added to the customer's excess payment balance.

 * @summary Remove payment from an invoice
 */
  public async removePaymentFromAnInvoice(
    invoiceId: string,
    removePaymentFromAnInvoiceBody: RemovePaymentFromAnInvoiceBody,
    headers?: RemovePaymentFromAnInvoiceHeaders,
  ): Promise<AxiosResponse<RemovePaymentFromAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/remove_payment`, {
      headers,
      json: removePaymentFromAnInvoiceBody,
    });
  }

  /**
 * This API is used to stop dunning for "Payment Due" invoices that have been enabled for Auto Collection. When dunning is stopped, the status of the invoice will be changed to "Not Paid".

 * @summary Stop dunning for invoice
 */
  public async stopDunningForInvoice(
    invoiceId: string,
    stopDunningForInvoiceBody: StopDunningForInvoiceBody,
    headers?: StopDunningForInvoiceHeaders,
  ): Promise<AxiosResponse<StopDunningForInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/stop_dunning`, {
      headers,
      json: stopDunningForInvoiceBody,
    });
  }

  /**
 * The API applies [excess payments](https://apidocs.chargebee.com/docs/api/customers#customer_excess_payments) to an invoice. Once an excess payment is applied, the [invoice.amount_due](invoices#invoice_amount_due) is recalculated. The invoice `status` changes to either `paid` or `payment_due` depending on how much excess payment is applied to the invoice amount.

For example, if you have an excess payment of $25.00, and the invoice to which you want to apply this excess payment has a balance of $50. Once you apply this excess payment, the invoice status changes to `paid`, and [invoice.amount_due](invoices#invoice_amount_due) is adjusted to $25.00.

 * @summary Apply payments for an invoice
 */
  public async applyPaymentsForAnInvoice(
    invoiceId: string,
    applyPaymentsForAnInvoiceBody: ApplyPaymentsForAnInvoiceBody,
    headers?: ApplyPaymentsForAnInvoiceHeaders,
  ): Promise<AxiosResponse<ApplyPaymentsForAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/apply_payments`, {
      headers,
      json: applyPaymentsForAnInvoiceBody,
    });
  }

  /**
 * Voids the specified invoice. Any payments must be [removed](/docs/api/invoices?prod_cat_ver=2#remove_payment_from_an_invoice) from the invoice before voiding it.

* Any [promotional credits](/docs/api/promotional_credits?prod_cat_ver=2) or [credit notes](/docs/api/credit_notes?prod_cat_ver=2) applied to the invoice are removed.
* If an invoice for the current term of a subscription is voided and the subscription is changed later with `proration` enabled, no prorated credits are issued.
* Any [usages](/docs/api/usages?prod_cat_ver=2) associated with item prices in the invoice are delinked from the invoice. This is done by clearing the `invoice_id` field of said usages. However, before this is done, a [usage PDF](/docs/api/usages?prod_cat_ver=2#retrieve_usages_for_an_invoice_as_pdf) is generated and saved to the invoice as an [attachment](https://www.chargebee.com/docs/2.0/file-attachment.html).

 * @summary Void an invoice
 */
  public async voidAnInvoice(
    invoiceId: string,
    voidAnInvoiceBody: VoidAnInvoiceBody,
    headers?: VoidAnInvoiceHeaders,
  ): Promise<AxiosResponse<VoidAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/void`, {
      headers,
      json: voidAnInvoiceBody,
    });
  }

  /**
 * Adds a one-time charge to a [pending](https://apidocs.chargebee.com/docs/api/invoices#invoice_status) invoice. A one-time charge is a charge that is added ad hoc to the invoice and does not represent a predefined [item price](https:/apidocs.chargebee.com/docs/api/item_prices). It appears in the invoice as a [line_item](https://apidocs.chargebee.com/docs/api/invoices?prod_cat_ver=2&lang=curl#invoice_line_items) of [entity_type](https://apidocs.chargebee.com/docs/api/invoices?prod_cat_ver=2&lang=curl#invoice_line_items_entity_type) `adhoc`.

 * @summary Add one-time charge to a pending invoice
 */
  public async addOneTimeChargeToAPendingInvoice(
    invoiceId: string,
    addOneTimeChargeToAPendingInvoiceBody: AddOneTimeChargeToAPendingInvoiceBody,
    headers?: AddOneTimeChargeToAPendingInvoiceHeaders,
  ): Promise<AxiosResponse<AddOneTimeChargeToAPendingInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/add_charge`, {
      headers,
      json: addOneTimeChargeToAPendingInvoiceBody,
    });
  }

  /**
 * This endpoint is used to send an e-invoice for invoice.

To support cases like TDS and invoice edits, we need to stop auto e-invoice sending and be able to send e-invoices manually.

This endpoint schedules e-invoices manually. This operation is not allowed when any of the following condition matches:

* If e-invoicing is not enabled at the site and customer level.

* If there is an e-invoice generated already for the invoice.

* If the "**Use automatic e-invoicing**" option is selected.

* If there are no generated e-invoices with the `failed` or `skipped` status.

* If the invoice status is `voided` or `pending`.


 * @summary Send an einvoice for invoices
 */
  public async sendAnEinvoiceForInvoices(
    invoiceId: string,
    headers?: SendAnEinvoiceForInvoicesHeaders,
  ): Promise<AxiosResponse<SendAnEinvoiceForInvoices200>> {
    return this.axios.post(`/invoices/${invoiceId}/send_einvoice`, {
      headers,
    });
  }

  /**
 * This API writes off an Invoice.

 * @summary Write off an invoice
 */
  public async writeOffAnInvoice(
    invoiceId: string,
    writeOffAnInvoiceBody: WriteOffAnInvoiceBody,
    headers?: WriteOffAnInvoiceHeaders,
  ): Promise<AxiosResponse<WriteOffAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/write_off`, {
      headers,
      json: writeOffAnInvoiceBody,
    });
  }

  /**
 * This endpoint is used when [metered billing](https://www.chargebee.com/docs/2.0/metered_billing.html) is enabled and it adds a [charge-item price](./item_prices?prod_cat_ver=2) to a `pending` invoice. To collect the accumulated charges by closing the invoice, call [Close a pending invoice](./invoices?prod_cat_ver=2#close_a_pending_invoice).

 * @summary Add a charge-item to a pending invoice
 */
  public async addAChargeItemToAPendingInvoice(
    invoiceId: string,
    addAChargeItemToAPendingInvoiceBody: AddAChargeItemToAPendingInvoiceBody,
    headers?: AddAChargeItemToAPendingInvoiceHeaders,
  ): Promise<AxiosResponse<AddAChargeItemToAPendingInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/add_charge_item`, {
      headers,
      json: addAChargeItemToAPendingInvoiceBody,
    });
  }

  /**
 * Lists all the Invoices.

 * @summary List invoices
 */
  public async listInvoices(
    params?: ListInvoicesParams,
    headers?: ListInvoicesHeaders,
  ): Promise<AxiosResponse<ListInvoices200>> {
    return this.axios.get(`/invoices`, {
      params,
      headers,
    });
  }

  /**
 * Invoices for a subscription are created with a `pending` `status` when the subscription has `create_pending_invoices` attribute set to `true`. This API call finalizes a `pending` invoice. Any `refundable_credits` and `excess_payments` for the customer are applied to the invoice, and any payment due is collected automatically if `auto_collection` is `on` for the customer.

#### Automation

This operation can be automated by using a [site setting](https://www.chargebee.com/docs/2.0/metered_billing.html#configuring-metered-billing). Moreover, the automation can be overridden at the [customer](/docs/api/customers?prod_cat_ver=2#customer_auto_close_invoices) and [subscription](/docs/api/subscriptions?prod_cat_ver=2#subscription_auto_close_invoices) level.

 * @summary Close a pending invoice
 */
  public async closeAPendingInvoice(
    invoiceId: string,
    closeAPendingInvoiceBody: CloseAPendingInvoiceBody,
    headers?: CloseAPendingInvoiceHeaders,
  ): Promise<AxiosResponse<CloseAPendingInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/close`, {
      headers,
      json: closeAPendingInvoiceBody,
    });
  }

  /**
 * This API applies [available credits](customers#customer_balances) to an invoice. After credits are applied, [invoice.amount_due](invoices#invoice_amount_due) is recalculated. The invoice status changes to either `paid` or `payment_due` depending on how much credit is applied to the invoice amount.

 * @summary Apply credits for an invoice
 */
  public async applyCreditsForAnInvoice(
    invoiceId: string,
    applyCreditsForAnInvoiceBody: ApplyCreditsForAnInvoiceBody,
    headers?: ApplyCreditsForAnInvoiceHeaders,
  ): Promise<AxiosResponse<ApplyCreditsForAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/apply_credits`, {
      headers,
      json: applyCreditsForAnInvoiceBody,
    });
  }

  /**
 * Retrieve the invoice for the specified invoice id.

 * @summary Retrieve an invoice
 */
  public async retrieveAnInvoice(
    invoiceId: string,
    headers?: RetrieveAnInvoiceHeaders,
  ): Promise<AxiosResponse<RetrieveAnInvoice200>> {
    return this.axios.get(`/invoices/${invoiceId}`, {
      headers,
    });
  }

  /**
 * Creates an invoice for [charge-items](./items?prod_cat_ver=2) and [one-time charges](https://www.chargebee.com/docs/2.0/charges.html). The item prices must belong to items of `type` `charge`.

 * @summary Create invoice for items and one-time charges
 */
  public async createInvoiceForItemsAndOneTimeCharges(
    createInvoiceForItemsAndOneTimeChargesBody: CreateInvoiceForItemsAndOneTimeChargesBody,
    headers?: CreateInvoiceForItemsAndOneTimeChargesHeaders,
  ): Promise<AxiosResponse<CreateInvoiceForItemsAndOneTimeCharges200>> {
    return this.axios.post(`/invoices/create_for_charge_items_and_charges`, {
      headers,
      json: createInvoiceForItemsAndOneTimeChargesBody,
    });
  }

  /**
 * This API allows you to update the invoice Billing/Shipping address, VAT and PO number. During this operation if Billing Info (Billing Address, vat_number), Shipping info and PO number are not already present in the system the data will be added. If data is already present, the existing values will be replaced. If info is present in the system, but not passed as part of the request, the info will not be removed from the system.

**Note:** Incase, tax is already applied will now vary due to address change, you cannot update the address. You cannot update the VAT Number if the billing address is not present in the API request.This will update the invoice only, it won't change the corresponding customer/subscription details.

 * @summary Update invoice details
 */
  public async updateInvoiceDetails(
    invoiceId: string,
    updateInvoiceDetailsBody: UpdateInvoiceDetailsBody,
    headers?: UpdateInvoiceDetailsHeaders,
  ): Promise<AxiosResponse<UpdateInvoiceDetails200>> {
    return this.axios.post(`/invoices/${invoiceId}/update_details`, {
      headers,
      json: updateInvoiceDetailsBody,
    });
  }

  /**
 * To record a [offline payment](https://www.chargebee.com/docs/offline_payments.html) for an invoice.

The invoice status will be marked as 'paid' if its amount due becomes 0 because of this recorded payment.

**Note:** If the payment transaction amount is more than the invoice due amount, the remaining transaction amount will be added to the customer's Excess Payments balance to be used against other invoices.

 * @summary Record an invoice payment
 */
  public async recordAnInvoicePayment(
    invoiceId: string,
    recordAnInvoicePaymentBody: RecordAnInvoicePaymentBody,
    headers?: RecordAnInvoicePaymentHeaders,
  ): Promise<AxiosResponse<RecordAnInvoicePayment200>> {
    return this.axios.post(`/invoices/${invoiceId}/record_payment`, {
      headers,
      json: recordAnInvoicePaymentBody,
    });
  }

  /**
 * Deletes the specified invoice. Any payments must be [removed](/docs/api/invoices?prod_cat_ver=2#remove_payment_from_an_invoice) from the invoice before deleting it.  
**Caution**   

All associated [usages](/docs/api/usages?prod_cat_ver=2) are permanently deleted on deleting an invoice. If you want to regenerate such an invoice, [add](/docs/api/usages?prod_cat_ver=2#create_a_usage) or [bulk import](https://www.chargebee.com/docs/2.0/bulk-operations.html#overview_available-bulk-operations) usages before invoice regeneration.

* Any [promotional credits](/docs/api/promotional_credits?prod_cat_ver=2) or [credit notes](/docs/api/credit_notes?prod_cat_ver=2) applied to the invoice are removed.
* If an invoice for the current term of a subscription is deleted and the subscription is changed later with `proration` enabled, no prorated credits are issued.

 * @summary Delete an invoice
 */
  public async deleteAnInvoice(
    invoiceId: string,
    deleteAnInvoiceBody: DeleteAnInvoiceBody,
    headers?: DeleteAnInvoiceHeaders,
  ): Promise<AxiosResponse<DeleteAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/delete`, {
      headers,
      json: deleteAnInvoiceBody,
    });
  }

  /**
 * Use this endpoint to import invoices that are created outside of Chargebee; for example, import invoices created with a commercial accounting software to Chargebee. This allows you to conveniently manage invoices in one place.

 * @summary Import invoice
 */
  public async importInvoice(
    importInvoiceBody: ImportInvoiceBody,
    headers?: ImportInvoiceHeaders,
  ): Promise<AxiosResponse<ImportInvoice200>> {
    return this.axios.post(`/invoices/import_invoice`, {
      headers,
      json: importInvoiceBody,
    });
  }

  /**
 * Records [tax_withheld](/docs/api/tax_withheld) by the customer against the invoice specified. This operation is allowed only when all of the following conditions are true:

* Tax Amount Withheld is enabled.
* The `invoice` does not have a `linked_taxes_withheld` record associated with it already.
* `invoice.amount_due` is greater than zero.
* `invoice.status` is one of the following: `payment_due`, `not_paid`, or `posted`.

 * @summary Record tax withheld for an invoice
 */
  public async recordTaxWithheldForAnInvoice(
    invoiceId: string,
    recordTaxWithheldForAnInvoiceBody: RecordTaxWithheldForAnInvoiceBody,
    headers?: RecordTaxWithheldForAnInvoiceHeaders,
  ): Promise<AxiosResponse<RecordTaxWithheldForAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/record_tax_withheld`, {
      headers,
      json: recordTaxWithheldForAnInvoiceBody,
    });
  }

  /**
 * Resend failed einvoice of an invoice to the customer using this API.

 * @summary Resend failed einvoice in invoices
 */
  public async resendFailedEinvoiceInInvoices(
    invoiceId: string,
    headers?: ResendFailedEinvoiceInInvoicesHeaders,
  ): Promise<AxiosResponse<ResendFailedEinvoiceInInvoices200>> {
    return this.axios.post(`/invoices/${invoiceId}/resend_einvoice`, {
      headers,
    });
  }

  /**
 * Removes a [linked_taxes_withheld](/docs/api/invoices#invoice_linked_taxes_withheld) record from the `invoice` specified. This operation is allowed only when all of the following conditions are true:

* [invoice.status](/docs/api/invoices#invoice_status) is one of the following: `payment_due`, `not_paid`, or `posted`.
* There are no [adjustment_credit_notes](/docs/api/invoices#invoice_adjustment_credit_notes) associated with the invoice.
* There are no [issued_credit_notes](/docs/api/invoices#invoice_issued_credit_notes) associated with the invoice.

 * @summary Remove tax withheld for an invoice
 */
  public async removeTaxWithheldForAnInvoice(
    invoiceId: string,
    removeTaxWithheldForAnInvoiceBody: RemoveTaxWithheldForAnInvoiceBody,
    headers?: RemoveTaxWithheldForAnInvoiceHeaders,
  ): Promise<AxiosResponse<RemoveTaxWithheldForAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/remove_tax_withheld`, {
      headers,
      json: removeTaxWithheldForAnInvoiceBody,
    });
  }

  /**
 * This API endpoint allows users to retrieve the payment reference numbers (PRNs) associated with an invoice. Only one PRN is allowed per payment type. You can use the `invoice_id` or the `payment_reference_number[number]` to retrieve the PRN.

 * @summary List Payment Reference Numbers
 */
  public async listPaymentReferenceNumbers(
    params?: ListPaymentReferenceNumbersParams,
    headers?: ListPaymentReferenceNumbersHeaders,
  ): Promise<AxiosResponse<ListPaymentReferenceNumbers200>> {
    return this.axios.get(`/invoices/payment_reference_numbers`, {
      params,
      headers,
    });
  }

  /**
 * Storing card after successful 3DS completion is not supported in this API. Use [create using Payment Intent API](/docs/api/payment_sources#create_using_payment_intent) under Payment source to store the card after successful 3DS flow completion.

This API is used to collect payments for `payment_due` and `not_paid` invoices. If no payment methods are present for the customer or if the payment is unsuccessful, the corresponding error will be thrown.

Pass `authorization_transaction_id` to capture the already blocked funds to collect payments. Note that if the invoice due amount is greater than the authorized amount, the invoice status is returned as `payment_due`.

 * @summary Collect payment for an invoice
 */
  public async collectPaymentForAnInvoice(
    invoiceId: string,
    collectPaymentForAnInvoiceBody: CollectPaymentForAnInvoiceBody,
    headers?: CollectPaymentForAnInvoiceHeaders,
  ): Promise<AxiosResponse<CollectPaymentForAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/collect_payment`, {
      headers,
      json: collectPaymentForAnInvoiceBody,
    });
  }

  /**
 * Updates the [`quantity`](/docs/api/invoices#invoice_line_items_quantity) for `metered` [`line_items`](/docs/api/invoices#invoice_line_items) of an invoice to reflect the latest [usage](https://apidocs.chargebee.com/docs/api/usages) data.

**Note:** This operation is done automatically while [closing](https://apidocs.chargebee.com/docs/api/invoices#close_a_pending_invoice) the invoice.

 * @summary Sync usages
 */
  public async syncUsages(
    invoiceId: string,
    headers?: SyncUsagesHeaders,
  ): Promise<AxiosResponse<SyncUsages200>> {
    return this.axios.post(`/invoices/${invoiceId}/sync_usages`, {
      headers,
    });
  }

  /**
 * Refunds the invoice. The [refund](https://www.chargebee.com/docs/refunds.html) request is processed via the payment gateway originally used to charge the customer. You can choose to either make a full refund for the entire amount or make many partial refunds until you reach the total amount charged for the invoice. The API returns an error if an attempt is made to:

* Refund an offline invoice. For such invoices, use the [Record refund API](/docs/api/invoices#record_refund_for_an_invoice).
* Refund a fully refunded invoice.

If the refund transaction succeeds, a `credit_note` capturing this refund detail is created for the invoice.

 * @summary Refund an invoice
 */
  public async refundAnInvoice(
    invoiceId: string,
    refundAnInvoiceBody: RefundAnInvoiceBody,
    headers?: RefundAnInvoiceHeaders,
  ): Promise<AxiosResponse<RefundAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/refund`, {
      headers,
      json: refundAnInvoiceBody,
    });
  }

  /**
 * Refunds the invoice. The refund is provided against the following in order of precedence:

* Offline [linked_payments](/docs/api/invoices#invoice_linked_payments)
* Any [linked_taxes_withheld](/docs/api/invoices#invoice_linked_taxes_withheld)
* Online [linked_payments](/docs/api/invoices#invoice_linked_payments)

**Example**

Consider an invoice with the following payments and tax withheld.

* Offline payments: $30
* Online payments: $20
* Tax withheld: $5

When recording a refund worth $40, the refund amount is split as follows:

* Refund against offline payments: $30
* Refund against tax withheld: $5
* Refund against online payments: $5

For payments made via online transactions, the [refund](https://www.chargebee.com/docs/refunds.html) request is processed via the payment gateway originally used to charge the customer.  
**Tip**

If the order of precendence described above does not work for your use case, and you want to provide a refund against online `linked_payments` first, use the [Refund an invoice API](/docs/api/invoices#refund_an_invoice).

 * @summary Record refund for an invoice
 */
  public async recordRefundForAnInvoice(
    invoiceId: string,
    recordRefundForAnInvoiceBody: RecordRefundForAnInvoiceBody,
    headers?: RecordRefundForAnInvoiceHeaders,
  ): Promise<AxiosResponse<RecordRefundForAnInvoice200>> {
    return this.axios.post(`/invoices/${invoiceId}/record_refund`, {
      headers,
      json: recordRefundForAnInvoiceBody,
    });
  }

  /**
 * Gets the invoice as PDF. The returned URL is secure and allows download. The URL will expire in 60 minutes.

#### Related Tutorial

* [Check out customer portal tutorial on how to download invoice as PDF.](//www.chargebee.com/tutorials/customer-portal-sample.html#downloading_invoices_as_pdf)

 * @summary Retrieve Invoice as PDF
 */
  public async retrieveInvoiceAsPdf(
    invoiceId: string,
    retrieveInvoiceAsPdfBody: RetrieveInvoiceAsPdfBody,
    headers?: RetrieveInvoiceAsPdfHeaders,
  ): Promise<AxiosResponse<RetrieveInvoiceAsPdf200>> {
    return this.axios.post(`/invoices/${invoiceId}/pdf`, {
      headers,
      json: retrieveInvoiceAsPdfBody,
    });
  }

  /**
 * Download the e-invoice in both XML and PDF formats. The response consists of a `download` object for each format. The XML format follows the [structure as per Peppol BIS Billing v3.0](https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/tree/).  
**Note**

* You can only download e-invoices when their `status` is `success`.
* There are some cases in which the PDF is not available for download. In such cases, you can obtain it from the XML by decoding the value for [cbc:EmbeddedDocumentBinaryObject](https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/cac-AdditionalDocumentReference/cac-Attachment/cbc-EmbeddedDocumentBinaryObject/), which is the Base64-encoded version of the PDF.

 * @summary Download e-invoice
 */
  public async downloadEInvoice(
    invoiceId: string,
    headers?: DownloadEInvoiceHeaders,
  ): Promise<AxiosResponse<DownloadEInvoice200>> {
    return this.axios.get(`/invoices/${invoiceId}/download_einvoice`, {
      headers,
    });
  }

  /**
 * Retrieves the payments for an invoice with the recent ones on top. This returns all the payment attempts(manual \& automatic) made for this invoice.

 * @summary List payments for an invoice
 */
  public async listPaymentsForAnInvoice(
    invoiceId: string,
    params?: ListPaymentsForAnInvoiceParams,
    headers?: ListPaymentsForAnInvoiceHeaders,
  ): Promise<AxiosResponse<ListPaymentsForAnInvoice200>> {
    return this.axios.get(`/invoices/${invoiceId}/payments`, {
      params,
      headers,
    });
  }

  /**
 * Retrieves vouchers for an invoice in reverse chronological order.

 * @summary List vouchers for an invoice
 */
  public async listVouchersForAnInvoice(
    invoiceId: string,
    params?: ListVouchersForAnInvoiceParams,
    headers?: ListVouchersForAnInvoiceHeaders,
  ): Promise<AxiosResponse<ListVouchersForAnInvoice200>> {
    return this.axios.get(`/invoices/${invoiceId}/payment_vouchers`, {
      params,
      headers,
    });
  }
}
