/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  RecordAnOfflineRefundHeaders,
  RecordAnOfflineRefundBody,
  RecordAnOfflineRefund200,
  ListTransactionsParams,
  ListTransactionsHeaders,
  ListTransactions200,
  VoidAnAuthorizationTransactionHeaders,
  VoidAnAuthorizationTransaction200,
  CreateAnAuthorizationPaymentHeaders,
  CreateAnAuthorizationPaymentBody,
  CreateAnAuthorizationPayment200,
  RetrieveATransactionHeaders,
  RetrieveATransaction200,
  DeleteAnOfflineTransactionHeaders,
  DeleteAnOfflineTransactionBody,
  DeleteAnOfflineTransaction200,
  RefundAPaymentHeaders,
  RefundAPaymentBody,
  RefundAPayment200,
} from "./chargebeeAPI.schemas";

export class ChargebeeTransactionsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Records a refund made offline. Applicable only for `transaction`s of [type](transactions#transaction_type) = `payment`.

 * @summary Record an offline refund
 */
  public async recordAnOfflineRefund(
    transactionId: string,
    recordAnOfflineRefundBody: RecordAnOfflineRefundBody,
    headers?: RecordAnOfflineRefundHeaders,
  ): Promise<AxiosResponse<RecordAnOfflineRefund200>> {
    return this.axios.post(`/transactions/${transactionId}/record_refund`, {
      headers,
      json: recordAnOfflineRefundBody,
    });
  }

  /**
 * Lists all the transactions.

 * @summary List transactions
 */
  public async listTransactions(
    params?: ListTransactionsParams,
    headers?: ListTransactionsHeaders,
  ): Promise<AxiosResponse<ListTransactions200>> {
    return this.axios.get(`/transactions`, {
      params,
      headers,
    });
  }

  /**
 * This API voids the specific authorization transaction in order to release the blocked funds from the customer's card. Voiding an already captured or voided transaction is not possible.

 * @summary Void an authorization transaction
 */
  public async voidAnAuthorizationTransaction(
    transactionId: string,
    headers?: VoidAnAuthorizationTransactionHeaders,
  ): Promise<AxiosResponse<VoidAnAuthorizationTransaction200>> {
    return this.axios.post(`/transactions/${transactionId}/void`, {
      headers,
    });
  }

  /**
 * Authorizes a specific amount in customer's Credit card, which can be collected within a span of time. Read more on authorization and capture [here](https://www.chargebee.com/docs/stripe.html#auth-and-capture).

 * @summary Create an authorization payment
 */
  public async createAnAuthorizationPayment(
    createAnAuthorizationPaymentBody: CreateAnAuthorizationPaymentBody,
    headers?: CreateAnAuthorizationPaymentHeaders,
  ): Promise<AxiosResponse<CreateAnAuthorizationPayment200>> {
    return this.axios.post(`/transactions/create_authorization`, {
      headers,
      json: createAnAuthorizationPaymentBody,
    });
  }

  /**
 * Retrieve a transaction identified by its unique id.

 * @summary Retrieve a transaction
 */
  public async retrieveATransaction(
    transactionId: string,
    headers?: RetrieveATransactionHeaders,
  ): Promise<AxiosResponse<RetrieveATransaction200>> {
    return this.axios.get(`/transactions/${transactionId}`, {
      headers,
    });
  }

  /**
 * This API deletes an offline transaction. However, to delete an offline transaction all payment allocations associated with the transaction must be removed.

 * @summary Delete an offline transaction
 */
  public async deleteAnOfflineTransaction(
    transactionId: string,
    deleteAnOfflineTransactionBody: DeleteAnOfflineTransactionBody,
    headers?: DeleteAnOfflineTransactionHeaders,
  ): Promise<AxiosResponse<DeleteAnOfflineTransaction200>> {
    return this.axios.post(
      `/transactions/${transactionId}/delete_offline_transaction`,
      {
        headers,
        json: deleteAnOfflineTransactionBody,
      },
    );
  }

  /**
 * Refunds an online payment. Applicable only for `transaction`s of [type](transactions#transaction_type) = `payment`. You can only refund a `transaction` whose [status](transactions#transaction_status)` ` is `success`.

 * @summary Refund a payment
 */
  public async refundAPayment(
    transactionId: string,
    refundAPaymentBody: RefundAPaymentBody,
    headers?: RefundAPaymentHeaders,
  ): Promise<AxiosResponse<RefundAPayment200>> {
    return this.axios.post(`/transactions/${transactionId}/refund`, {
      headers,
      json: refundAPaymentBody,
    });
  }
}
