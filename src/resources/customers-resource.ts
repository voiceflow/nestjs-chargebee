/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  ImportSubscriptionForItemsHeaders,
  ImportSubscriptionForItemsBody,
  ImportSubscriptionForItems200,
  CreateSubscriptionForItemsHeaders,
  CreateSubscriptionForItemsBody,
  CreateSubscriptionForItems200,
  DeleteACustomerHeaders,
  DeleteACustomerBody,
  DeleteACustomer200,
  LinkACustomerHeaders,
  LinkACustomerBody,
  LinkACustomer200,
  DelinkACustomerHeaders,
  DelinkACustomer200,
  DeleteContactsForACustomerHeaders,
  DeleteContactsForACustomerBody,
  DeleteContactsForACustomer200,
  AssignPaymentRoleHeaders,
  AssignPaymentRoleBody,
  AssignPaymentRole200,
  MoveACustomerHeaders,
  MoveACustomerBody,
  MoveACustomer200,
  GetHierarchyParams,
  GetHierarchyHeaders,
  GetHierarchy200,
  UpdatePaymentMethodForACustomerHeaders,
  UpdatePaymentMethodForACustomerBody,
  UpdatePaymentMethodForACustomer200,
  RetrieveACustomerHeaders,
  RetrieveACustomer200,
  UpdateACustomerHeaders,
  UpdateACustomerBody,
  UpdateACustomer200,
  ChangeBillingDateHeaders,
  ChangeBillingDateBody,
  ChangeBillingDate200,
  ListCustomersParams,
  ListCustomersHeaders,
  ListCustomers200,
  CreateACustomerHeaders,
  CreateACustomerBody,
  CreateACustomer200,
  AddContactsToACustomerHeaders,
  AddContactsToACustomerBody,
  AddContactsToACustomer200,
  ListOfContactsForACustomerParams,
  ListOfContactsForACustomerHeaders,
  ListOfContactsForACustomer200,
  ClearPersonalDataOfACustomerHeaders,
  ClearPersonalDataOfACustomer200,
  MergeCustomersHeaders,
  MergeCustomersBody,
  MergeCustomers200,
  CollectPaymentForCustomerHeaders,
  CollectPaymentForCustomerBody,
  CollectPaymentForCustomer200,
  RecordAnExcessPaymentForACustomerHeaders,
  RecordAnExcessPaymentForACustomerBody,
  RecordAnExcessPaymentForACustomer200,
  UpdateContactsForACustomerHeaders,
  UpdateContactsForACustomerBody,
  UpdateContactsForACustomer200,
  UpdateHierarchyAccessSettingsForACustomerHeaders,
  UpdateHierarchyAccessSettingsForACustomerBody,
  UpdateHierarchyAccessSettingsForACustomer200,
  UpdateBillingInfoForACustomerHeaders,
  UpdateBillingInfoForACustomerBody,
  UpdateBillingInfoForACustomer200,
  CopyCardHeaders,
  CopyCardBody,
  CopyCard200,
  SwitchGatewayHeaders,
  SwitchGatewayBody,
  SwitchGateway200,
  DeleteCardForACustomerHeaders,
  DeleteCardForACustomer200,
  UpdateCardForACustomerHeaders,
  UpdateCardForACustomerBody,
  UpdateCardForACustomer200,
  UpcomingInvoicesEstimateHeaders,
  UpcomingInvoicesEstimate200,
  EstimateForCreatingASubscriptionHeaders,
  EstimateForCreatingASubscriptionBody,
  EstimateForCreatingASubscription200,
  CreateAQuoteForANewSubscriptionItemsHeaders,
  CreateAQuoteForANewSubscriptionItemsBody,
  CreateAQuoteForANewSubscriptionItems200,
  ListVouchersForACustomerParams,
  ListVouchersForACustomerHeaders,
  ListVouchersForACustomer200,
} from "./chargebeeAPI.schemas";

export class ChargebeeCustomersResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Imports a subscription into Chargebee.

 * @summary Import subscription for Items
 */
  public async importSubscriptionForItems(
    customerId: string,
    importSubscriptionForItemsBody: ImportSubscriptionForItemsBody,
    headers?: ImportSubscriptionForItemsHeaders,
  ): Promise<AxiosResponse<ImportSubscriptionForItems200>> {
    return this.axios.post(`/customers/${customerId}/import_for_items`, {
      headers,
      json: importSubscriptionForItemsBody,
    });
  }

  /**
 * **Note:** This endpoint optionally supports 3DS. To use it [create](./payment_intents?prod_cat_ver=2#create_a_payment_intent) a `payment_intent` and provide it via this endpoint.

Creates a new subscription for an existing customer in Chargebee. Any available [credits and excess payments](./customers?prod_cat_ver=2#customer_balances) for the customer are automatically applied on the invoice.  
**See also**

* [Create a purchase](https://apidocs.chargebee.com/docs/api/purchases#create_a_purchase): an operation that creates a purchase representing multiple subscriptions bought together by a customer.

 * @summary Create subscription for Items
 */
  public async createSubscriptionForItems(
    customerId: string,
    createSubscriptionForItemsBody: CreateSubscriptionForItemsBody,
    headers?: CreateSubscriptionForItemsHeaders,
  ): Promise<AxiosResponse<CreateSubscriptionForItems200>> {
    return this.axios.post(`/customers/${customerId}/subscription_for_items`, {
      headers,
      json: createSubscriptionForItemsBody,
    });
  }

  /**
 * Deletes a particular customer identified by the a unique identifier.

 * @summary Delete a customer
 */
  public async deleteACustomer(
    customerId: string,
    deleteACustomerBody: DeleteACustomerBody,
    headers?: DeleteACustomerHeaders,
  ): Promise<AxiosResponse<DeleteACustomer200>> {
    return this.axios.post(`/customers/${customerId}/delete`, {
      headers,
      json: deleteACustomerBody,
    });
  }

  /**
 * Sets a customer into a [hierarchical relationship](https://www.chargebee.com/docs/account-hierarchy.html) with another. The path parameter `customer_id` is the ID of the child in the relationship.  
**Note**

* In the descriptions for `use_default_hierarchy_settings`, `parent_account_access`, and `child_account_access` parameters, the "parent" is the customer whose ID is [payment_owner_id](/docs/api/customers?prod_cat_ver=2#link_a_customer_payment_owner_id). However, if the `payment_owner_id` is set as the ID of the child itself (`{customer_id}`), then the "parent" is [parent_id](/docs/api/customers?prod_cat_ver=2#link_a_customer_parent_id).
* The parent and the child customers must belong to the same [business entity](/docs/api?prod_cat_ver=2#mbe).

 * @summary Link a customer
 */
  public async linkACustomer(
    customerId: string,
    linkACustomerBody: LinkACustomerBody,
    headers?: LinkACustomerHeaders,
  ): Promise<AxiosResponse<LinkACustomer200>> {
    return this.axios.post(`/customers/${customerId}/relationships`, {
      headers,
      json: linkACustomerBody,
    });
  }

  /**
 * Disconnects a child customer from its parent. `customer_id` is the [id](/docs/api/customers#customer_id) of the child.

 * @summary Delink a customer
 */
  public async delinkACustomer(
    customerId: string,
    headers?: DelinkACustomerHeaders,
  ): Promise<AxiosResponse<DelinkACustomer200>> {
    return this.axios.post(`/customers/${customerId}/delete_relationship`, {
      headers,
    });
  }

  /**
 * Deletes a particular contact for a customer. You can delete a contact by giving the Contact ID as the input parameter.

 * @summary Delete contacts for a customer
 */
  public async deleteContactsForACustomer(
    customerId: string,
    deleteContactsForACustomerBody: DeleteContactsForACustomerBody,
    headers?: DeleteContactsForACustomerHeaders,
  ): Promise<AxiosResponse<DeleteContactsForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/delete_contact`, {
      headers,
      json: deleteContactsForACustomerBody,
    });
  }

  /**
 * Assign Primary or Backup payment role or unassign role for the payment source based on the preference for the payment collection.

 * @summary Assign payment role
 */
  public async assignPaymentRole(
    customerId: string,
    assignPaymentRoleBody: AssignPaymentRoleBody,
    headers?: AssignPaymentRoleHeaders,
  ): Promise<AxiosResponse<AssignPaymentRole200>> {
    return this.axios.post(`/customers/${customerId}/assign_payment_role`, {
      headers,
      json: assignPaymentRoleBody,
    });
  }

  /**
 * This API copies a customer object from one site to another. The destination site (the site to which the customer is copied) is specified by the path parameter `{site}`; whereas, the source site (the site from which the customer is copied) is specified by the query parameter `from_site`.

 * @summary Move a customer
 */
  public async moveACustomer(
    moveACustomerBody: MoveACustomerBody,
    headers?: MoveACustomerHeaders,
  ): Promise<AxiosResponse<MoveACustomer200>> {
    return this.axios.post(`/customers/move`, {
      headers,
      json: moveACustomerBody,
    });
  }

  /**
 * Retrieves the [account hierarchy tree](/docs/api/hierarchies) for the customer.

 * @summary Get hierarchy
 */
  public async getHierarchy(
    customerId: string,
    params: GetHierarchyParams,
    headers?: GetHierarchyHeaders,
  ): Promise<AxiosResponse<GetHierarchy200>> {
    return this.axios.get(`/customers/${customerId}/hierarchy`, {
      params,
      headers,
    });
  }

  /**
 * We recently released [Payment Sources](/docs/api/payment_sources), which comes with additional options and improvements to the [Card APIs](/docs/api/cards). For this operation, use the [Create using temporary token](/docs/api/payment_sources#create_using_temporary_token) API or [Create using permanent token](/docs/api/payment_sources#create_using_permanent_token) API under Payment Sources to update payment method for the customer.

Updates payment method details for a customer.

**Note:** If you wish to pass the card number, CVV, or the single-use card tokens provided by gateways like Stripe, then use the [Update card for a customer](cards#update_card_for_a_customer) API under Cards resource. This API is not supported for Chargebee Test Gateway, it is provided to help you understand the billing workflow in Chargebee.

**PayPal Express Checkout**   
You can use this API if you are directly integrating PayPal Express Checkout in your website instead of using Chargebee's hosted pages. When your customer updates his payment method using PayPal Express Checkout, you will be provided with the *Billing Agreement ID* by PayPal. You can update the payment method for that customer in Chargebee by passing `type` as `paypal_express_checkout` and `reference_id` with the *Billing Agreement ID*.

**Login and Pay with Amazon**   
You can use this API if you are directly integrating *Login and Pay with Amazon* in your website instead of using Chargebee's hosted pages. When your customer updates Amazon as a payment method, you will be provided with the *Billing Agreement ID* by Amazon. You can update the payment method for that customer in Chargebee by passing `type` as `amazon_payments` and `reference_id` with the *Billing Agreement ID*.

**Card Payments**   
When the card details of your customer are stored in the vault of gateways such as Stripe or Braintree, you can use this API to update the *reference id* provided by them in Chargebee. To use this API, pass   

* `type` as `card`.
* `gateway` with the gateway associated with the card. If the gateway is not specified, the default gateway will be used.
* `reference_id` with the identifier provided by the gateway/Spreedly to reference that specific card.

**Reference id format for Card Payments**   
The format of reference_id will differ based on where the card is stored.  
**Stripe:** In case of Stripe, the reference_id consists of combination of Stripe Customer ID and Stripe Card ID separated by forward slash (e.g. *cus_63MnDn0t6kfDW7/card_6WjCF20vT9WN1G*). If you are passing Stripe Customer ID alone, then Chargebee will store the card marked as active for that customer in Stripe.

**Braintree:** In case of Braintree, the reference_id consists of combination of Braintree Customer ID and Braintree Payment Method Token separated by forward slash   
(e.g. *cus_63MnDn0t6kfDW7/card_6WjCF20vT9WN1G* ). If you are passing Braintree Customer ID alone, then Chargebee will store the card marked as default for that customer in Braintree.

**Spreedly Card vault:** If the card details are stored in Spreedly vault, then you need to provide the Spreedly token as `reference_id`.

**Direct Debit Payments**   
When the bank account details of your customer are stored in the gateway vault, you can use this API to update the reference id provided by them in Chargebee. To use this API, pass   

* `type` as `direct_debit`.
* `gateway` with the gateway where the bank account details are stored (e.g. *authorize_net*). If the gateway is not specified, the gateway supporting the direct debit will be used.
* `reference_id` with the identifier provided by the gateway to reference the customer's bank account details.
* `tmp_token` with the single use token provided by the gateway ( Should be passed only if reference_id is not passed ).

**Reference id format for Direct Debit Payments**   
The format of reference_id will differ based on where the bank account is stored.  
**Stripe:** In case of Stripe, the reference_id consists of combination of Stripe Customer ID and Stripe Bank Account ID separated by forward slash   
(e.g. *cus_8suoHaLQH4G5AW/ba_18b8z2KmcbENlhgU03RznRYW*). If you are passing Stripe Customer ID alone, then Chargebee will store the first bank account details present in payment profile list of that customer in Stripe.

**Authorize.Net:** The reference_id consists of combination of Authorize.Net's Customer Profile ID and Payment Profile ID separated by forward slash (e.g. *2384383/34834382*). If you are passing Authorize.Net's Customer Profile ID alone, then Chargebee will store the first bank account details present in payment profile list of that customer in Authorize.Net.

**GoCardless:** The reference_id is the GoCardless Customer Mandate ID (e.g. *MD0077Z99TTQXK*).

**Note:** While using this API to update payment method details, [Card Verification](https://www.chargebee.com/docs/cards.html#card-verification) will not happen even if it is enabled for that particular gateway.

 * @summary Update payment method for a customer
 */
  public async updatePaymentMethodForACustomer(
    customerId: string,
    updatePaymentMethodForACustomerBody: UpdatePaymentMethodForACustomerBody,
    headers?: UpdatePaymentMethodForACustomerHeaders,
  ): Promise<AxiosResponse<UpdatePaymentMethodForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/update_payment_method`, {
      headers,
      json: updatePaymentMethodForACustomerBody,
    });
  }

  /**
 * Retrieves the details of the desired customer. You can use the unique identifier for a particular customer to retrieve the desired details.

 * @summary Retrieve a customer
 */
  public async retrieveACustomer(
    customerId: string,
    headers?: RetrieveACustomerHeaders,
  ): Promise<AxiosResponse<RetrieveACustomer200>> {
    return this.axios.get(`/customers/${customerId}`, {
      headers,
    });
  }

  /**
 * Updates the customer resource. However, this method cannot be used for updating the 'Billing Info' - the Billing Address and 'vat_number' attributes - of the customer. To update the same, use our [Update Billing Info](/docs/api/customers#update_billing_info_for_a_customer) API.

 * @summary Update a customer
 */
  public async updateACustomer(
    customerId: string,
    updateACustomerBody: UpdateACustomerBody,
    headers?: UpdateACustomerHeaders,
  ): Promise<AxiosResponse<UpdateACustomer200>> {
    return this.axios.post(`/customers/${customerId}`, {
      headers,
      json: updateACustomerBody,
    });
  }

  /**
 * Applicable when *calendar billing* (with customer specific billing date support) is enabled. Changes the customer's *billing_date* and/or *billing_day_of_week*.

 * @summary Change billing date
 */
  public async changeBillingDate(
    customerId: string,
    changeBillingDateBody: ChangeBillingDateBody,
    headers?: ChangeBillingDateHeaders,
  ): Promise<AxiosResponse<ChangeBillingDate200>> {
    return this.axios.post(`/customers/${customerId}/change_billing_date`, {
      headers,
      json: changeBillingDateBody,
    });
  }

  /**
 * Retrieves a list of customers added to your Chargebee site. The list contains the necessary customer details such as First Name, Last Name and the Customer ID.

 * @summary List customers
 */
  public async listCustomers(
    params?: ListCustomersParams,
    headers?: ListCustomersHeaders,
  ): Promise<AxiosResponse<ListCustomers200>> {
    return this.axios.get(`/customers`, {
      params,
      headers,
    });
  }

  /**
 * **Note:** This operation optionally supports 3DS verification flow. To achieve the same, create the [Payment Intent](/docs/api/3ds_card_payments?prod_cat_ver=1) and pass it as input parameter to this API.

Creates a customer. You can create a customer and then create subscriptions for the customer when required. When creating a customer, you can pass along the billing address and card details.

Passing raw card data via API involves PCI liability at your end due to the sensitivity of the data. Instead, you can use one of the following integration options as applicable:

Here's some resources you can use to collect card information within your checkout form based on the payment gateway you use:

* [Stripe.js](https://stripe.com/docs/js) for Stripe users.
* [Braintree.js](https://developer.paypal.com/braintree/docs/guides/client-sdk/setup/javascript/v2) for Braintree users.
* [Accept.js](https://developer.authorize.net/api/reference/features/acceptjs.html), if you use [Authorize.Net](https://www.authorize.net/).
* If you are using the Adyen gateway, you will have to use the Adyen's [Client-Side Encryption](https://docs.adyen.com/developers/features/client-side-encryption) to encrypt sensitive cardholder data. Once the cardholder data is encrypted, pass the value in `adyen.encrypted.data`as temp token in this API.
* You can also use our [Hosted Pages](https://www.chargebee.com/docs/1.0/hosted_pages.html) based integration.

When billing address is not passed (say, for customers making offline payments), you can always provide it later using the [Update billing info for a customer API](/docs/api/customers#update_billing_info_for_a_customer).

**Note:**When an invoice is generated for a customer, the billing address provided for the customer is stored with the invoice. If the First Name, Last Name, and Company fields of the billing address do not contain any information, they're picked up from the customer details.

 * @summary Create a customer
 */
  public async createACustomer(
    createACustomerBody: CreateACustomerBody,
    headers?: CreateACustomerHeaders,
  ): Promise<AxiosResponse<CreateACustomer200>> {
    return this.axios.post(`/customers`, {
      headers,
      json: createACustomerBody,
    });
  }

  /**
 * Adds the required contact to a customer. You can give the First Name, Last Name, Email ID and more details as input parameters to add them under the desired customer.

 * @summary Add contacts to a customer
 */
  public async addContactsToACustomer(
    customerId: string,
    addContactsToACustomerBody: AddContactsToACustomerBody,
    headers?: AddContactsToACustomerHeaders,
  ): Promise<AxiosResponse<AddContactsToACustomer200>> {
    return this.axios.post(`/customers/${customerId}/add_contact`, {
      headers,
      json: addContactsToACustomerBody,
    });
  }

  /**
 * This API retrieves all the contacts for a customer.

 * @summary List of contacts for a customer
 */
  public async listOfContactsForACustomer(
    customerId: string,
    params?: ListOfContactsForACustomerParams,
    headers?: ListOfContactsForACustomerHeaders,
  ): Promise<AxiosResponse<ListOfContactsForACustomer200>> {
    return this.axios.get(`/customers/${customerId}/contacts`, {
      params,
      headers,
    });
  }

  /**
 * Clear personal details of a customer using this API.

 * @summary Clear Personal Data of a customer
 */
  public async clearPersonalDataOfACustomer(
    customerId: string,
    headers?: ClearPersonalDataOfACustomerHeaders,
  ): Promise<AxiosResponse<ClearPersonalDataOfACustomer200>> {
    return this.axios.post(`/customers/${customerId}/clear_personal_data`, {
      headers,
    });
  }

  /**
 * This API moves a customer's payment methods, subscriptions, invoices, credit notes, transactions, unbilled charges, and orders to another customer. Events and email logs will not be moved. The API execution is asynchronous.  
**Note**

* Moving virtual bank accounts from one customer to another is not supported in this API.
* Merging customers from different [business entities](/docs/api?prod_cat_ver=2#mbe) is not permitted.

 * @summary Merge customers
 */
  public async mergeCustomers(
    mergeCustomersBody: MergeCustomersBody,
    headers?: MergeCustomersHeaders,
  ): Promise<AxiosResponse<MergeCustomers200>> {
    return this.axios.post(`/customers/merge`, {
      headers,
      json: mergeCustomersBody,
    });
  }

  /**
 * **Note:** This operation optionally supports 3DS verification flow. To achieve the same, create the [Payment Intent](/docs/api/#3ds_card_payments) and pass it as input parameter to this API.

This API can be used to collect the payments for customer's **payment_due** and **not_paid** invoices. You can either choose to collect the payment from an existing payment source or a new payment source. You can choose to either retain or discard the new payment source, which is being used for payment. If the amount collected exceeds the invoice amount, the surplus will be counted in as excess payments.

 * @summary Collect payment for customer
 */
  public async collectPaymentForCustomer(
    customerId: string,
    collectPaymentForCustomerBody: CollectPaymentForCustomerBody,
    headers?: CollectPaymentForCustomerHeaders,
  ): Promise<AxiosResponse<CollectPaymentForCustomer200>> {
    return this.axios.post(`/customers/${customerId}/collect_payment`, {
      headers,
      json: collectPaymentForCustomerBody,
    });
  }

  /**
 * Use this API to record any [excess payments](//www.chargebee.com/docs/customers.html#excess-payments) made by the customer, such as advance payments. Such payments will be automatically applied to the future invoices. It can also be [manually applied](//www.chargebee.com/docs/invoice-operations.html#apply-excess-payments) to the existing *Not Paid* or *Payment Due* invoices.

 * @summary Record an excess payment for a customer
 */
  public async recordAnExcessPaymentForACustomer(
    customerId: string,
    recordAnExcessPaymentForACustomerBody: RecordAnExcessPaymentForACustomerBody,
    headers?: RecordAnExcessPaymentForACustomerHeaders,
  ): Promise<AxiosResponse<RecordAnExcessPaymentForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/record_excess_payment`, {
      headers,
      json: recordAnExcessPaymentForACustomerBody,
    });
  }

  /**
 * Updates the details of a contact for a customer. You can give the field data to be updated as input parameters along with the Contact ID to update it.

 * @summary Update contacts for a customer
 */
  public async updateContactsForACustomer(
    customerId: string,
    updateContactsForACustomerBody: UpdateContactsForACustomerBody,
    headers?: UpdateContactsForACustomerHeaders,
  ): Promise<AxiosResponse<UpdateContactsForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/update_contact`, {
      headers,
      json: updateContactsForACustomerBody,
    });
  }

  /**
 * Changes the level of access that the parent or the child itself has to the child's information.

This data falls into two categories:  

* **Self-Serve Portal data:** subscriptions and invoices of the child.
* **Email Notifications:** subscription-, invoice- and payment-related notifications for the child.

The 'parent' is the customer whose id is [payment_owner_id](/docs/api/customers#customer_relationship_payment_owner_id). However, if the `payment_owner_id` is the child itself, then the parent is [parent_id](/docs/api/customers#customer_relationship_parent_id). The path parameter `customer_id` is the [id](/docs/api/customers#customer_id) of the child in the relationship.



**Note:** This endpoint cannot be used to change the `parent_id`, `invoice_owner_id` or `payment_owner_id` for the customer. To change them, [delink](/docs/api/customers#delink_a_customer) the customer and then call **Link a customer** again.

 * @summary Update hierarchy access settings for a customer
 */
  public async updateHierarchyAccessSettingsForACustomer(
    customerId: string,
    updateHierarchyAccessSettingsForACustomerBody: UpdateHierarchyAccessSettingsForACustomerBody,
    headers?: UpdateHierarchyAccessSettingsForACustomerHeaders,
  ): Promise<AxiosResponse<UpdateHierarchyAccessSettingsForACustomer200>> {
    return this.axios.post(
      `/customers/${customerId}/update_hierarchy_settings`,
      {
        headers,
        json: updateHierarchyAccessSettingsForACustomerBody,
      },
    );
  }

  /**
 * This method is used for updating the `billing_address` and `vat_number` attributes of the `customer`. For updating the other customer attributes use [Update Customer API](customers#update_a_customer).

During this operation, if `billing_address` and `vat_number` are not already present, they're added. Whereas if present, the existing values are replaced with the new values passed. The only exception here is for `entity_identifiers[i]` when `entity_identifiers[operation][i]` is passed as `delete`.

**Note:**When an invoice is generated for a customer, the billing address provided for the customer will be stored with the invoice. If the First Name, Last Name, and Company fields do not contain any information under Billing Info, the same will be picked from Customer Details if the same is available there.Please ensure that the VAT number is provided whenever the billing address is updated, as failing to do so will override any existing VAT numbers if new values are not provided.

 * @summary Update billing info for a customer
 */
  public async updateBillingInfoForACustomer(
    customerId: string,
    updateBillingInfoForACustomerBody: UpdateBillingInfoForACustomerBody,
    headers?: UpdateBillingInfoForACustomerHeaders,
  ): Promise<AxiosResponse<UpdateBillingInfoForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/update_billing_info`, {
      headers,
      json: updateBillingInfoForACustomerBody,
    });
  }

  /**
 * #### deprecated

The [Payment Sources API](/docs/api/payment_sources), with its additional options and improvements, obsoletes the Cards APIs. This request is obsoleted by the [Export payment source API](/docs/api/payment_sources#export_payment_source).

Copies the customer's card information to another payment gateway. This is useful if you want to port your customer's card details to another gateway.

**Limitation**   
This request does not support copying of cards between Braintree and Stripe payment gateways. Contact [Chargebee Support](https://chargebee.freshdesk.com/support/home) to perform those actions.

 * @summary Copy card
 */
  public async copyCard(
    customerId: string,
    copyCardBody: CopyCardBody,
    headers?: CopyCardHeaders,
  ): Promise<AxiosResponse<CopyCard200>> {
    return this.axios.post(`/customers/${customerId}/copy_card`, {
      headers,
      json: copyCardBody,
    });
  }

  /**
 * #### Deprecated

This request is obsoleted by the [Switch gateway account API](/docs/api/payment_sources#switch_gateway_account) for Payment Sources.

Switches the gateway in which customer's card information is stored. This is applicable only if the payment method is `card`.

**Limitation**   
This request does not support switching between Braintree and Stripe payment gateways. Contact [Chargebee Support](https://chargebee.freshdesk.com/support/home) to perform those actions.

 * @summary Switch gateway
 */
  public async switchGateway(
    customerId: string,
    switchGatewayBody: SwitchGatewayBody,
    headers?: SwitchGatewayHeaders,
  ): Promise<AxiosResponse<SwitchGateway200>> {
    return this.axios.post(`/customers/${customerId}/switch_gateway`, {
      headers,
      json: switchGatewayBody,
    });
  }

  /**
 * #### deprecated

The [Payment Sources API](/docs/api/payment_sources), with its additional options and improvements, obsoletes the Cards APIs. This request is obsoleted by the [Delete a payment source API](/docs/api/payment_sources#delete_a_payment_source).

Deletes the card for a customer. Upon successful deletion the `auto_collection` attribute for the customer is set to `off` and a `card_deleted` event is triggered. If there is no card found at the gateway for the customer, this API returns without errors.

 * @summary Delete card for a customer
 */
  public async deleteCardForACustomer(
    customerId: string,
    headers?: DeleteCardForACustomerHeaders,
  ): Promise<AxiosResponse<DeleteCardForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/delete_card`, {
      headers,
    });
  }

  /**
 * #### Deprecated

The [Payment Sources API](/docs/api/payment_sources), with its additional options and improvements, obsoletes the [Cards APIs](/docs/api/cards). This operation is obsoleted by the following:

* [Create using temporary token](/docs/api/payment_sources#create_using_temporary_token)
* [Create using permanent token](/docs/api/payment_sources#create_using_permanent_token)
* [Create a card payment source](/docs/api/payment_sources#create_a_card_payment_source)

Adds or replaces card details of a customer. Updating card details replaces the present payment method.

Passing credit card details to this API involves PCI liability at your end as sensitive card info passes through your servers. If you wish to avoid that, you can use one of the following integration methodologies if applicable

* If you are using Stripe gateway, you can use [Stripe.js](https://stripe.com/docs/stripe.js) with your card update form.
* If you are using Braintree gateway, you can use [Braintree.js](https://www.braintreepayments.com/docs/javascript) with your card update form.
* If you are using Authorize.Net gateway, you use [Accept.js](https://developer.authorize.net/api/reference/features/acceptjs.html) with your card update form.
* In case you are using the Adyen gateway, you will have to use the Adyen's [Client Side Encryption](https://docs.adyen.com/developers/features/client-side-encryption) to encrypt sensitive cardholder data. Once the cardholder data is encrypted, pass the value in adyen.encrypted.data as temp token in this API.
* You can also use our [Hosted Pages](https://www.chargebee.com/docs/hosted_pages.html) based integration. Use our [Hosted Page - Update Card](/docs/api/hosted_pages#update_card) API to generate a 'Update Card' Hosted Page link.



**Legacy behavior:**

* **For [sites](https://www.chargebee.com/docs/sites-intro.html) created before March 1st, 2014:** On making this request, the `billing_address` and `vat_number` of the customer are **deleted** and replaced by the values passed with this request. Ensure that you pass the [billing address parameters](/docs/api/subscriptions?prod_cat_ver=1#create_a_subscription_card_billing_addr1) and the `vat_number` parameters each time you make this request, to avoid losing the same information at the customer-level.
* **For [sites](https://www.chargebee.com/docs/sites-intro.html) created on or after March 1st, 2014:** This request does not alter the `billing_address` and `vat_number` of the customer.

 * @summary Update card for a customer
 */
  public async updateCardForACustomer(
    customerId: string,
    updateCardForACustomerBody: UpdateCardForACustomerBody,
    headers?: UpdateCardForACustomerHeaders,
  ): Promise<AxiosResponse<UpdateCardForACustomer200>> {
    return this.axios.post(`/customers/${customerId}/credit_card`, {
      headers,
      json: updateCardForACustomerBody,
    });
  }

  /**
 * Estimate of the upcoming scheduled invoices (subscription activations, renewals etc) of a customer. For now preview of the invoices generated on the immediate upcoming date is supported. Say a customer has couple of subscription renewals scheduled on *Jan,10th* and another subscription renewal scheduled on *Jan,15th* . This API gives the preview of all the invoices scheduled to be generated on *Jan,10th* (immediate upcoming date).

In the response:

* **estimate.invoice_estimates\[\]** has details of the invoices scheduled to be generated.

**Note:** If *consolidated invoicing* is enabled you may use this API to test whether upcoming renewals are consolidated.

 * @summary Upcoming invoices estimate
 */
  public async upcomingInvoicesEstimate(
    customerId: string,
    headers?: UpcomingInvoicesEstimateHeaders,
  ): Promise<AxiosResponse<UpcomingInvoicesEstimate200>> {
    return this.axios.get(
      `/customers/${customerId}/upcoming_invoices_estimate`,
      {
        headers,
      },
    );
  }

  /**
 * Generates an estimate without creating a subscription. This endpoint can be called when you want to preview details of a new subscription before actually creating one.  
**See also**

* [Estimate a purchase](https://apidocs.chargebee.com/docs/api/purchases#estimates_for_purchase): an operation that estimates a `purchase` representing multiple subscriptions bought together by a customer.

 * @summary Estimate for creating a subscription
 */
  public async estimateForCreatingASubscription(
    customerId: string,
    estimateForCreatingASubscriptionBody: EstimateForCreatingASubscriptionBody,
    headers?: EstimateForCreatingASubscriptionHeaders,
  ): Promise<AxiosResponse<EstimateForCreatingASubscription200>> {
    return this.axios.post(
      `/customers/${customerId}/create_subscription_for_items_estimate`,
      {
        headers,
        json: estimateForCreatingASubscriptionBody,
      },
    );
  }

  /**
 * Create a quote for new subscription line items of a customer.

 * @summary Create a quote for a new subscription items
 */
  public async createAQuoteForANewSubscriptionItems(
    customerId: string,
    createAQuoteForANewSubscriptionItemsBody: CreateAQuoteForANewSubscriptionItemsBody,
    headers?: CreateAQuoteForANewSubscriptionItemsHeaders,
  ): Promise<AxiosResponse<CreateAQuoteForANewSubscriptionItems200>> {
    return this.axios.post(
      `/customers/${customerId}/create_subscription_quote_for_items`,
      {
        headers,
        json: createAQuoteForANewSubscriptionItemsBody,
      },
    );
  }

  /**
 * Retrieves vouchers for a customer in reverse chronological order.

 * @summary List vouchers for a customer
 */
  public async listVouchersForACustomer(
    customerId: string,
    params?: ListVouchersForACustomerParams,
    headers?: ListVouchersForACustomerHeaders,
  ): Promise<AxiosResponse<ListVouchersForACustomer200>> {
    return this.axios.get(`/customers/${customerId}/payment_vouchers`, {
      params,
      headers,
    });
  }
}
