/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  CreateUsingPermanentTokenHeaders,
  CreateUsingPermanentTokenBody,
  CreateUsingPermanentToken200,
  DeleteAPaymentSourceHeaders,
  DeleteAPaymentSource200,
  CreateACardPaymentSourceHeaders,
  CreateACardPaymentSourceBody,
  CreateACardPaymentSource200,
  VerifyBankAccountPaymentSourceHeaders,
  VerifyBankAccountPaymentSourceBody,
  VerifyBankAccountPaymentSource200,
  ListPaymentSourcesParams,
  ListPaymentSourcesHeaders,
  ListPaymentSources200,
  ExportPaymentSourceHeaders,
  ExportPaymentSourceBody,
  ExportPaymentSource200,
  CreateUsingPaymentIntentHeaders,
  CreateUsingPaymentIntentBody,
  CreateUsingPaymentIntent200,
  RetrieveAPaymentSourceHeaders,
  RetrieveAPaymentSource200,
  CreateAVoucherPaymentMethodHeaders,
  CreateAVoucherPaymentMethodBody,
  CreateAVoucherPaymentMethod200,
  CreateUsingGatewayTemporaryTokenHeaders,
  CreateUsingGatewayTemporaryTokenBody,
  CreateUsingGatewayTemporaryToken200,
  UpdateACardPaymentSourceHeaders,
  UpdateACardPaymentSourceBody,
  UpdateACardPaymentSource200,
  SwitchGatewayAccountHeaders,
  SwitchGatewayAccountBody,
  SwitchGatewayAccount200,
  CreateUsingChargebeeTokenHeaders,
  CreateUsingChargebeeTokenBody,
  CreateUsingChargebeeToken200,
  LocalDeleteAPaymentSourceHeaders,
  LocalDeleteAPaymentSource200,
  CreateABankAccountPaymentSourceHeaders,
  CreateABankAccountPaymentSourceBody,
  CreateABankAccountPaymentSource200,
  UpdateABankAccountPaymentSourceHeaders,
  UpdateABankAccountPaymentSourceBody,
  UpdateABankAccountPaymentSource200,
} from "./chargebeeAPI.schemas";

export class ChargebeePaymentSourcesResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * This API provides an alternative way to create a payment source using a permanent token, instead of having to add the full payment method details via API or the Chargebee UI. Permanent tokens are provided by payment gateways such as Stripe.  
Storing card after successful 3DS completion is not supported in this API. Use [create using Payment Intent API](/docs/api/payment_sources#create_using_payment_intent) under Payment source to store the card after successful 3DS flow completion.

 * @summary Create using permanent token
 */
  public async createUsingPermanentToken(
    createUsingPermanentTokenBody: CreateUsingPermanentTokenBody,
    headers?: CreateUsingPermanentTokenHeaders,
  ): Promise<AxiosResponse<CreateUsingPermanentToken200>> {
    return this.axios.post(`/payment_sources/create_using_permanent_token`, {
      headers,
      json: createUsingPermanentTokenBody,
    });
  }

  /**
 * Deletes a payment source. Once the payment source is deleted, if

* **Deleted payment source is Primary, and Backup is available**
  * The Backup payment source will become the Primary payment source.
* **Deleted payment source is Primary, and no Backup is available**
  * The other payment source available, but not assigned to any subscription, will become the Primary payment source. **Note** : *When multiple payment sources exist, the payment method added most recently will be considered*.

  * If other payment sources available are assigned to subscriptions, the auto collection attribute for the customer will be set to Off, and the events *card_deleted* and *payment_source_deleted* will be triggered.
* **Deleted payment source is attached to subscriptions**
  * Dunning will be initiated for subscriptions attached to this payment source if auto collection is set to On, and when no customer default is present.



If there is no such payment source present in the gateway for the customer, this API will return successfully without throwing any error.  
**Note** :   
If you delete the only available payment method of a customer in Chargebee, it also deletes the customer's record at the gateway. To delete the payment method locally(delete only in Chargebee), use [Local Delete a Payment Source API](/docs/api/payment_sources#local_delete_a_payment_source).

 * @summary Delete a payment source
 */
  public async deleteAPaymentSource(
    custPaymentSourceId: string,
    headers?: DeleteAPaymentSourceHeaders,
  ): Promise<AxiosResponse<DeleteAPaymentSource200>> {
    return this.axios.post(`/payment_sources/${custPaymentSourceId}/delete`, {
      headers,
    });
  }

  /**
 * Storing card after successful 3DS completion is not supported in this API. Use [create using Payment Intent API](/docs/api/payment_sources#create_using_payment_intent) under Payment source to store the card after successful 3DS flow completion.

 * @summary Create a card payment source
 */
  public async createACardPaymentSource(
    createACardPaymentSourceBody: CreateACardPaymentSourceBody,
    headers?: CreateACardPaymentSourceHeaders,
  ): Promise<AxiosResponse<CreateACardPaymentSource200>> {
    return this.axios.post(`/payment_sources/create_card`, {
      headers,
      json: createACardPaymentSourceBody,
    });
  }

  /**
 * This API can be used to verify bank accounts which have been added as payment source. This is applicable for **Stripe ACH with micro-deposit mode bank accounts** only. Stripe handles verification in two ways - via Plaid, and micro-deposit.

For verifying bank accounts via **micro-deposit**, Stripe deposits two small amounts to the bank account being added. These deposits will take 1-2 business days to appear on the customer's bank statement. The bank statement description for the two micro-deposits contains the amount and the values deposited. Your customer will need to relay the value of the two deposits to you, after which you can verify the bank account. Once the bank account has been verified, the payment source will be marked as "Valid".

 * @summary Verify bank account payment source
 */
  public async verifyBankAccountPaymentSource(
    custPaymentSourceId: string,
    verifyBankAccountPaymentSourceBody: VerifyBankAccountPaymentSourceBody,
    headers?: VerifyBankAccountPaymentSourceHeaders,
  ): Promise<AxiosResponse<VerifyBankAccountPaymentSource200>> {
    return this.axios.post(
      `/payment_sources/${custPaymentSourceId}/verify_bank_account`,
      {
        headers,
        json: verifyBankAccountPaymentSourceBody,
      },
    );
  }

  /**
 * Lists all the payment sources

 * @summary List payment sources
 */
  public async listPaymentSources(
    params?: ListPaymentSourcesParams,
    headers?: ListPaymentSourcesHeaders,
  ): Promise<AxiosResponse<ListPaymentSources200>> {
    return this.axios.get(`/payment_sources`, {
      params,
      headers,
    });
  }

  /**
 * Copies this payment source information to the gateway specified in the API.

This is useful if you want to port your customer's card details into another gateway.

 * @summary Export payment source
 */
  public async exportPaymentSource(
    custPaymentSourceId: string,
    exportPaymentSourceBody: ExportPaymentSourceBody,
    headers?: ExportPaymentSourceHeaders,
  ): Promise<AxiosResponse<ExportPaymentSource200>> {
    return this.axios.post(
      `/payment_sources/${custPaymentSourceId}/export_payment_source`,
      {
        headers,
        json: exportPaymentSourceBody,
      },
    );
  }

  /**
 * Used to attach the card to the customer after 3DS completion. [Learn more](/docs/api/3ds_card_payments) on the 3DS implementation via Chargebee APIs.

 * @summary Create using payment intent
 */
  public async createUsingPaymentIntent(
    createUsingPaymentIntentBody: CreateUsingPaymentIntentBody,
    headers?: CreateUsingPaymentIntentHeaders,
  ): Promise<AxiosResponse<CreateUsingPaymentIntent200>> {
    return this.axios.post(`/payment_sources/create_using_payment_intent`, {
      headers,
      json: createUsingPaymentIntentBody,
    });
  }

  /**
 * Retrieves the payment source identified by the unique identifier.

 * @summary Retrieve a payment source
 */
  public async retrieveAPaymentSource(
    custPaymentSourceId: string,
    headers?: RetrieveAPaymentSourceHeaders,
  ): Promise<AxiosResponse<RetrieveAPaymentSource200>> {
    return this.axios.get(`/payment_sources/${custPaymentSourceId}`, {
      headers,
    });
  }

  /**
 * Create a voucher payment method for the payment source.

 * @summary Create a voucher payment method
 */
  public async createAVoucherPaymentMethod(
    createAVoucherPaymentMethodBody: CreateAVoucherPaymentMethodBody,
    headers?: CreateAVoucherPaymentMethodHeaders,
  ): Promise<AxiosResponse<CreateAVoucherPaymentMethod200>> {
    return this.axios.post(`/payment_sources/create_voucher_payment_source`, {
      headers,
      json: createAVoucherPaymentMethodBody,
    });
  }

  /**
 * This API offers an alternative way to create a payment source using a single-use gateway temporary token, which is generally provided by your payment gateway. In the case of Stripe, this temporary token is generated according to the instruction detailed in [Stripe documentation](https://stripe.com/docs/api/tokens/create_card).  
Storing card after successful 3DS completion is not supported in this API. Use [create using Payment Intent API](/docs/api/payment_sources#create_using_payment_intent) under Payment source to store the card after successful 3DS flow completion.

 * @summary Create using gateway temporary token
 */
  public async createUsingGatewayTemporaryToken(
    createUsingGatewayTemporaryTokenBody: CreateUsingGatewayTemporaryTokenBody,
    headers?: CreateUsingGatewayTemporaryTokenHeaders,
  ): Promise<AxiosResponse<CreateUsingGatewayTemporaryToken200>> {
    return this.axios.post(`/payment_sources/create_using_temp_token`, {
      headers,
      json: createUsingGatewayTemporaryTokenBody,
    });
  }

  /**
 * Merchants look to update card details when:

* The billing address of a customer has changed. In such a case, modify the billing address in the Chargebee and the payment gateway.
* The expiration date of the card has been extended by the bank. (This usually happens when the date of card expiry is in near future).

Multiple parameters such as address, expiry date, month, and so on, can be updated through this API.

Meta data can also be added additionally(supported in Stripe only). Metadata is a JSON object. It is used to store additional information about customers.

In **Stripe** and **Braintree** payment gateways, changes in card details are auto-updated. This feature can also be used for other payment gateways in which auto-update is not enabled or is not supported by Chargebee.  
**Note** : This endpoint supports Chargebee Test Gateway, [Stripe](https://www.chargebee.com/docs/2.0/stripe.html), [Braintree](https://www.chargebee.com/docs/2.0/braintree.html), [Authorize.net](https://www.chargebee.com/docs/2.0/authorize-index.html), [Worldpay US eCom](https://www.chargebee.com/docs/2.0/vantiv_worldpay.html), and [WorldPay Direct Integration](https://www.chargebee.com/docs/2.0/worldpay-direct.html). For all other gateways, your customers must re-enter the full [card details](/docs/api/payment_sources#update_a_card_payment_source_card_first_name) to update existing card details. For example, consider a customer not using the gateways mentioned above and wants to update the [card\[billing_addr1\]](/docs/api/payment_sources#update_a_card_payment_source_card_billing_addr1) parameter. In such a case, the customer must re-enter the value of all the parameters present in the [card](/docs/api/payment_sources#update_a_card_payment_source_card_first_name) object.

 * @summary Update a card payment source
 */
  public async updateACardPaymentSource(
    custPaymentSourceId: string,
    updateACardPaymentSourceBody: UpdateACardPaymentSourceBody,
    headers?: UpdateACardPaymentSourceHeaders,
  ): Promise<AxiosResponse<UpdateACardPaymentSource200>> {
    return this.axios.post(
      `/payment_sources/${custPaymentSourceId}/update_card`,
      {
        headers,
        json: updateACardPaymentSourceBody,
      },
    );
  }

  /**
 * Switches the gateway in which this payment source information is stored.

This is applicable only if the payment source is present in Spreedly vault.

 * @summary Switch gateway account
 */
  public async switchGatewayAccount(
    custPaymentSourceId: string,
    switchGatewayAccountBody: SwitchGatewayAccountBody,
    headers?: SwitchGatewayAccountHeaders,
  ): Promise<AxiosResponse<SwitchGatewayAccount200>> {
    return this.axios.post(
      `/payment_sources/${custPaymentSourceId}/switch_gateway_account`,
      {
        headers,
        json: switchGatewayAccountBody,
      },
    );
  }

  /**
 * Storing card after successful 3DS completion is not supported in this API. Use [create using Payment Intent API](/docs/api/payment_sources#create_using_payment_intent) under Payment source to store the card after successful 3DS flow completion.

 * @summary Create using Chargebee token
 */
  public async createUsingChargebeeToken(
    createUsingChargebeeTokenBody: CreateUsingChargebeeTokenBody,
    headers?: CreateUsingChargebeeTokenHeaders,
  ): Promise<AxiosResponse<CreateUsingChargebeeToken200>> {
    return this.axios.post(`/payment_sources/create_using_token`, {
      headers,
      json: createUsingChargebeeTokenBody,
    });
  }

  /**
 * Deletes a payment method from Chargebee. Payment method in the payment gateway will not be affected.

 * @summary Local delete a payment source
 */
  public async localDeleteAPaymentSource(
    custPaymentSourceId: string,
    headers?: LocalDeleteAPaymentSourceHeaders,
  ): Promise<AxiosResponse<LocalDeleteAPaymentSource200>> {
    return this.axios.post(
      `/payment_sources/${custPaymentSourceId}/delete_local`,
      {
        headers,
      },
    );
  }

  /**
 * This API adds a Direct Debit payment source for a customer. The bank account details collected from your customer are passed as input to this API.

#### [Automated Clearing House (ACH) Network](https://www.chargebee.com/docs/direct-debit-payments.html#direct-debit-payments-in-the-united-states)

ACH is an electronic network for passing financial transactions in the US. Chargebee currently supports ACH via [Stripe](https://www.chargebee.com/docs/ach-payments-stripe.html) , [Authorize.Net](https://www.chargebee.com/docs/ach-payments-authorize_net.html), and [GoCardless](https://www.chargebee.com/docs/2.0/gocardless.html).  
**Note:**

* For ACH via Stripe, it is mandatory to pass [user details](/docs/api/advanced-features#user_details) such as IP address(`chargebee-request-origin-ip`) and the device information(`chargebee-request-origin-device`).

##### Bank account verification

Once the bank account has been added, it needs to be verified.

* For Stripe, perform this verification using the [Verify bank account payment source API](/docs/api/payment_sources#verify_bank_account_payment_source).
* For [Authorize.net](https://www.authorize.net/), the verification is done by them in 2-3 days after the account is added. No intervention is needed from your side or your customer.



#### Single Euro Payment Area (SEPA)

SEPA is an initiative that integrates bank transfer payments denominated in euro. It is supported via [GoCardless](https://www.chargebee.com/docs/gocardless.html), [Stripe](https://www.chargebee.com/docs/sepa-stripe.html) and [Adyen](https://www.chargebee.com/docs/adyen-sepa.html).  
**Note:**

* For SEPA via Stripe, it is mandatory to pass [user details](/docs/api/advanced-features#user_details) such as IP address and device information.
* For GoCardless, [local bank details](https://developer.gocardless.com/api-reference/#appendix-local-bank-details) can be passed instead of IBAN.

#### Bacs Payment Schemes Limited (BACS) and Bg Autogiro

Bacs is an organization that manages the Direct Debit and Direct Credit payment methods in the UK. Bg Autogiro is a Direct Debit scheme for krona denominated payments in Sweden. Both Bacs and Bg Autogiro are supported via [GoCardless](https://www.chargebee.com/docs/gocardless.html).  
**Note:**

* For BACS via Stripe, it is mandatory to pass [user details](/docs/api/advanced-features#user_details) such as IP address(`chargebee-request-origin-ip`) and the device information(`chargebee-request-origin-device`).

#### Bulk Electronic Clearing System (BECS) and Pre-Authorized Debit (PAD)

BECS is an automated payment method for Direct Debit in Australia and New Zealand while PAD does the same for Canada. [GoCardless](https://www.chargebee.com/docs/gocardless.html) supports both.

For Direct Debit, the customer needs to accept a mandate that allows the merchant to debit their bank account. This agreement PDF can be obtained using the [Retrieve direct debit agreement PDF API](/docs/api/hosted_pages#retrieve_direct_debit_agreement_pdf).

If the customer has already reached the payment source limit allowed for the site, pass `replace_primary_payment_source` as `true`. Alternatively, [delete](/docs/api/payment_sources#delete_a_payment_source) one of the payment sources first and then add the bank account payment source for the customer.  
**Note:**

* For BECS via Stripe, it is mandatory to pass [user details](/docs/api/advanced-features#user_details) such as IP address(`chargebee-request-origin-ip`) and the device information(`chargebee-request-origin-device`).

 * @summary Create a bank account payment source
 */
  public async createABankAccountPaymentSource(
    createABankAccountPaymentSourceBody: CreateABankAccountPaymentSourceBody,
    headers?: CreateABankAccountPaymentSourceHeaders,
  ): Promise<AxiosResponse<CreateABankAccountPaymentSource200>> {
    return this.axios.post(`/payment_sources/create_bank_account`, {
      headers,
      json: createABankAccountPaymentSourceBody,
    });
  }

  /**
 * This API is used to update the payment source details of a customer. Information related to bank account payment source such as email, first name, and last name can be updated.

* For GoCardless, Chargebee supports (ACH,BACS,SEPA,AUTOGIRO,BECS,BECS_NZ,PAD).
* For Stripe, Chargebee only supports SEPA.




 * @summary Update a bank account payment source
 */
  public async updateABankAccountPaymentSource(
    custPaymentSourceId: string,
    updateABankAccountPaymentSourceBody: UpdateABankAccountPaymentSourceBody,
    headers?: UpdateABankAccountPaymentSourceHeaders,
  ): Promise<AxiosResponse<UpdateABankAccountPaymentSource200>> {
    return this.axios.post(
      `/payment_sources/${custPaymentSourceId}/update_bank_account`,
      {
        headers,
        json: updateABankAccountPaymentSourceBody,
      },
    );
  }
}
