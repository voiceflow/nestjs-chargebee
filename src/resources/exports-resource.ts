/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  ExportCustomersHeaders,
  ExportCustomersBody,
  ExportCustomers200,
  ExportAttachedItemsHeaders,
  ExportAttachedItemsBody,
  ExportAttachedItems200,
  ExportTransactionsHeaders,
  ExportTransactionsBody,
  ExportTransactions200,
  ExportDifferentialPriceHeaders,
  ExportDifferentialPriceBody,
  ExportDifferentialPrice200,
  ExportItemFamiliesHeaders,
  ExportItemFamiliesBody,
  ExportItemFamilies200,
  ExportInvoicesHeaders,
  ExportInvoicesBody,
  ExportInvoices200,
  RetrieveAnExportHeaders,
  RetrieveAnExport200,
  ExportItemsHeaders,
  ExportItemsBody,
  ExportItems200,
  ExportDeferredRevenueReportsHeaders,
  ExportDeferredRevenueReportsBody,
  ExportDeferredRevenueReports200,
  ExportRevenueRecognitionReportsHeaders,
  ExportRevenueRecognitionReportsBody,
  ExportRevenueRecognitionReports200,
  ExportCreditNotesHeaders,
  ExportCreditNotesBody,
  ExportCreditNotes200,
  ExportCouponsHeaders,
  ExportCouponsBody,
  ExportCoupons200,
  ExportOrdersHeaders,
  ExportOrdersBody,
  ExportOrders200,
  ExportItemPricesHeaders,
  ExportItemPricesBody,
  ExportItemPrices200,
  ExportSubscriptionsHeaders,
  ExportSubscriptionsBody,
  ExportSubscriptions200,
} from "./chargebeeAPI.schemas";

export class ChargebeeExportsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * This API triggers export of customer data. The exported zip file contains CSV files with customer-related data.

 * @summary Export Customers
 */
  public async exportCustomers(
    exportCustomersBody: ExportCustomersBody,
    headers?: ExportCustomersHeaders,
  ): Promise<AxiosResponse<ExportCustomers200>> {
    return this.axios.post(`/exports/customers`, {
      headers,
      json: exportCustomersBody,
    });
  }

  /**
 * This API triggers export of attached item data. The exported zip file contains CSV files with attached item-related data.

 * @summary Export Attached Items
 */
  public async exportAttachedItems(
    exportAttachedItemsBody: ExportAttachedItemsBody,
    headers?: ExportAttachedItemsHeaders,
  ): Promise<AxiosResponse<ExportAttachedItems200>> {
    return this.axios.post(`/exports/attached_items`, {
      headers,
      json: exportAttachedItemsBody,
    });
  }

  /**
 * This API triggers export of transaction data. The exported zip file contains CSV files with transaction-related data.

 * @summary Export Transactions
 */
  public async exportTransactions(
    exportTransactionsBody: ExportTransactionsBody,
    headers?: ExportTransactionsHeaders,
  ): Promise<AxiosResponse<ExportTransactions200>> {
    return this.axios.post(`/exports/transactions`, {
      headers,
      json: exportTransactionsBody,
    });
  }

  /**
 * This API triggers export of differential price data. The exported zip file contains CSV files with differential price-related data.

 * @summary Export Differential Price
 */
  public async exportDifferentialPrice(
    exportDifferentialPriceBody: ExportDifferentialPriceBody,
    headers?: ExportDifferentialPriceHeaders,
  ): Promise<AxiosResponse<ExportDifferentialPrice200>> {
    return this.axios.post(`/exports/differential_prices`, {
      headers,
      json: exportDifferentialPriceBody,
    });
  }

  /**
 * This API triggers export of item family data. The exported zip file contains CSV files with item family-related data.

 * @summary Export Item Families
 */
  public async exportItemFamilies(
    exportItemFamiliesBody: ExportItemFamiliesBody,
    headers?: ExportItemFamiliesHeaders,
  ): Promise<AxiosResponse<ExportItemFamilies200>> {
    return this.axios.post(`/exports/item_families`, {
      headers,
      json: exportItemFamiliesBody,
    });
  }

  /**
 * This API triggers export of invoice data. The exported zip file contains CSV files with invoice-related data.

 * @summary Export Invoices
 */
  public async exportInvoices(
    exportInvoicesBody: ExportInvoicesBody,
    headers?: ExportInvoicesHeaders,
  ): Promise<AxiosResponse<ExportInvoices200>> {
    return this.axios.post(`/exports/invoices`, {
      headers,
      json: exportInvoicesBody,
    });
  }

  /**
 * This API gets the status of the export job initiated by the Exports API. If the export job is completed, the downloads resource will also be obtained in the API response. The returned URL in the downloads resource is secure and can be downloaded. The URL expires after 4 hours. Please note that this is a public URL, and can be downloaded by anyone with whom it's shared.

**Note:** In case the export is in Failed or In-process state, then the downloads resource will not be available.

 * @summary Retrieve an export
 */
  public async retrieveAnExport(
    exportId: string,
    headers?: RetrieveAnExportHeaders,
  ): Promise<AxiosResponse<RetrieveAnExport200>> {
    return this.axios.get(`/exports/${exportId}`, {
      headers,
    });
  }

  /**
 * This API triggers export of item data. The exported zip file contains CSV files with item-related data.

 * @summary Export Items
 */
  public async exportItems(
    exportItemsBody: ExportItemsBody,
    headers?: ExportItemsHeaders,
  ): Promise<AxiosResponse<ExportItems200>> {
    return this.axios.post(`/exports/items`, {
      headers,
      json: exportItemsBody,
    });
  }

  /**
 * This API triggers export for the Deferred Revenue Report.

**Note:** This API call is asynchronous. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. In case you are using any of the client libraries, use the **wait for export completion** function provided as an instance method in the library. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **waitForExportCompletion()** on the returned **Export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **waitForExportCompletion()** on the returned **Export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **WaitForExportCompletion** on the returned **Export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which wait until the export status changes.

 * @summary Export Deferred Revenue Reports
 */
  public async exportDeferredRevenueReports(
    exportDeferredRevenueReportsBody: ExportDeferredRevenueReportsBody,
    headers?: ExportDeferredRevenueReportsHeaders,
  ): Promise<AxiosResponse<ExportDeferredRevenueReports200>> {
    return this.axios.post(`/exports/deferred_revenue`, {
      headers,
      json: exportDeferredRevenueReportsBody,
    });
  }

  /**
 * This API triggers export for the revenue recognition report.

**Note:** This API call is asynchronous. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. In case you are using any of the client libraries, use the **wait for export completion** function provided as an instance method in the library. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **waitForExportCompletion()** on the returned **Export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **waitForExportCompletion()** on the returned **Export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **WaitForExportCompletion** on the returned **Export** resource which will wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which wait until the export status changes. You need to check if this operation has completed by checking if the export status is **completed** . You can do this by retrieving the export in a loop with a minimum delay of 10 secs between two retrieve requests. Use the method **wait_for_export_completion** on the returned **export** resource which wait until the export status changes.

 * @summary Export Revenue Recognition Reports
 */
  public async exportRevenueRecognitionReports(
    exportRevenueRecognitionReportsBody: ExportRevenueRecognitionReportsBody,
    headers?: ExportRevenueRecognitionReportsHeaders,
  ): Promise<AxiosResponse<ExportRevenueRecognitionReports200>> {
    return this.axios.post(`/exports/revenue_recognition`, {
      headers,
      json: exportRevenueRecognitionReportsBody,
    });
  }

  /**
 * This API triggers export of credit note data. The exported zip file contains CSV files with credit note-related data.

 * @summary Export Credit Notes
 */
  public async exportCreditNotes(
    exportCreditNotesBody: ExportCreditNotesBody,
    headers?: ExportCreditNotesHeaders,
  ): Promise<AxiosResponse<ExportCreditNotes200>> {
    return this.axios.post(`/exports/credit_notes`, {
      headers,
      json: exportCreditNotesBody,
    });
  }

  /**
 * This API triggers export of coupon data. The exported zip file contains CSV files with coupon-related data.

 * @summary Export Coupons
 */
  public async exportCoupons(
    exportCouponsBody: ExportCouponsBody,
    headers?: ExportCouponsHeaders,
  ): Promise<AxiosResponse<ExportCoupons200>> {
    return this.axios.post(`/exports/coupons`, {
      headers,
      json: exportCouponsBody,
    });
  }

  /**
 * This API triggers export of order data. The exported zip file contains CSV files with order-related data.

 * @summary Export Orders
 */
  public async exportOrders(
    exportOrdersBody: ExportOrdersBody,
    headers?: ExportOrdersHeaders,
  ): Promise<AxiosResponse<ExportOrders200>> {
    return this.axios.post(`/exports/orders`, {
      headers,
      json: exportOrdersBody,
    });
  }

  /**
 * This API triggers export of item price data. The exported zip file contains CSV files with item price-related data.

 * @summary Export Item Prices
 */
  public async exportItemPrices(
    exportItemPricesBody: ExportItemPricesBody,
    headers?: ExportItemPricesHeaders,
  ): Promise<AxiosResponse<ExportItemPrices200>> {
    return this.axios.post(`/exports/item_prices`, {
      headers,
      json: exportItemPricesBody,
    });
  }

  /**
 * This API triggers export of subscription data. The exported zip file contains CSV files with subscription-related data.

 * @summary Export Subscriptions
 */
  public async exportSubscriptions(
    exportSubscriptionsBody: ExportSubscriptionsBody,
    headers?: ExportSubscriptionsHeaders,
  ): Promise<AxiosResponse<ExportSubscriptions200>> {
    return this.axios.post(`/exports/subscriptions`, {
      headers,
      json: exportSubscriptionsBody,
    });
  }
}
