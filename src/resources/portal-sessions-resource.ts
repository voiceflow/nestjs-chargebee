/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  CreateAPortalSessionHeaders,
  CreateAPortalSessionBody,
  CreateAPortalSession200,
  ActivateAPortalSessionHeaders,
  ActivateAPortalSessionBody,
  ActivateAPortalSession200,
  LogoutAPortalSessionHeaders,
  LogoutAPortalSession200,
  RetrieveAPortalSessionHeaders,
  RetrieveAPortalSession200,
} from "./chargebeeAPI.schemas";

export class ChargebeePortalSessionsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Creates a portal session for a customer. The session resource in the response contains the access URL. Forward the customer to that access URL. If you would like to logout the customer later via API call, you need to store the id of the portal session resource returned by this API. While creating a session, you also need to pass the redirect URL to which your customers will be sent to upon logout from the portal UI.

 * @summary Create a portal session
 */
  public async createAPortalSession(
    createAPortalSessionBody: CreateAPortalSessionBody,
    headers?: CreateAPortalSessionHeaders,
  ): Promise<AxiosResponse<CreateAPortalSession200>> {
    return this.axios.post(`/portal_sessions`, {
      headers,
      json: createAPortalSessionBody,
    });
  }

  /**
 * When an user is sent back to your return URL with session details, you should validate that information by calling this API. The details passed to the **return_url** should be sent as below:

* **auth_session_id** - this should be sent as part of the endpoint.
* **auth_session_token** - this should be sent as value for the input parameter **token**.



**Note:** This API is not applicable for [in-app](https://www.chargebee.com/docs/v3-self-serve-portal.html) portal.

 * @summary Activate a portal session
 */
  public async activateAPortalSession(
    portalSessionId: string,
    activateAPortalSessionBody: ActivateAPortalSessionBody,
    headers?: ActivateAPortalSessionHeaders,
  ): Promise<AxiosResponse<ActivateAPortalSession200>> {
    return this.axios.post(`/portal_sessions/${portalSessionId}/activate`, {
      headers,
      json: activateAPortalSessionBody,
    });
  }

  /**
 * Logs out the portal session. Typically this should be called when customers logout of your application.

If this API is called for a Portal Session that currently is in :

* "created" status, the session status will be marked as "logged_out" and the access URL will become invalid.
* "logged_in" status, the session status will be marked as "logged_out" and customer will not be able to use that session.
* "logged_out" status, this will return normally without changing any attribute of this resource.

 * @summary Logout a portal session
 */
  public async logoutAPortalSession(
    portalSessionId: string,
    headers?: LogoutAPortalSessionHeaders,
  ): Promise<AxiosResponse<LogoutAPortalSession200>> {
    return this.axios.post(`/portal_sessions/${portalSessionId}/logout`, {
      headers,
    });
  }

  /**
 * This API retrieves a portal session using `portal_session_id` as a path parameter.

 * @summary Retrieve a portal session
 */
  public async retrieveAPortalSession(
    portalSessionId: string,
    headers?: RetrieveAPortalSessionHeaders,
  ): Promise<AxiosResponse<RetrieveAPortalSession200>> {
    return this.axios.get(`/portal_sessions/${portalSessionId}`, {
      headers,
    });
  }
}
