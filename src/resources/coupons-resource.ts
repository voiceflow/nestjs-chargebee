/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  ListCouponsParams,
  ListCouponsHeaders,
  ListCoupons200,
  UpdateACouponForItemsHeaders,
  UpdateACouponForItemsBody,
  UpdateACouponForItems200,
  UnarchiveACouponHeaders,
  UnarchiveACoupon200,
  DeleteACouponHeaders,
  DeleteACoupon200,
  CopyACouponHeaders,
  CopyACouponBody,
  CopyACoupon200,
  RetrieveACouponHeaders,
  RetrieveACoupon200,
  CreateACouponForItemsHeaders,
  CreateACouponForItemsBody,
  CreateACouponForItems200,
} from "./chargebeeAPI.schemas";

export class ChargebeeCouponsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * List all the available coupons that are created for a specific promotion or offers. You can find list of coupon codes that are currently active, expired, archived or deleted.

 * @summary List coupons
 */
  public async listCoupons(
    params?: ListCouponsParams,
    headers?: ListCouponsHeaders,
  ): Promise<AxiosResponse<ListCoupons200>> {
    return this.axios.get(`/coupons`, {
      params,
      headers,
    });
  }

  /**
 * This API updates a coupon that is created for a specific promotion or offers.

 * @summary Update a coupon for items
 */
  public async updateACouponForItems(
    couponId: string,
    updateACouponForItemsBody: UpdateACouponForItemsBody,
    headers?: UpdateACouponForItemsHeaders,
  ): Promise<AxiosResponse<UpdateACouponForItems200>> {
    return this.axios.post(`/coupons/${couponId}/update_for_items`, {
      headers,
      json: updateACouponForItemsBody,
    });
  }

  /**
 * This API unarchives a specific coupon using the coupon ID.

 * @summary Unarchive a coupon
 */
  public async unarchiveACoupon(
    couponId: string,
    headers?: UnarchiveACouponHeaders,
  ): Promise<AxiosResponse<UnarchiveACoupon200>> {
    return this.axios.post(`/coupons/${couponId}/unarchive`, {
      headers,
    });
  }

  /**
 * If no Subscriptions/Invoices are linked to this Coupon, the Coupon will be deleted from your Chargebee site. This action cannot be undone.

To ensure that existing Subscriptions/Invoices are not affected, Coupons associated with them will not be deleted, but moved to "Archived" state. Once a Coupon has been archived, it cannot be edited or used again unless [unarchived](coupons#unarchive_a_coupon). Unused Coupons codes are deleted.

 * @summary Delete a coupon
 */
  public async deleteACoupon(
    couponId: string,
    headers?: DeleteACouponHeaders,
  ): Promise<AxiosResponse<DeleteACoupon200>> {
    return this.axios.post(`/coupons/${couponId}/delete`, {
      headers,
    });
  }

  /**
 * Copies a coupon over from one site to another. Copying of [archived](./coupons?prod_cat_ver=2#coupon_status) coupons is not supported.

The item prices that are linked to the coupon in the source site are also linked to the coupon in the destination site. However, this will only work if those item prices exist and with the same [ids](./item_prices?prod_cat_ver=2#item_price_id), in the destination site. Hence, it is recommended that the item prices be copied over before copying the coupons.

The value for [redemptions](./coupons?prod_cat_ver=2#coupon_redemptions) is not copied. It is set to `0` for the newly created coupon. Hence, if such a coupon had `expired` in the source site due to `redemptions` having reached [max_redemptions](./coupons?prod_cat_ver=2#coupon_max_redemptions), it's [status](./coupons?prod_cat_ver=2#coupon_status) would be `active` in the destination site.


 * @summary Copy a coupon
 */
  public async copyACoupon(
    copyACouponBody: CopyACouponBody,
    headers?: CopyACouponHeaders,
  ): Promise<AxiosResponse<CopyACoupon200>> {
    return this.axios.post(`/coupons/copy`, {
      headers,
      json: copyACouponBody,
    });
  }

  /**
 * This API retrieves a specific coupon using the coupon ID.

 * @summary Retrieve a coupon
 */
  public async retrieveACoupon(
    couponId: string,
    headers?: RetrieveACouponHeaders,
  ): Promise<AxiosResponse<RetrieveACoupon200>> {
    return this.axios.get(`/coupons/${couponId}`, {
      headers,
    });
  }

  /**
 * This API creates a new coupon for a specific promotion or offers.

 * @summary Create a coupon for items
 */
  public async createACouponForItems(
    createACouponForItemsBody: CreateACouponForItemsBody,
    headers?: CreateACouponForItemsHeaders,
  ): Promise<AxiosResponse<CreateACouponForItems200>> {
    return this.axios.post(`/coupons/create_for_items`, {
      headers,
      json: createACouponForItemsBody,
    });
  }
}
