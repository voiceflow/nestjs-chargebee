/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Chargebee API
 * OpenAPI spec version: v2 (PC 2.0)
 */
import type { AxiosInstance, AxiosResponse } from "axios";
import type {
  DeleteACommentHeaders,
  DeleteAComment200,
  RetrieveACommentHeaders,
  RetrieveAComment200,
  ListCommentsParams,
  ListCommentsHeaders,
  ListComments200,
  CreateACommentHeaders,
  CreateACommentBody,
  CreateAComment200,
} from "./chargebeeAPI.schemas";

export class ChargebeeCommentsResource {
  constructor(private readonly axios: AxiosInstance) {}

  /**
 * Delete a comment for an [entity](https://apidocs.chargebee.com/docs/api/v1/comments?prod_cat_ver=1#create_a_comment_entity_type) identified by comment ID.

Only the comments that are added via Admin console and API can be deleted. Chargebee generated "System" comments cannot be deleted.

 * @summary Delete a comment
 */
  public async deleteAComment(
    commentId: string,
    headers?: DeleteACommentHeaders,
  ): Promise<AxiosResponse<DeleteAComment200>> {
    return this.axios.post(`/comments/${commentId}/delete`, {
      headers,
    });
  }

  /**
 * Retrieve a comment for an entity identified by comment ID.

 * @summary Retrieve a comment
 */
  public async retrieveAComment(
    commentId: string,
    headers?: RetrieveACommentHeaders,
  ): Promise<AxiosResponse<RetrieveAComment200>> {
    return this.axios.get(`/comments/${commentId}`, {
      headers,
    });
  }

  /**
 * Retrieve the list of comments sorted by the recent ones on the top.

If you want to retrieve the list of comments for an [entity](https://apidocs.chargebee.com/docs/api/v1/comments?prod_cat_ver=1#list_comments_entity_type), for example, subscription you can filter them by passing the entity type and unique identifier for that entity, for example, subscription ID.

 * @summary List comments
 */
  public async listComments(
    params?: ListCommentsParams,
    headers?: ListCommentsHeaders,
  ): Promise<AxiosResponse<ListComments200>> {
    return this.axios.get(`/comments`, {
      params,
      headers,
    });
  }

  /**
 * Create a new comment for an entity. The newly added comment will be shown in the web interface as well.

 * @summary Create a comment
 */
  public async createAComment(
    createACommentBody: CreateACommentBody,
    headers?: CreateACommentHeaders,
  ): Promise<AxiosResponse<CreateAComment200>> {
    return this.axios.post(`/comments`, {
      headers,
      json: createACommentBody,
    });
  }
}
